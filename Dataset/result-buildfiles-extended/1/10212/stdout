{
  "Repository" : "10212",
  "Revision" : "HEAD",
  "ObjectId" : "f4a9d8bcb59edc261f58976b818faf02451c81c8",
  "CommitTime" : "2019-02-27T13:05:38Z",
  "Files" : {
    "build.xml" : {
      "ObjectId" : "8f44aba8185d1be56ee5e4db968e2a11154bf813",
      "LastModified" : "2019-02-27T12:46:29Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : "\n\n      Overall build file\n      use command \"ant -projecthelp\" to display the targets.\n\n  ",
        "Line" : 10,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " TODO: move as many properties as possible into build.properties ",
        "Line" : 16,
        "CharPositionInLine" : 75
      },
      "2" : {
        "Text" : " TODO: add tasks to push database properties to various files ",
        "Line" : 17,
        "CharPositionInLine" : 72
      },
      "3" : {
        "Text" : " TODO: create a cacore directory with all the cacore stuff in it\n       that we can throw into the war file and use to create the database ",
        "Line" : 19,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " must use a property with a LOCATION attribute because it is converted\n       to be an absolute value, which the product builder seems to require in\n       order to load its build.properties in product/build.properties ",
        "Line" : 26,
        "CharPositionInLine" : 74
      },
      "5" : {
        "Text" : " for tests ",
        "Line" : 123,
        "CharPositionInLine" : 21
      },
      "6" : {
        "Text" : "property name=\"flyway.locations\"\n\tvalue=\"edu.ualberta.med.biobank.migration,db/migrations\"/",
        "Line" : 142,
        "CharPositionInLine" : 62
      },
      "7" : {
        "Text" : " download Ivy from web site so that it can be used even without any special installation ",
        "Line" : 196,
        "CharPositionInLine" : 101
      },
      "8" : {
        "Text" : " try to load ivy here from ivy home, in case the user has not already dropped\n         it into ant's lib dir (note that the latter copy will always take precedence).\n         We will not fail as long as local lib dir exists (it may be empty) and\n         ivy is in at least one of ant's lib dir or the local lib dir. ",
        "Line" : 205,
        "CharPositionInLine" : 75
      },
      "9" : {
        "Text" : " File needed in the test project to call csm api methods ",
        "Line" : 328,
        "CharPositionInLine" : 69
      },
      "10" : {
        "Text" : " Tomcat ",
        "Line" : 351,
        "CharPositionInLine" : 18
      },
      "11" : {
        "Text" : " remove the upt.war because it requires db name/url/username/pw variables\n         inside the war ",
        "Line" : 354,
        "CharPositionInLine" : 28
      },
      "12" : {
        "Text" : " version number on server side ",
        "Line" : 423,
        "CharPositionInLine" : 41
      },
      "13" : {
        "Text" : " buildDirectory is the folder where the plugins and products are found and build ",
        "Line" : 616,
        "CharPositionInLine" : 93
      },
      "14" : {
        "Text" : " plugins and features are copied into the buildDirectory ",
        "Line" : 617,
        "CharPositionInLine" : 69
      },
      "15" : {
        "Text" : " TODO : copy all project containing .nl1. into the plugins folder ",
        "Line" : 621,
        "CharPositionInLine" : 78
      },
      "16" : {
        "Text" : " get current org.eclipse.equinox.launcher jar. If find more than one, will use the last one in the list (should be the last version)",
        "Line" : 646,
        "CharPositionInLine" : 144
      },
      "17" : {
        "Text" : " get current org.eclipse.pde.build folder. If find more than one, will use the last one in the list (should be the last version) ",
        "Line" : 653,
        "CharPositionInLine" : 141
      },
      "18" : {
        "Text" : " launch product creation ",
        "Line" : 660,
        "CharPositionInLine" : 37
      },
      "19" : {
        "Text" : " product.dir is used in product/customTarget.xml ",
        "Line" : 668,
        "CharPositionInLine" : 63
      },
      "20" : {
        "Text" : " instead of fixed paths in product/build.properties: ",
        "Line" : 670,
        "CharPositionInLine" : 67
      },
      "21" : {
        "Text" : " uncomment line below to build a single executable product ",
        "Line" : 676,
        "CharPositionInLine" : 73
      },
      "22" : {
        "Text" : " arg line=\"-Dconfigs='win32, win32, x86'\" / ",
        "Line" : 677,
        "CharPositionInLine" : 58
      },
      "23" : {
        "Text" : " arg line=\"-Dconfigs='linux, gtk, x86_64'\" / ",
        "Line" : 678,
        "CharPositionInLine" : 59
      },
      "24" : {
        "Text" : " get current org.eclipse.equinox.launcher jar. If find more than one, will use the last one in the list (should be the last version)",
        "Line" : 714,
        "CharPositionInLine" : 144
      },
      "25" : {
        "Text" : " TEMPLATES START ",
        "Line" : 763,
        "CharPositionInLine" : 29
      },
      "26" : {
        "Text" : " TEMPLATES END ",
        "Line" : 782,
        "CharPositionInLine" : 27
      },
      "27" : {
        "Text" : " Use command line unzip to keep file permissions ",
        "Line" : 784,
        "CharPositionInLine" : 61
      },
      "CommentCount" : 28
    },
    "docs/clientUserGuide/Makefile" : {
      "ObjectId" : "5f52a68fb0c300ed03b9cdbba71c0584b6a106b5",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Copyright 2004 Chris Monson (shiblon@gmail.com)\n\n# Latest version available at http://www.bouncingchairs.net/oss\n\n#\n\n#    This file is part of ``Chris Monson's Free Software''.\n\n#\n\n#    ``Chris Monson's Free Software'' is free software; you can redistribute it\n\n#    and/or modify it under the terms of the GNU General Public License as\n\n#    published by the Free Software Foundation, Version 2.\n\n#\n\n#    ``Chris Monson's Free Software'' is distributed in the hope that it will\n\n#    be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General\n\n#    Public License for more details.\n\n#\n\n#    You should have received a copy of the GNU General Public License along\n\n#    with ``Chris Monson's Free Software''; if not, write to the Free Software\n\n#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n\n#\n\n#    It is also available on the web at http://www.gnu.org/copyleft/gpl.html\n\n#\n\n#    Note that using this makefile to build your documents does NOT place them\n\n#    under the GPL unless you, the author, specifically do so.  In other words,\n\n#    I, Chris Monson, the copyright holder and author of this makefile,\n\n#    consider it impossible to ``link'' to this makefile in any way covered by\n\n#    the GPL.\n\n#\n\n# TO OBTAIN INSTRUCTIONS FOR USING THIS FILE, RUN:\n\n#    make help\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Note that the user-global version is imported *after* the source directory,\n\n# so that you can use stuff like ?= to get proper override behavior.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# This can be pdflatex or latex - you can change this by adding the following line to your Makefile.ini:\n\n# BUILD_STRATEGY := latex\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Sets LC_ALL=C, by default, so that the locale-aware tools, like sort, be\n\n# # immune to changes to the locale in the user environment.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n#\n\n# If you specify sources here, all other files with the same suffix\n\n# will be treated as if they were _include_ files.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#onlysources.tex.sh\t?=\n\n#onlysources.tex.pl\t?=\n\n#onlysources.tex.py\t?=\n\n#onlysources.rst\t?=\n\n#onlysources.fig\t?=\n\n#onlysources.gpi\t?=\n\n#onlysources.dot\t?=\n\n#onlysources.xvg\t?=\n\n#onlysources.svg\t?=\n\n#onlysources.eps.gz\t?=\n\n#onlysources.eps\t?=\n\n#\n\n# If you list files here, they will be treated as _include_ files\n\n#includes.tex\t\t?= file1.tex file2.tex\n\n#includes.tex.sh\t?=\n\n#includes.tex.pl\t?=\n\n#includes.tex.py\t?=\n\n#includes.rst\t\t?=\n\n#includes.fig\t\t?=\n\n#includes.gpi\t\t?=\n\n#includes.dot\t\t?=\n\n#includes.xvg\t\t?=\n\n#includes.svg\t\t?=\n\n#includes.eps.gz\t?=\n\n#includes.eps\t\t?=\n\n#\n\n# If you list files or wildcards here, they will *not* be cleaned - default is\n\n# to allow everything to be cleaned.\n\n#neverclean\t\t?= *.pdf\n\n#\n\n# Alternatively (recommended), you can add those lines to a Makefile.ini file\n\n# and it will get picked up automatically without your having to edit this\n\n# Makefile.\n\n#\n\n# KNOWN ISSUES:\n\n#\t* The following occurs:\n\n#\t\tfile with: \\usepackage{named}\\bibliographystyle{named}\n\n#\t\tCompile\n\n#\t\tchange to: \\usepackage{apalike}\\bibliographystyle{apalike}\n\n#\t\tCompile again -- BARF!\n\n#\n\n#\t\tThe workaround: make clean-nographics; make\n\n#\n\n#\t\tNote that we may not be able to fix this.  LaTeX itself barfs\n\n#\t\ton this, not the makefile.  The very first invocation of LaTeX\n\n#\t\t(when something like this has happened) reads the existing .aux\n\n#\t\tfile and discovers invalid commands like \\citeauthoryear that\n\n#\t\tare only valid in the package that was just removed.  It then\n\n#\t\ttries to parse them and explodes.  It's not at all clear to me\n\n#\t\thow to fix this.  I tried removing the .aux files on the first\n\n#\t\trun of LaTeX, but that necessarily requires more subsequent\n\n#\t\trebuilds on common edits.  There does not appear to be a\n\n#\t\tgraceful solution to this issue.\n\n#\n\n# CHANGES:\n\n# Chris Monson (2010-11-03):\n\n# \t* Bumped version to 2.2.0-rc6\n\n# \t* issue 96: Fix sed errors when using make variables in substitutions\n\n# Chris Monson (2010-07-28):\n\n# \t* Bumped version to 2.2.0-rc5 (rc4 is broken)\n\n# \t* Bail out when we find the use of the import.sty package\n\n# \t* Issue 90: Add -z to dvips invocation\n\n# \t* Issue 67: Add xelatex support (thanks to Nikolai Prokoschenko for the patch!)\n\n# \t* Issue 85: Add warning about make 3.80\n\n# Chris Monson (2010-06-20):\n\n# \t* Bumped version to 2.2.0-rc3\n\n# \t* Attempt to fix bug with ! error detection (issue 88)\n\n# \t* Added svg->pdf direct support (issue 89)\n\n# Chris Monson (2010-04-28):\n\n# \t* Bumped version to 2.2.0-rc2\n\n# \t* Fixed %._show target\n\n# Chris Monson (2010-04-08):\n\n# \t* Bumped version to 2.2.0-rc1\n\n# \t* Added back in the rst_style_file stuff that got broken when switching\n\n# \t\trst -> tex to use the script mechanism\n\n# Chris Monson (2010-03-23):\n\n#\t* Bumped version to 2.2.0-beta8\n\n#\t* Work on issue 76: bad backtick escape for some sed versions, failure\n\n#\t\tto clear out the hold buffer when outputting MISSING comment.\n\n#\t\t- Backed out 2>&1 to &> (doesn't work in sh)\n\n#\t\t- Backed out using . to source variables\n\n# Chris Monson (2010-03-22):\n\n# \t* Bumped version to 2.2.0-beta7\n\n# \t* Issue 72: Fix latex/bibtex invocation order for annotated bib styles\n\n# \t* Fixed informational output to reflect which LaTeX run we're on\n\n# \t* Fixed graphic detection to include graphics that are already there in\n\n# \t\t.d files\n\n# \t* Tightened up the .d file output to only make .d depend on graphic\n\n# \t\t*source* files.  This means that building foo.d no longer\n\n# \t\tbuilds all of the graphics files on which foo.tex depends.\n\n# \t\tHad to use .SECONDEXPANSION trickery to make it work.\n\n# \t* Changed get-graphics to only accept a stem.\n\n# \t* Fixed build-once logic for scripted .tex to work better\n\n# \t* Made get-inputs sed script more maintainable.\n\n# \t* Moved Makefile.ini import up higher.\n\n# \t* Changed bare stems to not recursively invoke make\n\n# \t* Updated diff output to be more silent everywhere\n\n# \t* Added a MISSING comment to the .d file if stuff isn't found - forces\n\n# \t\tremoval of .1st.make file, which often forces it to try again.\n\n# \t* Fixed broken graphics-target function\n\n# \t* Added sleep to .d file generation when stuff is missing - if it\n\n# \t\tbuilds too fast, make doesn't realize it needs to be reloaded,\n\n# \t\tand thus never discovers some deeper dependencies (especially\n\n# \t\tevident when graphics are included from scripted include\n\n# \t\tfiles).\n\n# Chris Monson (2010-03-17):\n\n# \t* Bumped version to 2.2.0-beta6\n\n# \t* Fixed bareword builds to actually work (requires static patterns)\n\n# \t* Fixed colorization to work with new paragraph stuff\n\n# Chris Monson (2010-03-17):\n\n# \t* Bumped version to 2.2.0-beta5\n\n# \t* Fixed graphic detection to be much more focused - splits log file\n\n# \t\tinto paragraphs before doing pattern matching.\n\n# \t* Fixed make foo to work properly (recursively calls make foo.pdf)\n\n# \t* Fixed gpi -> pdf generation to not waste time building .eps *after*\n\n# \t\tthe pdf already exists.\n\n# \t* Changed log copies to include MAKE_RESTARTS as part of the name.\n\n# \t* Fixed missing include file detection (also makes use of the paragraph\n\n# \t\tstuff) to detect missing scripted include files.\n\n# Chris Monson (2010-03-16):\n\n# \t* Bumped version to 2.2.0-beta4\n\n# \t* issue 70: .pdf not moved out of the way properly on first\n\n# \t\tcompilation, resulting in early error detection failure.\n\n# \t* issue 74: fixed broken error on missing .aux files: the\n\n# \t\timplementation was masking real errors.\n\n# Chris Monson (2010-03-15):\n\n# \t* Bumped version to 2.2.0-beta3\n\n# \t* issue 71: Made the tput dependency optional\n\n# \t* issue 73: Made .tex targets not pull in .d files (building them from\n\n# \t\tscripts should not require a .d)\n\n# \t* issue 74: Output a much saner error when a .aux file is not produced\n\n# \t\t(e.g., when you are typing \"make\" without arguments in a\n\n# \t\tdirectory with included .tex files that are not named with\n\n# \t\t._include_.)\n\n# Chris Monson (2010-03-11):\n\n# \t* Bumped version to 2.2.0-beta2\n\n# \t* Fixed clean-graphics to get rid of intermediate .eps files that may\n\n# \t\tbe hanging around\n\n# \t* Added an automatic setting to use eps terminals in pdflatex mode for\n\n# \t\tgnuplot if it doesn't understand pdf.\n\n# \t* issue 66: Removed grayscale generation via magic suffix.  Grayscale\n\n# \t\tgeneration is now only available via GRAY=1\n\n# \t* issue 68: Added explicit handling of LC_ALL for locale-aware tools\n\n# \t\tlike \"sort\"\n\n# Chris Monson (2010-03-10):\n\n# \t* Bumped version to 2.2.0-beta1\n\n# \t* Fixed success message to handle output message in different places\n\n# \t* Added name of produced file to success message\n\n# Chris Monson (2010-03-10):\n\n# \t* Bumped version to 2.2.0-alpha3\n\n# \t* Added meaningful error message for wrong hyperref options\n\n# \t* Added meaningful error message for incorrect graphics extensions\n\n# Chris Monson (2010-03-09):\n\n# \t* Bumped version to 2.2.0-alpha2\n\n# \t* Updated graphics handling (gnuplot and fig generate pdf natively)\n\n# \t* Changed xmgrace to output monochrome natively\n\n# Chris Monson (2010-03-09):\n\n# \t* Bumped version to 2.2.0-alpha1 - major change!\n\n# \t* Support pdflatex natively and by default (issue 6 - a long time coming)\n\n# \t* Add ability to have a single $HOME/.latex-makefile/Makefile.ini for\n\n# \t\tall invocations\n\n# \t* Reworked graphic inclusion detection so that extensions need not be\n\n# \t\tspecified for either build strategy (e.g.,\n\n# \t\t\\includegraphics{test1.eps} -> \\includegrahpics{test1})\n\n# \t* Changed log format to include filenames and line numbers\n\n# Chris Monson (2010-02-04):\n\n# \t* Bumped version to 2.1.43\n\n# \t* All of the following are for issue 63 (thanks to mojoh81):\n\n# \t* Added documentation about fixing Makefile.ini default target\n\n# \t* Added perl and python script targets\n\n# \t* Fixed run logic to allow included .tex files to be scripted (the\n\n# \t\trun-again logic now detects missing .tex files, and the MV\n\n# \t\tcommand has been switched out for a command that only invokes\n\n# \t\tMV if the files exist)\n\n# \t* Changed scripted generation to only run once per make invocation\n\n# \t* Added dependency on expr\n\n# Chris Monson (2010-01-19):\n\n# \t* Bumped version to 2.1.42\n\n# \t* issue 62: Added .brf extension to cleanable files (backrefs)\n\n# Chris Monson (2010-01-07):\n\n# \t* Bumped version to 2.1.41\n\n# \t* issue 60: bad makeindex runs now error out on subsequent tries\n\n# Chris Monson (2009-12-01):\n\n# \t* Bumped version to 2.1.40\n\n# \t* issue 36: build all indices (for e.g., splitidx usage)\n\n# \t* issue 59: clean up all generated files (including indices)\n\n# Chris Monson (2009-11-23):\n\n# \t* Bumped version to 2.1.39\n\n# \t* issue 57: change ps2pdf invocations to just use gs directly\n\n# Chris Monson (2009-11-19):\n\n# \t* Bumped version to 2.1.38\n\n# \t* issue 57: Added some limited support for Cygwin (spaces in filenames)\n\n# Chris Monson (2009-11-15):\n\n# \t* Bumped version to 2.1.37\n\n# \t* Removed svninfo, since this is now managed by mercurial\n\n# \t* Fixed typo in changelist\n\n# \t* Issue 52: added jpg->eps conversion (thanks to brubakee)\n\n# \t* Issue 54: fix missing Overfull colorization due to lack of a blank\n\n# \t\tline preceding the first error.\n\n#\t* Issue 51: remove head.tmp and body.tmp in make clean invocation\n\n#\t* Issue 56: maintain multiple versions of log files (for debugging)\n\n# Chris Monson (2009-11-14):\n\n# \t* Bumped version to 2.1.36\n\n# \t* Issues 53 and 49: added .brf, .mtc, and .maf to the cleanables\n\n# Chris Monson (2009-11-05):\n\n# \t* Bumped version to 2.1.35\n\n# \t* Added nomenclature support (see issue 48)\n\n# Chris Monson (2009-10-29):\n\n# \t* Bumped version to 2.1.34\n\n# \t* Fixed _out_ creation bug introduced in 2.1.33 (it was always created)\n\n# \t* Fixed erroneous help output for $HOME in BINARY_TARGET_DIR\n\n# \t* Changed contact email address - bring on the spam!\n\n# Chris Monson (2009-10-21):\n\n# \t* Bumped version to 2.1.33\n\n# \t* Fixed issue 46, adding support for dot2tex (thanks to fdemesmay)\n\n# \t* Made all_files.* settable in Makefile.ini (using ?= instead of :=)\n\n# \t* Fixed issue 47, thanks to fdemesmay: add binary copy directory, copy\n\n# \t\tdvi, pdf, and ps if it exists\n\n# Chris Monson (2009-09-25):\n\n# \t* Bumped version to 2.1.32\n\n# \t* Fixed so that a changed lol file will cause a rebuild\n\n# \t* Added .lol files to the cleanable list\n\n# Chris Monson (2009-09-08):\n\n# \t* Bumped version to 2.1.31\n\n# \t* Closed issue 43: evince doesn't notice pdf change w/out touch\n\n# Chris Monson (2009-08-28):\n\n# \t* Bumped version to 2.1.30\n\n# \t* Closed issue 39: Capture multi-line log warnings/errors to output\n\n# Chris Monson (2009-08-26):\n\n# \t* Bumped version to 2.1.29\n\n# \t* Closed issue 42: add svg support using inkscape\n\n# Chris Monson (2009-08-17):\n\n# \t* Bumped version to 2.1.28\n\n# \t* Patch from paul.biggar for issue 38: package warnings are overlooked\n\n# Chris Monson (2009-08-07):\n\n# \t* Bumped version to 2.1.27\n\n# \t* Included patch for issue 37 - removes pdf/ps files before copying,\n\n# \t\tallowing some broken viewers to see changes properly.\n\n# Chris Monson (2009-05-15):\n\n# \t* Bumped version to 2.1.26\n\n# \t* Included patch for issue 9 from favonia - detects .fig changes for\n\n# \t\tpstex files during regular compilation, so long as the pstex\n\n# \t\thas been built at least once with make all-pstex.\n\n# Chris Monson (2009-03-27):\n\n# \t* Bumped version to 2.1.25\n\n# \t* Cleaned up a bunch of variable setting stuff - more stuff is now\n\n# \t\tsettable from Makefile.ini\n\n# \t* Cleaned up documentation for various features, especially settable\n\n# \t\tvariables.\n\n# \t* issue 28: support for png -> eps conversion (it even looks good!)\n\n# \t* issue 29: support for \"neverclean\" files in Makefile.ini\n\n# \t* issue 30: make ps2pdf14 the default - fall back when not there\n\n# Chris Monson (2009-03-09):\n\n# \t* Bumped version to 2.1.24\n\n# \t* issue 27: xmgrace support (thanks to rolandschulzhd)\n\n# Chris Monson (2008-10-23):\n\n# \t* Bumped version to 2.1.23\n\n# \t* issue 23: fixed _check_programs to not use bash string subs\n\n# Chris Monson (2008-09-02):\n\n# \t* Bumped version to 2.1.22\n\n# \t* Appled patch from Holger <yllohy@googlemail.com> to add include\n\n# \t\tsources and some documentation updates.\n\n# \t* Updated backup_patterns to be a bit more aggressive (also thanks to\n\n# \t\tHolger)\n\n# Chris Monson (2008-08-30):\n\n# \t* Bumped version to 2.1.21\n\n# \t* Added ability to specify onlysources.* variables to indicate the only\n\n# \t\tfiles that should *not* be considered includes.  Thanks to Holger\n\n# \t\t<yllohy@googlemail.com> for this patch.\n\n# \t* Added an automatic include of Makefile.ini if it exists.  Allows\n\n# \t\tsettings to be made outside of this makefile.\n\n# Chris Monson (2008-05-21):\n\n# \t* Bumped version to 2.1.20\n\n# \t* Added manual pstex compilation support (run make all-pstex first)\n\n# \t* Removed all automatic pstex support.  It was totally breaking\n\n# \t\teverything and is very hard to incorporate into the makefile\n\n# \t\tconcept because it requires LaTeX to *fail* before it can\n\n# \t\tdetermine that it needs the files.\n\n# Chris Monson (2008-04-17):\n\n# \t* Bumped version to 2.1.19\n\n# \t* Changed the pstex build hack to be on by default\n\n# Chris Monson (2008-04-09):\n\n# \t* Bumped version to 2.1.18\n\n# \t* issue 16: fixed pstex build problems, seems nondeterministic.  Added\n\n# \t\tgratuitious hack for testing: set PSTEX_BUILD_ALL_HACK=1.\n\n# Chris Monson (2008-04-09):\n\n# \t* Bumped version to 2.1.17\n\n# \t* issue 20: fixed accumulation of <pid>*.make files - wildcard was\n\n#\t\trefusing to work on files that are very recently created.\n\n# Chris Monson (2008-04-02):\n\n# \t* Bumped version to 2.1.16\n\n# \t* issue 19: Removed the use of \"type\" to fix broken \"echo\" settings\n\n# Chris Monson (2008-03-27):\n\n# \t* Bumped version to 2.1.15\n\n# \t* issue 18: Favors binary echo over builtin, as binary understands -n\n\n# \t* issue 16: Fixed handling of missing pstex_t files in the log\n\n# \t* issue 9: Added .SECONDARY target for .pstex files\n\n# Chris Monson (2008-03-21):\n\n# \t* Bumped version to 2.1.14\n\n# \t* Fixed broken aux file flattening, which caused included bibs to be\n\n# \t\tmissed.\n\n# Chris Monson (2008-03-20):\n\n# \t* Bumped version to 2.1.13\n\n# \t* Changed error output colorization to show errors for missing files\n\n# \t\tthat are not graphics files.\n\n# Chris Monson (2008-03-20):\n\n# \t* Bumped version to 2.1.12\n\n# \t* Fixed a regression introduced in r28 that makes bibtex fail when\n\n# \t\tthere is no index file present\n\n# Chris Monson (2008-03-03):\n\n# \t* Bumped version to 2.1.11\n\n# \t* Fixed issue 11 (handle index files, reported by abachn)\n\n# \t* Cleaned up some comments and help text\n\n# Chris Monson (2008-01-24):\n\n# \t* Bumped version to 2.1.10\n\n#\t* Fixed to work when 'sh' is a POSIX shell like 'dash'\n\n# Chris Monson (2007-12-12):\n\n# \t* Bumped version to 2.1.9\n\n# \t* Fixed documentation and dependency graph for pstex files\n\n# Chris Monson (2007-12-12):\n\n# \t* Bumped version to 2.1.8\n\n# \t* Added basic pstex_t support for fig files (Issue 9 by favonia)\n\n# \t\tI still suggest that psfrag be used instead.\n\n# Chris Monson (2007-10-16):\n\n# \t* Bumped version to 2.1.7\n\n# \t* Removed todo item: allow other comment directives for rst conversion\n\n# \t* Added ability to use global rst style file _rststyle_._include_.tex\n\n# \t* Added help text to that effect\n\n# Chris Monson (2007-05-20):\n\n# \t* Bumped version to 2.1.6\n\n# \t* Changed default paper size for rst files\n\n# \t* Added todo item: fix paper size for rst files\n\n# \t* Added todo item: allow other comment directives for rst conversion\n\n# Chris Monson (2007-04-02):\n\n# \t* Bumped version to 2.1.5\n\n# \t* Addressed Issue 7, incorrect .gpi.d generation in subdirectories\n\n# Chris Monson (2007-03-28):\n\n# \t* Bumped version to 2.1.4\n\n# \t* Fixed syntax error in dot output\n\n# Chris Monson (2007-03-01):\n\n# \t* Bumped version to 2.1.3\n\n# \t* Added reST to the included documentation\n\n# \t* Fixed graphics and script generation to be settable in the\n\n# \t\tenvironment.\n\n# Chris Monson (2007-02-23):\n\n# \t* Bumped version to 2.1.2\n\n# \t* Added the ability to generate .tex files from .rst files\n\n# Chris Monson (2006-10-17):\n\n# \t* Bumped version to 2.1.1\n\n# \t* Fixed includes from subdirectories (sed-to-sed slash escape problem)\n\n# Chris Monson (2006-10-05):\n\n# \t* Bumped version to 2.1.0 (pretty serious new feature added)\n\n# \t* New feature: bib files can now be anywhere on the BIBINPUTS path\n\n# \t* New programs: kpsewhich (with tetex) and xargs (BSD)\n\n# Chris Monson (2006-09-28):\n\n# \t* Bumped version to 2.0.9\n\n# \t* Added ability to parse more than one bibliography\n\n# Chris Monson (2006-06-01):\n\n# \t* Bumped version to 2.0.8\n\n# \t* Added .vrb to the list of cleaned files\n\n# Chris Monson (2006-04-26):\n\n# \t* Bumped version to 2.0.7\n\n# \t* Fixed so that clean-nographics does not remove .gpi.d files\n\n# \t* Removed jpg -> eps hack (not working properly -- just pre-convert)\n\n# \t* Fixed so that postscript grayscale can be done with BSD sed\n\n# Chris Monson (2006-04-25):\n\n# \t* Bumped version to 2.0.6\n\n# \t* Fixed so that changed toc, lot, lof, or out causes a rebuild\n\n# Chris Monson (2006-04-17):\n\n# \t* Bumped version to 2.0.5\n\n# \t* Added jpg -> eps conversion target\n\n# Chris Monson (2006-04-12):\n\n# \t* Bumped version to 2.0.4\n\n# \t* Fixed BSD sed invocation to not use \\| as a branch delimiter\n\n# \t* Added a comment section on what is and is not allowed in BSD sed\n\n# \t* Made paper size handling more robust while I was at it\n\n# \t* Fixed postscript RGB grayscale to use a weighted average\n\n# \t* Fixed postscript HSB grayscale to convert to RGB first\n\n# \t* Fixed a problem with rebuilding .bbl files\n\n# Chris Monson (2006-04-11):\n\n# \t* Bumped version to 2.0.3\n\n# \t* Fixed some BSD sed problems: can't use \\n in substitutions\n\n# Chris Monson (2006-04-10):\n\n# \t* Bumped version to 2.0.2\n\n# \t* Once again removed ability to create .tex files from scripts\n\n# \t* \\includeonly works again\n\n# Chris Monson (2006-04-09):\n\n# \t* Bumped version to 2.0.1\n\n# \t* Fixed grayscale postscript handling to be more robust\n\n# \t* Added ability to generate ._gray_. files from eps and eps.gz\n\n# \t* Added ability to clean ._gray_.eps files created from .eps files\n\n# Chris Monson (2006-04-07):\n\n# \t* Bumped version to 2.0.0\n\n# \t* Removed clunky ability to create included .tex files from scripts\n\n# \t* Added note in the help about included tex scripting not working\n\n# \t* Fixed the .eps generation to delete %.gpihead.make when finished\n\n# \t* Abandoned designs to use shell variables to create sed scripts\n\n# \t* Abandoned __default__.tex.sh idea: it causes recursion with %: .\n\n# \t* Removed web page to-do.  All items are now complete.\n\n# \t* Added better grayscale conversion for dot figures (direct ps fixup).\n\n# \t* Include files can now be scripted (at the expense of \\includeonly).\n\n# \t* Updated dependency graph to contain better node names.\n\n# Chris Monson (2006-04-06):\n\n# \t* Bumped version to 2.0b3\n\n# \t* Top level includes now fail if there is no rule to build them\n\n# \t* A helpful message is printed when they do fail\n\n# \t* Grayscale has been changed to be ._gray_, other phonies use _ now, too\n\n# \t* Grayscale handling has been completed\n\n# \t* Changed _include_stems target to _includes target.\n\n# \t* Fixed _includes target to be useful by itself.\n\n# \t* Removed the ability to specify clean and build targets at once\n\n# \t* Verified that epsfig works fine with current code\n\n# \t* Fixed included scripts so that they are added to the dep files\n\n# \t* Fixed so that graphics includes don't happen if they aren't for gpi\n\n# \t* Fixed dot output to allow grayscale.\n\n# Chris Monson (2006-04-05):\n\n#\t* Bumped version to 2.0b2\n\n#\t* Removed automatic -gray output.  It needs fixing in a bad way.\n\n#\t* Revamped dependency creation completely.\n\n#\t* Fixed conditional inclusion to actually work (test.nobuild.d, test.d).\n\n#\t* Fixed clean target to remove log targets\n\n#\t* Added the 'monochrome' word for gray gpi output\n\n#\t* Added a _check_gpi_files target that checks for common problems\n\n#\t* Changed the _version target into the version target (no _)\n\n#\t* Added better handling of grayscale files.  Use the .gray.pdf target.\n\n#\t* Fixed testing for rebuilds\n\n# Chris Monson (2006-04-04):\n\n#\t* Bumped version to 2.0b1\n\n#\t* Changed colorization of output\n\n#\t* Made .auxbbl and .auxtex .make files secondary targets\n\n#\t* Shortened and simplified the final latex invocation loop\n\n#\t* Added version-specific output ($$i vs. $$$$i) in latex loop\n\n#\t* Added a build message for the first .dvi run (Building .dvi (0))\n\n#\t* Removed some build messages that most people don't care about.\n\n#\t* Simplified procedure for user-set colors -- simple text specification\n\n#\t* Fixed diff output to...not output.\n\n#\t* Fixed rerun bug -- detect not only when preceded with LaTeX Warning\n\n#\t* Sped up gpi plotting\n\n#\t* Added error handling and colorized output for gpi failure\n\n#\t* Documented color changing stuff.\n\n#\t* Now sort the flattened aux file to avoid false recompilation needs\n\n#\t* Added clean-nographics target\n\n#\t* Don't remove self.dvi file if self.aux is missing in the log\n\n#\t* Clarified some code.  Did some very minor adjusting.\n\n# Chris Monson (2006-04-03):\n\n#\t* Bumped version to 2.0a7\n\n#\t* Added .dvi and .ps files as secondary files.\n\n#\t* Fixed handling of multiple run detection when includeonly is in use.\n\n#\t* Added code to flatten .aux files.\n\n#\t* Added more files as .SECONDARY prerequisites to avoid recompilation.\n\n#\t* Fixed the inputs generation to be much simpler and to use pipes.\n\n#\t* Added the dependency graph directly into the makefile.\n\n#\t* Changed flatten-aux to remove \\@writefile \\relax \\newlabel, etc.\n\n#\t* Undid pipe changes with sed usage (BSD sed doesn't know -f-).\n\n#\t* Added a _check_programs target that tells you what your system has.\n\n#\t* Fixed an error in colorization that made unnecessary errors appear\n\n#\t* Added view targets.\n\n#\t* Updated help text.\n\n#\t* Augmented cookies so that .aux can trigger .bbl and .dvi rebuilds\n\n#\t* Added more informative error handling for dvips and ps2pdf\n\n# Chris Monson (2006-04-02):\n\n#\t* Bumped version to 2.0a6\n\n#\t* Added indirection to .bbl dependencies to avoid rebuilding .bbl files\n\n#\t* Streamlined the diff invocation to eliminate an existence test\n\n#\t* Removed special shell quote escape variables\n\n#\t* Moved includes to a more prominent location\n\n#\t* Fixed .inputs.make to not contain .aux files\n\n#\t* Fixed embedding to use a file instead of always grepping.\n\n#\t* Added *.make.temp to the list of cleanable files\n\n#\t* Fixed Ruby.  It should now be supported properly.\n\n#\t* Now differentiate between all, default, and buildable files.\n\n#\t* Fixed to bail out on serious errors.\n\n#\t* Revised the handling of includable files.  Still working on it.\n\n# Chris Monson (2006-03-31):\n\n#\t* Bumped version to 2.0a5\n\n#\t* Fixed a bug with LaTeX error detection (there can be spaces)\n\n#\t* Added .bbl support, simplifying everything and making it more correct\n\n#\t* Refactored some tests that muddy the code\n\n#\t* Did a little cleanup of some shell loops that can safely be make loops\n\n#\t* Added support for graphviz .dot files\n\n#\t* Made _all_programs output easier to read\n\n#\t* Added the ruby support that has long been advertised\n\n#\t* Font embedding was screwed up for PostScript -- now implicit\n\n#\t* Changed the generation of -gray.gpi files to a single command\n\n#\t* Changed any make-generated file that is not included from .d to .make\n\n# Chris Monson (2006-03-30):\n\n#\t* Bumped version to 2.0a4\n\n#\t* Fixed a bug with very long graphics file names\n\n#\t* Added a todo entry for epsfig support\n\n#\t* Fixed a bug paper size bug: sometimes more than one entry appears\n\n#\t* Fixed DVI build echoing to display the number instead of process ID\n\n#\t* DVI files are now removed on first invocation if ANY file is missing\n\n#\t* Added a simple grayscale approach: if a file ends with -gray.gpi, it\n\n#\t\tis created from the corresponding .gpi file with a special\n\n#\t\tcomment ##GRAY in its header, which causes coloring to be\n\n#\t\tturned off.\n\n#\t* Fixed a bug in the handling of .tex.sh files.  For some reason I had\n\n#\t\tneglected to define file stems for scripted output.\n\n#\t* Removed a trailing ; from the %.graphics dependencies\n\n#\t* Added dvips embedding (I think it works, anyway)\n\n# Chris Monson (2006-03-29):\n\n#\t* Bumped version to 2.0a3\n\n#\t* Fixed error in make 3.79 with MAKEFILE_LIST usage\n\n#\t* Added the presumed filename to the _version output\n\n#\t* Added a vim macro for converting sed scripts to make commands\n\n#\t* Added gpi dependency support (plotting external files and loading gpi)\n\n#\t* Allow .gpi files to be ignored if called .include.gpi or .nobuild.gpi\n\n#\t* Fixed sed invocations where \\+ was used.  BSD sed uses \\{1,\\}.\n\n# Chris Monson (2006-03-28):\n\n#\t* Bumped version to 2.0a2\n\n#\t* Added SHELL_DEBUG and VERBOSE options\n\n#\t* Changed the default shell back to /bin/sh (unset, in other words)\n\n#\t* Moved .PHONY declarations closer to their targets\n\n#\t* Moved help text into its own define block to obtain better formatting\n\n#\t* Removed need for double-entry when adding a new program invocation\n\n#\t* Moved .SECONDARY declaration closer to its relevant occurrence\n\n#\t* Commented things more heavily\n\n#\t* Added help text about setting terminal and output in gnuplot\n\n#\t* Created more fine-grained clean targets\n\n#\t* Added a %.graphics target that generates all of %'s graphics\n\n#\t* Killed backward-compatible graphics generation (e.g., eps.gpi=gpi.eps)\n\n#\t* For now, we're just GPL 2, not 3.  Maybe it will change later\n\n#\t* Made the version and svninfo into variables\n\n# Chris Monson (2006-03-27):\n\n#\t* Bumped version to 2.0a1\n\n#\t* Huge, sweeping changes -- automatic dependencies\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# IMPORTANT!\n\n#\n\n# When adding to the following list, do not introduce any blank lines.  The\n\n# list is extracted for documentation using sed and is terminated by a blank\n\n# line.\n\n#\n\n# EXTERNAL PROGRAMS:\n\n# = ESSENTIAL PROGRAMS =\n\n# == Basic Shell Utilities ==\n",
        "Line" : 579,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# == LaTeX (tetex-provided) ==\n",
        "Line" : 603,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# = OPTIONAL PROGRAMS =\n\n# == Makefile Color Output ==\n",
        "Line" : 613,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# == TeX Generation ==\n",
        "Line" : 616,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# == EPS Generation ==\n",
        "Line" : 620,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ImageMagick\n",
        "Line" : 621,
        "CharPositionInLine" : 20
      },
      "12" : {
        "Text" : "# GraphViz\n",
        "Line" : 622,
        "CharPositionInLine" : 13
      },
      "13" : {
        "Text" : "# dot2tex - add options (not -o) as needed\n\n# XFig\n\n# GNUplot\n",
        "Line" : 623,
        "CharPositionInLine" : 20
      },
      "14" : {
        "Text" : "# Inkscape (svg support)\n",
        "Line" : 626,
        "CharPositionInLine" : 21
      },
      "15" : {
        "Text" : "# XMgrace\n",
        "Line" : 627,
        "CharPositionInLine" : 20
      },
      "16" : {
        "Text" : "# From NetPBM - step 1 for png -> eps\n\n# From NetPBM - (gray) step 2 for png -> eps\n",
        "Line" : 628,
        "CharPositionInLine" : 21
      },
      "17" : {
        "Text" : "# From NetPBM - step 3 for png -> eps\n",
        "Line" : 630,
        "CharPositionInLine" : 20
      },
      "18" : {
        "Text" : "# GZipped EPS\n",
        "Line" : 631,
        "CharPositionInLine" : 18
      },
      "19" : {
        "Text" : "# == Beamer Enlarged Output ==\n",
        "Line" : 632,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# == Viewing Stuff ==\n",
        "Line" : 634,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Command options for embedding fonts and postscript->pdf conversion\n",
        "Line" : 639,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Defaults for GPI\n",
        "Line" : 643,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Style file for ReST\n",
        "Line" : 647,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# This ensures that even when echo is a shell builtin, we still use the binary\n\n# (the builtin doesn't always understand -n)\n",
        "Line" : 650,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Directory into which we place \"binaries\" if it exists.\n\n# Note that this can be changed on the commandline or in Makefile.ini:\n\n#\n\n# Command line:\n\n#   make BINARY_TARGET_DIR=$HOME/pdfs myfile.pdf\n\n#\n\n# Also, you can specify a relative directory (relative to the Makefile):\n\n#   make BINARY_TARGET_DIR=pdfs myfile.pdf\n\n#\n\n# Or, you can use Makefile.ini:\n\n#\n\n#   BINARY_TARGET_DIR := $(HOME)/bin_out\n\n#\n",
        "Line" : 664,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# SH NOTES\n\n#\n\n# On some systems, /bin/sh, which is the default shell, is not linked to\n\n# /bin/bash.  While bash is supposed to be sh-compatible when invoked as sh, it\n\n# just isn't.  This section details some of the things you have to stay away\n\n# from to remain sh-compatible.\n\n#\n\n#\t* File pattern expansion does not work for {}\n\n#\t* [ \"$x\" = \"$y\" ] has to be [ x\"$x\" x\"$y\" ]\n\n#\t* &> for stderr redirection doesn't work, use 2>&1 instead\n\n#\n\n# BSD SED NOTES\n\n#\n\n# BSD SED is not very nice compared to GNU sed, but it is the most\n\n# commonly-invoked sed on Macs (being based on BSD), so we have to cater to\n\n# it or require people to install GNU sed.  It seems like the GNU\n\n# requirement isn't too bad since this makefile is really a GNU makefile,\n\n# but apparently GNU sed is much less common than GNU make in general, so\n\n# I'm supporting it here.\n\n#\n\n# Sad experience has taught me the following about BSD sed:\n\n#\n\n# \t* \\+ is not understood to mean \\{1,\\}\n\n# \t* \\| is meaningless (does not branch)\n\n# \t* \\n cannot be used as a substitution character\n\n# \t* ? does not mean \\{0,1\\}, but is literal\n\n# \t* a\\ works, but only reliably for a single line if subsequent lines\n\n# \t\thave forward slashes in them (as is the case in postscript)\n\n#\n\n# For more info (on the Mac) you can consult\n\n#\n\n# man -M /usr/share/man re_format\n\n#\n\n# And look for the word \"Obsolete\" near the bottom.\n",
        "Line" : 680,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#\n\n# EXTERNAL PROGRAM DOCUMENTATION SCRIPT\n\n#\n",
        "Line" : 715,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# $(call output-all-programs,[<output file>])\n",
        "Line" : 719,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# If they misspell gray, it should still work.\n",
        "Line" : 732,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#\n\n# Utility Functions and Definitions\n\n#\n",
        "Line" : 735,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# While not exactly a make function, this vim macro is useful.  It takes a\n\n# verbatim sed script and converts each line to something suitable in a command\n\n# context.  Just paste the script's contents into the editor, yank this into a\n\n# register (starting at '0') and run the macro once for each line of the\n\n# original script:\n\n#\n\n# 0i\t-e \u001B:s/\\$/$$/eg\r",
        "Line" : 739,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# don't call this directly - it is here to avoid calling wildcard more than\n\n# once in remove-files.\n",
        "Line" : 747,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# $(call remove-files,file1 file2)\n",
        "Line" : 751,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Removes all cleanable files in the given list\n\n# $(call clean-files,file1 file2 file3 ...)\n\n# Works exactly like remove-files, but filters out files in $(neverclean)\n",
        "Line" : 754,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Outputs all generated files to STDOUT, along with some others that are\n\n# created by these (e.g., .idx files end up producing .ilg and .ind files).\n\n# Discovered by reading *.fls OUTPUT lines and producing corresponding .ind\n\n# filenames as needed.\n\n#\n\n# $(call get-generated-names,<source recorder file (*.fls)>)\n",
        "Line" : 760,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# This removes files without checking whether they are there or not.  This\n\n# sometimes has to be used when the file is created by a series of shell\n\n# commands, but there ends up being a race condition: make doesn't know about\n\n# the file generation as quickly as the system does, so $(wildcard ...) doesn't\n\n# work right.  Blech.\n\n# $(call remove-temporary-files,filenames)\n",
        "Line" : 780,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Create an identifier from a file name\n\n# $(call cleanse-filename,filename)\n",
        "Line" : 788,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Escape dots\n\n# $(call escape-fname-regex,str)\n",
        "Line" : 792,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Test that a file exists\n\n# $(call test-exists,file)\n",
        "Line" : 796,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# $(call move-files,source,destination)\n",
        "Line" : 800,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Copy file1 to file2 only if file2 doesn't exist or they are different\n\n# $(call copy-if-different,sfile,dfile)\n",
        "Line" : 803,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Note that $(DIFF) returns success when the files are the SAME....\n\n# $(call test-different,sfile,dfile)\n",
        "Line" : 813,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Return value 1, or value 2 if value 1 is empty\n\n# $(call get-default,<possibly empty arg>,<default value if empty>)\n",
        "Line" : 819,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Copy a file and log what's going on\n\n# $(call copy-with-logging,<source>,<target>)\n",
        "Line" : 823,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Gives a reassuring message about the failure to find include files\n\n# $(call include-message,<list of include files>)\n",
        "Line" : 835,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Characters that are hard to specify in certain places\n",
        "Line" : 848,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Useful shell definitions\n",
        "Line" : 853,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Clear out the standard interfering make suffixes\n",
        "Line" : 857,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Turn off forceful rm (RM is usually mapped to rm -f)\n",
        "Line" : 860,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Turn command echoing back on with VERBOSE=1\n",
        "Line" : 865,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Turn on shell debugging with SHELL_DEBUG=1\n\n# (EVERYTHING is echoed, even $(shell ...) invocations)\n",
        "Line" : 870,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Get the name of this makefile (always right in 3.80, often right in 3.79)\n\n# This is only really used for documentation, so it isn't too serious.\n",
        "Line" : 876,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Terminal color definitions\n",
        "Line" : 884,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# $(call get-term-code,codeinfo)\n\n# e.g.,\n\n# $(call get-term-code,setaf 0)\n",
        "Line" : 888,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "#\n\n# User-settable definitions\n\n#\n",
        "Line" : 905,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Gets the real color from a simple textual definition like those above\n\n# $(call get-color,ALL_CAPS_COLOR_NAME)\n\n# e.g., $(call get-color,WARNING)\n",
        "Line" : 920,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "#\n\n# STANDARD COLORS\n\n#\n",
        "Line" : 925,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "#\n\n# PRE-BUILD TESTS\n\n#\n",
        "Line" : 941,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Check that clean targets are not combined with other targets (weird things\n\n# happen, and it's not easy to fix them)\n",
        "Line" : 945,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "#\n\n# VARIABLE DECLARATIONS\n\n#\n",
        "Line" : 955,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# Names of sed scripts that morph gnuplot files -- only the first found is used\n",
        "Line" : 959,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Files of interest\n",
        "Line" : 987,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Utility function for obtaining all files not specified in $(neverclean)\n\n# $(call cleanable-files,file1 file2 file3 ...)\n\n# Returns the list of files that is not in $(wildcard $(neverclean))\n",
        "Line" : 1003,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Utility function for getting all .$1 files that are to be ignored\n\n#  * files listed in $(includes.$1)\n\n#  * files not listed in $(onlysources.$1) if it is defined\n",
        "Line" : 1008,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Patterns to never be allowed as source targets\n",
        "Line" : 1015,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Patterns allowed as source targets but not included in 'all' builds\n",
        "Line" : 1018,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Utility function for getting targets suitable building\n\n# $(call filter-buildable,suffix)\n",
        "Line" : 1021,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Utility function for getting targets suitable for 'all' builds\n\n# $(call filter-default,suffix)\n",
        "Line" : 1027,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Top level sources that can be built even when they are not by default\n",
        "Line" : 1033,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Make all pstex targets secondary.  The pstex_t target requires the pstex\n\n# target, and nothing else really depends on it, so it often gets deleted.\n\n# This avoids that by allowing *all* fig files to be pstex targets, which is\n\n# perfectly valid and causes no problems even if they're going to become eps\n\n# files in the end.\n",
        "Line" : 1048,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Top level sources that are built by default targets\n",
        "Line" : 1055,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Utility function for creating larger lists of files\n\n# $(call concat-files,suffixes,[prefix])\n",
        "Line" : 1070,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Useful file groupings\n",
        "Line" : 1074,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# Utility function for obtaining stems\n\n# $(call get-stems,suffix,[prefix])\n",
        "Line" : 1086,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# List of all stems (including ._include_ and ._nobuild_ file stems)\n",
        "Line" : 1090,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# List of all default stems (all default PDF targets):\n",
        "Line" : 1106,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# List of all stems (all possible bare PDF targets created here):\n",
        "Line" : 1121,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# Utility function for creating larger lists of stems\n\n# $(call concat-stems,suffixes,[prefix])\n",
        "Line" : 1136,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# The most likely to be source but not finished product go first\n",
        "Line" : 1140,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# Calculate names that can generate the need for an include file.  We can't\n\n# really do this with patterns because it's too easy to screw up, so we create\n\n# an exhaustive list.\n",
        "Line" : 1184,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# All targets allowed to build documents\n",
        "Line" : 1209,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# All targets allowed to build graphics\n",
        "Line" : 1214,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# All targets that build multiple documents (like 'all')\n",
        "Line" : 1219,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# All targets that build multiple graphics (independent of document)\n",
        "Line" : 1231,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# Now we figure out which stuff is available as a make target for THIS RUN.\n",
        "Line" : 1238,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# Determine which .d files need including from the information gained above.\n\n# This is done by first checking whether a batch target exists.  If it does,\n\n# then all *default* stems are used to create possible includes (nobuild need\n\n# not apply for batch status).  If no batch targets exist, then the individual\n\n# targets are considered and appropriate includes are taken from them.\n",
        "Line" : 1263,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# Determine which .gpi.d files are needed using the above information.  We\n\n# first check whether a batch target is specified, then check individual\n\n# graphics that may have been specified.\n",
        "Line" : 1278,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# All dependencies for the 'all' targets\n",
        "Line" : 1291,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# Extensions generated by LaTeX invocation that can be removed when complete\n",
        "Line" : 1312,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# All LaTeX-generated files that can be safely removed\n",
        "Line" : 1320,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# These are the files that will affect .gpi transformation for all .gpi files.\n\n#\n\n# Use only the first one found.  Backward compatible values are at the end.\n\n# Note that we use foreach, even though wildcard also returns a list, to ensure\n\n# that the order in the uppercase variables is preserved.  Directory listings\n\n# provide no such guarantee, so we avoid relying on them.\n",
        "Line" : 1328,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "#\n\n# Functions used in generating output\n\n#\n",
        "Line" : 1339,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# Outputs all source dependencies to stdout.  The first argument is the file to\n\n# be parsed, the second is a list of files that will show up as dependencies in\n\n# the new .d file created here.\n\n#\n\n# NOTE: BSD sed does not understand \\|, so we have to do something more\n\n# clunky to extract suitable extensions.\n\n#\n\n# Also, we do a little bit of funny rewriting up front (TARGETS=) to make sure\n\n# that we can properly backslash-escape spaces in file names (e.g, on Cygwin\n\n# for tex distributions that have \"Program Files\" in their name).\n\n#\n\n# $(call get-inputs,<parsed file>,<target files>)\n",
        "Line" : 1343,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# $(call get-missing-inputs,<log file>,<target files>)\n",
        "Line" : 1372,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# Get source file for specified graphics stem.\n\n#\n\n# $(call graphics-source,<stem>)\n",
        "Line" : 1405,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# Get the target file for the specified graphics file/stem\n\n#\n\n# $(call graphics-target,<stem>)\n",
        "Line" : 1417,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "# Outputs all of the graphical dependencies to stdout.  The first argument is\n\n# the stem of the source file being built, the second is a list of suffixes\n\n# that will show up as dependencies in the generated .d file.\n\n#\n\n# Note that we try to escape spaces in filenames where possible.  We have to do\n\n# it with three backslashes so that as the name percolates through the makefile\n\n# it eventually ends up with the proper escaping when the build rule is found.\n\n# Ugly, but it appears to work.  Note that graphicx doesn't allow filenames\n\n# with spaces, so this could in many ways be moot unless you're using something\n\n# like grffile.\n\n#\n\n# For pdflatex, we really need the missing file to be specified without an\n\n# extension, otherwise compilation barfs on the first missing file.  Truly\n\n# annoying, but there you have it.\n\n#\n\n# It turns out that the graphics errors, although they have lines with empty\n\n# space, are only made of two paragraphs.  So, we just use some sed magic to\n\n# get everything into paragraphs, detect when it's a paragraph that interests\n\n# us, and double it up.  Then we get the filename only if we're missing\n\n# extensions (a sign that it's graphicx complaining).\n\n#\n\n# $(call get-graphics,<target file stem>)\n\n#.log,$(addprefix $*.,d $(build_target_extension) _graphics)\n",
        "Line" : 1425,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "# Checks for build failure due to pstex inclusion, and gives instructions.\n\n#\n\n# $(call die-on-pstexs,<parsed file>)\n",
        "Line" : 1496,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "# Checks for the use of import.sty and bails - we don't support subdirectories\n\n#\n\n# $(call die-on-import-sty,<log file>)\n",
        "Line" : 1509,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "# Checks for build failure due to dot2tex, and gives instructions.\n\n#\n\n# $(call die-on-dot2tex,<parsed file>)\n",
        "Line" : 1520,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "# Checks for the existence of a .aux file, and dies with an error message if it\n\n# isn't there.  Note that we pass the file stem in, not the full filename,\n\n# e.g., to check for foo.aux, we call it thus: $(call die-on-no-aux,foo)\n\n#\n\n# $(call die-on-no-aux,<aux stem>)\n",
        "Line" : 1533,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "# Outputs all index files to stdout.  Arg 1 is the source file stem, arg 2 is\n\n# the list of targets for the discovered dependency.\n\n#\n\n# $(call get-log-index,<log file stem>,<target files>)\n",
        "Line" : 1545,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "# Outputs all bibliography files to stdout.  Arg 1 is the source stem, arg 2 is\n\n# a list of targets for each dependency found.\n\n#\n\n# The script kills all lines that do not contain bibdata.  Remaining lines have\n\n# the \\bibdata macro and delimiters removed to create a dependency list.  A\n\n# trailing comma is added, then all adjacent commas are collapsed into a single\n\n# comma.  Then commas are replaced with the string .bib[space], and the\n\n# trailing space is killed off.  Finally, all filename spaces are escaped.\n\n# This produces a list of space-delimited .bib filenames, which is what the\n\n# make dep file expects to see.\n\n#\n\n# Note that we give kpsewhich a bogus argument so that a failure of sed to\n\n# produce output will not cause an error.\n\n#\n\n# $(call get-bibs,<aux file>,<targets>)\n",
        "Line" : 1565,
        "CharPositionInLine" : 0
      },
      "104" : {
        "Text" : "# Makes a an aux file that only has stuff relevant to the target in it\n\n# $(call make-auxtarget-file,<flattened-aux>,<new-aux>)\n",
        "Line" : 1594,
        "CharPositionInLine" : 0
      },
      "105" : {
        "Text" : "# Makes an aux file that only has stuff relevant to the bbl in it\n\n# $(call make-auxbbl-file,<flattened-aux>,<new-aux>)\n",
        "Line" : 1602,
        "CharPositionInLine" : 0
      },
      "106" : {
        "Text" : "# Makes a .gpi.d file from a .gpi file\n\n# $(call make-gpi-d,<.gpi>,<.gpi.d>)\n",
        "Line" : 1610,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "# Parse .gpi files for data and loaded dependencies, output to stdout\n\n#\n\n# The sed script here tries to be clever about obtaining valid\n\n# filenames from the gpi file.  It assumes that the plot command starts its own\n\n# line, which is not too difficult a constraint to satisfy.\n\n#\n\n# This command script also generates 'include' directives for every 'load'\n\n# command in the .gpi file.  The load command must appear on a line by itself\n\n# and the file it loads must have the suffix .gpi.  If you don't want it to be\n\n# compiled when running make graphics, then give it a suffix of ._include_.gpi.\n\n#\n\n# $(call get-gpi-deps,<gpi file>,<targets>)\n",
        "Line" : 1620,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "# Colorizes real, honest-to-goodness LaTeX errors that can't be overcome with\n\n# recompilation.\n\n#\n\n# Note that we only ignore file not found errors for things that we know how to\n\n# build, like graphics files.\n\n#\n\n# $(call colorize-latex-errors,<log file>)\n",
        "Line" : 1654,
        "CharPositionInLine" : 0
      },
      "109" : {
        "Text" : "# Colorize Makeindex errors\n",
        "Line" : 1719,
        "CharPositionInLine" : 0
      },
      "110" : {
        "Text" : "# Colorize epstopdf errors\n\n#\n\n# $(call colorize-epstopdf-errors,<log file>)\n",
        "Line" : 1731,
        "CharPositionInLine" : 0
      },
      "111" : {
        "Text" : "# Colorize GNUplot errors\n\n#\n\n# $(call colorize-gnuplot-errors,<log file>)\n",
        "Line" : 1745,
        "CharPositionInLine" : 0
      },
      "112" : {
        "Text" : "# Colorize GraphViz errors\n\n#\n\n# $(call colorize-dot-errors,<log file>)\n",
        "Line" : 1779,
        "CharPositionInLine" : 0
      },
      "113" : {
        "Text" : "# Get all important .aux files from the top-level .aux file and merges them all\n\n# into a single file, which it outputs to stdout.\n\n#\n\n# $(call flatten-aux,<toplevel aux>,<output file>)\n",
        "Line" : 1790,
        "CharPositionInLine" : 0
      },
      "114" : {
        "Text" : "# Generate pdf from postscript\n\n#\n\n# Note that we don't just call ps2pdf, since there are so many versions of that\n\n# script on various systems.  Instead, we call the postscript interpreter\n\n# directly.\n\n#\n\n# $(call ps2pdf,infile,outfile,[embed fonts])\n",
        "Line" : 1820,
        "CharPositionInLine" : 0
      },
      "115" : {
        "Text" : "# Colorize LaTeX output.\n\n# This uses a neat trick from the Sed & Awk Book from O'Reilly:\n\n# 1) If a line has a single ending paren, delete it to make a blank line (so\n\n#\tthat we catch the first error, which is not always preceded by a blank\n\n#\tline).\n\n# 2) Ensure that the last line of the file gets appended to the hold buffer,\n\n# \tand blank it out to trigger end-of-paragraph logic below.\n\n# 3) When encountering a blank line (LaTeX output helpfully breaks output on\n\n# \tnewlines)\n\n# \ta) swap the hold buffer (containing the paragraph) into the pattern buffer (putting a blank line into the hold buffer),\n\n# \tb) remove the newline at the beginning (don't ask),\n\n# \tc) apply any colorizing substitutions necessary to ensure happiness.\n\n# \td) get the newline out of the hold buffer and append it\n\n# \te) profit! (print)\n\n# 4) Anything not colorized is deleted, unless in verbose mode.\n",
        "Line" : 1840,
        "CharPositionInLine" : 0
      },
      "116" : {
        "Text" : "# Colorize BibTeX output.\n",
        "Line" : 1898,
        "CharPositionInLine" : 0
      },
      "117" : {
        "Text" : "# Make beamer output big enough to print on a full page.  Landscape doesn't\n\n# seem to work correctly.\n",
        "Line" : 1918,
        "CharPositionInLine" : 0
      },
      "118" : {
        "Text" : "# $(call test-run-again,<source stem>)\n",
        "Line" : 1922,
        "CharPositionInLine" : 0
      },
      "119" : {
        "Text" : "# This tests whether the build target commands should be run at all, from\n\n# viewing the log file.\n\n# $(call test-log-for-need-to-run,<source stem>)\n",
        "Line" : 1925,
        "CharPositionInLine" : 0
      },
      "120" : {
        "Text" : "# LaTeX invocations\n\n#\n\n# $(call latex,<tex file>,[<extra LaTeX args>])\n",
        "Line" : 1935,
        "CharPositionInLine" : 0
      },
      "121" : {
        "Text" : "# $(call latex-color-log,<LaTeX stem>)\n",
        "Line" : 1940,
        "CharPositionInLine" : 0
      },
      "122" : {
        "Text" : "# $(call run-makeindex,<input>,<output>,<log>,<extra flags>)\n",
        "Line" : 1943,
        "CharPositionInLine" : 0
      },
      "123" : {
        "Text" : "# This runs the given script to generate output, and it uses MAKE_RESTARTS to\n\n# ensure that it never runs it more than once for a particular root make\n\n# invocation.\n\n#\n\n# $(call run-script,<interpreter>,<input>,<output>)\n",
        "Line" : 1954,
        "CharPositionInLine" : 0
      },
      "124" : {
        "Text" : "# BibTeX invocations\n\n#\n\n# $(call run-bibtex,<tex stem>)\n",
        "Line" : 1971,
        "CharPositionInLine" : 0
      },
      "125" : {
        "Text" : "# $(call convert-eps-to-pdf,<eps file>,<pdf file>,[gray])\n\n# Note that we don't use the --filter flag because it has trouble with bounding boxes that way.\n",
        "Line" : 1977,
        "CharPositionInLine" : 0
      },
      "126" : {
        "Text" : "# $(call convert-gpi,<gpi file>,<output file>,[gray])\n\n#\n",
        "Line" : 1985,
        "CharPositionInLine" : 0
      },
      "127" : {
        "Text" : "# Creation of .eps files from .png files\n\n#\n\n# The intermediate step of PNM (using NetPBM) produces much nicer output than\n\n# ImageMagick's \"convert\" binary.  I couldn't get the right combination of\n\n# flags to make it look nice, anyway.\n\n#\n\n# To handle gray scale conversion, we pipe things through ppmtopgm in the\n\n# middle.\n\n#\n\n# $(call convert-png,<png file>,<eps file>)\n",
        "Line" : 2019,
        "CharPositionInLine" : 0
      },
      "128" : {
        "Text" : "# Creation of .eps files from .jpg files\n\n#\n\n# Thanks to brubakee for this solution.\n\n#\n\n# Uses Postscript level 2 to avoid file size bloat\n\n# $(call convert-jpg,<jpg file>,<eps file>)\n",
        "Line" : 2036,
        "CharPositionInLine" : 0
      },
      "129" : {
        "Text" : "# Creation of .eps files from .fig files\n\n# $(call convert-fig,<fig file>,<output file>,[gray])\n",
        "Line" : 2046,
        "CharPositionInLine" : 0
      },
      "130" : {
        "Text" : "# Creation of .pstex files from .fig files\n\n# $(call convert-fig-pstex,<fig file>,<pstex file>)\n",
        "Line" : 2050,
        "CharPositionInLine" : 0
      },
      "131" : {
        "Text" : "# Creation of .pstex_t files from .fig files\n\n# $(call convert-fig-pstex-t,<fig file>,<pstex file>,<pstex_t file>)\n",
        "Line" : 2054,
        "CharPositionInLine" : 0
      },
      "132" : {
        "Text" : "# Creation of .dot_t files from .dot files\n\n# #(call convert-dot-tex,<dot file>,<dot_t file>)\n",
        "Line" : 2058,
        "CharPositionInLine" : 0
      },
      "133" : {
        "Text" : "# Converts svg files into .eps files\n\n#\n\n# $(call convert-svg,<svg file>,<eps file>,[gray])\n",
        "Line" : 2062,
        "CharPositionInLine" : 0
      },
      "134" : {
        "Text" : "# Converts xvg files into .eps files\n\n#\n\n# $(call convert-xvg,<xvg file>,<eps file>,[gray])\n",
        "Line" : 2067,
        "CharPositionInLine" : 0
      },
      "135" : {
        "Text" : "# Converts .eps.gz files into .eps files\n\n#\n\n# $(call convert-epsgz,<eps.gz file>,<eps file>,[gray])\n",
        "Line" : 2072,
        "CharPositionInLine" : 0
      },
      "136" : {
        "Text" : "# Converts .eps files into .eps files (usually a no-op, but can make grayscale)\n\n#\n\n# $(call convert-eps,<in file>,<out file>,[gray])\n",
        "Line" : 2077,
        "CharPositionInLine" : 0
      },
      "137" : {
        "Text" : "# The name of the file containing special postscript commands for grayscale\n",
        "Line" : 2082,
        "CharPositionInLine" : 0
      },
      "138" : {
        "Text" : "# Changes sethsbcolor and setrgbcolor calls in postscript to always produce\n\n# grayscale.  In general, this is accomplished by writing new versions of those\n\n# functions into the user dictionary space, which is looked up before the\n\n# global or system dictionaries (userdict is one of the permanent dictionaries\n\n# in postscript and is not read-only like systemdict).\n\n#\n\n# For setrgbcolor, the weighted average of the triple is computed and the\n\n# triple is replaced with three copies of that average before the original\n\n# procedure is called: .299R + .587G + .114B\n\n#\n\n# For sethsbcolor, the color is first converted to RGB, then to grayscale by\n\n# the new setrgbcolor operator as described above.  Why is this done?\n\n# Because simply using the value component will tend to make pure colors\n\n# white, a very undesirable thing.  Pure blue should not translate to white,\n\n# but to some level of gray.  Conversion to RGB does the right thing.  It's\n\n# messy, but it works.\n\n#\n\n# From\n\n# http://en.wikipedia.org/wiki/HSV_color_space#Transformation_from_HSV_to_RGB,\n\n# HSB = HSV (Value = Brightness), and the formula used to convert to RGB is\n\n# as follows:\n\n#\n\n# Hi = int(floor(6 * H)) mod 6\n\n# f = 6 * H - Hi\n\n# p = V(1-S)\n\n# q = V(1-fS)\n\n# t = V(1-(1-f)S)\n\n# if Hi = 0: R G B <-- V t p\n\n# if Hi = 1: R G B <-- q V p\n\n# if Hi = 2: R G B <-- p V t\n\n# if Hi = 3: R G B <-- p q V\n\n# if Hi = 4: R G B <-- t p V\n\n# if Hi = 5: R G B <-- V p q\n\n#\n\n# The messy stack-based implementation is below\n\n# $(call create-gray-eps-file,filename)\n",
        "Line" : 2085,
        "CharPositionInLine" : 0
      },
      "139" : {
        "Text" : "# This actually inserts the color-killing code into a postscript file\n\n# $(call kill-ps-color)\n",
        "Line" : 2189,
        "CharPositionInLine" : 0
      },
      "140" : {
        "Text" : "# Converts graphviz .dot files into .eps files\n\n# Grayscale is not directly supported by dot, so we pipe it through fig2dev in\n\n# that case.\n\n# $(call convert-dot,<dot file>,<eps file>,<log file>,[gray])\n",
        "Line" : 2195,
        "CharPositionInLine" : 0
      },
      "141" : {
        "Text" : "# Convert DVI to Postscript\n\n# $(call make-ps,<dvi file>,<ps file>,<log file>,[<paper size>])\n",
        "Line" : 2204,
        "CharPositionInLine" : 0
      },
      "142" : {
        "Text" : "# Convert Postscript to PDF\n\n# $(call make-pdf,<ps file>,<pdf file>,<log file>,<embed file>)\n",
        "Line" : 2210,
        "CharPositionInLine" : 0
      },
      "143" : {
        "Text" : "# Display information about what is being done\n\n# $(call echo-build,<input file>,<output file>,[<run number>])\n",
        "Line" : 2215,
        "CharPositionInLine" : 0
      },
      "144" : {
        "Text" : "# Display a list of something\n\n# $(call echo-list,<values>)\n",
        "Line" : 2221,
        "CharPositionInLine" : 0
      },
      "145" : {
        "Text" : "#\n\n# DEFAULT TARGET\n\n#\n",
        "Line" : 2225,
        "CharPositionInLine" : 0
      },
      "146" : {
        "Text" : "#\n\n# VIEWING TARGET\n\n#\n",
        "Line" : 2243,
        "CharPositionInLine" : 0
      },
      "147" : {
        "Text" : "#\n\n# INCLUDES\n\n#\n",
        "Line" : 2252,
        "CharPositionInLine" : 0
      },
      "148" : {
        "Text" : "# Check the version of the makefile\n",
        "Line" : 2258,
        "CharPositionInLine" : 0
      },
      "149" : {
        "Text" : "# Include only the dependencies used\n",
        "Line" : 2263,
        "CharPositionInLine" : 0
      },
      "150" : {
        "Text" : "#\n\n# MAIN TARGETS\n\n#\n",
        "Line" : 2271,
        "CharPositionInLine" : 0
      },
      "151" : {
        "Text" : "# Note that we don't just say %: %.pdf here - this can tend to mess up our\n\n# includes, which detect what kind of file we are asking for.  For example,\n\n# asking to build foo.pdf is much different than asking to build foo when\n\n# foo.gpi exists, because we look through all of the goals for *.pdf that\n\n# matches *.gpi, then use that to determine which include files we need to\n\n# build.\n\n#\n\n# Thus, we invoke make recursively with better arugments instead, restarting\n\n# all of the appropriate machinery.\n",
        "Line" : 2275,
        "CharPositionInLine" : 0
      },
      "152" : {
        "Text" : "# This builds and displays the wanted file.\n",
        "Line" : 2287,
        "CharPositionInLine" : 0
      },
      "153" : {
        "Text" : "# Build the final target (dvi or pdf) file.  This is a very tricky rule because\n\n# of the way that latex runs multiple times, needs graphics after the first run\n\n# (or maybe already has them), and relies on bibliographies or indices that may\n\n# not exist.\n\n#\n\n#\tCheck the log for fatal errors.  If they exist, colorize and bail.\n\n#\n\n#\tCreate the .auxtarget.cookie file.  (Needed for next time if not present)\n\n#\n\n#\tIf any of the following are true, we must rebuild at least one time:\n\n#\n\n#\t* the .bbl was recently rebuilt\n\n#\n\n#\t\tcheck a cookie, then delete it\n\n#\n\n#\t* any of several output files was created or changed:\n\n#\n\n#\t\tcheck $*.run.cookie, then delete it\n\n#\n\n#\t* the .aux file changed in a way that necessitates attention\n\n#\n\n#\t\tNote that if the .auxtarget.make file doesn't exist, this means\n\n#\t\tthat we are doing a clean build, so it doesn't figure into the\n\n#\t\ttest for running again.\n\n#\n\n#\t\tcompare against .auxtarget.make\n\n#\n\n#\t\tmove if different, remove if not\n\n#\n\n#\t* the .log file has errors or warnings requiring at least one more run\n\n#\n\n#\tWe use a loop over a single item to simplify the process of breaking\n\n#\tout when we find one of the conditions to be true.\n\n#\n\n#\tIf we do NOT need to run latex here, then we move the $@.1st.make file\n\n#\tover to $@ because the target file has already been built by the first\n\n#\tdependency run and is valid.\n\n#\n\n#\tIf we do, we delete that cookie file and do the normal multiple-runs\n\n#\troutine.\n\n#\n",
        "Line" : 2327,
        "CharPositionInLine" : 0
      },
      "154" : {
        "Text" : "# Build the .bbl file.  When dependencies are included, this will (or will\n\n# not!) depend on something.bib, which we detect, acting accordingly.  The\n\n# dependency creation also produces the %.auxbbl.make file.  BibTeX is a bit\n\n# finicky about what you call the actual files, but we can rest assured that if\n\n# a .auxbbl.make file exists, then the .aux file does, as well.  The\n\n# .auxbbl.make file is a cookie indicating whether the .bbl needs to be\n\n# rewritten.  It only changes if the .aux file changes in ways relevant to .bbl\n\n# creation.\n\n#\n\n# Note that we do NOT touch the .bbl file if there is no need to\n\n# create/recreate it.  We would like to leave existing files alone if they\n\n# don't need to be changed, thus possibly avoiding a rebuild trigger.\n",
        "Line" : 2419,
        "CharPositionInLine" : 0
      },
      "155" : {
        "Text" : "# Create the index file - note that we do *not* depend on %.tex here, since\n\n# that unnecessarily restricts the kinds of indices that we can build to those\n\n# with exactly the same stem as the source file.  Things like splitidx create\n\n# idx files with other names.\n\n#\n\n# Therefore, we add the .tex dependency in the sourcestem.d file in the call to\n\n# get index file dependencies from the logs.\n",
        "Line" : 2451,
        "CharPositionInLine" : 0
      },
      "156" : {
        "Text" : "# Create the glossary file\n",
        "Line" : 2462,
        "CharPositionInLine" : 0
      },
      "157" : {
        "Text" : "# Create the nomenclature file\n",
        "Line" : 2467,
        "CharPositionInLine" : 0
      },
      "158" : {
        "Text" : "# SCRIPTED LaTeX TARGETS\n\n#\n\n# Keep the generated .tex files around for debugging if needed.\n",
        "Line" : 2472,
        "CharPositionInLine" : 0
      },
      "159" : {
        "Text" : "#\n\n# GRAPHICS TARGETS\n\n#\n",
        "Line" : 2492,
        "CharPositionInLine" : 0
      },
      "160" : {
        "Text" : "#\n\n# DEPENDENCY-RELATED TARGETS.\n\n#\n",
        "Line" : 2596,
        "CharPositionInLine" : 0
      },
      "161" : {
        "Text" : "# Generate all of the information needed to get dependencies\n\n# As a side effect, this creates a .dvi or .pdf file (depending on the build\n\n# strategy).  We need to be sure to remove it if there are errors.  Errors can\n\n# take several forms and all of them are found within the log file:\n\n#\t* There was a LaTeX error\n\n#\t* A needed file was not found\n\n#\t* Cross references need adjustment\n\n#\n\n# Behavior:\n\n#\tThis rule is responsible for generating the following:\n\n#\t%.aux\n\n#\t%.d\n\n#\t%.aux.make\n\n#\t%.(pdf|dvi).1st.make (the .pdf or .dvi output file, moved)\n\n#\n\n#\tSteps:\n\n#\n\n#\tRun latex\n\n#\tMove .pdf or .dvi somewhere else (make no judgements about success)\n\n#\tFlatten the .aux file into another file\n\n#\tAdd source dependencies\n\n#\tAdd graphic dependencies\n\n#\tAdd bib dependencies\n\n#\n\n#\tCreate cookies for various suffixes that may represent files that\n\n#\tneed to be read by LaTeX in order for it to function properly.\n\n#\n\n#\tNote that if some of the dependencies are discovered because they turn\n\n#\tup missing in the log file, we really need the .d file to be reloaded.\n\n#\tAdding a sleep command helps with this.  Otherwise make is extremely\n\n#\tnondeterministic, sometimes working, sometimes not.\n\n#\n\n#\tUsually we can force this by simply removing the generated pdf file and\n\n#\tnot creating a .1st.make file..\n\n#\n",
        "Line" : 2600,
        "CharPositionInLine" : 0
      },
      "162" : {
        "Text" : "# This is a cookie that is updated if the flattened aux file has changed in a\n\n# way that affects the bibliography generation.\n",
        "Line" : 2663,
        "CharPositionInLine" : 0
      },
      "163" : {
        "Text" : "# Build a dependency file for .gpi files.  These often plot data files that\n\n# also reside in the directory, so if a data file changes, it's nice to know\n\n# about it.  This also handles loaded .gpi files, whose filename should have\n\n# _include_. in it.\n",
        "Line" : 2671,
        "CharPositionInLine" : 0
      },
      "164" : {
        "Text" : "# Store the paper size for this document -- note that if beamer is used we set\n\n# it to the special BEAMER paper size.  We only do this, however, if the\n\n# special comment exists, in which case we enlarge the output with psnup.\n\n#\n\n#\tThe paper size is extracted from a documentclass attribute.\n",
        "Line" : 2679,
        "CharPositionInLine" : 0
      },
      "165" : {
        "Text" : "# Store embedding instructions for this document using a special comment\n",
        "Line" : 2712,
        "CharPositionInLine" : 0
      },
      "166" : {
        "Text" : "#\n\n# HELPFUL PHONY TARGETS\n\n#\n",
        "Line" : 2718,
        "CharPositionInLine" : 0
      },
      "167" : {
        "Text" : "# even want to keep pstex functionality, so my motivation is not terribly high\n\n# for doing it right.\n",
        "Line" : 2854,
        "CharPositionInLine" : 0
      },
      "168" : {
        "Text" : "#\n\n# HELP TARGETS\n\n#\n",
        "Line" : 2873,
        "CharPositionInLine" : 0
      },
      "169" : {
        "Text" : "#\n\n# HELP TEXT\n\n#\n",
        "Line" : 2887,
        "CharPositionInLine" : 0
      },
      "170" : {
        "Text" : "# $(fileinfo) Version $(version)\n\n#\n\n# by $(author)\n\n#\n\n# Generates a number of possible output files from a LaTeX document and its\n\n# various dependencies.  Handles .bib files, \\include and \\input, and .eps\n\n# graphics.  All dependencies are handled automatically by running LaTeX over\n\n# the source.\n\n#\n\n# USAGE:\n\n#\n\n#    make [GRAY=1] [VERBOSE=1] [SHELL_DEBUG=1] <target(s)>\n\n#\n\n# STANDARD OPTIONS:\n\n#    GRAY:\n\n#        Setting this variable forces all recompiled graphics to be grayscale.\n\n#        It is useful when creating a document for printing.  The default is\n\n#        to allow colors.  Note that it only changes graphics that need to be\n\n#        rebuilt!  It is usually a good idea to do a 'make clean' first.\n\n#\n\n#    VERBOSE:\n\n#        This turns off all @ prefixes for commands invoked by make.  Thus,\n\n#        you get to see all of the gory details of what is going on.\n\n#\n\n#    SHELL_DEBUG:\n\n#        This enables the -x option for sh, meaning that everything it does is\n\n#        echoed to stderr.  This is particularly useful for debugging\n\n#        what is going on in $$(shell ...) invocations.  One of my favorite\n\n#        debugging tricks is to do this:\n\n#\n\n#        make -d SHELL_DEBUG=1 VERBOSE=1 2>&1 | less\n\n#\n\n# STANDARD AUXILIARY FILES:\n\n#\n\n#      Makefile.ini\n\n#\n\n#          This file can contain variable declarations that override various\n\n#          aspects of the makefile.  For example, one might specify\n\n#\n\n#          neverclean := *.pdf *.ps\n\n#          onlysources.tex := main.tex\n\n#          LATEX_COLOR_WARNING := 'bold red uline'\n\n#\n\n#          And this would override the neverclean setting to ensure that pdf\n\n#          and ps files always remain behind, set the makefile to treat all\n\n#          .tex files that are not \"main.tex\" as includes (and therefore not\n\n#          default targets).  It also changes the LaTeX warning output to be\n\n#          red, bold, and underlined.\n\n#\n\n#          There are numerous variables in this file that can be overridden in\n\n#          this way.  Search for '?=' to find them all.\n\n#\n\n#          Also, you can put arbitrary targets into it if, for example, you\n\n#          want your source built from something else, e.g.:\n\n#\n\n#          generated.tex: generating_script.weird_lang depA depB\n\n#          \t./generating_script.weird_lang > $$@\n\n#\n\n#          Note that if you are not careful, you can override the default\n\n#          target (what happens when you type \"make\" without arguments), so if\n\n#          you do use Makefile.ini, you probably want to start it with\n\n#          something like the following line:\n\n#\n\n#          default: all\n\n#\n\n#          Since the first target in any makefile is automatically the default,\n\n#          and the makefile already has a sensible \"all\" target, this will do\n\n#          what you want.\n\n#\n\n#          The Makefile.ini is imported before *anything else* is done, so go\n\n#          wild with your ideas for changes to this makefile in there.  It\n\n#          makes it easy to test them before submitting patches.\n\n#\n\n# STANDARD ENVIRONMENT VARIABLES:\n\n#\n\n#      LATEX_COLOR_WARNING\t\t'$(LATEX_COLOR_WARNING)'\n\n#      LATEX_COLOR_ERROR\t\t'$(LATEX_COLOR_ERROR)'\n\n#      LATEX_COLOR_UNDERFULL\t\t'$(LATEX_COLOR_UNDERFULL)'\n\n#      LATEX_COLOR_OVERFULL\t\t'$(LATEX_COLOR_OVERFULL)'\n\n#      LATEX_COLOR_PAGES\t\t'$(LATEX_COLOR_PAGES)'\n\n#      LATEX_COLOR_BUILD\t\t'$(LATEX_COLOR_BUILD)'\n\n#      LATEX_COLOR_GRAPHIC\t\t'$(LATEX_COLOR_GRAPHIC)'\n\n#      LATEX_COLOR_DEP\t\t\t'$(LATEX_COLOR_DEP)'\n\n#      LATEX_COLOR_SUCCESS\t\t'$(LATEX_COLOR_SUCCESS)'\n\n#      LATEX_COLOR_FAILURE\t\t'$(LATEX_COLOR_FAILURE)'\n\n#\n\n#   These may be redefined in your environment to be any of the following:\n\n#\n\n#      black\n\n#      red\n\n#      green\n\n#      yellow\n\n#      blue\n\n#      magenta\n\n#      cyan\n\n#      white\n\n#\n\n#   Bold or underline may be used, as well, either alone or in combination\n\n#   with colors:\n\n#\n\n#      bold\n\n#      uline\n\n#\n\n#   Order is not important.  You may want, for example, to specify:\n\n#\n\n#   export LATEX_COLOR_SUCCESS='bold blue uline'\n\n#\n\n#   in your .bashrc file.  I don't know why, but you may want to.\n\n#\n\n# STANDARD TARGETS:\n\n#\n\n#    all:\n\n#        Make all possible documents in this directory.  The documents are\n\n#        determined by scanning for .tex and .tex.sh (described in more detail\n\n#        later) and omitting any file that ends in ._include_.tex or\n\n#        ._nobuild_.tex.  The output is a set of .pdf files.\n\n#\n\n#        If you wish to omit files without naming them with the special\n\n#        underscore names, set the following near the top of the Makefile,\n\n#        or (this is recommended) within a Makefile.ini in the same directory:\n\n#\n\n#        \tincludes.tex := file1.tex file2.tex\n\n#\n\n#        This will cause the files listed to be considered as include files.\n\n#\n\n#        If you have only few source files, you can set\n\n#\n\n#        \tonlysources.tex := main.tex\n\n#\n\n#        This will cause only the source files listed to be considered in\n\n#        dependency detection.  All other .tex files will be considered as\n\n#        include files.  Note that these options work for *any* source type,\n\n#        so you could do something similar with includes.gpi, for example.\n\n#        Note that this works for *any valid source* target.  All of the\n\n#        onlysources.* variables are commented out in the shipping version of\n\n#        this file, so it does the right thing when they simply don't exist.\n\n#        The comments are purely documentation.  If you know, for example, that\n\n#        file.mycoolformat is supported by this Makefile, but don't see the\n\n#        \"onlysources.mycoolformat\" declared in the comments, that doesn't mean\n\n#        you can't use it.  Go ahead and set \"onlysources.mycoolformat\" and it\n\n#        should do the right thing.\n\n#\n\n#    show:\n\n#        Builds and displays all documents in this directory.  It uses the\n\n#        environment-overridable value of VIEW_PDF (currently $(VIEW_PDF)) to\n\n#        do its work.\n\n#\n\n#    all-graphics:\n\n#        Make all of the graphics in this directory.\n\n#\n\n#    all-pstex (only for BUILD_STRATEGY=latex):\n\n#        Build all fig files into pstex and pstex_t files.  Gray DOES NOT WORK.\n\n#\n\n#    all-gray-pstex (only for BUILD_STRATEGY=latex):\n\n#    \t Build all fig files into grayscale pstex and pstex_t files.\n\n#\n\n#    all-dot2tex:\n\n#    \t Build all dot files into tex files.\n\n#\n\n#    show-graphics:\n\n#        Builds and displays all graphics in this directory.  Uses the\n\n#        environment-overridable value of VIEW_GRAPHICS (currently\n\n#        $(VIEW_GRAPHICS)) to do its work.\n\n#\n\n#    clean:\n\n#        Remove ALL generated files, leaving only source intact.\n\n#        This will *always* skip files mentioned in the \"neverclean\" variable,\n\n#        either in this file or specified in Makefile.ini:\n\n#\n\n#        \tneverclean := *.pdf *.ps\n\n#\n\n#       The neverclean variable works on all \"clean\" targets below, as well.\n\n#\n\n#    clean-graphics:\n\n#        Remove all generated graphics files.\n\n#\n\n#    clean-backups:\n\n#        Remove all backup files: $(backup_patterns)\n\n#        (XFig and other editors have a nasty habit of leaving them around)\n\n#        Also removes Makefile-generated .temp files\n\n#\n\n#    clean-tex:\n\n#        Remove all files generated from LaTeX invocations except dependency\n\n#        information.  Leaves graphics alone.\n\n#\n\n#    clean-deps:\n\n#        Removes all auto-generated dependency information.\n\n#\n\n#    clean-auxiliary:\n\n#        Removes extra files created by various targets (like the dependency\n\n#        graph output).\n\n#\n\n#    clean-nographics:\n\n#        Cleans everything *except* the graphics files.\n\n#\n\n#    help:\n\n#        This help text.\n\n#\n\n#    version:\n\n#        Version information about this LaTeX makefile.\n\n#\n\n# DEBUG TARGETS:\n\n#\n\n#    _all_programs:\n\n#        A list of the programs used by this makefile.\n\n#\n\n#    _check_programs:\n\n#        Checks your system for the needed software and reports what it finds.\n\n#\n\n#    _check_gpi_files:\n\n#        Checks the .gpi files in the current directory for common errors, such\n\n#        as specification of the terminal or output file inside of the gpi file\n\n#        itself.\n\n#\n\n#    _dependency_graph:\n\n#        Outputs a .dot file to stdout that represents a graph of LaTeX\n\n#        dependencies.  To see it, use the _show_dependency_graph target or\n\n#        direct the output to a file, run dot on it, and view the output, e.g.:\n\n#\n\n#        make _dependency_graph > graph.dot\n\n#        dot -T ps -o graph.eps graph.dot\n\n#        gv graph.eps\n\n#\n\n#    _show_dependency_graph:\n\n#        Makes viewing the graph simple: extracts, builds and displays the\n\n#        dependency graph given in the _dependency_graph target using the value\n\n#        of the environment-overridable VIEW_POSTSCRIPT variable (currently set\n\n#        to $(VIEW_POSTSCRIPT)).  The postscript viewer is used because it\n\n#        makes it easier to zoom in on the graph, a critical ability for\n\n#        something so dense and mysterious.\n\n#\n\n#    _all_sources:\n\n#        List all .tex files in this directory.\n\n#\n\n#    _sources:\n\n#        Print out a list of all compilable sources in this directory.  This is\n\n#        useful for determining what make thinks it will be using as the\n\n#        primary source for 'make all'.\n\n#\n\n#    _scripts:\n\n#        Print out a list of scripts that make knows can be used to generate\n\n#        .tex files (described later).\n\n#\n\n#    _all_stems:\n\n#        Print a list of stems.  These represent bare targets that can be\n\n#        executed.  Listing <stem> as a bare target will produce <stem>.pdf.\n\n#\n\n#    _includes:\n\n#        A list of .d files that would be included in this run if _includes\n\n#        weren't specified.  This target may be used alone or in conjunction\n\n#        with other targets.\n\n#\n\n#    _graphic_outputs:\n\n#        A list of all generated .eps files\n\n#\n\n#    _env:\n\n#        A list of environment variables and their values.  If supported by\n\n#        your version of make, also a list of variables known to make.\n\n#\n\n# FILE TARGETS:\n\n#\n\n#    %, %.pdf:\n\n#        Build a PDF file from the corresponding %.tex file.\n\n#\n\n#        If BUILD_STRATEGY=pdflatex, then this builds the pdf directly.\n\n#        Otherwise, it uses this old-school but effective approach:\n\n#\n\n#            latex -> dvips -> ps2pdf\n\n#\n\n#        The BUILD_STRATEGY can be overridden in Makefile.ini in the same\n\n#        directory.  The default is pdflatex.\n\n#\n\n#        Reasons for using latex -> dvips include the \"psfrag\" package, and the\n\n#        generation of postscript instead of PDF.  Arguments for using pdflatex\n\n#        include \"new and shiny\" and \"better supported.\"  I can't argue with\n\n#        either of those, and supporting them both didn't turn out to be that\n\n#        difficult, so there you have it.  Choices.\n\n#\n\n#    %._show:\n\n#        A phony target that builds the pdf file and then displays it using the\n\n#        environment-overridable value of VIEW_PDF ($(VIEW_PDF)).\n\n#\n\n#    %._graphics:\n\n#        A phony target that generates all graphics on which %.pdf (or %.dvi)\n\n#        depends.\n\n#\n\n#    %.ps (only for BUILD_STRATEGY=latex):\n\n#        Build a Postscript file from the corresponding %.tex file.\n\n#        This is done using dvips.  Paper size is automatically\n\n#        extracted from the declaration\n\n#\n\n#        \\documentclass[<something>paper]\n\n#\n\n#        or it is the system default.\n\n#\n\n#        If using beamer (an excellent presentation class), the paper\n\n#        size is ignored.  More on this later.\n\n#\n\n#    %.dvi (only for BUILD_STRATEGY=latex):\n\n#        Build the DVI file from the corresponding %.tex file.\n\n#\n\n#    %.ind:\n\n#        Build the index for this %.tex file.\n\n#\n\n#    %.gls:\n\n#        Build the nomenclature glossary for this %.tex file.\n\n#\n\n#    %.nls:\n\n#        Build the (newer) nomenclature file for this %.tex file.\n\n#\n\n#    %.eps:\n\n#        Build an eps file from one of the following file types:\n\n#\n\n#       .dot    : graphviz\n\n#       .gpi    : gnuplot\n\n#       .fig    : xfig\n\n#       .xvg    : xmgrace\n\n#       .svg    : scalable vector graphics (goes through inkscape)\n\n#       .png    : png (goes through NetPBM)\n\n#       .jpg\t: jpeg (goes through ImageMagick)\n\n#       .eps.gz : gzipped eps\n\n#\n\n#       The behavior of this makefile with each type is described in\n\n#       its own section below.\n\n#\n\n#    %.pstex{,_t} (only for BUILD_STRATEGY=latex):\n\n#       Build a .pstex_t file from a .fig file.\n\n#\n\n# FEATURES:\n\n#\n\n#    Optional Binary Directory:\n\n#        If you create the _out_ directory in the same place as the makefile,\n\n#        it will automatically be used as a dumping ground for .pdf (or .dvi,\n\n#        .ps, and .pdf) output files.\n\n#\n\n#        Alternatively, you can set the BINARY_TARGET_DIR variable, either as a\n\n#        make argument or in Makefile.ini, to point to your directory of\n\n#        choice.  Note that no pathname wildcard expansion is done in the\n\n#        makefile, so make sure that the path is complete before going in\n\n#        there.  E.g., if you want to specify something in your home directory,\n\n#        use $$HOME/ instead of ~/ so that the shell expands it before it gets\n\n#        to the makefile.\n\n#\n\n#    External Program Dependencies:\n\n#        Every external program used by the makefile is represented by an\n\n#        ALLCAPS variable at the top of this file.  This should allow you to\n\n#        make judgments about whether your system supports the use of this\n\n#        makefile.  The list is available in the ALL_PROGRAMS variable and,\n\n#        provided that you are using GNU make 3.80 or later (or you haven't\n\n#        renamed this file to something weird like \"mylatexmakefile\" and like\n\n#        invoking it with make -f) can be viewed using\n\n#\n\n#        make _all_programs\n\n#\n\n#        Additionally, the availability of these programs can be checked\n\n#        automatically for you by running\n\n#\n\n#        make _check_programs\n\n#\n\n#        The programs are categorized according to how important they are and\n\n#        what function they perform to help you decide which ones you really\n\n#        need.\n\n#\n\n#    Colorized Output:\n\n#        The output of commands is colorized to highlight things that are often\n\n#        important to developers.  This includes {underfull,overfull}\n\n#        {h,v}boxes, general LaTeX Errors, each stage of document building, and\n\n#        the number of pages in the final document.  The colors are obtained\n\n#        using 'tput', so colorization should work pretty well on any terminal.\n\n#\n\n#        The colors can be customized very simply by setting any of the\n\n#        LATEX_COLOR_<CONTEXT> variables in your environment (see above).\n\n#\n\n#    Predecessors to TeX Files:\n\n#        Given a target <target>, if no <target>.tex file exists but a\n\n#        corresponding script or predecessor file exists, then appropriate\n\n#        action will be taken to generate the tex file.\n\n#\n\n#        Currently supported script or predecessor languages are:\n\n#\n\n#        sh:     %.tex.sh\n\n#        perl:   %.tex.pl\n\n#        python: %.tex.py\n\n#\n\n#           Calls the script using the appropriate interpreter, assuming that\n\n#           its output is a .tex file.\n\n#\n\n#           The script is called thus:\n\n#\n\n#              <interpreter> <script file name> <target tex file>\n\n#\n\n#           and therefore sees exactly one parameter: the name of the .tex\n\n#           file that it is to create.\n\n#\n\n#           Why does this feature exist?  I ran into this while working on\n\n#           my paper dissertation.  I wrote a huge bash script that used a\n\n#           lot of sed to bring together existing papers in LaTeX.  It\n\n#           would have been nice had I had something like this to make my\n\n#           life easier, since as it stands I have to run the script and\n\n#           then build the document with make.  This feature provides hooks\n\n#           for complicated stuff that you may want to do, but that I have\n\n#           not considered.  It should work fine with included dependencies,\n\n#           too.\n\n#\n\n#           Scripts are run every time make is invoked.  Some trickery is\n\n#           employed to make sure that multiple restarts of make don't cause\n\n#           them to be run again.\n\n#\n\n#        reST: %.rst\n\n#\n\n#           Runs the reST to LaTeX converter to generate a .tex file\n\n#           If it finds a file names _rststyle_._include_.tex, uses it as\n\n#           the \"stylesheet\" option to rst2latex.\n\n#\n\n#           Note that this does not track sub-dependencies in rst files.  It\n\n#           assumes that the top-level rst file will change if you want a\n\n#           rebuild.\n\n#\n\n#    Dependencies:\n\n#\n\n#        In general, dependencies are extracted directly from LaTeX output on\n\n#        your document.  This includes\n\n#\n\n#        *    Bibliography information\n\n#        *    \\include or \\input files (honoring \\includeonly, too)\n\n#        *    Graphics files inserted by the graphicx package\n\n#\n\n#        Where possible, all of these are built correctly and automatically.\n\n#        In the case of graphics files, these are generated from the following\n\n#        file types:\n\n#\n\n#        GraphViz:      .dot\n\n#        GNUPlot:       .gpi\n\n#        XFig:          .fig\n\n#        XMgrace:       .xvg\n\n#        SVG:           .svg\n\n#        PNG:           .png\n\n#        JPEG:          .jpg\n\n#        GZipped EPS:   .eps.gz\n\n#\n\n#        If the file exists as a .eps already, it is merely used (and will not\n\n#        be deleted by 'clean'!).\n\n#\n\n#        LaTeX and BibTeX are invoked correctly and the \"Rerun to get\n\n#        cross-references right\" warning is heeded a reasonable number of\n\n#        times.  In my experience this is enough for even the most troublesome\n\n#        documents, but it can be easily changed (if LaTeX has to be run after\n\n#        BibTeX more than three times, it is likely that something is moving\n\n#        back and forth between pages, and no amount of LaTeXing will fix\n\n#        that).\n\n#\n\n#        \\includeonly is honored by this system, so files that are not\n\n#        specified there will not trigger a rebuild when changed.\n\n#\n\n#    Beamer:\n\n#        A special TeX source comment is recognized by this makefile (only when\n\n#        BUILD_STRATEGY=latex, since this invokes psnup):\n\n#\n\n#        %%[[:space:]]*BEAMER[[:space:]]*LARGE\n\n#\n\n#        The presence of this comment forces the output of dvips through psnup\n\n#        to enlarge beamer slides to take up an entire letter-sized page.  This\n\n#        is particularly useful when printing transparencies or paper versions\n\n#        of the slides.  For some reason landscape orientation doesn't appear\n\n#        to work, though.\n\n#\n\n#        If you want to put multiple slides on a page, use this option and then\n\n#        print using mpage, a2ps, or psnup to consolidate slides.  My personal\n\n#        favorite is a2ps, but your mileage may vary.\n\n#\n\n#        When beamer is the document class, dvips does NOT receive a paper size\n\n#        command line attribute, since beamer does special things with sizes.\n\n#\n\n#    GNUPlot Graphics:\n\n#        When creating a .gpi file, DO NOT INCLUDE the \"set terminal\" or \"set\n\n#        output\" commands!  The makefile will include terminal information for\n\n#        you.  Besides being unnecessary and potentially harmful, including the\n\n#        terminal definition in the .gpi file makes it harder for you, the one\n\n#        writing the document, to preview your graphics, e.g., with\n\n#\n\n#           gnuplot -persist myfile.gpi\n\n#\n\n#        so don't do specify a terminal or an output file in your .gpi files.\n\n#\n\n#        When building a gpi file into an eps file, there are several features\n\n#        available to the document designer:\n\n#\n\n#        Global Header:\n\n#            The makefile searches for the files in the variable GNUPLOT_GLOBAL\n\n#            in order:\n\n#\n\n#            ($(GNUPLOT_GLOBAL))\n\n#\n\n#            Only the first found is used.  All .gpi files in the directory are\n\n#            treated as though the contents of GNUPLOT_GLOBAL were directly\n\n#            included at the top of the file.\n\n#\n\n#            NOTE: This includes special comments! (see below)\n\n#\n\n#        Font Size:\n\n#            A special comment in a .gpi file (or a globally included file) of\n\n#            the form\n\n#\n\n#            ## FONTSIZE=<number>\n\n#\n\n#            will change the font size of the GPI output.  If font size is\n\n#            specified in both the global file and the GPI file, the\n\n#            specification in the individual GPI file is used.\n\n#\n\n#        Grayscale Output:\n\n#            GNUplot files also support a special comment to force them to be\n\n#            output in grayscale *no matter what*:\n\n#\n\n#            ## GRAY\n\n#\n\n#            This is not generally advisable, since you can always create a\n\n#            grayscale document using the forms mentioned above.  But, if your\n\n#            plot simply must be grayscale even in a document that allows\n\n#            colors, this is how you do it.\n\n#\n\n#    XFig Graphics:\n\n#            No special handling is done with XFig, except when a global\n\n#            grayscale method is used, e.g.\n\n#\n\n#                make GRAY=1 document\n\n#\n\n#            In these cases the .eps files is created using the -N switch to\n\n#            fig2dev to turn off color output.  (Only works with eps, not pstex\n\n#            output)\n\n#\n\n#    GraphVis Graphics:\n\n#            Color settings are simply ignored here.  The 'dot' program is used\n\n#            to transform a .dot file into a .eps file.\n\n#\n\n#            If you want, you can use the dot2tex program to convert dot files\n\n#            to tex graphics.  The default is to just call dot2tex with no\n\n#            arguments, but you can change the DOT2TEX definition to include\n\n#            options as needed (in your Makefile.ini).\n\n#\n\n#            Note that, as with pstex, the makefile cannot use latex's own\n\n#            output to discover all missing dot_t (output) files, since anytime\n\n#            TeX includes TeX, it has to bail when it can't find the include\n\n#            file.  It can therefore only stop on the first missing file it\n\n#            discovers, and we can't get a large list of them out easily.\n\n#\n\n#            So, the makefile errors out if it's missing an included dot_t\n\n#            file, then prompts the user to run this command manually:\n\n#\n\n#                make all-dot2tex\n\n#\n\n#    GZipped EPS Graphics:\n\n#\n\n#        A .eps.gz file is sometimes a nice thing to have.  EPS files can get\n\n#        very large, especially when created from bitmaps (don't do this if you\n\n#        don't have to).  This makefile will unzip them (not in place) to\n\n#        create the appropriate EPS file.\n\n#\n",
        "Line" : 2892,
        "CharPositionInLine" : 0
      },
      "171" : {
        "Text" : "#\n\n# DEPENDENCY CHART:\n\n#\n\n#digraph \"g\" {\n\n#    rankdir=TB\n\n#    size=\"9,9\"\n\n#    edge [fontsize=12 weight=10]\n\n#    node [shape=box fontsize=14 style=rounded]\n\n#\n\n#    eps [\n\n#        shape=Mrecord\n\n#        label=\"{{<gpi> GNUplot|<epsgz> GZip|<dot> Dot|<fig> XFig}|<eps> eps}\"\n\n#        ]\n\n#    pstex [label=\"%.pstex\"]\n\n#    pstex_t [label=\"%.pstex_t\"]\n\n#    tex_outputs [shape=point]\n\n#    extra_tex_files [shape=point]\n\n#    gpi_data [label=\"<data>\"]\n\n#    gpi_includes [label=\"_include_.gpi\"]\n\n#    aux [label=\"%.aux\"]\n\n#    fls [label=\"%.fls\"]\n\n#    idx [label=\"%.idx\"]\n\n#    glo [label=\"%.glo\"]\n\n#    ind [label=\"%.ind\"]\n\n#    log [label=\"%.log\"]\n\n#    tex_sh [label=\"%.tex.sh\"]\n\n#    rst [label=\"%.rst\"]\n\n#    tex [\n\n#        shape=record\n\n#        label=\"<tex> %.tex|<include> _include_.tex\"\n\n#        ]\n\n#    include_aux [label=\"_include_.aux\"]\n\n#    file_bib [label=\".bib\"]\n\n#    bbl [label=\"%.bbl\"]\n\n#    dvi [label=\"%.dvi\"]\n\n#    ps [label=\"%.ps\"]\n\n#    pdf [label=\"%.pdf\"]\n\n#    fig [label=\".fig\"]\n\n#    dot [label=\".dot\"]\n\n#    gpi [label=\".gpi\"]\n\n#    eps_gz [label=\".eps.gz\"]\n\n#\n\n#    gpi_files [shape=point]\n\n#\n\n#    rst -> tex:tex [label=\"reST\"]\n\n#    tex_sh -> tex:tex [label=\"sh\"]\n\n#    tex_pl -> tex:tex [label=\"perl\"]\n\n#    tex_py -> tex:tex [label=\"python\"]\n\n#    tex -> tex_outputs [label=\"latex\"]\n\n#    tex_outputs -> dvi\n\n#    tex_outputs -> aux\n\n#    tex_outputs -> log\n\n#    tex_outputs -> fls\n\n#    tex_outputs -> idx\n\n#    tex_outputs -> include_aux\n\n#    aux -> bbl [label=\"bibtex\"]\n\n#    file_bib -> bbl [label=\"bibtex\"]\n\n#    idx -> ind [label=\"makeindex\"]\n\n#    glo -> gls [label=\"makeindex\"]\n\n#    nlo -> nls [label=\"makeindex\"]\n\n#    gls -> extra_tex_files\n\n#    nls -> extra_tex_files\n\n#    ind -> extra_tex_files\n\n#    bbl -> extra_tex_files\n\n#    eps -> extra_tex_files\n\n#    extra_tex_files -> dvi [label=\"latex\"]\n\n#    gpi_files -> eps:gpi [label=\"gnuplot\"]\n\n#    gpi -> gpi_files\n\n#    gpi_data -> gpi_files\n\n#    gpi_includes -> gpi_files\n\n#    eps_gz -> eps:epsgz [label=\"gunzip\"]\n\n#    fig -> eps:fig [label=\"fig2dev\"]\n\n#    fig -> pstex [label=\"fig2dev\"]\n\n#    fig -> pstex_t [label=\"fig2dev\"]\n\n#    pstex -> pstex_t [label=\"fig2dev\"]\n\n#    dot -> eps:dot [label=\"dot\"]\n\n#    dvi -> ps [label=\"dvips\"]\n\n#    include_aux -> bbl [label=\"bibtex\"]\n\n#    ps -> pdf [label=\"ps2pdf\"]\n\n#\n\n#    edge [ color=blue label=\"\" style=dotted weight=1 fontcolor=blue]\n\n#    fls -> tex:include [label=\"INPUT: *.tex\"]\n\n#    fls -> file_bib [label=\"INPUT: *.aux\"]\n\n#    aux -> file_bib [label=\"\\\\bibdata{...}\"]\n\n#    include_aux -> file_bib [label=\"\\\\bibdata{...}\"]\n\n#    log -> gpi [label=\"Graphic file\"]\n\n#    log -> fig [label=\"Graphic file\"]\n\n#    log -> eps_gz [label=\"Graphic file\"]\n\n#    log -> dot [label=\"Graphic file\"]\n\n#    log -> idx [label=\"No file *.ind\"]\n\n#    log -> glo [label=\"No file *.gls\"]\n\n#    log -> nlo [label=\"No file *.nls\"]\n\n#    gpi -> gpi_data [label=\"plot '...'\"]\n\n#    gpi -> gpi_includes [label=\"load '...'\"]\n\n#    tex:tex -> ps [label=\"paper\"]\n\n#    tex:tex -> pdf [label=\"embedding\"]\n\n#}\n",
        "Line" : 3451,
        "CharPositionInLine" : 0
      },
      "172" : {
        "Text" : "#\n\n# DEPENDENCY CHART SCRIPT\n\n#\n\n# $(call output_dependency_graph,[<output file>])\n",
        "Line" : 3549,
        "CharPositionInLine" : 0
      },
      "173" : {
        "Text" : "# vim: noet sts=0 sw=8 ts=8\n",
        "Line" : 3565,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 174,
      "Errorlog" : "line 1360:20 token recognition error at: '\\1'\nline 1476:9 token recognition error at: '\\1'\nline 1551:39 token recognition error at: '\\1'\nline 1552:42 token recognition error at: '\\1'\nline 1558:24 token recognition error at: '\\1'\nline 1583:27 token recognition error at: '\\1'\nline 1641:43 token recognition error at: '\"]\\)\\{0,1\\}[^,]*/\\1'\nline 1649:81 token recognition error at: '\\1'\nline 1688:9 token recognition error at: '\\1'\nline 1714:75 token recognition error at: '\\1'\nline 1753:25 token recognition error at: '\\1'\nline 1797:11 token recognition error at: '\\1'\nline 1815:36 token recognition error at: '\\1'\nline 1871:76 token recognition error at: '\\2'\nline 1871:82 token recognition error at: '\\1'\nline 1874:38 token recognition error at: '\\1'\nline 1878:44 token recognition error at: '\\1'\nline 1886:43 token recognition error at: '\\1'\nline 1890:41 token recognition error at: '\\1'\nline 1906:30 token recognition error at: '\\1'\nline 1993:45 token recognition error at: '\\1'\nline 2694:56 token recognition error at: '\\1'\nline 2694:60 token recognition error at: '\\2'\nline 2694:64 token recognition error at: '\\3'\nline 2695:43 token recognition error at: '\\1'\nline 2695:47 token recognition error at: '\\2'\nline 2695:51 token recognition error at: '\\3'\nline 2747:63 token recognition error at: '\\1'\n"
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 1,
    "ANT" : 1
  },
  "ElapsedTime" : 1385
}