{
  "Repository" : "2467882",
  "Revision" : "HEAD",
  "ObjectId" : "1d37186fe2361f80c821e334cc61f41e2f4eeb72",
  "CommitTime" : "2019-04-16T16:29:52Z",
  "Files" : {
    ".indent.pro" : {
      "ObjectId" : "492ecf1c7df0ecff0f1f33bda486466c08f42b76",
      "LastModified" : "2000-07-24T22:36:06Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "Makefile" : {
      "ObjectId" : "6fedcffba1beb52122095d4e304f43a673de66e9",
      "LastModified" : "2018-12-30T15:32:00Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# *DOCUMENTATION*\n\n# To see a list of typical targets execute \"make help\"\n\n# More info can be located in ./README\n\n# Comments in this file are targeted only to the developer, do not\n\n# expect to learn how to build the kernel reading this file.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Do not print \"Entering directory ...\"\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We are using a recursive build, so we need to do a little thinking\n\n# to get the ordering right.\n\n#\n\n# Most importantly: sub-Makefiles should only ever modify files in\n\n# their own directory. If in some directory we have a dependency on\n\n# a file in another dir (which doesn't happen often, but it's often\n\n# unavoidable when linking the built-in.o targets which finally\n\n# turn into busybox), we will call a sub make in that other dir, and\n\n# after that we are sure that everything which is in that other dir\n\n# is now up to date.\n\n#\n\n# The only cases where we need to modify files which have global\n\n# effects are thus separated out and done before the recursive\n\n# descending is started. They are now explicitly listed as the\n\n# prepare rule.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# To put more focus on warnings, be less verbose as default\n\n# Use 'make V=1' to see the full commands\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Call sparse as part of compilation of C files\n\n# Use 'make C=1' to enable sparse checking\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Use make M=dir to specify directory of external module to build\n\n# Old syntax make ... SUBDIRS=$PWD is still supported\n\n# Setting the environment variable KBUILD_EXTMOD take precedence\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# kbuild supports saving output files in a separate directory.\n\n# To locate output files in a separate directory two syntaxes are supported.\n\n# In both cases the working directory must be the root of the kernel src.\n\n# 1) O=\n\n# Use \"make O=dir/to/store/output/files/\"\n\n#\n\n# 2) Set KBUILD_OUTPUT\n\n# Set the environment variable KBUILD_OUTPUT to point to the directory\n\n# where the output files shall be placed.\n\n# export KBUILD_OUTPUT=dir/to/store/output/files/\n\n# make\n\n#\n\n# The O= assignment takes precedence over the KBUILD_OUTPUT environment\n\n# variable.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# KBUILD_SRC is set on invocation of make in OBJ directory\n\n# KBUILD_SRC is not intended to be used by the regular user (for now)\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# OK, Make called in directory where kernel src resides\n\n# Do we want to locate output files in a separate directory?\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# That's our default target when none is given on the command line\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Invoke a second make in the output directory, passing relevant variables\n\n# check that the output directory actually exists\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Leave processing to above invocation of make\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ifneq ($(KBUILD_OUTPUT),)\n\n# ifeq ($(KBUILD_SRC),)\n",
        "Line" : 118,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# We process the rest of the Makefile if this is the final invocation of make\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# If building an external module we do not care about the all: rule\n\n# but instead _all depend on modules\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# FIXME - TOPDIR is obsolete, use srctree/objtree\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Cross compiling and selecting different set of gcc/bin-utils\n\n# ---------------------------------------------------------------------------\n\n#\n\n# When performing cross compilation for other architectures ARCH shall be set\n\n# to the target architecture. (See arch/* for the possibilities).\n\n# ARCH can be set during invocation of make:\n\n# make ARCH=ia64\n\n# Another way is to have ARCH set in the environment.\n\n# The default ARCH is the host where make is executed.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# CROSS_COMPILE specify the prefix used for all executables used\n\n# during compilation. Only gcc and related bin-utils executables\n\n# are prefixed with $(CROSS_COMPILE).\n\n# CROSS_COMPILE can be set on the command line\n\n# make CROSS_COMPILE=ia64-linux-\n\n# Alternatively CROSS_COMPILE can be set in the environment.\n\n# Default value for CROSS_COMPILE is not to prefix executables\n\n# Note: Some architectures assign CROSS_COMPILE in their arch/*/Makefile\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# bbox: we may have CONFIG_CROSS_COMPILER_PREFIX in .config,\n\n# and it has not been included yet... thus using an awkward syntax.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# SUBARCH tells the usermode build what the underlying arch is.  That is set\n\n# first, and if a usermode build is happening, the \"ARCH=um\" on the command\n\n# line overrides the setting of ARCH below.  If a native build is happening,\n\n# then ARCH is assigned, getting whatever value it gets normally, and\n\n# SUBARCH is subsequently ignored.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Architecture as present in compile.h\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# SHELL used by kbuild\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# \tDecide whether to build built-in, modular, or both.\n\n#\tNormally, just do built-in.\n",
        "Line" : 200,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#\tIf we have only \"make modules\", don't compile built-in objects.\n\n#\tWhen we're building modules with modversions, we need to consider\n\n#\tthe built-in objects during the descend as well, in order to\n\n#\tmake sure the checksums are uptodate before we record them.\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\tIf we have \"make <whatever> modules\", compile modules\n\n#\tin addition to whatever we do anyway.\n\n#\tJust \"make\" or \"make all\" shall build modules as well\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Beautify output\n\n# ---------------------------------------------------------------------------\n\n#\n\n# Normally, we echo the whole command before executing it. By making\n\n# that echo $($(quiet)$(cmd)), we now have the possibility to set\n\n# $(quiet) to choose other forms of output instead, e.g.\n\n#\n\n#         quiet_cmd_cc_o_c = Compiling $(RELDIR)/$@\n\n#         cmd_cc_o_c       = $(CC) $(c_flags) -c -o $@ $<\n\n#\n\n# If $(quiet) is empty, the whole command will be printed.\n\n# If it is set to \"quiet_\", only the short version will be printed.\n\n# If it is set to \"silent_\", nothing wil be printed at all, since\n\n# the variable $(silent_cmd_cc_o_c) doesn't exist.\n\n#\n\n# A simple variant is to prefix commands with $(Q) - that's useful\n\n# for commands that shall be hidden in non-verbose mode.\n\n#\n\n#\t$(Q)ln $@ :<\n\n#\n\n# If KBUILD_VERBOSE equals 0 then the above command will be hidden.\n\n# If KBUILD_VERBOSE equals 1 then the above command is displayed.\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# If the user is running make -s (silent mode), suppress echoing of\n\n# commands\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Look for make include files relative to root of kernel src\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We need some generic definitions\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# For maximum performance (+ possibly random breakage, uncomment\n\n# the following)\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Make variables (CC, etc...)\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Use LINUXINCLUDE when you must reference the include/ directory.\n\n# Needed to be compatible with the O= option\n",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Added only to final link stage of busybox binary\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Read KERNELRELEASE from .kernelrelease (if it exists)\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# When compiling out-of-tree modules, put MODVERDIR in the module\n\n# tree rather than in the kernel tree. The kernel tree might\n\n# even be read-only.\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Files to ignore in find ... statements\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# ===========================================================================\n\n# Rules shared between *config targets and build targets\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Basic helpers built in scripts/\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# To avoid any implicit rule to kick in, define an empty command.\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# This target generates Kbuild's and Config.in's from *.c files\n",
        "Line" : 362,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# bbox: we have helpers in applets/\n\n# we depend on scripts_basic, since scripts/basic/fixdep\n\n# must be built before any other host prog\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# outputmakefile generates a Makefile in the output directory, if using a\n\n# separate output directory. This allows convenient use of make in the\n\n# output directory.\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# To make sure we do not include .config for any of the *config targets\n\n# catch them early, and hand them over to scripts/kconfig/Makefile\n\n# It is allowed to specify more targets when calling make, including\n\n# mixing *config targets and build targets.\n\n# For example 'make oldconfig all'.\n\n# Detect when mixed targets is specified, and make a second invocation\n\n# of make so .config is not included in this case either (for *config).\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "#bbox# check% is removed from above\n",
        "Line" : 396,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# ===========================================================================\n\n# We're called with mixed targets (*config and build targets).\n\n# Handle them one by one.\n",
        "Line" : 418,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# ===========================================================================\n\n# *config targets only - make sure prerequisites are updated, and descend\n\n# in scripts/kconfig to make the *config target\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Read arch specific Makefile to set KBUILD_DEFCONFIG as needed.\n\n# KBUILD_DEFCONFIG may point out an alternative default configuration\n\n# used for 'make defconfig'\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# ===========================================================================\n\n# Build targets only - this includes busybox, arch specific targets, clean\n\n# targets and others. In general all targets except *config targets.\n",
        "Line" : 448,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Additional helpers built in scripts/\n\n# Carefully list dependencies so we do not try to build scripts twice\n\n# in parallel\n",
        "Line" : 453,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Objects we will link into busybox / subdirs we need to visit\n",
        "Line" : 462,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# KBUILD_EXTMOD\n",
        "Line" : 496,
        "CharPositionInLine" : 6
      },
      "51" : {
        "Text" : "# In this section, we need .config\n",
        "Line" : 499,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Read in dependencies to all Kconfig* files, make sure to run\n\n# oldconfig if changes are detected.\n",
        "Line" : 501,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# If .config needs to be updated, it will be done via the dependency\n\n# that autoconf has on .config.\n\n# To avoid any implicit rule to kick in, define an empty command\n",
        "Line" : 507,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Now we can define CFLAGS etc according to .config\n",
        "Line" : 514,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# If .config is newer than include/autoconf.h, someone tinkered\n\n# with it and forgot to run make oldconfig.\n\n# If kconfig.d is missing then we are probarly in a cleaned tree so\n\n# we execute the config step to be sure to catch updated Kconfig files\n",
        "Line" : 517,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Dummy target needed, because used as prerequisite\n",
        "Line" : 527,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# The all: target is the default when no target is given on the\n\n# command line.\n\n# This allow a user to issue only 'make' to build a kernel including modules\n\n# Defaults busybox but it is usually overridden in the arch makefile\n",
        "Line" : 531,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# arch Makefile may override CC so keep this after arch Makefile is included\n\n#bbox# NOSTDINC_FLAGS += -nostdinc -isystem $(shell $(CC) -print-file-name=include)\n",
        "Line" : 537,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Default kernel image to build when no specific target is given.\n\n# KBUILD_IMAGE may be overruled on the commandline or\n\n# set in the environment\n\n# Also any assignments in arch/$(ARCH)/Makefile take precedence over\n\n# this default value\n",
        "Line" : 541,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "#\n\n# INSTALL_PATH specifies where to place the updated kernel and system map\n\n# images. Default is /boot, but you can set it to other values\n",
        "Line" : 548,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "#\n\n# INSTALL_MOD_PATH specifies a prefix to MODLIB for module directory\n\n# relocations required by build roots.  This is not defined in the\n\n# makefile but the argument can be passed to make if needed.\n\n#\n",
        "Line" : 553,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Build busybox\n\n# ---------------------------------------------------------------------------\n\n# busybox is build from the objects selected by $(busybox-init) and\n\n# $(busybox-main). Most are built-in.o files from top-level directories\n\n# in the kernel tree, others are specified in arch/$(ARCH)Makefile.\n\n# Ordering when linking is important, and $(busybox-init) must be first.\n\n#\n\n# busybox\n\n#   ^\n\n#   |\n\n#   +-< $(busybox-init)\n\n#   |   +--< init/version.o + more\n\n#   |\n\n#   +--< $(busybox-main)\n\n#   |    +--< driver/built-in.o mm/built-in.o + more\n\n#   |\n\n#   +-< kallsyms.o (see description in CONFIG_KALLSYMS section)\n\n#\n\n# busybox version (uname -v) cannot be updated during normal\n\n# descending-into-subdirs phase since we do not yet know if we need to\n\n# update busybox.\n\n# Therefore this step is delayed until just before final link of busybox -\n\n# except in the kallsyms case where it is done just before adding the\n\n# symbols to the kernel.\n\n#\n\n# System.map is generated to document addresses of all kernel symbols\n",
        "Line" : 575,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Rule to link busybox - also used during CONFIG_KALLSYMS\n\n# May be overridden by arch/$(ARCH)/Makefile\n",
        "Line" : 604,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Generate System.map\n",
        "Line" : 617,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Link of busybox\n\n# If CONFIG_KALLSYMS is set .version is already updated\n\n# Generate System.map and verify that the content is consistent\n\n# Use + in front of the busybox_version rule to silent warning with make -j2\n\n# First command is ':' to allow us to use + in front of the rule\n",
        "Line" : 621,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Generate section listing all symbols and add it into busybox $(kallsyms.o)\n\n# It's a three stage process:\n\n# o .tmp_busybox1 has all symbols and sections, but __kallsyms is\n\n#   empty\n\n#   Running kallsyms on that gives us .tmp_kallsyms1.o with\n\n#   the right size - busybox version (uname -v) is updated during this step\n\n# o .tmp_busybox2 now has a __kallsyms section of the right size,\n\n#   but due to the added section, some addresses have shifted.\n\n#   From here, we generate a correct .tmp_kallsyms2.o\n\n# o The correct .tmp_kallsyms2.o is linked into the final busybox.\n\n# o Verify that the System.map from busybox matches the map from\n\n#   .tmp_busybox2, just in case we did not generate kallsyms correctly.\n\n# o If CONFIG_KALLSYMS_EXTRA_PASS is set, do an extra pass using\n\n#   .tmp_busybox3 and .tmp_kallsyms3.o.  This is only meant as a\n\n#   temporary bypass to allow the kernel to be built while the\n\n#   maintainers work out what went wrong with kallsyms.\n",
        "Line" : 634,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Update busybox version before link\n\n# Use + in front of this rule to silent warning about make -j1\n\n# First command is ':' to allow us to use + in front of this rule\n",
        "Line" : 669,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# Generate .S file with all kernel symbols\n",
        "Line" : 680,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# .tmp_busybox1 must be complete except kallsyms, so update busybox version\n",
        "Line" : 691,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# Needs to visit scripts/ before $(KALLSYMS) can be used.\n",
        "Line" : 701,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# Generate some data for debugging strange kallsyms problems\n",
        "Line" : 704,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# ifdef CONFIG_KALLSYMS\n",
        "Line" : 714,
        "CharPositionInLine" : 6
      },
      "73" : {
        "Text" : "# busybox image - including updated kernel symbols\n",
        "Line" : 716,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# strip is confused by PIE executable and does not set exec bits\n",
        "Line" : 727,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# The actual objects are generated when descending,\n\n# make sure no implicit rule kicks in\n",
        "Line" : 731,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Handle descending into subdirectories listed in $(busybox-dirs)\n\n# Preset locale variables to speed up the build process. Limit locale\n\n# tweaks to this spot to avoid wrong language settings when running\n\n# make menuconfig etc.\n\n# Error messages still appears in the original language\n",
        "Line" : 735,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# Build the kernel release string\n\n# The KERNELRELEASE is stored in a file named .kernelrelease\n\n# to be used when executing for example make install or make modules_install\n\n#\n\n# Take the contents of any files called localversion* and the config\n\n# variable CONFIG_LOCALVERSION and append them to KERNELRELEASE.\n\n# LOCALVERSION from the command line override all of this\n",
        "Line" : 745,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# end of line\n",
        "Line" : 754,
        "CharPositionInLine" : 28
      },
      "79" : {
        "Text" : "# skip backup files (containing '~')\n",
        "Line" : 758,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# If CONFIG_LOCALVERSION_AUTO is set scripts/setlocalversion is called\n\n# and if the SCM is know a tag from the SCM is appended.\n\n# The appended tag is determinded by the SCM used.\n\n#\n\n# Currently, only git is supported.\n\n# Other SCMs can edit scripts/setlocalversion and add the appropriate\n\n# checks as needed.\n",
        "Line" : 765,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# Store (new) KERNELRELASE string in .kernelrelease\n",
        "Line" : 780,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Things we need to do before we recursively start building the kernel\n\n# or the modules are listed in \"prepare\".\n\n# A multi level approach is used. prepareN is processed before prepareN-1.\n\n# archprepare is used in arch Makefiles and when processed asm symlink,\n\n# version.h and scripts_basic is processed / created.\n",
        "Line" : 787,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Listed in dependency order\n",
        "Line" : 793,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# prepare-all is deprecated, use prepare as valid replacement\n",
        "Line" : 796,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# prepare3 is used to check if we are building in a separate output directory,\n\n# and if so do:\n\n# 1) Check that make has not been executed in the kernel src $(srctree)\n\n# 2) Create the include2 directory, used for the second asm symlink\n",
        "Line" : 799,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# prepare2 creates a makefile if using a separate output directory\n",
        "Line" : 815,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# All the preparing..\n",
        "Line" : 829,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "#\tLeave this as default for preprocessing busybox.lds.S, which is now\n\n#\tdone in arch/$(ARCH)/kernel/Makefile\n",
        "Line" : 832,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# \tFIXME: The asm symlink changes when $(ARCH) changes. That's\n\n#\thard to detect, but I suppose \"make mrproper\" is a good idea\n\n#\tbefore switching between archs anyway.\n",
        "Line" : 837,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "#bbox# include/asm:\n\n#bbox# \t@echo '  SYMLINK $@ -> include/asm-$(ARCH)'\n\n#bbox# \t$(Q)if [ ! -d include ]; then mkdir -p include; fi;\n\n#bbox# \t@ln -fsn asm-$(ARCH) $@\n",
        "Line" : 841,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# \tSplit autoconf.h into include/linux/config/*\n",
        "Line" : 846,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "#bbox# piggybacked generation of few .h files\n",
        "Line" : 855,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# Generate some files\n\n# ---------------------------------------------------------------------------\n",
        "Line" : 863,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# KERNELRELEASE can change from a few different places, meaning version.h\n\n# needs to be updated, so this check is forced on all builds\n",
        "Line" : 866,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# ---------------------------------------------------------------------------\n",
        "Line" : 882,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# ---------------------------------------------------------------------------\n\n# Modules\n",
        "Line" : 888,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "# \tBy default, build modules as well\n",
        "Line" : 893,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "#\tBuild modules\n",
        "Line" : 897,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "# Target to prepare building external modules\n",
        "Line" : 905,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "# Target to install modules\n",
        "Line" : 909,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "# If System.map exists, run depmod.  This deliberately does not have a\n\n# dependency on System.map since that would run the dependency tree on\n\n# busybox.  This depmod is only for convenience to give the initial\n\n# boot a modules.dep even before / is mounted read-write.  However the\n\n# boot script depmod is the master version.\n",
        "Line" : 930,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "# CONFIG_MODULES\n",
        "Line" : 944,
        "CharPositionInLine" : 5
      },
      "103" : {
        "Text" : "# Modules not configured\n\n# ---------------------------------------------------------------------------\n",
        "Line" : 946,
        "CharPositionInLine" : 0
      },
      "104" : {
        "Text" : "# CONFIG_MODULES\n",
        "Line" : 957,
        "CharPositionInLine" : 6
      },
      "105" : {
        "Text" : "###\n\n# Cleaning is done on three levels.\n\n# make clean     Delete most generated files\n\n#                Leave enough to build external modules\n\n# make mrproper  Delete the current configuration, and all generated files\n\n# make distclean Remove editor backup files, patch leftover files and the like\n",
        "Line" : 959,
        "CharPositionInLine" : 0
      },
      "106" : {
        "Text" : "# Directories & files removed with 'make clean'\n",
        "Line" : 966,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "# Directories & files removed with 'make mrproper'\n",
        "Line" : 972,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "# clean - Delete most, but leave enough to build external modules\n\n#\n",
        "Line" : 989,
        "CharPositionInLine" : 0
      },
      "109" : {
        "Text" : "# mrproper - Delete all generated files, including .config\n\n#\n",
        "Line" : 1013,
        "CharPositionInLine" : 0
      },
      "110" : {
        "Text" : "# distclean\n\n#\n",
        "Line" : 1029,
        "CharPositionInLine" : 0
      },
      "111" : {
        "Text" : "# Packaging of the kernel to various formats\n\n# ---------------------------------------------------------------------------\n\n# rpm target kept for backward compatibility\n",
        "Line" : 1042,
        "CharPositionInLine" : 0
      },
      "112" : {
        "Text" : "# Brief documentation of the typical targets used\n\n# ---------------------------------------------------------------------------\n",
        "Line" : 1053,
        "CharPositionInLine" : 0
      },
      "113" : {
        "Text" : "# Documentation targets\n\n# ---------------------------------------------------------------------------\n",
        "Line" : 1061,
        "CharPositionInLine" : 0
      },
      "114" : {
        "Text" : "# KBUILD_EXTMOD\n",
        "Line" : 1066,
        "CharPositionInLine" : 5
      },
      "115" : {
        "Text" : "###\n\n# External module support.\n\n# When building external modules the kernel used as basis is considered\n\n# read-only, and no consistency checks are made and the make\n\n# system is not used on the basis kernel. If updates are required\n\n# in the basis kernel ordinary make commands (without M=...) must\n\n# be used.\n\n#\n\n# The following are the only valid targets when building external\n\n# modules.\n\n# make M=dir clean     Delete all automatically generated files\n\n# make M=dir modules   Make all modules in specified dir\n\n# make M=dir\t       Same as 'make M=dir modules'\n\n# make M=dir modules_install\n\n#                      Install the modules build in the module directory\n\n#                      Assumes install directory is already created\n",
        "Line" : 1068,
        "CharPositionInLine" : 0
      },
      "116" : {
        "Text" : "# We are always building modules\n",
        "Line" : 1085,
        "CharPositionInLine" : 0
      },
      "117" : {
        "Text" : "# Run depmod only is we have System.map and depmod is executable\n",
        "Line" : 1118,
        "CharPositionInLine" : 0
      },
      "118" : {
        "Text" : "# Dummies...\n",
        "Line" : 1145,
        "CharPositionInLine" : 0
      },
      "119" : {
        "Text" : "# KBUILD_EXTMOD\n",
        "Line" : 1149,
        "CharPositionInLine" : 6
      },
      "120" : {
        "Text" : "# Generate tags for editors\n\n# ---------------------------------------------------------------------------\n",
        "Line" : 1151,
        "CharPositionInLine" : 0
      },
      "121" : {
        "Text" : "#We want __srctree to totally vanish out when KBUILD_OUTPUT is not set\n\n#(which is the most common case IMHO) to avoid unneeded clutter in the big tags file.\n\n#Adding $(srctree) adds about 20M on i386 to the size of the output file!\n",
        "Line" : 1154,
        "CharPositionInLine" : 0
      },
      "122" : {
        "Text" : "#Allow user to specify only ALLSOURCE_PATHS on the command line, keeping existing behaviour.\n",
        "Line" : 1171,
        "CharPositionInLine" : 0
      },
      "123" : {
        "Text" : "# Scripts to check various things for consistency\n\n# ---------------------------------------------------------------------------\n",
        "Line" : 1219,
        "CharPositionInLine" : 0
      },
      "124" : {
        "Text" : "#ifeq ($(config-targets),1)\n\n#ifeq ($(mixed-targets),1)\n",
        "Line" : 1235,
        "CharPositionInLine" : 6
      },
      "125" : {
        "Text" : "# Single targets\n\n# ---------------------------------------------------------------------------\n\n# Single targets are compatible with:\n\n# - build whith mixed source and output\n\n# - build with separate output dir 'make O=...'\n\n# - external modules\n\n#\n\n#  target-dir => where to store outputfile\n\n#  build-dir  => directory in kernel source tree to use\n",
        "Line" : 1249,
        "CharPositionInLine" : 0
      },
      "126" : {
        "Text" : "# Modules\n",
        "Line" : 1281,
        "CharPositionInLine" : 0
      },
      "127" : {
        "Text" : "# FIXME Should go into a make.lib or something\n\n# ===========================================================================\n",
        "Line" : 1294,
        "CharPositionInLine" : 0
      },
      "128" : {
        "Text" : "# read all saved command lines\n",
        "Line" : 1311,
        "CharPositionInLine" : 0
      },
      "129" : {
        "Text" : "# Do not try to update included dependency files\n",
        "Line" : 1317,
        "CharPositionInLine" : 18
      },
      "130" : {
        "Text" : "# Shorthand for $(Q)$(MAKE) -f scripts/Makefile.clean obj=dir\n\n# Usage:\n\n# $(Q)$(MAKE) $(clean)=dir\n",
        "Line" : 1321,
        "CharPositionInLine" : 0
      },
      "131" : {
        "Text" : "# skip-makefile\n",
        "Line" : 1326,
        "CharPositionInLine" : 6
      },
      "132" : {
        "Text" : "# Declare the contents of the .PHONY variable as phony.  We keep that\n\n# information in a variable se we can use it in if_changed and friends.\n",
        "Line" : 1333,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 133
    },
    "arch/i386/Makefile" : {
      "ObjectId" : "425361fd9b51eefc2334ca0ec8a6ddbc344be987",
      "LastModified" : "2018-04-06T17:01:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ==========================================================================\n\n# Build system\n\n# ==========================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Allow i486 insns (basically, bswap insn)\n\n# Do not try to tune for 486+ (might add padding)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# -mpreferred-stack-boundary=2 is essential in preventing gcc 4.2.x\n\n# from aligning stack to 16 bytes. (Which is gcc's way of supporting SSE).\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "arch/sparc/Makefile" : {
      "ObjectId" : "0b1c56cb5eb89fabfa1ba1e3b0943b376acd7b11",
      "LastModified" : "2018-04-06T17:01:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# When building a library, even intra-library references,\n\n# such as from find_applet_by_name() to applet_names[],\n\n# don't work with -fpic on sparc, needs -fPIC.\n\n# Don't know why it fails in this case but works when\n\n# a binary is being built.\n\n#\n\n# (if is superfluous, ARCH_FPIC is only used by library build, but it\n\n# demonstrates the point: non-pic binary does not need it)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "arch/sparc64/Makefile" : {
      "ObjectId" : "0b1c56cb5eb89fabfa1ba1e3b0943b376acd7b11",
      "LastModified" : "2018-04-06T17:01:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# When building a library, even intra-library references,\n\n# such as from find_applet_by_name() to applet_names[],\n\n# don't work with -fpic on sparc, needs -fPIC.\n\n# Don't know why it fails in this case but works when\n\n# a binary is being built.\n\n#\n\n# (if is superfluous, ARCH_FPIC is only used by library build, but it\n\n# demonstrates the point: non-pic binary does not need it)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "scripts/basic/Makefile" : {
      "ObjectId" : "119f079cfb90dd5b849a8cf84ea4b92779c4c6fb",
      "LastModified" : "2018-04-06T17:01:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "###\n\n# Makefile.basic list the most basic programs used during the build process.\n\n# The programs listed herein is what is needed to do the basic stuff,\n\n# such as splitting .config and fix dependency file.\n\n# This initial step is needed to avoid files to be recompiled\n\n# when busybox configuration changes (which is what happens when\n\n# .config is included by main Makefile.\n\n# ---------------------------------------------------------------------------\n\n# fixdep: \t Used to generate dependency information during build process\n\n# split-include: Divide all config symbols up in a number of files in\n\n#                include/config/...\n\n# docproc:\t Used in Documentation/docbook\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# fixdep is needed to compile other host programs\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "scripts/kconfig/Makefile" : {
      "ObjectId" : "38bae809a87c1e15e3aaf25e0a2478b481f54127",
      "LastModified" : "2018-04-06T17:01:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# ===========================================================================\n\n# Kernel configuration targets\n\n# These targets are used from top-level makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Mtime granularity problem.\n\n# It was observed that these commands:\n\n# make allnoconfig; sed -i -e '/CONFIG_TRUE/s/.*/CONFIG_TRUE=y/' .config; make\n\n# sometimes produce busybox with \"true\" applet still disabled.\n\n# This is caused by .config updated by sed having mtime which is still\n\n# equal to (not bigger than) include/autoconf.h's mtime,\n\n# and thus 2nd make does not regenerate include/autoconf.h.\n\n# Waiting for 1 second after non-interactive \"make XXXXconfig\"\n\n# prevents this from happening.\n\n#\n\n# We'd like to detect whether filesystem we are on has coarse mtimes,\n\n# but can't do it yet, bbox ls hasn't got --full-time.\n\n#MTIME_IS_COARSE:=@ls --full-time -ld | grep -F .000 >/dev/null\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Help text used by make help\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ===========================================================================\n\n# Shared Makefile for the various kconfig executables:\n\n# conf:\t  Used for defconfig, oldconfig and related targets\n\n# mconf:  Used for the mconfig target.\n\n#         Utilizes the lxdialog package\n\n# qconf:  Used for the xconfig target\n\n#         Based on QT which needs to be installed to compile it\n\n# gconf:  Used for the gconfig target\n\n#         Based on GTK which needs to be installed to compile it\n\n# object files used by all kconfig flavours\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Add environment specific flags\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# generated files seem to need this to find local include files\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# QT needs some extra effort...\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# GTK needs some extra effort, too...\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#define \\1 (\\*\\1_p)/'\n",
        "Line" : 244,
        "CharPositionInLine" : 33
      },
      "9" : {
        "Text" : "###\n\n# The following requires flex/bison/gperf\n\n# By default we use the _shipped versions, uncomment the following line if\n\n# you are modifying the flex/bison src.\n\n# LKC_GENPARSER := 1\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "scripts/kconfig/lxdialog/Makefile" : {
      "ObjectId" : "2c9dc48f8aacc5643d5f267e58c0d3ae0618b5b6",
      "LastModified" : "2018-04-06T17:01:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile to build lxdialog package\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use reursively expanded variables so we do not call gcc unless\n\n# we really need to do so. (Do not call gcc as part of make mrproper)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "QMAKE" : 1,
    "MAKEFILE" : 7
  },
  "ElapsedTime" : 3179
}