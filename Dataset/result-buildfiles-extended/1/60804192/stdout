{
  "Repository" : "60804192",
  "Revision" : "HEAD",
  "ObjectId" : "64d3bf85bc02cf9d08b3a0e7af295bae85e66ab9",
  "CommitTime" : "2018-08-10T01:50:33Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "6bb928cf372835ffdb1938fd939985dcaf5e8fda",
      "LastModified" : "2018-08-10T01:50:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/DownloadProject.cmake" : {
      "ObjectId" : "aa646926535ef8ea9b45beda06044b5946db9615",
      "LastModified" : "2017-03-27T10:49:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MODULE:   DownloadProject\n\n#\n\n# PROVIDES:\n\n#   download_project( PROJ projectName\n\n#                    [PREFIX prefixDir]\n\n#                    [DOWNLOAD_DIR downloadDir]\n\n#                    [SOURCE_DIR srcDir]\n\n#                    [BINARY_DIR binDir]\n\n#                    [QUIET]\n\n#                    ...\n\n#   )\n\n#\n\n#       Provides the ability to download and unpack a tarball, zip file, git repository,\n\n#       etc. at configure time (i.e. when the cmake command is run). How the downloaded\n\n#       and unpacked contents are used is up to the caller, but the motivating case is\n\n#       to download source code which can then be included directly in the build with\n\n#       add_subdirectory() after the call to download_project(). Source and build\n\n#       directories are set up with this in mind.\n\n#\n\n#       The PROJ argument is required. The projectName value will be used to construct\n\n#       the following variables upon exit (obviously replace projectName with its actual\n\n#       value):\n\n#\n\n#           projectName_SOURCE_DIR\n\n#           projectName_BINARY_DIR\n\n#\n\n#       The SOURCE_DIR and BINARY_DIR arguments are optional and would not typically\n\n#       need to be provided. They can be specified if you want the downloaded source\n\n#       and build directories to be located in a specific place. The contents of\n\n#       projectName_SOURCE_DIR and projectName_BINARY_DIR will be populated with the\n\n#       locations used whether you provide SOURCE_DIR/BINARY_DIR or not.\n\n#\n\n#       The DOWNLOAD_DIR argument does not normally need to be set. It controls the\n\n#       location of the temporary CMake build used to perform the download.\n\n#\n\n#       The PREFIX argument can be provided to change the base location of the default\n\n#       values of DOWNLOAD_DIR, SOURCE_DIR and BINARY_DIR. If all of those three arguments\n\n#       are provided, then PREFIX will have no effect. The default value for PREFIX is\n\n#       CMAKE_BINARY_DIR.\n\n#\n\n#       The QUIET option can be given if you do not want to show the output associated\n\n#       with downloading the specified project.\n\n#\n\n#       In addition to the above, any other options are passed through unmodified to\n\n#       ExternalProject_Add() to perform the actual download, patch and update steps.\n\n#       The following ExternalProject_Add() options are explicitly prohibited (they\n\n#       are reserved for use by the download_project() command):\n\n#\n\n#           CONFIGURE_COMMAND\n\n#           BUILD_COMMAND\n\n#           INSTALL_COMMAND\n\n#           TEST_COMMAND\n\n#\n\n#       Only those ExternalProject_Add() arguments which relate to downloading, patching\n\n#       and updating of the project sources are intended to be used. Also note that at\n\n#       least one set of download-related arguments are required.\n\n#\n\n#       If using CMake 3.2 or later, the UPDATE_DISCONNECTED option can be used to\n\n#       prevent a check at the remote end for changes every time CMake is run\n\n#       after the first successful download. See the documentation of the ExternalProject\n\n#       module for more information. It is likely you will want to use this option if it\n\n#       is available to you. Note, however, that the ExternalProject implementation contains\n\n#       bugs which result in incorrect handling of the UPDATE_DISCONNECTED option when\n\n#       using the URL download method or when specifying a SOURCE_DIR with no download\n\n#       method. Fixes for these have been created, the last of which is scheduled for\n\n#       inclusion in CMake 3.8.0. Details can be found here:\n\n#\n\n#           https://gitlab.kitware.com/cmake/cmake/commit/bdca68388bd57f8302d3c1d83d691034b7ffa70c\n\n#           https://gitlab.kitware.com/cmake/cmake/issues/16428\n\n#\n\n#       If you experience build errors related to the update step, consider avoiding\n\n#       the use of UPDATE_DISCONNECTED.\n\n#\n\n# EXAMPLE USAGE:\n\n#\n\n#   include(download_project.cmake)\n\n#   download_project(PROJ                googletest\n\n#                    GIT_REPOSITORY      https://github.com/google/googletest.git\n\n#                    GIT_TAG             master\n\n#                    UPDATE_DISCONNECTED 1\n\n#                    QUIET\n\n#   )\n\n#\n\n#   add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR})\n\n#\n\n#========================================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Prevent the following from being passed through\n",
        "Line" : 102,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# Hide output if requested\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Set up where we will put our temporary CMakeLists.txt file and also\n\n# the base point below which the default source and binary dirs will be\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Ensure the caller can know where to find the source and build directories\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Create and build a separate CMake project to carry out the download.\n\n# If we've already previously done these steps, they will not cause\n\n# anything to be updated, so extra rebuilds of the project won't occur.\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cmake/buildTargets.cmake" : {
      "ObjectId" : "dda3b8443c6a9966ef84bde241e283877d68a3b9",
      "LastModified" : "2018-08-10T01:50:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Related to exports for linux/mac and code coverage\n\n####\n\n# Installation\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Layout. This works for all platforms:\n\n#   * <prefix>/lib/cmake/vinecopulib\n\n#   * <prefix>/lib/\n\n#   * <prefix>/include/\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Configuration\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include module with fuction 'write_basic_package_version_file'\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Configure '<PROJECT-NAME>ConfigVersion.cmake'\n\n# Note: PROJECT_VERSION is used as a VERSION\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Configure '<PROJECT-NAME>Config.cmake'\n\n# Use variables:\n\n#   * targets_export_name\n\n#   * PROJECT_NAME\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Targets:\n\n#   * <prefix>/lib/libvinecopulib.dylib\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# on Windows, the dll file is categorised as RUNTIME\n",
        "Line" : 83,
        "CharPositionInLine" : 38
      },
      "8" : {
        "Text" : "# Headers:\n\n#   * include/vinecopulib.hpp -> <prefix>/include/vinecopulib.hpp\n\n#   * include/version.hpp -> <prefix>/include/vinecopulib/version.hpp\n\n#   * include/vinecopulib/bicop/*.hpp -> <prefix>/include/vinecopulib/bicop/*.hpp\n\n#   * include/vinecopulib/vinecop/*.hpp -> <prefix>/include/vinecopulib/vinecop/*.hpp\n\n#   * include/vinecopulib/misc/*.hpp -> <prefix>/include/vinecopulib/misc/*.hpp\n\n#   * wdm/include/*.hpp -> <prefix>/include/vinecopulib/wdm/*.hpp\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Config\n\n#   * <prefix>/lib/cmake/vinecopulib/vinecopulibConfig.cmake\n\n#   * <prefix>/lib/cmake/vinecopulib/vinecopulibConfigVersion.cmake\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Config\n\n#   * <prefix>/lib/cmake/vinecopulib/vinecopulibTargets.cmake\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Install the export set for code coverage\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "cmake/codeCoverage.cmake" : {
      "ObjectId" : "e25fa21fa52338f9e075732af419284b36b14ae2",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2012 - 2015, Lars Bilke\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification,\n\n# are permitted provided that the following conditions are met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice, this\n\n#    list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its contributors\n\n#    may be used to endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n#\n\n#\n\n# 2012-01-31, Lars Bilke\n\n# - Enable Code Coverage\n\n#\n\n# 2013-09-17, Joakim Söderberg\n\n# - Added support for Clang.\n\n# - Some additional usage instructions.\n\n#\n\n# USAGE:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 0. (Mac only) If you use Xcode 5.1 make sure to patch geninfo as described here:\n\n#      http://stackoverflow.com/a/22404544/80480\n\n#\n\n# 1. Copy this file into your cmake modules path.\n\n#\n\n# 2. Add the following line to your CMakeLists.txt:\n\n#      INCLUDE(CodeCoverage)\n\n#\n\n# 3. Set compiler flags to turn off optimization and enable coverage:\n\n#    SET(CMAKE_CXX_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\t SET(CMAKE_C_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\n\n# 3. Use the function SETUP_TARGET_FOR_COVERAGE to create a custom make target\n\n#    which runs your test executable and produces a lcov code coverage report:\n\n#    Example:\n\n#\t SETUP_TARGET_FOR_COVERAGE(\n\n#\t\t\t\tmy_coverage_target  # Name for custom target.\n\n#\t\t\t\ttest_driver         # Name of the test driver executable that runs the tests.\n\n#\t\t\t\t\t\t\t\t\t# NOTE! This should always have a ZERO as exit code\n\n#\t\t\t\t\t\t\t\t\t# otherwise the coverage generation will not complete.\n\n#\t\t\t\tcoverage            # Name of output directory.\n\n#\t\t\t\t)\n\n#\n\n# 4. Build a Debug build:\n\n#\t cmake -DCMAKE_BUILD_TYPE=Debug ..\n\n#\t make\n\n#\t make my_coverage_target\n\n#\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check prereqs\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOT GCOV_PATH\n",
        "Line" : 78,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# CHECK VALID COMPILER\n",
        "Line" : 86,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 112,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests.\n\n#\t\t\t\t\t\tMUST return ZERO always, even on errors.\n\n#\t\t\t\t\t\tIf not, no coverage report will be created!\n\n# Param _outputname     lcov output is generated as _outputname.info\n\n#                       HTML report is generated in _outputname/index.html\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# NOT LCOV_PATH\n",
        "Line" : 127,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# NOT GENHTML_PATH\n",
        "Line" : 131,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# Setup target\n",
        "Line" : 137,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Cleanup lcov\n",
        "Line" : 140,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "# Run initial/baseline lcov\n",
        "Line" : 143,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# Run tests\n",
        "Line" : 146,
        "CharPositionInLine" : 12
      },
      "13" : {
        "Text" : "# Capturing lcov counters and generating report\n",
        "Line" : 149,
        "CharPositionInLine" : 12
      },
      "14" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 157,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE\n",
        "Line" : 163,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 16
    },
    "cmake/compilerDefOpt.cmake" : {
      "ObjectId" : "5a2861112172c1db3d90cc06f7f4c0f11abd87a2",
      "LastModified" : "2018-02-23T11:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -Qunused-arguments\n",
        "Line" : 37,
        "CharPositionInLine" : 75
      },
      "CommentCount" : 1
    },
    "cmake/findDependencies.cmake" : {
      "ObjectId" : "4c80b2890fd6714f47a2a01cf77e537c553b310d",
      "LastModified" : "2018-08-10T01:50:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/findDoxygen.cmake" : {
      "ObjectId" : "6d49fd2c81d73ec0dfd2d9100288a36b65c2cc94",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/findEigen3.cmake" : {
      "ObjectId" : "239c1bbe61ac4a96a41ac51e5ae1f9b34c282bd3",
      "LastModified" : "2017-02-08T13:51:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# specific additional paths for some OS\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/findHeaders.cmake" : {
      "ObjectId" : "63a9a421a6e2db8f3d4a81b7931b0cd22edf260c",
      "LastModified" : "2018-02-23T11:18:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Get directory, name and path for header/source files\n",
        "Line" : 16,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# Scrap file content, remove inline & add include\n",
        "Line" : 27,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# If source does not exists or has changed, generate new source file\n",
        "Line" : 34,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Get directory, name and path for header/source files\n",
        "Line" : 49,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# File scrap content and remove ipp include\n",
        "Line" : 58,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# If header does not exists or has changed, generate new header file\n",
        "Line" : 63,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 6
    },
    "cmake/findR.cmake" : {
      "ObjectId" : "b8bf1a4ae5a40c3323d0244471748794bd82d360",
      "LastModified" : "2017-10-30T18:39:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# - This module locates an installed R distribution.\n\n#\n\n# Defines the following:\n\n#  RSCRIPT_EXECUTABLE       - Path to the Rscript command\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/options.cmake" : {
      "ObjectId" : "bdf4c44fda9da6c308c60c32a23cd4d80a6f33e4",
      "LastModified" : "2017-10-30T18:39:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/printInfo.cmake" : {
      "ObjectId" : "1ebffa878e6d2ef743b337302d292e4f04ab723e",
      "LastModified" : "2017-10-30T18:39:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/bicop/CMakeLists.txt" : {
      "ObjectId" : "a11e41b80a599cb47b45b1003c4e60bfe13923b3",
      "LastModified" : "2018-08-10T01:50:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Setting default folders\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# C++ compile flags\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find vinecopulib package and dependencies\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set required variables for includes and libraries\n\n# In the second line\n\n#   * VINECOPULIB_LIBRARIES is needed if vinecopulib has been built as a\n\n#     shared lib (does nothing otherwise).\n\n#   * CMAKE_THREAD_LIBS_INIT is needed for some linux systems\n\n#     (but does nothing on OSX/Windows).\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Include subdirectory with project sources\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "examples/bicop/cmake/findEigen3.cmake" : {
      "ObjectId" : "239c1bbe61ac4a96a41ac51e5ae1f9b34c282bd3",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# specific additional paths for some OS\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "examples/bicop/src/CMakeLists.txt" : {
      "ObjectId" : "1eff16fb68b9b1c0398809f03a10be8de937ba40",
      "LastModified" : "2017-10-30T18:39:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Include header files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add main executable\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Link to vinecopulib if vinecopulib has been built as a shared lib\n\n# and to pthreads on some linux systems (does nothing otherwise)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "examples/vinecop/CMakeLists.txt" : {
      "ObjectId" : "42a67583450c752ec243875aadec96d8761d9e21",
      "LastModified" : "2018-08-10T01:50:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Setting default folders\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# C++ compile flags\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find vinecopulib package and dependencies\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set required variables for includes and libraries\n\n# In the second line\n\n#   * VINECOPULIB_LIBRARIES is needed if vinecopulib has been built as a\n\n#     shared lib (does nothing otherwise).\n\n#   * CMAKE_THREAD_LIBS_INIT is needed for some linux systems\n\n#     (but does nothing on OSX/Windows).\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Include subdirectory with project sources\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "examples/vinecop/cmake/findEigen3.cmake" : {
      "ObjectId" : "239c1bbe61ac4a96a41ac51e5ae1f9b34c282bd3",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# specific additional paths for some OS\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "examples/vinecop/src/CMakeLists.txt" : {
      "ObjectId" : "1eff16fb68b9b1c0398809f03a10be8de937ba40",
      "LastModified" : "2017-10-30T18:39:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Include header files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add main executable\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Link to vinecopulib if vinecopulib has been built as a shared lib\n\n# and to pthreads on some linux systems (does nothing otherwise)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "f40c39cde1aa99e1427cfbd20a94c96bc59d7a43",
      "LastModified" : "2017-10-30T18:39:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#needed in MinGW\n",
        "Line" : 2,
        "CharPositionInLine" : 35
      },
      "CommentCount" : 1
    },
    "test/src_test/CMakeLists.txt" : {
      "ObjectId" : "2113ea71b6f4a49ede5a34b49b421b4431559f5b",
      "LastModified" : "2017-10-30T18:39:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 20
  },
  "ElapsedTime" : 1542
}