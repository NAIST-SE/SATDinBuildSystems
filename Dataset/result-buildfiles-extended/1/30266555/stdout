{
  "Repository" : "30266555",
  "Revision" : "HEAD",
  "ObjectId" : "b8f3d774b53b144de825aaaa6fd393ca3fc08dfa",
  "CommitTime" : "2019-04-11T16:02:52Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "523a3dc12903995e41660f502b938ab328211df6",
      "LastModified" : "2019-03-11T13:22:51Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0,
      "Errorlog" : "line 16:99 token recognition error at: '\"\\0'\nline 16:113 token recognition error at: '\\0'\nline 53:119 token recognition error at: '\"\\n\\ndb: vendor wait-for-db                                                                                 ## Reset the database and load fixtures\\n\\t$(EXEC) $(CONSOLE) doctrine:database:drop --force --if-exists\\n\\t$(EXEC) $(CONSOLE) doctrine:database:create --if-not-exists\\n\\t$(EXEC) $(CONSOLE) doctrine:schema:update --force\\n\\t$(EXEC) $(CONSOLE) doctrine:fixtures:load --append\\n\\ndb-diff: vendor wait-for-db                                                                            ## Generate a migration by comparing your current database to your mapping information\\n\\t$(EXEC) $(CONSOLE) doctrine:migration:diff\\n\\ndb-diff-dump: vendor wait-for-db                                                                       ## Generate a migration by comparing your current database to your mapping information and display it in console\\n\\t$(EXEC) $(CONSOLE) doctrine:schema:update --dump-sql\\n\\ndb-migrate: vendor wait-for-db                                                                         ## Migrate database schema to the latest available version\\n\\t$(EXEC) $(CONSOLE) doctrine:migration:migrate -n\\n\\ndb-rollback: vendor wait-for-db                                                                        ## Rollback the latest executed migration\\n\\t$(EXEC) $(CONSOLE) doctrine:migration:migrate prev -n\\n\\ndb-load: vendor wait-for-db                                                                            ## Reset the database fixtures\\n\\t$(EXEC) $(CONSOLE) doctrine:fixtures:load -n\\n\\ndb-validate: vendor wait-for-db                                                                        ## Check the ORM mapping\\n\\t$(EXEC) $(CONSOLE) doctrine:schema:validate\\n\\ntranslations-import: vendor wait-for-db\\n\\t$(EXEC) $(CONSOLE) lexik:translations:import -g\\n\\n##\\n## Assets\\n##---------------------------------------------------------------------------\\n\\nwebpack-watch: node_modules\\n\\t$(EXEC) npm run watch\\n\\nwebpack-dev: node_modules\\n\\t$(EXEC) npm run dev\\n\\nwebpack-prod: node_modules\\n\\t$(EXEC) npm run prod\\n\\nrouting-generate:\\n\\t$(EXEC) $(CONSOLE) fos:js-routing:dump --format=json --target=public/js/fos_js_routes.json\\n\\n##\\n## Tests\\n##---------------------------------------------------------------------------\\n\\nlint: ly lt lj test-behat phpcs                                                                        ## Run lint on Twig, YAML, PHP and Javascript files\\n\\nlintfix: phpcsfix psalm ly lt ljfix\\n\\npsalm:\\n\\t$(EXEC) vendor/bin/psalm --show-info=false\\n\\nls: ly lt\\n\\nly:\\n\\t$(EXEC) $(CONSOLE) lint:yaml config\\n\\nlt:\\n\\t$(EXEC) $(CONSOLE) lint:twig templates\\n\\nlj: node_modules                                                                                       ## Lint the Javascript to follow the convention\\n\\t$(EXEC) yarn lint\\n\\nljfix: node_modules                                                                                    ## Lint and try to fix the Javascript to follow the convention\\n\\t$(EXEC) yarn lint --fix\\n\\nsecurity-check: vendor                                                                                 ## Check for vulnerable dependencies\\n\\t$(EXEC) vendor/bin/security-checker security:check\\n\\ntest-behat:                                                                                            ## Run behat tests\\n\\t$(BEHAT) $(BEHAT_ARGS)\\n\\nphpcs: vendor                                                                                          ## Lint PHP code\\n\\t$(PHPCSFIXER) fix --diff --dry-run --no-interaction\\n\\nphpcsfix: vendor                                                                                       ## Lint and fix PHP code to follow the convention\\n\\t$(PHPCSFIXER) fix\\n\\n##\\n## Dependencies\\n##---------------------------------------------------------------------------\\n\\ndeps: vendor web/built                                                                                 ## Install the project PHP and JS dependencies\\n\\n##\\n\\n\\n# Internal rules\\n\\nbuild: docker-dev.lock\\n\\ndocker-dev.lock:\\n\\t$(DOCKER_COMPOSE) pull --ignore-pull-failures\\n\\t$(DOCKER_COMPOSE) build --force-rm --pull\\n\\ttouch docker-dev.lock\\n\\nrm-docker-dev.lock:\\n\\trm -f docker-dev.lock\\n\\nup:\\n\\t$(DOCKER_COMPOSE) up -d --remove-orphans\\n\\nperm:\\n\\t$(EXEC) chmod -R 777 var\\n\\t$(EXEC) chown -R www-data:root var\\n\\n# Rules from files\\n\\nvendor: composer.lock\\n\\t$(COMPOSER) install -n\\n\\ncomposer.lock: composer.json\\n\\t@echo compose.lock is not up to date.\\n\\n.env: .env.dist vendor\\n\\t$(EXEC) composer -n run-script post-install-cmd\\n\\nnode_modules: yarn.lock\\n\\t$(EXEC) npm install\\n\\t$(EXEC) npm rebuild node-sass\\n\\nyarn.lock: package.json\\n\\t@echo yarn.lock is not up to date.\\n\\nweb/built: node_modules routing-generate\\n\\t$(EXEC) npm run dev\\n\u0000'\n"
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1145
}