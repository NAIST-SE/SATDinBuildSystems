{
  "Repository" : "3590178",
  "Revision" : "HEAD",
  "ObjectId" : "73a4ff68de72dc40db12a9cff97e0117729df36e",
  "CommitTime" : "2019-04-16T07:48:44Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "6831f35d9dd72d7f294196ddb3419e7dc813a595",
      "LastModified" : "2017-10-04T19:59:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set up project\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# general stuff\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# make sure our own modules are found\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set the script dir for the macros.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#include the dune macros\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# start a dune project with information from dune.module\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# add subdirectories to execute CMakeLists.txt there\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# finalize the dune project, e.g. generating config.h etc.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "bin/CMakeLists.txt" : {
      "ObjectId" : "4bd511db86a377d09a73f27811b89de01286328b",
      "LastModified" : "2017-10-04T19:59:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/AddGMPFlags.cmake" : {
      "ObjectId" : "e004ff006a7e4af584fbe2caf0c4f0daa2bd841f",
      "LastModified" : "2015-10-13T14:40:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines the functions to use GMP\n\n#\n\n# .. cmake_function:: add_dune_gmp_flags\n\n#\n\n#    .. cmake_param:: targets\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#       A list of targets to use GMP with.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/AddMETISFlags.cmake" : {
      "ObjectId" : "cc65324af44fa909e6c406c9ca9e8980e058cb3c",
      "LastModified" : "2015-10-13T14:40:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines the functions to use METIS\n\n#\n\n# .. cmake_function:: add_dune_metis_flags\n\n#\n\n#    .. cmake_param:: targets\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#       A list of targets to use METIS with.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/AddPTScotchFlags.cmake" : {
      "ObjectId" : "7365c1aabfffe2337e869cda8cba1333f444697a",
      "LastModified" : "2015-10-13T14:40:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines the functions to use PTScotch\n\n#\n\n# .. cmake_function:: add_dune_ptscotch_flags\n\n#\n\n#    .. cmake_param:: targets\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#       A list of targets to use PTScotch with.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/AddParMETISFlags.cmake" : {
      "ObjectId" : "bf0842a076cf70ffa6c65da4b2f5c917a20ef140",
      "LastModified" : "2015-10-13T14:40:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines the functions to use ParMETIS\n\n#\n\n# .. cmake_function:: add_dune_parmetis_flags\n\n#\n\n#    .. cmake_param:: targets\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#       A list of targets to use ParMETIS with.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/AddSuiteSparseFlags.cmake" : {
      "ObjectId" : "83ffb2bc5e615064e5d13fadd7fac9e5a0b610d4",
      "LastModified" : "2015-11-24T14:24:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines the functions to use SuiteSparse\n\n#\n\n# .. cmake_function:: add_dune_suitesparse_flags\n\n#\n\n#    .. cmake_param:: targets\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#       A list of targets to use SuiteSparse with.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/AddUMFPackFlags.cmake" : {
      "ObjectId" : "02a3bfa845950d82ebb3b013e644ae2013274e14",
      "LastModified" : "2015-10-13T14:40:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines the functions to use UMFPack\n\n#\n\n# .. cmake_function:: add_dune_umfpack_flags\n\n#\n\n#    .. cmake_param:: targets\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#       A list of targets to use UMFPack with.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/AddVcFlags.cmake" : {
      "ObjectId" : "903f516af511936e079fd7d22a781dfdd31bf448",
      "LastModified" : "2017-10-04T19:59:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines the functions to use Vc\n\n#\n\n# Vc is a library for high-level Vectorization support in C++\n\n# see https://github.com/VcDevel/Vc\n\n#\n\n# .. cmake_function:: add_dune_vc_flags\n\n#\n\n#    .. cmake_param:: targets\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#       A list of targets to use VC with.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/CMakeBuiltinFunctionsDocumentation.cmake" : {
      "ObjectId" : "cd9c7859c9601784974eb5f1daac6285938a3997",
      "LastModified" : "2015-10-26T12:15:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This modules contains only documentation for CMake builtins.\n\n# This is necessary to have an complete API documentation.\n\n#\n\n# .. cmake_function:: add_subdirectory\n\n#\n\n#    .. cmake_param:: dir\n\n#       :single:\n\n#       :positional:\n\n#       :required:\n\n#\n\n#       The :code:`CMakeLists.txt` file from this subdirectory\n\n#       will be executed next.\n\n#\n\n#    .. cmake_param:: EXCLUDE_FROM_ALL\n\n#       :option:\n\n#\n\n#       Whether targets added in this subdirectory should be built\n\n#       during :code:`make all`.\n\n#\n\n#    This is a cmake builtin command.\n\n#    For detailed information, check the cmake documentation:\n\n#\n\n#    ::\n\n#\n\n#       cmake --help-command add_subdirectory\n\n#\n\n# .. cmake_function:: install\n\n#\n\n#    Define installation rules to customize the behaviour of :code:`make install`.\n\n#\n\n#    This is a cmake builtin command.\n\n#    For detailed information, check the cmake documentation:\n\n#\n\n#    ::\n\n#\n\n#       cmake --help-command install\n\n#\n\n# .. cmake_function:: add_executable\n\n#\n\n#    Adds an executable to the project.\n\n#\n\n#    This is a cmake builtin command.\n\n#    For detailed information, check the cmake documentation:\n\n#\n\n#    ::\n\n#\n\n#       cmake --help-command add_executable\n\n#\n\n# .. cmake_variable:: CMAKE_<LANG>_COMPILER\n\n#\n\n#    Set the compiler for the language LANG.\n\n#    LANG is in our case out of C, CXX.\n\n#\n\n#    This is a cmake builtin variable.\n\n#    For detailed information, check the cmake documentation:\n\n#\n\n#    ::\n\n#\n\n#       cmake --help-variable CMAKE_\\<LANG\\>_COMPILER\n\n#\n\n# .. cmake_variable:: CMAKE_<LANG>_FLAGS\n\n#\n\n#    Set the compile flags for the language LANG.\n\n#    LANG is in our case out of C, CXX.\n\n#\n\n#    This is a cmake builtin variable.\n\n#    For detailed information, check the cmake documentation:\n\n#\n\n#    ::\n\n#\n\n#       cmake --help-variable CMAKE_\\<LANG\\>_FLAGS\n\n#\n\n# .. cmake_function:: find_package\n\n#\n\n#    Look for an external package.\n\n#\n\n#    This is a cmake builtin command.\n\n#    For detailed information, check the cmake documentation:\n\n#\n\n#    ::\n\n#\n\n#       cmake --help-command find_package\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/CMakeLists.txt" : {
      "ObjectId" : "d570352185f27a9758287a6c5788a79c0bf84b6f",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/CheckCXXFeatures.cmake" : {
      "ObjectId" : "368841cef3abbbebc2548d62d1f3e9dccfbc4480",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# .. cmake_module::\n\n#\n\n#    Module that checks for supported C++17, C++14 and non-standard features.\n\n#\n\n#    The behaviour of this module can be modified by the following variable:\n\n#\n\n#    :ref:`DISABLE_CXX_VERSION_CHECK`\n\n#       Disable checking for std=c++14 (c++17, ...)\n\n#\n\n#    This module internally sets the following variables, which are then\n\n#    exported into the config.h of the current dune module.\n\n#\n\n#    :code:`HAS_ATTRIBUTE_UNUSED`\n\n#       True if attribute unused is supported\n\n#\n\n#    :code:`HAS_ATTRIBUTE_DEPRECATED`\n\n#       True if attribute deprecated is supported\n\n#\n\n#    :code:`HAS_ATTRIBUTE_DEPRECATED_MSG`\n\n#       True if attribute deprecated(\"msg\") is supported\n\n#\n\n#    :code:`DUNE_HAVE_CXX_CLASS_TEMPLATE_ARGUMENT_DEDUCTION`\n\n#       True if C++17's class template argument deduction is supported\n\n#\n\n#    :code:`DUNE_HAVE_CXX_OPTIONAL`\n\n#       True if C++17's optional implementation is supported\n\n#\n\n#    :code:`DUNE_HAVE_CXX_VARIANT`\n\n#       True if C++17's variant implementation is supported\n\n#\n\n# .. cmake_variable:: DISABLE_CXX_VERSION_CHECK\n\n#\n\n#    You may set this variable to TRUE to disable checking for\n\n#    std=c++11 (c++14, c++1y). For more details, check :ref:`CheckCXXFeatures`.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# C++ standard versions that this test knows about\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Compile tests for the different standard revisions; these test both the compiler\n\n# and the associated library to avoid problems like using a C++14 user-installed\n\n# compiler together with a non C++14-compliant stdlib from the system compiler.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# we need to escape semicolons in the tests to be able to stick them into a list\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# build a list out of the pre-escaped tests\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# these are appended to \"-std=c++\" and tried in this order\n\n# note the escaped semicolons; that's necessary to create a nested list\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# by default, we enable C++14 for now, but not C++17\n\n# The user can override this choice by explicitly setting this variable\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# try to enable all of the C++ standards that we know about, in descending order\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# skip versions that are newer than allowed\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# First try whether the compiler accepts one of the command line flags for this standard\n",
        "Line" : 148,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# and if it did, run the compile test\n",
        "Line" : 161,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Wipe the variable, as this version of the standard doesn't seem to work\n",
        "Line" : 177,
        "CharPositionInLine" : 10
      },
      "12" : {
        "Text" : "# Let's just assume every compiler at least claims C++03 compliance by now\n",
        "Line" : 186,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# We did not check version but need to set maximum supported\n\n# version for some checks. Therefore we set it to CXX_MAX_STANDARD.\n",
        "Line" : 198,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# make sure we have at least C++14\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# perform tests\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# __attribute__((unused))\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# __attribute__((deprecated))\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# __attribute__((deprecated(\"msg\")))\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# full support for is_indexable (checking whether a type supports operator[])\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# support for C++17's class template deduction guides\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# support for C++17's optional implementation\n",
        "Line" : 363,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# support for C++17's variant implementation\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# find the threading library\n",
        "Line" : 392,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# text for feature summary\n",
        "Line" : 397,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# see whether threading needs -no-as-needed\n",
        "Line" : 401,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# set linker flags\n\n#\n\n# in all implementations I know it is sufficient to set the linker flags when\n\n# linking the final executable, so this should work.  In cmake, this appears\n\n# to only work when building the project however, not for later config tests\n\n# (contrary to CMAKE_CXX_FLAGS).  Luckily, later tests don't seem to use any\n\n# threading...  (except for our own sanity check)\n",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#set(vars CMAKE_EXE_LINKER_FLAGS ${CMAKE_CONFIGURATION_TYPES})\n\n# CMAKE_CONFIGURATION_TYPES seems to be empty.  Use the configurations from\n\n# adding -std=c++11 above instead.\n",
        "Line" : 419,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# check that the found configuration works\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# The value is not in the cache, so run check\n",
        "Line" : 442,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# tests seem to ignore CMAKE_EXE_LINKER_FLAGS\n",
        "Line" : 444,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# put the found value into the cache.  Put it there even if we're\n\n# cross-compiling, so the user can find it.  Use FORCE:\n\n# check_cxx_source_runs() already puts the value in the cache but without\n\n# documentation; also the \"if(NOT DEFINED STDTHREAD_WORKS)\" will prevent us\n\n# from overwriting a value set by the user.\n",
        "Line" : 458,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Working C++11 threading support is required for dune.  In particular to\n\n# make things like lazyly initialized caches thread safe\n\n# (e.g. QuadratureRules::rule(), which needs std::call_once()).  If we don't\n\n# include the correct options during linking, there will be very funny\n\n# errors at runtime, ranging from segfaults to\n\n#\n\n#  terminate called after throwing an instance of 'std::system_error'\n\n#    what():  Unknown error 18446744073709551615\n",
        "Line" : 468,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Check whether we can conditionally throw exceptions in constexpr context to\n\n# signal errors both at compile time and at run time - this does not work in GCC 5\n",
        "Line" : 484,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# ******************************************************************************\n\n#\n\n# Checks for standard library features\n\n#\n\n# While there are __cpp_lib_* feature test macros for all of these, those are\n\n# unfortunately unreliable, as libc++ does not have feature test macros yet.\n\n#\n\n# In order to keep the tests short, they use check_cxx_symbol_exists(). That\n\n# function can only test for macros and linkable symbols, however, so we wrap\n\n# tested types into a call to std::move(). That should be safe, as std::move()\n\n# does not require a complete type.\n\n#\n\n# ******************************************************************************\n",
        "Line" : 506,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Check whether we have <experimental/type_traits> (for is_detected et. al.)\n",
        "Line" : 520,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 36
    },
    "cmake/modules/DuneCMakeCompat.cmake" : {
      "ObjectId" : "8c5a90f766ad5c16f59f6f6045c464b941691d70",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module with backward compatibility implementation of newer cmake functionality\n\n#\n\n# .. cmake_module::\n\n#\n\n#    This module contains backward compatibility implementations of cmake\n\n#    functionality that is not available in all cmake versions we support.\n\n#\n\n#    * :ref:`dune_list_filter(...) <dune_list_filter>` for ``list(FILTER\n\n#      ...)`` from cmake 3.7\n\n#\n\n#\n\n# .. cmake_function:: dune_list_filter\n\n#\n\n#    .. cmake_brief::\n\n#\n\n#       Compatibility implementation of ``list(FILTER)``\n\n#\n\n#    .. cmake_param:: list\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#       Name of list variable used as both input and output.\n\n#\n\n#    .. cmake_param:: <INCLUDE|EXCLUDE>\n\n#       :positional:\n\n#       :option:\n\n#       :required:\n\n#\n\n#       Whether to include or to exclude the items matching the regular\n\n#       expression.\n\n#\n\n#    .. cmake_param:: REGEX\n\n#       :single:\n\n#       :required:\n\n#       :argname: regular_expression\n\n#\n\n#       The regular expression to match the items against.\n\n#\n\n#    Match each item in the list against the regular expression.  In\n\n#    ``INCLUDE`` mode the result contains all items that matched, in\n\n#    ``EXCLUDE`` mode it contains all items that did not match.  Store the\n\n#    result back in the variable ``list`` in the scope of the caller.\n\n#\n\n#    This is exactly the same as the ``list(FILTER ...)`` command available in\n\n#    cmake 3.7 and onward.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# do not implicitly deference variable names in `if()` if they appear inside\n\n# bracketed or quoted arguments.  Unquouted arguments continue to be\n\n# considered as variables names.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# list(FILTER...) was introduced in cmake 3.6, this is a compatibility\n\n# implementation for earlier cmakes\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# validate arguments\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# cmake can't destinguish between empty lists and lists with one empty\n\n# element.  This is a problem when consecutively appending elements to a\n\n# list: if the first elements we append are empty, we loose them.  The\n\n# \"non-empty\" token makes sure we start with a non-empty list and avoid this\n\n# problem.\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# list(APPEND) does not quote the appended item (as of cmake 3.7.2), so do\n\n# it manually\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# remove the non-empty token from above.  If the proper result would be a\n\n# list of one empty element, we have no way of preserving that, it will turn\n\n# into an empty list.\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# export\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cmake/modules/DuneCommonMacros.cmake" : {
      "ObjectId" : "6d5585483c03a5f0a74312aff3e6188863dc6e9c",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# .. cmake_module::\n\n#\n\n#    This modules content is executed whenever a module required or suggests dune-common!\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# enforce C++-14\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# search for lapack\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# try to find the Vc library\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# text for feature summary\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Run the python extension of the Dune cmake build system\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/modules/DuneCxaDemangle.cmake" : {
      "ObjectId" : "e37138ff6a95525f7e3bb2e48b67c21bc74c371a",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module checks whether the compiler supports the\n\n# abi::__cxa_demangle function required to\n\n# make the type names returned by typeid() human-readable\n\n#\n\n# It sets the variable :code:`HAVE_CXA_DEMANGLE` with the result.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/DuneDoc.cmake" : {
      "ObjectId" : "ddb4b90b35634c2519fd8069e04b37d032e54a35",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Module that provides a custom target make doc at the top level\n\n# directory and utility macros for creating install directives\n\n# that make sure that the files to be installed are previously\n\n# generated even if make doc was not called.\n\n#\n\n# All documentation (Latex, Doxygen) will be generated during\n\n# make doc.\n\n# It provides the following macros:\n\n#\n\n# .. cmake_function:: dune_add_latex_document\n\n#\n\n#    .. cmake_brief::\n\n#\n\n#       build a pdf document through the Dune build system.\n\n#\n\n#    .. cmake_param:: texfile\n\n#       :single:\n\n#       :required:\n\n#       :positional:\n\n#\n\n#       The texfile to compile into a pdf.\n\n#\n\n#    .. note::\n\n#\n\n#       This function is a wrapper around add_latex_document.\n\n#       With Dune 2.7 the function from UseLatexmk.cmake is\n\n#       used and the one from UseLATEX.cmake is deprecated\n\n#       and will be removed after Dune 2.7.\n\n#\n\n# .. cmake_function:: create_doc_install\n\n#\n\n#    .. cmake_brief::\n\n#\n\n#       creates a target for creating and installing a file\n\n#       to a given directory.\n\n#\n\n#    .. cmake_param:: filename\n\n#       :single:\n\n#       :required:\n\n#       :positional:\n\n#\n\n#       The name of the file to be installed.\n\n#\n\n#    .. cmake_param:: targetdir\n\n#       :single:\n\n#       :required:\n\n#       :positional:\n\n#\n\n#       The directory into which the beforementioned file will be installed.\n\n#\n\n#    .. cmake_param:: dependency\n\n#       :single:\n\n#       :required:\n\n#       :positional:\n\n#\n\n#       A target that gets called to create the file that will be installed.\n\n#\n\n#    .. note::\n\n#\n\n#       This macro is needed, as we cannot add dependencies to the install\n\n#       target. See https://gitlab.kitware.com/cmake/cmake/issues/8438\n\n#       and https://gitlab.dune-project.org/core/dune-common/issues/36\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# deprecated part for UseLATEX.cmake\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# check needed LaTeX executables\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add the Sphinx-generated build system documentation\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Support building documentation with doxygen.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# create a custom target for the installation\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# When installing, call cmake install with the above install target and add the file to install_manifest.txt\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# UseLatexmk iff one of the arguments is \"SOURCE\"\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# UseLATEX, the old way\n",
        "Line" : 135,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# add rule to create latex document\n",
        "Line" : 143,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# add dependency for target doc, but first construct document's target name\n",
        "Line" : 147,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 11
    },
    "cmake/modules/DuneDoxygen.cmake" : {
      "ObjectId" : "76508d003a239f36240470c5a7adfb7deb5a1935",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module for building documentation using doxygen.\n\n#\n\n# .. cmake_function:: add_doxygen_target\n\n#\n\n#    .. cmake_param:: TARGET\n\n#       :single:\n\n#\n\n#       The suffix to add to the target name, default to the module name.\n\n#\n\n#    .. cmake_param:: DEPENDS\n\n#       :multi:\n\n#\n\n#       A list of further dependencies of the doxygen documentation.\n\n#       Might include :code:`mainpage.txt`.\n\n#\n\n#    .. cmake_param:: OUTPUT\n\n#       :single:\n\n#\n\n#       Name of the output target, necessary if you don't generate html.\n\n#\n\n#    This macro creates a target for building (:code:`doxygen_${ProjectName}`) and installing\n\n#    (:code:`doxygen_install_${ProjectName}`) the generated doxygen documentation.\n\n#    The documentation is built during the top-level :code:`make doc` call. We have added a dependency\n\n#    that makes sure it is built before running :code:`make install`.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set DOT_TRUE for the Doxyfile generation.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# prepare_doxyfile()\n\n# This functions adds the necessary routines for the generation of the\n\n# Doxyfile[.in] files needed to doxygen.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# check whether module has a Doxylocal file\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# default target name is the module name\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# default output is html\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# custom command that executes doxygen\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Create a target for building the doxygen documentation of a module,\n\n# that is run during make doc\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Use a cmake call to install the doxygen documentation and create a\n\n# target for it\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# When installing call cmake install with the above install target\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 10
    },
    "cmake/modules/DuneEnableAllPackages.cmake" : {
      "ObjectId" : "b258d9979bbcf24250a08ab5ebf2b2cd65dd4f50",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Implementation of a simplified CMake build system.\n\n#\n\n# .. cmake_function:: dune_enable_all_packages\n\n#\n\n#    .. cmake_brief::\n\n#\n\n#       Previously, the DUNE build system relied on the user to choose and add the compile and link flags\n\n#       necessary to build an executable. While this offers full control to the user, it\n\n#       is an error-prone procedure.\n\n#\n\n#       Alternatively, users may use this function to simply add the compile flags for all\n\n#       found external modules to all executables in a DUNE module. Likewise, all found libraries are\n\n#       linked to all targets.\n\n#\n\n#    .. cmake_param:: INCLUDE_DIRS\n\n#       :multi:\n\n#\n\n#       A list of include directories, that should be added to all targets.\n\n#       In a standard Dune module, it is not necessary to specify anything.\n\n#\n\n#    .. cmake_param:: COMPILE_DEFINITIONS\n\n#       :multi:\n\n#\n\n#       A list of compile definitions, that should be added to all targets.\n\n#       In a standard Dune module, it is not necessary to specify anything.\n\n#\n\n#    .. cmake_param:: COMPILE_OPTIONS\n\n#       :multi:\n\n#\n\n#       A list of non-definition compile options, that should be added to all targets.\n\n#       In a standard Dune module, it is not necessary to specify anything.\n\n#\n\n#    .. cmake_param:: MODULE_LIBRARIES\n\n#       :multi:\n\n#\n\n#       If your module contains libraries as well as programs and if the programs should automatically\n\n#       link to those libraries, you *MUST* list these libraries in :code:`MODULE_LIBRARIES`. Those libraries will be\n\n#       automatically created by :ref:`dune_enable_all_packages` (which internally calls :ref:`dune_add_library`) and placed\n\n#       in the lib/ directory. The order of the libraries matters: if one library depends on another one, it must\n\n#       be listed after its dependency. This special handling of the libraries is due to the way newer CMake\n\n#       versions handle linking (in particular CMP022 and CMP038). You can later add source files to the library\n\n#       anywhere in the source tree by calling :ref:`dune_library_add_sources`.\n\n#\n\n#       .. warning::\n\n#          The library feature requires CMake 3.1+. If you use the feature with older versions, CMake\n\n#          will emit a fatal error. Moreover, it will issue a warning if the :code:`cmake_minimum_required`\n\n#          version is older than 3.1.\n\n#\n\n#    .. cmake_param:: VERBOSE\n\n#       :option:\n\n#\n\n#       If this option is set, the set of compile flags, linked libraries and include directories\n\n#       that is in use for all targets in the module is printed upon configuration.\n\n#\n\n#    .. cmake_param:: APPEND\n\n#       :option:\n\n#\n\n#       If this option is set, the definitions, flags and directories specified in this function are\n\n#       appended to the global collection of flags instead of being prepended. Only use it, if you know\n\n#       what you are doing.\n\n#\n\n#    Adds all flags and all libraries to all executables that are subsequently added in the directory\n\n#    from where this function is called and from all its subdirectories (recursively).\n\n#    If used, this function *MUST* be called in the top level CMakeLists.txt BEFORE adding any subdirectories!\n\n#    You can optionally add additional include dirs and compile definitions that will also be applied to\n\n#    all targets in the module.\n\n#\n\n#    .. note::\n\n#       If you want to use :code:`dune_enable_all_packages` with an older version of CMake and your DUNE module\n\n#       creates its own library, you have to manually create the library in the top-level CMakeLists.txt\n\n#       file using :ref:`dune_add_library` (with all sources listed within that call), use\n\n#       :ref:`dune_target_enable_all_packages` to add all packages to the library and finally list that library\n\n#       under :code:`LIBRARIES` in the call to :ref:`dune_register_package_flags`. See dune-pdelab for an example of\n\n#       how to do this correctly.\n\n#\n\n#    While :ref:`dune_enable_all_packages` defines the user interface for this feature, developers might\n\n#    also be interested in the following related functions:\n\n#\n\n#    * :ref:`dune_target_enable_all_packages`\n\n#    * :ref:`dune_register_package_flags`\n\n#    * :ref:`dune_library_add_sources`\n\n#\n\n# .. cmake_function:: dune_target_enable_all_packages\n\n#\n\n#    .. cmake_param:: TARGETS\n\n#       :multi:\n\n#\n\n#       A list of targets to add all flags etc. too.\n\n#\n\n#    Adds all currently registered package flags (see :ref:`dune_register_package_flags`) to the given targets.\n\n#    This function is mainly intended to help write DUNE modules that want to use :ref:`dune_enable_all_packages` and\n\n#    define their own libraries, but need to be compatible with CMake < 3.1\n\n#\n\n# .. cmake_function:: dune_register_package_flags\n\n#\n\n#    .. cmake_param:: INCLUDE_DIRS\n\n#       :multi:\n\n#\n\n#       The list of include directories needed by the external package.\n\n#\n\n#    .. cmake_param:: COMPILE_DEFINITIONS\n\n#       :multi:\n\n#\n\n#       The list of compile definitions needed by the external package.\n\n#\n\n#    .. cmake_param:: COMPILE_OPTIONS\n\n#       :multi:\n\n#\n\n#       The list of compile options needed by the external package.\n\n#\n\n#    .. cmake_param:: LIBRARIES\n\n#       :multi:\n\n#\n\n#       The list of libraries that the external package should link to.\n\n#       The order of the input is preserved in the output.\n\n#\n\n#    .. cmake_param:: APPEND\n\n#       :option:\n\n#\n\n#       If this option is set, the definitions, flags and directories specified in this function are\n\n#       appended to the global collection of flags instead of being prepended. Only use it, if you know\n\n#       what you are doing.\n\n#\n\n#    To correctly implement the automatic handling of external libraries, the compile flags, include paths and link\n\n#    flags of all found packages must be registered with this function. This function is only necessary for people that\n\n#    want to write their own :code:`FindFooBar` CMake modules to link against additional libraries which are not supported by\n\n#    the DUNE core modules. Call this function at the end of every find module. If you are using an external FindFoo\n\n#    module which you cannot alter, call it after the call to :code:`find_package(foo)`.\n\n#\n\n# .. cmake_function:: dune_library_add_sources\n\n#\n\n#    .. cmake_param:: module_library\n\n#       :single:\n\n#       :positional:\n\n#\n\n#       The name of the module library target.\n\n#\n\n#    .. cmake_param: SOURCES\n\n#       :multi:\n\n#       :required:\n\n#\n\n#       The source files to add to the DUNE module library :code:`module_library`.\n\n#       That library must have been created by an earlier call to :ref:`dune_enable_all_packages`\n\n#       in the current DUNE module.\n\n#\n\n#    Register sources for module exported library.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle additional include dirs specified in dune_enable_all_packages\n",
        "Line" : 189,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# add include dirs to all targets in module\n",
        "Line" : 199,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# verbose output of include dirs\n",
        "Line" : 202,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# handle additional compile definitions specified in dune_enable_all_packages\n",
        "Line" : 207,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# add compile definitions to all targets in module\n",
        "Line" : 217,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# We have to do this in a loop because add_definitions() is kind of broken: even though it is supposed\n\n# to be *the* function for adding compile definitions, it does not prepend \"-D\" (as opposed to\n\n# target_compile_definitions(), which does). Well, whatever...\n",
        "Line" : 219,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# verbose output of compile definitions\n",
        "Line" : 227,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# handle additional compile options specified in dune_enable_all_packages\n",
        "Line" : 232,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# add compile options to all targets in module\n",
        "Line" : 242,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# verbose output of compile definitions\n",
        "Line" : 245,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# handle libraries\n\n# this is a little tricky because the libraries defined within the current module require special\n\n# handling to avoid tripping over CMake policies CMP022 and CMP038\n",
        "Line" : 250,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# first add all libraries of upstream Dune modules and of external dependencies\n",
        "Line" : 254,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# now we have to do a little dance: Newer versions of CMake complain if a target links to itself,\n\n# so we have to create all targets for libraries inside the module before adding them to the set\n\n# of default libraries to link to. That works because calling link_libraries does not affect targets\n\n# which already exist.\n\n# Moroever, CMake generates a warning when creating a library without any source files, and the linker\n\n# does the same if we add an empty dummy file. We work around that problem by autogenerating a library-specific\n\n# stub source file with two functions ${lib_name}_version() and ${lib_name}_version_string() and add that\n\n# as an initial source file.\n\n# After creating the library with dune_add_library(), we add it to all future targets with a call to\n\n# link_libraries(). The user can then add the real source files by calling dune_library_add_sources()\n\n# throughout the module.\n",
        "Line" : 258,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# This only works for CMAKE 3.1+ because target_sources() - which we use to add sources to the\n\n# libraries after creating them - was added in that version\n",
        "Line" : 272,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# make sure the /lib directory exists - we need it to create the stub source file in there\n",
        "Line" : 283,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# figure out the location of the stub source template\n",
        "Line" : 285,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# create the stub source file in the output directory (using a c++ compatible name)...\n",
        "Line" : 288,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# ...and create the library...\n",
        "Line" : 292,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# ...and add it to all future targets in the module\n",
        "Line" : 294,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# export the DUNE_ENABLE_ALL_PACKAGES_MODULE_LIBRARIES variable to the parent scope\n\n# this is required to make dune_library_add_sources() work (see further down)\n",
        "Line" : 298,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# This only works for CMAKE 3.1+ because target_sources() - which we use to add sources to the\n\n# libraries after creating them - was added in that version\n",
        "Line" : 336,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# This looks weird, but seems to be the most practical way to check for list membership,\n\n# as list(FIND ...) does not work reliably in a macro...\n",
        "Line" : 346,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 23
    },
    "cmake/modules/DuneExecuteProcess.cmake" : {
      "ObjectId" : "f7f837d6ac9246894853bdc36f4a8963319ebfea",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# An error checking wrapper around the cmake command execute_process\n\n#\n\n# .. cmake_command:: dune_execute_process\n\n#\n\n#    .. cmake_param:: ERROR_MESSAGE\n\n#       :single:\n\n#\n\n#       Error message to show if command exited with non-zero exit code.\n\n#       This also implies abortion of the current cmake run with a fatal error.\n\n#       Note, that if this is omitted, no return code checking is done.\n\n#\n\n#    A thin wrapper around the cmake command :code:`execute_process`, that\n\n#    exits on non-zero exit codes. All arguments are forwarded to the actual\n\n#    cmake command.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Decide whether stdout and stderr have to be split\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Call the original cmake function\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Issue an error if requested!\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4,
      "Errorlog" : "line 42:16 token recognition error at: '\"stdout:\\n${log}\\n\\nstderr:\\b'\nline 44:127 token recognition error at: '\")\\n    endif()\\n  endif()\\n\\n  # Propagate logs back to the calling scope\\n  if(EXECUTE_RESULT_VARIABLE)\\n    set(${EXECUTE_RESULT_VARIABLE} ${retcode} PARENT_SCOPE)\\n  endif()\\n  if(EXECUTE_OUTPUT_VARIABLE)\\n    set(${EXECUTE_OUTPUT_VARIABLE} ${log} PARENT_SCOPE)\\n  endif()\\n  if(EXECUTE_ERROR_VARIABLE)\\n    set(${EXECUTE_ERROR_VARIABLE} ${${ERROR_VARIABLE}} PARENT_SCOPE)\\n  endif()\\nendfunction()\\n\u0000'\n"
    },
    "cmake/modules/DuneInstance.cmake" : {
      "ObjectId" : "cbce9430d8b882ec781c69dfa3f7ccc1f6d10283",
      "LastModified" : "2019-02-14T13:50:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module to generate instantiations, typically for some template\n\n#\n\n# .. cmake_module::\n\n#\n\n#    This module can be used to generate explicit template instantiations.\n\n#    Suppose you have a template test function that you want to call for a\n\n#    number of template arguments.  You want to explicitly instantiate the\n\n#    function for each set of template arguments, and put the instanciation\n\n#    into its own translation unit.  (This can be beneficial in that it limits\n\n#    the amount of code that the optimizer sees at once, and thus it can\n\n#    reduce both memory and cpu requirements during compilation.)\n\n#\n\n#    .. rubric:: Examples\n\n#\n\n#    Let's say you are writing a test ``mytest.cc`` and need to call a\n\n#    template function for several types::\n\n#\n\n#      #include <mytestsuite.hh>\n\n#\n\n#      int main() {\n\n#        MyTestSuite suite;\n\n#\n\n#        suite.test<bool>();\n\n#        suite.test<char>();\n\n#        suite.test<int>();\n\n#        suite.test<double>();\n\n#\n\n#        return suite.good() ? EXIT_SUCCESS : EXIT_FAILURE;\n\n#      }\n\n#\n\n#    Let's further say that you want to explicitly instantiate each used\n\n#    ``MyTestSuite::test()`` instance in it's own translation unit.  Then you\n\n#    need a series of files ``mytest_instance_bool.cc``,\n\n#    ``mytest_instance_char.cc``, etc, all with essentially the same content::\n\n#\n\n#      #include <mytestsuite.hh>\n\n#\n\n#      template void MyTestSuite::test<@TYPE@>();\n\n#\n\n#    where ``@TYPE@`` is replaced by ``bool``, ``char``, etc as appropriate.\n\n#\n\n#    This is however not enough: all translation units need to know which\n\n#    instances of ``MyTestSuite::test()`` are instantiated explicitly so they\n\n#    do not instantiate them implicitly themselves (that would violate the\n\n#    one-definition rule).  C++ only allows to declare individual instances as\n\n#    extern, not all of them collectively, so we need to put a list of all\n\n#    these instances into a header ``mytest.hh``::\n\n#\n\n#      #include <mytestsuite.hh>\n\n#\n\n#      extern template void MyTestSuite::test<bool>();\n\n#      extern template void MyTestSuite::test<char>();\n\n#      extern template void MyTestSuite::test<int>();\n\n#      extern template void MyTestSuite::test<double>();\n\n#\n\n#    We also need to include that header from each translation unit in the\n\n#    test, we can simply replace ``#include <mytestsuite.hh>`` with ``#include\n\n#    <mytest.hh>``.\n\n#\n\n#    This is of course tedious and prone tp break if the list of tested types\n\n#    changes.  To make this less fragile this module provides a series of\n\n#    commands: :ref:`dune_instance_begin() <dune_instance_begin>`,\n\n#    :ref:`dune_instance_add() <dune_instance_add>`, and\n\n#    :ref:`dune_instance_end() <dune_instance_end>`, which can be used to\n\n#    automatically generate the explicit instantiations for each type and the\n\n#    contents for the header and the body of main.\n\n#\n\n#    This may look like this in ``CMakeLists.txt``::\n\n#\n\n#      dune_instance_begin(FILES mytest.cc mytest.hh)\n\n#\n\n#      foreach(TYPE IN ITEMS bool char int double)\n\n#        dune_instance_add(ID \"${TYPE}\" FILES mytest_instance.cc)\n\n#      endforeach(TYPE IN ITEMS bool char int double)\n\n#\n\n#      dune_instance_end()\n\n#\n\n#      dune_list_filter(DUNE_INSTANCE_GENERATED INCLUDE REGEX [[\\.cc$]])\n\n#      dune_add_test(NAME mytest\n\n#        SOURCES ${DUNE_INSTANCE_GENERATED})\n\n#\n\n#    The call to :ref:`dune_instance_begin() <dune_instance_begin>` reads\n\n#    ``mytest.cc.in`` and ``mytest.hh.in`` and splits them into embedded\n\n#    templates and other content.  It will replace occurrances of ``@VAR@``\n\n#    now in the other content and save the result for later.\n\n#\n\n#    The call to :ref:`dune_instance_add() <dune_instance_add>` occurs in a\n\n#    loop.  Each call will instanciate the embedded templates extracted\n\n#    earlier to replace occurance of ``@TYPE@`` by the value of the variable\n\n#    ``TYPE`` set in the for loop.  Then files containing explicit\n\n#    instantiatons will be generated as ``mytest_instance_bool.cc``,\n\n#    ``mytest_instance_bool.cc``, etc, from a template file\n\n#    ``mytest_instance.cc.in``.  The name of the generated files are the base\n\n#    file name from the template definition with the ``ID`` inserted before\n\n#    the extension.  The name of the template file is the same base file name\n\n#    with ``.in`` appended.\n\n#\n\n#    :ref:`dune_instance_end() <dune_instance_end>` is used to write\n\n#    ``mytest.cc`` and ``mytest.hh`` with the collected content from the\n\n#    embedded templates.  The list of generated files will be available in the\n\n#    variable ``DUNE_INSTANCE_GENERATED``.\n\n#\n\n#    The template files then look like this:\n\n#\n\n#    ``mytest.cc.in``::\n\n#\n\n#      // @GENERATED_SOURCE@\n\n#\n\n#      #include <config.h>\n\n#\n\n#      #include <mytest.hh>\n\n#\n\n#      int main() {\n\n#        MyTestSuite suite;\n\n#\n\n#      #cmake @template@\n\n#        suite.test<@TYPE@>();\n\n#      #cmake @endtemplate@\n\n#\n\n#        return suite.good() ? EXIT_SUCCESS : EXIT_FAILURE;\n\n#      }\n\n#\n\n#    ``mytest.hh.in``::\n\n#\n\n#      // @GENERATED_SOURCE@\n\n#\n\n#      #include <mytestsuite.hh>\n\n#\n\n#      #cmake @template@\n\n#      extern template void MyTestSuite::test<@TYPE@>();\n\n#      #cmake @endtemplate@\n\n#\n\n#    ``mytest_instance.cc.in``::\n\n#\n\n#      // @GENERATED_SOURCE@\n\n#\n\n#      #include <config.h>\n\n#\n\n#      #include <mytest.hh>\n\n#\n\n#      template void MyTestSuite::test<@TYPE@>();\n\n#\n\n#    The ``@GENERATED_SOURCE@`` substitution is good practice, it tells a\n\n#    human reader that this file was generated and what the template file was,\n\n#    and it hints editors to go into read-only mode.\n\n#\n\n#    .. rubric:: Embedded Templates\n\n#\n\n#    The template files given in :ref:`dune_instance_begin()\n\n#    <dune_instance_begin>` can contain embedded templates.  These will be\n\n#    instantiated by :ref:`dune_instance_add() <dune_instance_add>`, and all\n\n#    instantiations will be concatenated together and replace the original\n\n#    embedded template.\n\n#\n\n#    The begin of an embedded template is marked by a line containing\n\n#    ``@template@`` or ``@template NAME@``.  Leaving off the name is\n\n#    equivalent to an empty name.  ``dune_instance_add(TEMPLATE NAME)`` will\n\n#    only instanciate embedded templates whose name matches and ignore all\n\n#    others.\n\n#\n\n#    The end of an embedded template is marked by a line containing\n\n#    ``@endtemplate@`` or ``@endtemplate NAME@``.  If a name is given, it must\n\n#    match the name of the embedded template it closes.  If no name is given\n\n#    (or the name is empty), that check is omitted.\n\n#\n\n#    There may be arbitrary characters on the same line before or after the\n\n#    begin and end markers.  These are ignored, so you can use them for\n\n#    comments or to trick your editor into proper indentation.  The one\n\n#    exception is that the line surrounding the marker may not contain any\n\n#    ``@`` characters to avoid ambiguities.\n\n#\n\n#    .. rubric:: How Files And Strings Are Generated\n\n#\n\n#    The generation is done using the cmake command ``configure_file(...)``\n\n#    for template files and ``string(CONFIGURE ...)`` for template strings.\n\n#    These simply substitute the current variable values, so make sure to set\n\n#    up the variables to substitute before calling :ref:`dune_instance_add()\n\n#    <dune_instance_add>` or :ref:`dune_instance_begin()\n\n#    <dune_instance_begin>`.\n\n#\n\n#    Refrain from using substitutions that begin with an underscore\n\n#    (i.e. ``@_my_local_var@``).  The generation functions in this module use\n\n#    such names for their local variables and may hide the variable you are\n\n#    trying to substitude.\n\n#\n\n#    When instantiating files we set up a few convenience variables before\n\n#    calling ``configure_file()`` that can be used in substitutions:\n\n#    ``@TEMPLATE@`` contains the name of the template file.  ``@INSTANCE@``\n\n#    contains the name of the file being generated, not including an implied\n\n#    ``${CMAKE_CURRENT_BINARY_DIR}``.  Use ``@BINDIR_INSTANCE@`` if you do\n\n#    want the implied ``${CMAKE_CURRENT_BINARY_DIR}``.  ``@GENERATED_SOURCE@``\n\n#    contains a one-line message that this file was generated, including the\n\n#    name of the template file.\n\n#\n\n#    .. rubric:: Main Interface\n\n#\n\n#    These are the ones you normally use.\n\n#\n\n#    * :ref:`dune_instance_begin() <dune_instance_begin>`\n\n#    * :ref:`dune_instance_add() <dune_instance_add>`\n\n#    * :ref:`dune_instance_end() <dune_instance_end>`\n\n#    * :ref:`DUNE_INSTANCE_GENERATED <DUNE_INSTANCE_GENERATED>`\n\n#\n\n#    .. rubric:: Utilities\n\n#\n\n#    You would not use these directly under normal circumstances.\n\n#\n\n#    * :ref:`dune_instance_parse_file_spec() <dune_instance_parse_file_spec>`\n\n#    * :ref:`dune_instance_from_id() <dune_instance_from_id>`\n\n#    * :ref:`dune_instance_generate_file() <dune_instance_generate_file>`\n\n#\n\n#\n\n# .. cmake_function:: dune_instance_begin\n\n#\n\n#    .. cmake_brief::\n\n#\n\n#       Prepare for a list of instances.\n\n#\n\n#    .. cmake_param:: FILES\n\n#       :multi:\n\n#       :argname: file_spec\n\n#\n\n#       List of template files with embedded templates.\n\n#\n\n#    Read the given template files, and extract embedded templates.  Run the\n\n#    generator on the remaining file content with the variables currently in\n\n#    effect.\n\n#\n\n#    .. note::\n\n#\n\n#       A matching :ref:`dune_instance_end() <dune_instance_end>` is required.\n\n#       Since information is communicated through variables in the callers\n\n#       scope, :ref:`dune_instance_begin()\n\n#       <dune_instance_begin>`/:ref:`dune_instance_end() <dune_instance_end>`\n\n#       blocks may not be nested inside the same scope.  Since a function is a\n\n#       new scope, it may safely contain a :ref:`dune_instance_begin()\n\n#       <dune_instance_begin>`/:ref:`dune_instance_end() <dune_instance_end>`\n\n#       block, even if it is itself called from one.\n\n#\n\n#\n\n# .. cmake_function:: dune_instance_add\n\n#\n\n#    .. cmake_brief::\n\n#\n\n#       Instantiate a template with the currently set variable values.\n\n#\n\n#    .. cmake_param:: FILES\n\n#       :multi:\n\n#       :argname: file_spec\n\n#\n\n#       List of template file specifications.  These are usually the names of\n\n#       template files with the ``.in`` extension removed.  See the ID\n\n#       parameter for details.\n\n#\n\n#    .. cmake_param:: ID\n\n#       :single:\n\n#\n\n#       Used to build the names of generated files.  Each file specification\n\n#       together with this id is given to :ref:`dune_instance_from_id()\n\n#       <dune_instance_from_id>` to determine the name of a template file and\n\n#       the name of an instance file.  To get unique instance file names this\n\n#       ID should usually be a list of variable values joined together by\n\n#       ``_``.\n\n#\n\n#       Specifically, each file specification may be of the form\n\n#       ``template_file_name:base_instance_file_name``, or it may be a single\n\n#       token not containing ``:``.  In the latter case, if that token\n\n#       contains a trailing ``.in``, that is removed and the result is the base\n\n#       instance file name.  The base instance file name has the ``.in``\n\n#       appended again to form the template file name.\n\n#\n\n#       The template file name is used as-is to generate files from.\n\n#\n\n#       The ID is mangled by replacing any runs of non-alphanumeric characters\n\n#       with an underscore ``_``, and stripping any resulting underscore from\n\n#       the beginning and the end.  The result is inserted before any\n\n#       extension into the base instance file name to form the instance file\n\n#       name.\n\n#\n\n#    .. cmake_param:: TEMPLATE\n\n#       :single:\n\n#\n\n#       Instantiate embedded templates by this name.  Defaults to an empty\n\n#       name, matching embedded templates without name.\n\n#\n\n#    Instantiate any embedded templates that match the given template name,\n\n#    substituting the current variables values.  Then, generate files\n\n#    according the the file specifications in the template, doing\n\n#    substitutions as well.\n\n#\n\n#\n\n# .. cmake_function:: dune_instance_end\n\n#\n\n#    .. cmake_brief::\n\n#\n\n#       Close a block started by :ref:`dune_instance_begin()\n\n#       <dune_instance_begin>`, and write the files generated from the\n\n#       templates given there.\n\n#\n\n#    Write the files generated from the template files given in\n\n#    :ref:`dune_instance_begin() <dune_instance_begin>`, including any content\n\n#    generated from embedded templates in :ref:`dune_instance_add()\n\n#    <dune_instance_add>`.\n\n#\n\n#\n\n# .. cmake_function:: dune_instance_parse_file_spec\n\n#\n\n#    .. cmake_brief::\n\n#\n\n#       Parse a file specification into a template file name and an instance\n\n#       file name.\n\n#\n\n#    .. cmake_param:: spec\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#       The file specification.\n\n#\n\n#    .. cmake_param:: template_var\n\n#       :positional:\n\n#       :single:\n\n#\n\n#       Name of the variable to store the template file name in.  Can be empty\n\n#       to discard the template file name.\n\n#\n\n#    .. cmake_param:: instance_var\n\n#       :positional:\n\n#       :single:\n\n#\n\n#       Name of the variable to store the instance file name in.  Can be empty\n\n#       to discard then instance file name.\n\n#\n\n#    The file specification can be the name of a template file if it has\n\n#    ``.in`` at the end, or the name of an instance file if it doesn't.  The\n\n#    name of the other file is obtained by appending or removing ``.in``, as\n\n#    applicable.  Both file names can also be given explicitly in the form\n\n#    ``template_file_name:instance_file_name``.\n\n#\n\n#    .. note::\n\n#\n\n#       This is the function use to parse the file specifications in\n\n#       :ref:`dune_instance_begin() <dune_instance_begin>`.  It is also used\n\n#       as a helper in :ref:`dune_instance_from_id() <dune_instance_from_id>`\n\n#       to determine template file name and base instance file name.\n\n#\n\n#\n\n# .. cmake_function:: dune_instance_from_id\n\n#\n\n#    .. cmake_brief::\n\n#\n\n#       Determine a template file name and an instance file name from a file\n\n#       specification and a unique id.\n\n#\n\n#    .. cmake_param:: file_spec\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#       The file specification.\n\n#\n\n#    .. cmake_param:: id\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#       The id specification.  This should uniquely identify an instance.\n\n#\n\n#    .. cmake_param:: template_var\n\n#       :positional:\n\n#       :single:\n\n#\n\n#       Name of the variable to store the template file name in.  Can be empty\n\n#       to discard the template file name.\n\n#\n\n#    .. cmake_param:: instance_var\n\n#       :positional:\n\n#       :single:\n\n#\n\n#       Name of the variable to store the instance file name in.  Can be empty\n\n#       to discard the instance file name.\n\n#\n\n#    The file specification is handed to :ref:`dune_instance_parse_file_spec()\n\n#    <dune_instance_parse_file_spec>` to determine a template file name and a\n\n#    *base* instance file name.\n\n#\n\n#    The ID is mangled by replacing any runs of non-alphanumeric characters\n\n#    with an underscore ``_``, and stripping any resulting underscore from the\n\n#    beginning and the end.  The result is inserted before any extension into\n\n#    the base instance file name to form the instance file name.\n\n#\n\n#    .. note::\n\n#\n\n#       This is the function use to parse the file specifications given in\n\n#       :ref:`dune_instance_add(FILES ...) <dune_instance_add>`.\n\n#\n\n#\n\n# .. cmake_function:: dune_instance_apply_bindir\n\n#\n\n#    .. cmake_brief::\n\n#\n\n#       Modify a filename to be relative to ``CMAKE_CURRENT_BINARY_DIR``.\n\n#\n\n#    .. cmake_param:: fname_var\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#       The name of the variable containing the file name.\n\n#\n\n#    This is used to mimic the behaviour of ``configure_file()``.  If the file\n\n#    name given is not absolute, it is modified by prepending\n\n#    ``${CMAKE_CURRENT_BINARY_DIR}``.\n\n#\n\n#\n\n# .. cmake_function:: dune_instance_generate_file\n\n#\n\n#    .. cmake_brief::\n\n#\n\n#       Convenience replacement for ``configure_file()``: enable standard\n\n#       substitutions, register files as generated, and flag the same file\n\n#       being generated twice.\n\n#\n\n#    .. cmake_param:: TEMPLATE\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#       The name of the template file.\n\n#\n\n#    .. cmake_param:: INSTANCE\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#       The name of the generated file.  This is assumed relative to\n\n#       ``${CMAKE_CURRENT_BINARY_DIR}``.\n\n#\n\n#    Make sure the variables ``TEMPLATE``, ``INSTANCE``, and\n\n#    ``BINDIR_INSTANCE`` are set to the parameter values and available for\n\n#    substitution.  Also set the variable ``GENERATED_SOURCE`` to a one-line\n\n#    message that tells a human reader that this file is generated, and the\n\n#    name of the template file it was generated from.  The message also\n\n#    includes hints for common editors telling them to switch to read-only\n\n#    mode.\n\n#\n\n#    Then generate the file as if by ``configure_file()``.\n\n#\n\n#    If the instance file has been registered as a generated source file\n\n#    before, this function generates a fatal error.  This ensures that any\n\n#    accidential attempt to generate the same file twice is caught.  As a\n\n#    special exception, if the generated content is the same as before, the\n\n#    error is silently skipped.\n\n#\n\n#\n\n# .. cmake_variable:: DUNE_INSTANCE_GENERATED\n\n#\n\n#    After :ref:`dune_instance_end() <dune_instance_end>`, this holds the list\n\n#    of files that were generated.  The list entries include an implied\n\n#    ``${CMAKE_CURRENT_BINARY_DIR}``, as appropriate.\n\n#\n\n#    Do not rely on the value of this variable and do not modify it inside a\n\n#    :ref:`dune_instance_begin()\n\n#    <dune_instance_begin>`/:ref:`dune_instance_end() <dune_instance_end>`\n\n#    block.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "######################################################################\n\n#\n\n#  Coping with cmake list shortcomings\n\n#\n",
        "Line" : 468,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We use these commands internally to quote text before adding it to lists as\n\n# an element, and to unquote elements again after extracting them.  The quoted\n\n# text is\n\n# - free of ';' characters.  This avoids problems when using list(APPEND),\n\n#   which does not quote ';' characters inside the appended element.  It would\n\n#   also avoid problems with list(INSERT), which mangles any cmake quoting in\n\n#   the list it inserts to, but we don't actually use that command.\n\n# - free of '\\' characters.  This avoids problems with a list element that\n\n#   ends in a '\\' merging with the next element, because the '\\' quotes the\n\n#   ';' that is used to seperate the elements\n\n# - non-empty.  This avoids the problem that cmake can't destinguish between\n\n#   an empty list and a list with one empty element.\n",
        "Line" : 473,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "######################################################################\n\n#\n\n#  instance name and template name manipulation\n\n#\n",
        "Line" : 505,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# check arguments\n",
        "Line" : 514,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# use as-is\n",
        "Line" : 522,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# deduce\n",
        "Line" : 528,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#export\n",
        "Line" : 534,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# build output file name: parse the file_spec into a template name and a base\n\n# instance name.  Mangle the ID by replacing anything special with \"_\" and\n\n# intersperse the result between basename and extension of the base instance\n\n# name.  Use the result as the instance name.\n",
        "Line" : 543,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# split into prefix and suffix\n",
        "Line" : 550,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# mangle the id\n",
        "Line" : 559,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#export\n",
        "Line" : 567,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# mimic the behaviour of configure_file(), placing relative paths in the\n\n# current binary dir\n",
        "Line" : 576,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "######################################################################\n\n#\n\n#  File generation\n\n#\n",
        "Line" : 585,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# prepare instance substitution variables\n",
        "Line" : 591,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Read a template file and split it into three lists\n\n# - content_parts contains the parts before, between, and after templates\n\n# - template_parts contains the content of each template\n\n# - template_names contains the names of each template\n\n# The elements in the lists are quoted using dune_instance_quote_element() to\n\n# protect against problems with empty elements and against cmakes list()\n\n# command butchering it's own quoting.\n",
        "Line" : 601,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ensure that the file content ends in a newline, which makes searching for\n\n# template marker easier\n",
        "Line" : 611,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# line did not match seperator\n",
        "Line" : 669,
        "CharPositionInLine" : 11
      },
      "18" : {
        "Text" : "# Take the name of a list variable containing content parts other then\n\n# embedded templates and instanciate each part.  Put the result back into the\n\n# same variable.  List elements are quoted.\n",
        "Line" : 686,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# prepare instance substitution variables\n",
        "Line" : 705,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# do the generation\n",
        "Line" : 708,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# make sure we did not generate this file before\n",
        "Line" : 713,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# otherwise, the content matches, so nothing to do\n",
        "Line" : 721,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# _seen was false, but the file may still be around from a previous cmake\n\n# run, only write if changed to avoid recompilations\n",
        "Line" : 723,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# only write if the content changes, avoiding recompilations\n",
        "Line" : 732,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "######################################################################\n\n#\n\n#  High-level interface commands\n\n#\n",
        "Line" : 743,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# options\n\n# one_value_keywords\n",
        "Line" : 750,
        "CharPositionInLine" : 7
      },
      "27" : {
        "Text" : "# multi_value_keywords\n",
        "Line" : 752,
        "CharPositionInLine" : 12
      },
      "28" : {
        "Text" : "# reconfigure if the input template file changes\n",
        "Line" : 765,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# options\n",
        "Line" : 792,
        "CharPositionInLine" : 7
      },
      "30" : {
        "Text" : "# one_value_keywords\n",
        "Line" : 793,
        "CharPositionInLine" : 18
      },
      "31" : {
        "Text" : "# multi_value_keywords\n",
        "Line" : 794,
        "CharPositionInLine" : 12
      },
      "32" : {
        "Text" : "# ensure _arg_TEMPLATE is set, even if it is the empty value\n",
        "Line" : 802,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "######################################################################\n\n# Instantiate global (list) templates\n",
        "Line" : 807,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# filter out the end of the range, this also works with empty ranges\n",
        "Line" : 812,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# The list of template parts should be one shorter than the list of\n\n# content parts\n",
        "Line" : 831,
        "CharPositionInLine" : 6
      },
      "36" : {
        "Text" : "######################################################################\n\n# instantiate per instance templates\n",
        "Line" : 856,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# if we did not instantiate anything, that is probably an error\n",
        "Line" : 870,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "######################################################################\n\n# Write global instances\n",
        "Line" : 882,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# filter out the end of the range, this also works with empty ranges\n",
        "Line" : 886,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# make sure we did not generate this file before\n",
        "Line" : 895,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# remove the final newline that we appended when reading the template file\n",
        "Line" : 910,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# only write if the content changes, avoiding recompilations\n",
        "Line" : 914,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 43
    },
    "cmake/modules/DuneMPI.cmake" : {
      "ObjectId" : "2b99ad53a98eacdca9beff668778acf342303dae",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Searches for MPI and thread support and sets the following\n\n# DUNE specific flags:\n\n#\n\n# MPI_DUNE_COMPILE_FLAGS Compiler flags for MPI applications.\n\n# MPI_DUNE_INCLUDE_PATH Include path for MPI applications.\n\n# MPI_DUNE_LINK_FLAGS Linker flags for MPI applications.\n\n# MPI_DUNE_LIBRARIES Libraries for MPI applications.\n\n#\n\n# The DUNE way to compile MPI applications is to use the CXX\n\n# compiler with MPI flags usually used for C. CXX bindings\n\n# are deactivated to prevent ABI problems.\n\n#\n\n# .. cmake_function:: add_dune_mpi_flags\n\n#\n\n#    .. cmake_param:: targets\n\n#       :single:\n\n#       :required:\n\n#       :positional:\n\n#\n\n#       The target list to add the MPI flags to.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# text for feature summary\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We do not support the CXX bindings of MPI\n",
        "Line" : 34,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# There seems to be no target specific include path, use the global one.\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# TODO check on where to position this exactly, doesn't look completely thought through\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# adds MPI flags to the targets\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/modules/DuneMacros.cmake" : {
      "ObjectId" : "56f52fcb397ebb8714786fb3d77e5f927cf181de",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Core DUNE module for CMake.\n\n#\n\n# Documentation of the public API defined in this module:\n\n#\n\n# .. cmake_function:: dune_project\n\n#\n\n#    Initialize a Dune module. This function needs to be run from every\n\n#    top-level CMakeLists.txt file. It sets up the module, defines basic\n\n#    variables and manages depedencies. Don't forget to call\n\n#    :ref:`finalize_dune_project` afterwards.\n\n#\n\n# .. cmake_function:: finalize_dune_project\n\n#\n\n#    Finalize a Dune module. This function needs to be run at the end of\n\n#    every top-level CMakeLists.txt file. Among other things it creates\n\n#    the cmake package configuration files. Modules can add additional\n\n#    entries to these files by setting the variable @${ProjectName}_INIT.\n\n#\n\n# .. cmake_function:: dune_add_library\n\n#\n\n#    .. cmake_brief::\n\n#\n\n#       Add a library to a Dune module!\n\n#\n\n#    .. cmake_param:: basename\n\n#       :single:\n\n#       :required:\n\n#       :positional:\n\n#\n\n#       The basename for the library. On Unix this created :code:`lib<basename>.so`\n\n#       and :code:`lib<basename>.a`\n\n#\n\n#    .. cmake_param:: NO_EXPORT\n\n#       :option:\n\n#\n\n#       If omitted the library is exported for usage in other modules.\n\n#\n\n#    .. cmake_param:: ADD_LIBS\n\n#       :multi:\n\n#\n\n#       A list of libraries that should be incorporated into this library.\n\n#\n\n#    .. cmake_param:: APPEND\n\n#       :option:\n\n#\n\n#       Whether the library should be appended to the\n\n#       exported libraries. If there a DUNE module must\n\n#       make several libraries available, then first one\n\n#       must not use this option but the others have to\n\n#       use it. Otherwise only the last library will be\n\n#       exported as the others will be overwritten.\n\n#\n\n#    .. cmake_param:: OBJECT\n\n#       :option:\n\n#\n\n#       .. note::\n\n#          This feature will very likely vanish in Dune 3.0\n\n#\n\n#    .. cmake_param:: SOURCES\n\n#       :multi:\n\n#       :required:\n\n#\n\n#       The source files from which to build the library.\n\n#\n\n#    .. cmake_param:: COMPILE_FLAGS\n\n#       :single:\n\n#\n\n#       Any additional compile flags for building the library.\n\n#\n\n# .. cmake_function:: dune_target_link_libraries\n\n#\n\n#    .. cmake_param:: BASENAME\n\n#\n\n#    .. cmake_param:: LIBRARIES\n\n#\n\n#    Link libraries to the static and shared version of\n\n#    library BASENAME\n\n#\n\n#\n\n# .. cmake_function:: add_dune_all_flags\n\n#\n\n#    .. cmake_param:: targets\n\n#       :single:\n\n#       :required:\n\n#       :positional:\n\n#\n\n#       The targets to add the flags of all external libraries to.\n\n#\n\n#    This function is superseded by :ref:`dune_target_enable_all_packages`.\n\n#\n\n# Documentation of internal macros in this module:\n\n#\n\n# dune_module_to_uppercase(upper_name module_name)\n\n#\n\n# Converts a module name given by module_name into an uppercase string\n\n# upper_name where all dashes (-) are replaced by underscores (_)\n\n# Example: dune-common -> DUNE_COMMON\n\n#\n\n# dune_module_information(MODULE_DIR [QUIET])\n\n#\n\n# Parse ${MODULE_DIR}/dune.module and provide that information.\n\n# If the second argument is QUIET no status message is printed.\n\n#\n\n# dune_create_dependency_tree()\n\n#\n\n# Creates the dependency tree of the module.\n\n#\n\n# dune_module_to_macro(_macro_name, _dune_module)\n\n#\n\n# Converts a module name given by _dune_module into a string _macro_name\n\n# where all dashes (-) are removed and letters after a dash are capitalized\n\n# Example: dune-grid-howto -> DuneGridHowto\n\n#\n\n# _macro_name: variable where the name will be stored.\n\n# _dune_module: the name of the dune module.\n\n#\n\n# dune_regenerate_config_cmake()\n\n#\n\n# Creates a new config_collected.h.cmake file in ${CMAKE_CURRENT_BINARY_DIR} that\n\n# consists of entries from ${CMAKE_CURRENT_SOURCE_DIR}/config.h.cmake\n\n# and includes non-private entries from the config.h.cmake files\n\n# of all dependent modules.\n\n# Finally config.h is created from config_collected.h.cmake.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make CMake use rpath on OS X\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# this policy only needed for CMake older then 3.0\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Enable C to skip CXX bindings for some tests.\n",
        "Line" : 132,
        "CharPositionInLine" : 19
      },
      "4" : {
        "Text" : "# Converts a module name given by _module into an uppercase string\n\n# _upper where all dashes (-) are replaced by underscores (_)\n\n# Example: dune-common -> DUNE_COMMON\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# use pkg-config\n",
        "Line" : 182,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# compute the path to the libraries\n",
        "Line" : 192,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#import library\n",
        "Line" : 206,
        "CharPositionInLine" : 12
      },
      "8" : {
        "Text" : "# parse other module's dune.module file to generate variables for config.h\n",
        "Line" : 228,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# QUIET)\n",
        "Line" : 236,
        "CharPositionInLine" : 58
      },
      "10" : {
        "Text" : "# check whether dependency mathes version requirement\n",
        "Line" : 239,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "#\n\n# split list of modules, potentially with version information\n\n# into list of modules and list of versions\n\n#\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Mark as no version requested.\n",
        "Line" : 304,
        "CharPositionInLine" : 25
      },
      "13" : {
        "Text" : "# Having a space is mandatory as we will append it to a list\n\n# and an empty string will not be treated as entry we append to it.\n",
        "Line" : 305,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "#\n\n# Convert a string with spaces in a list which is a string with semicolon\n\n#\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#\n\n# extracts major, minor, and revision from version string\n\n#\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# make variable accessible in parent scope\n",
        "Line" : 328,
        "CharPositionInLine" : 59
      },
      "17" : {
        "Text" : "# remove false matches in version string and export to parent scop\n",
        "Line" : 330,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# add dune-common version from dune.module to config.h\n\n# optional second argument is verbosity\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# find version strings\n",
        "Line" : 348,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# find strings for module name, maintainer\n\n# 1. Check for line starting with Module\n",
        "Line" : 357,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# 2. Check for line starting with Maintainer\n",
        "Line" : 364,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# 3. Check for line starting with Depends\n",
        "Line" : 370,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# 4. Check for line starting with Suggests\n",
        "Line" : 383,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# set module version\n",
        "Line" : 395,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# configure CPack\n",
        "Line" : 401,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# modules, and versions are not real variables, make them one\n",
        "Line" : 410,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "#Process dependencies\n",
        "Line" : 466,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Process suggestions\n",
        "Line" : 470,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Move to next level\n",
        "Line" : 477,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Reverse the order of the modules and remove duplicates\n\n# At end of this clause we have have a list modules\n\n# where for each entry all dependencies are before the\n\n# module in the list.\n",
        "Line" : 497,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Converts a module name given by _dune_module into a string _macro_name\n\n# where all dashes (-) are removed and letters after a dash are capitalized\n\n# Example: dune-grid-howto -> DuneGridHowto\n",
        "Line" : 540,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# module not processed yet\n",
        "Line" : 568,
        "CharPositionInLine" : 6
      },
      "33" : {
        "Text" : "# Search for a cmake files containing tests and directives\n\n# specific to this module\n",
        "Line" : 570,
        "CharPositionInLine" : 6
      },
      "34" : {
        "Text" : "# Prevent false positives due to caching\n",
        "Line" : 574,
        "CharPositionInLine" : 42
      },
      "35" : {
        "Text" : "# register dune module\n",
        "Line" : 600,
        "CharPositionInLine" : 6
      },
      "36" : {
        "Text" : "# macro that should be called near the begin of the top level CMakeLists.txt.\n\n# Namely it sets up the module, defines basic variables and manages\n\n# depedencies.\n\n# Don't forget to call finalize_dune_project afterwards.\n",
        "Line" : 606,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# check whether a compiler name instead of compiler path is given, this causes serious problems with older cmake versions.\n\n# Unfortunately those errors only surface on a second run, when the build directory already exists. The compiler\n\n# variable is then (for obscure reasons) expanded to ${CMAKE_BINARY_DIR}/...\n",
        "Line" : 611,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# check if CXX flag overloading has been enabled (see OverloadCompilerFlags.cmake)\n",
        "Line" : 618,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# extract information from dune.module\n",
        "Line" : 621,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# check whether this module has been explicitly disabled through the cmake flags.\n\n# If so, stop the build. This is necessary because dunecontrol does not parse\n\n# the given CMake flags for a disabled Dune modules.\n",
        "Line" : 631,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# assert the project names matches\n",
        "Line" : 644,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# optional Fortran support\n",
        "Line" : 649,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# As default request position independent code if shared libraries are built\n\n# This should allow DUNE modules to use CMake's object libraries.\n\n# This can be overwritten for targets by setting the target property\n\n# POSITION_INDEPENDENT_CODE to false/OFF\n",
        "Line" : 671,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# Use only static libraries.\n\n# We do this by overriding the library suffixes.\n",
        "Line" : 679,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# check for C++ features, set compiler flags for C++14 or C++11 mode\n",
        "Line" : 693,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# set include path and link path for the current project.\n",
        "Line" : 697,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Search for MPI and set the relevant variables.\n",
        "Line" : 704,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# Make calling fortran routines from C/C++ possible\n",
        "Line" : 707,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# Write FC.h header containing information about\n\n# how to call fortran routined.\n\n# It will be included in config.h\n",
        "Line" : 711,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# Write empty FC.h header\n\n# Make sure to only write this file once, otherwise every cmake run\n\n# will trigger a full rebuild of the whole project.\n",
        "Line" : 716,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# Create custom target for building the documentation\n\n# and provide macros for installing the docs and force\n\n# building them before.\n",
        "Line" : 726,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# activate pkg-config\n",
        "Line" : 731,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Process the macros provided by the dependencies and ourself\n",
        "Line" : 734,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# Set variable where the cmake modules will be installed.\n\n# Thus the user can override it and for example install\n\n# directly into the CMake installation. We use a cache variable\n\n# that is overridden by a local variable of the same name if\n\n# the user does not explicitely set a value for it. Thus the value\n\n# will automatically change if the user changes CMAKE_INSTALL_DATAROOTDIR\n\n# or CMAKE_INSTALL_PREFIX\n",
        "Line" : 738,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# set up make headercheck\n",
        "Line" : 757,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# create a new config.h file and overwrite the existing one\n",
        "Line" : 763,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# overwrite file with new content\n",
        "Line" : 772,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# define that we found this module\n",
        "Line" : 778,
        "CharPositionInLine" : 1
      },
      "59" : {
        "Text" : "# add previous module specific section\n",
        "Line" : 788,
        "CharPositionInLine" : 1
      },
      "60" : {
        "Text" : "# strip the private section\n",
        "Line" : 797,
        "CharPositionInLine" : 7
      },
      "61" : {
        "Text" : "# extract the bottom section\n",
        "Line" : 800,
        "CharPositionInLine" : 7
      },
      "62" : {
        "Text" : "# append bottom section\n",
        "Line" : 805,
        "CharPositionInLine" : 7
      },
      "63" : {
        "Text" : "# parse again dune.module file of current module to set PACKAGE_* variables\n",
        "Line" : 814,
        "CharPositionInLine" : 1
      },
      "64" : {
        "Text" : "# append CONFIG_H_BOTTOM section at the end if found\n",
        "Line" : 817,
        "CharPositionInLine" : 1
      },
      "65" : {
        "Text" : "# macro that should be called at the end of the top level CMakeLists.txt.\n\n# Namely it creates config.h and the cmake-config files,\n\n# some install directives and exports the module.\n",
        "Line" : 823,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "#configure all headerchecks\n",
        "Line" : 831,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "#create cmake-config files for installation tree\n",
        "Line" : 834,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# Set the location where the doc sources are installed.\n\n# Needed by custom package configuration\n\n# file section of dune-grid.\n",
        "Line" : 839,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "# Generate a standard cmake package configuration file\n",
        "Line" : 845,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# compute under which libdir the package configuration files are to be installed.\n\n# If the module installs an object library we use CMAKE_INSTALL_LIBDIR\n\n# to capture the multiarch triplet of Debian/Ubuntu.\n\n# Otherwise we fall back to DUNE_INSTALL_NONOBJECTLIB which is lib\n\n# if not set otherwise.\n",
        "Line" : 884,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# Set the location of the doc file source. Needed by custom package configuration\n\n# file section of dune-grid.\n",
        "Line" : 896,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "#create cmake-config files for build tree\n",
        "Line" : 908,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# install dune.module file\n",
        "Line" : 948,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "# install cmake-config files\n",
        "Line" : 951,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "# install config.h\n",
        "Line" : 956,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "# install pkg-config files\n",
        "Line" : 961,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# add a target to generate config.h.cmake\n",
        "Line" : 967,
        "CharPositionInLine" : 4
      },
      "78" : {
        "Text" : "# actually write the config.h file to disk\n\n# using generated file\n",
        "Line" : 970,
        "CharPositionInLine" : 4
      },
      "79" : {
        "Text" : "# actually write the config.h file to disk\n",
        "Line" : 976,
        "CharPositionInLine" : 4
      },
      "80" : {
        "Text" : "# check if CXX flag overloading has been enabled\n\n# and write compiler script (see OverloadCompilerFlags.cmake)\n",
        "Line" : 984,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# Creates shared and static libraries with the same basename.\n\n# More docu can be found at the top of this file.\n",
        "Line" : 1018,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# register sources, libs and flags for building the library later\n",
        "Line" : 1032,
        "CharPositionInLine" : 6
      },
      "83" : {
        "Text" : "#create lib\n",
        "Line" : 1052,
        "CharPositionInLine" : 4
      },
      "84" : {
        "Text" : "# link with specified libraries.\n",
        "Line" : 1056,
        "CharPositionInLine" : 4
      },
      "85" : {
        "Text" : "# Build library in ${PROJECT_BINARY_DIR}/lib\n",
        "Line" : 1064,
        "CharPositionInLine" : 4
      },
      "86" : {
        "Text" : "#create static lib\n",
        "Line" : 1073,
        "CharPositionInLine" : 8
      },
      "87" : {
        "Text" : "# make sure both libs have the same name.\n",
        "Line" : 1075,
        "CharPositionInLine" : 8
      },
      "88" : {
        "Text" : "# link with specified libraries.\n",
        "Line" : 1080,
        "CharPositionInLine" : 8
      },
      "89" : {
        "Text" : "#create shared libs\n",
        "Line" : 1089,
        "CharPositionInLine" : 8
      },
      "90" : {
        "Text" : "# link with specified libraries.\n",
        "Line" : 1094,
        "CharPositionInLine" : 8
      },
      "91" : {
        "Text" : "# The follwing allows for adding multiple libs in the same\n\n# directory or below with passing the APPEND keyword.\n\n# If there are additional calls to dune_add_library in other\n\n# modules then you have to use APPEND or otherwise only the\n\n# last lib will get exported as a target.\n",
        "Line" : 1107,
        "CharPositionInLine" : 6
      },
      "92" : {
        "Text" : "# Allow to explicitly pass APPEND\n",
        "Line" : 1118,
        "CharPositionInLine" : 6
      },
      "93" : {
        "Text" : "# install targets to use the libraries in other modules.\n",
        "Line" : 1123,
        "CharPositionInLine" : 6
      },
      "94" : {
        "Text" : "# export libraries for use in build tree\n",
        "Line" : 1129,
        "CharPositionInLine" : 6
      },
      "95" : {
        "Text" : "# property not set. set it directly\n",
        "Line" : 1140,
        "CharPositionInLine" : 4
      },
      "96" : {
        "Text" : "# setup options\n",
        "Line" : 1208,
        "CharPositionInLine" : 2
      },
      "97" : {
        "Text" : "#  if(NOT (REPLACE_GLOBAL AND REPLACE_TARGET AND\n\n#        REPLACE_SOURCE AND REPLACE\n",
        "Line" : 1238,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 98
    },
    "cmake/modules/DunePathHelper.cmake" : {
      "ObjectId" : "48e061020f278736fd6435863eed33b912dba7fc",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Some helper functions for people developing the CMake build system\n\n# to get quick and easy access to path variables of Dune modules.\n\n#\n\n# .. cmake_function:: dune_module_path\n\n#\n\n#    .. cmake_param:: MODULE\n\n#       :single:\n\n#       :required:\n\n#\n\n#       The name of the module.\n\n#\n\n#    .. cmake_param:: RESULT\n\n#       :single:\n\n#       :required:\n\n#\n\n#       The name of the variable to export the result.\n\n#\n\n#    .. cmake_param:: CMAKE_MODULES\n\n#       :option:\n\n#\n\n#       Set to return the path to cmake modules\n\n#\n\n#    .. cmake_param:: BUILD_DIR\n\n#       :option:\n\n#\n\n#       Set to return the path to the build directory\n\n#\n\n#    .. cmake_param:: SOURCE_DIR\n\n#       :option:\n\n#\n\n#       Set to return the include path of the module\n\n#\n\n#    .. cmake_param:: SCRIPT_DIR\n\n#       :option:\n\n#\n\n#       Set to return the CMake script dir\n\n#\n\n#\n\n#    Returns the specified path of the given module. This differs\n\n#    whether it is called from the actual module, or from a module\n\n#    requiring or suggesting this module. One and only one type of path\n\n#    may be requested.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Parse Arguments\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Check whether one and only one path type was set.\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Set the requested paths for the cmake module path\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Set the requested paths for the cmake script path\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Set the requested paths for the build directory\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set the requested paths for the include directory\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Now set the path in the outer scope!\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "cmake/modules/DunePkgConfig.cmake" : {
      "ObjectId" : "b3f4eece74c3c5f4f5f2bab531bc00a65e8e7988",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# searches for pkg-config, creates the\n\n# file <module-name>.pc from <module-name>.pc.in,\n\n# and adds installation directives.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# text for feature summary\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set some variables that are used in the pkg-config file\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#create pkg-config file\n",
        "Line" : 36,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# install pkgconfig file\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake/modules/DunePythonCommonMacros.cmake" : {
      "ObjectId" : "9dbc61a69ad70aa76a64e1597a39095557f41c8c",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The python extension of the Dune cmake build system\n\n#\n\n# .. cmake_module::\n\n#\n\n#    This module is the main entry point for the python extension of the Dune cmake\n\n#    build system. It handles the detection of the python installation, defines installation\n\n#    rules for python packages in Dune modules and provides virtual environments to\n\n#    run python code from cmake.\n\n#\n\n#    If you want to use Dune modules that provide Python functionality, you should be aware\n\n#    of some facts:\n\n#\n\n#    * CMake looks for your python interpreter during configure. If you want to have it\n\n#      work with a virtual environment, you should activate your virtualenv before configure.\n\n#    * Each module has an additional target :code:`make install_python`, that installs python packages\n\n#      defined in the Dune module. You can customize the install location with\n\n#      :ref:`DUNE_PYTHON_INSTALL_LOCATION`. This is also included in :code:`make install`.\n\n#    * There is additional functionality, that automatically sets up a virtual environment\n\n#      at configure time, you can read more at :ref:`DunePythonVirtualenv`.\n\n#\n\n#    After the module :code:`DunePythonCommonMacros` is run (which happens automatically when\n\n#    configuring dune-common) the following python-related variables will be set and available\n\n#    for use in downstream modules:\n\n#\n\n#    * All variables set by :code:`FindPythonInterp.cmake` and :code:`FindPythonLibs.cmake`\n\n#    * :code:`DUNE_PYTHON_SYSTEM_IS_VIRTUALENV`: True if the given system interpreter resides in\n\n#      virtual environment.\n\n#\n\n#    For documentation on how to customize the build process, check the input variable\n\n#    reference for any variables prefixed with :code:`DUNE_PYTHON`. To learn how to write build\n\n#    system code for Dune modules shipping python, have a look at the command reference for\n\n#    commands prefixed :code:`dune_python`.\n\n#\n\n# .. cmake_variable:: DUNE_PYTHON_INSTALL_LOCATION\n\n#\n\n#    This variable can be used to control where Dune should install python\n\n#    packages. Possible values are:\n\n#\n\n#    * :code:`user`: installs into the users home directory through :code:`pip --user`. Note, that\n\n#      this is incompatible with using virtual environments (as per pip docs).\n\n#    * :code:`system`: into the standard paths of the interpreter which was found\n\n#      by cmake.\n\n#    * :code:`none`: Never install any python packages.\n\n#\n\n#    The default value in use depends on the system interpreter to run in a virtual environment\n\n#    or not: If it does, :code:`system` is the default, if it does not :code:`none` is the default.\n\n#    This rather unintuitive default originates from the strong belief, that installing\n\n#    python packages into the system locations at :code:`/usr/...` should be discouraged.\n\n#\n\n# .. cmake_variable:: DUNE_PYTHON_VIRTUALENV_SETUP\n\n#\n\n#    Set this variable to allow the Dune build system to set up a virtualenv at\n\n#    configure time. Such virtual environment is very useful, whenever python code\n\n#    is to be run at configure time, i.e. to implement code generation in Python or\n\n#    to use Python wrappers in testing. Some downstream modules will *require* you\n\n#    to set this variable. When setting this variable, you allow the Dune buildsystem\n\n#    to install packages through :code:`pip` into a virtualenv, that resides in a cmake\n\n#    build directory. For all the information on this virtualenv, see :ref:`DunePythonVirtualenv`.\n\n#\n\n# .. cmake_function:: dune_python_require_virtualenv_setup\n\n#\n\n#    Call this function from a downstream module, if that module relies on the\n\n#    the presence of the configure time virtualenv described in :ref:`DunePythonVirtualenv`.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include all the other parts of the python extension to avoid that users need\n\n# to explicitly include parts of our build system.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Update the list of valid python versions, the shipped CMake modules tend to outdate...\n\n# Mention all those not present in CMake 2.8.12\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find the Python Interpreter\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Find the Python libraries\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Determine whether the given interpreter is running inside a virtualenv\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Determine where to install python packages\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Check presence of python packages required by the buildsystem\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add python related meta targets\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Set the path to a Dune wheelhouse that is to be used during installation\n\n# NB: Right now, the same logic is used to retrieve the location of the\n\n#     wheelhouse (which means that you have to use the same CMAKE_INSTALL_PREFIX\n\n#     when *using* installed modules, you used when *installing* them.\n\n#     TODO: Replace this with a better mechanism (like writing the location into\n\n#           dune-commons package config file)\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Have make install do the same as make install_python\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Implement a check for the presence of the virtualenv\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# If requested, switch into DunePythonVirtualenv.cmake and setup the virtualenv.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cmake/modules/DunePythonFindPackage.cmake" : {
      "ObjectId" : "8901d666a3b352e421404a7bec3ccc4a476d5cf1",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module provides functions to check for the existence of python packages on the host system.\n\n#\n\n# .. cmake_function:: dune_python_find_package\n\n#\n\n#    .. cmake_param:: PACKAGE\n\n#       :required:\n\n#       :single:\n\n#\n\n#       The package name to look for.\n\n#\n\n#    .. cmake_param: RESULT\n\n#       :single:\n\n#\n\n#       The variable to store the result of the check in\n\n#       in the calling scope. Defaults to :code:`DUNE_PYTHON_<package>_FOUND`\n\n#       Note that the package name is case sensitive and will\n\n#       usually be lowercase.\n\n#\n\n#    .. cmake_param:: REQUIRED\n\n#       :option:\n\n#\n\n#       If set, the function will error out if the package is not\n\n#       found.\n\n#\n\n#    .. cmake_param:: VERSION\n\n#       :single:\n\n#\n\n#       The minimum version of the package that is required.\n\n#\n\n#    .. cmake_param:: EXACT\n\n#       :option:\n\n#\n\n#       Whether the given version requirement has to be matched exactly.\n\n#\n\n#    .. cmake_param:: INTERPRETER\n\n#       :single:\n\n#\n\n#       The python interpreter, whose paths are searched for the package.\n\n#       Defaults to :code:`${PYTHON_EXECUTABLE}`, might differ when dealing with\n\n#       the configure-time virtualenv set up with :ref:`DUNE_PYTHON_VIRTUALENV_SETUP`.\n\n#\n\n#    Find a given python package on the system.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Parse Arguments\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Do error checking on input and apply defaults\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Do the actual check\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Perform additional checks\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Check the found version of the given python package\n\n# We cannot use find_package_handle_standard_args for that, as it is too\n\n# closely tied to using find_package(), which we cannot use for variable package\n\n# name...\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Set the result variable and print the result\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cmake/modules/DunePythonInstallPackage.cmake" : {
      "ObjectId" : "f001cd5ffbd4c5ca67e1136ef0a5ec08fbf2b377",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This cmake module provides infrastructure for cmake installation rules concerning python packages.\n\n#\n\n# .. cmake_function:: dune_python_install_package\n\n#\n\n#    .. cmake_param:: PATH\n\n#       :required:\n\n#       :single:\n\n#\n\n#       Relative path to the given python package source code.\n\n#\n\n#    .. cmake_param:: ADDITIONAL_PIP_PARAMS\n\n#       :multi:\n\n#       :argname: param\n\n#\n\n#       Parameters to add to any :code:`pip install` call (appended).\n\n#\n\n#    This function installs the python package located at the given path. It\n\n#\n\n#    * installs it to the location specified with :ref:`DUNE_PYTHON_INSTALL_LOCATION` during\n\n#      :code:`make install_python` and during :code:`make install`.\n\n#    * installs a wheel into the Dune wheelhouse during :code:`make install`.\n\n#      This is necessary for mixing installed and non-installed Dune modules.\n\n#\n\n#    The package at the given location is expected to be a pip-installable package.\n\n#\n\n# .. cmake_variable:: DUNE_PYTHON_INSTALL_EDITABLE\n\n#\n\n#    Set this variable to have all installations of python packages use\n\n#    :code:`pip --editable`.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Parse Arguments\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Find out whether we should install in editable mode\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Construct the wheel house installation option string\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#\n\n# The following line is a bummer!\n\n# We cannot have editable packages once we start using global installations!\n\n# This is related to the nightmare that is https://github.com/pypa/pip/issues/3\n\n#\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Construct the editable option string\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Construct the installation location option string\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Leave this function if no installation rules are required\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Check for the presence of the pip package\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#\n\n# If requested, install into the configure-time Dune virtualenv\n\n#\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#\n\n# Now define rules for `make install_python`.\n\n#\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Leave this function if no installation rules are required\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Determine a target name for installing this package\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Add a custom target that globally installs this package if requested\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Define rules for `make install` that install a wheel into a central wheelhouse\n\n#\n\n# NB: This is necessary, to allow mixing installed and non-installed modules\n\n#     with python packages. The wheelhouse will allow to install any missing\n\n#     python packages into a virtual environment.\n\n#\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Construct the wheel installation commandline\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Add the installation rule\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "cmake/modules/DunePythonRequireVersion.cmake" : {
      "ObjectId" : "fc66595584a3f7dc6c9103561ed0c43ab4d10701",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module provides functions to implement constraints on the version of the python interpreter.\n\n#\n\n# .. cmake_function:: dune_python_require_version\n\n#\n\n#    .. cmake_param:: version\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#       The minimum required version.\n\n#\n\n#    Error out, if the python interpreter found by cmake is older than the given version.\n\n#    Python2 and Python3 versions are not compared to each other, so you can call this\n\n#    macro multiple times to enforce minimal versions on a python2 and python3 interpreter\n\n#    independently.\n\n#\n\n# .. cmake_function:: dune_python_force_version\n\n#\n\n#    .. cmake_param:: version\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#       The major python version: 2 or 3\n\n#\n\n#    Enforce the major version of the python interpreter to be either 2 or 3.\n\n#\n\n#    .. note::\n\n#\n\n#       This is the developer-facing interface to enforce a major python version.\n\n#       A user can set the input variable :ref:`DUNE_PYTHON_FORCE_PYTHON2` or\n\n#       :ref:`DUNE_PYTHON_FORCE_PYTHON3` to achieve the same result for a given build only.\n\n#\n\n# .. cmake_variable:: DUNE_PYTHON_FORCE_PYTHON_VERSION\n\n#\n\n#     Set this variable to a python version (e.g. \"3.6\") if you want to force cmake to\n\n#     to pick up a specific version of the python interpreter in presence of several\n\n#     python versions. Note that if you just want to distinguish the major versions 2 and 3,\n\n#     you might as well use the variables :ref:`DUNE_PYTHON_FORCE_PYTHON2` or\n\n#     :ref:`DUNE_PYTHON_FORCE_PYTHON3`.\n\n#\n\n# .. cmake_variable:: DUNE_PYTHON_FORCE_PYTHON2\n\n#\n\n#     Set this variable to TRUE to force usage of a python2 interpreter. This is\n\n#     the *user-facing* interface, developers of Dune modules, may force the python\n\n#     major version through :ref:`dune_python_force_version`.\n\n#\n\n#     .. note::\n\n#        This does not check for the interpreter requirements of your python packages.\n\n#        If you set it and one of your packages requires python3, you will get an error.\n\n#\n\n#\n\n# .. cmake_variable:: DUNE_PYTHON_FORCE_PYTHON3\n\n#\n\n#     Set this variable to TRUE to force usage of a python3 interpreter. This is\n\n#     the *user-facing* interface, developers of Dune modules, may force the python\n\n#     major version through :ref:`dune_python_force_version`.\n\n#\n\n#     .. note::\n\n#        This does not check for the interpreter requirements of your python packages.\n\n#        If you set it and one of your packages requires python2, you will get an error.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is a python2 requirement.\n",
        "Line" : 69,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# This is a python3 requirement.\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cmake/modules/DunePythonTestCommand.cmake" : {
      "ObjectId" : "a01ba75336d26dee43cc8ebe51ba291668e25468",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Wrap python testing commands into the CMake build system\n\n#\n\n# .. cmake_function:: dune_python_add_test\n\n#\n\n#    .. cmake_param:: COMMAND\n\n#       :multi:\n\n#       :required:\n\n#\n\n#       The command to run. It will be executed during :code:`make test_python`\n\n#       and during `ctest`.\n\n#\n\n#       .. note::\n\n#\n\n#          If your testing command involves an invocation of the python\n\n#          interpreter you should use :code:`${PYTHON_EXECUTABLE}` for that.\n\n#          Also calling python executables through :code:`-m` is generally to\n\n#          be favored, e.g. :code:`${PYTHON_EXECUTABLE} -m pytest` instead of\n\n#          :code:`py.test`.\n\n#\n\n#    .. cmake_param:: WORKING_DIRECTORY\n\n#       :single:\n\n#       :argname: dir\n\n#\n\n#       The working directory of the command. Defaults to\n\n#       the current build directory.\n\n#\n\n#    .. cmake_param:: NAME\n\n#       :single:\n\n#\n\n#       A name to identify this test in ctest. Names must be unique throughout\n\n#       the project. If omitted, defaults to mangling of the command.\n\n#\n\n#    Integrates a python testing framework command into the Dune\n\n#    build system. Added commands are run, when the target\n\n#    :code:`test_python` is built and during :code:`ctest`.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Parse Arguments\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Apply defaults\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Actually run the command\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Build this during make test_python\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Also build this during ctest\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "cmake/modules/DunePythonVirtualenv.cmake" : {
      "ObjectId" : "2b064c800b2df0161dca22168b3eae90cb691af5",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Manage the creation of a configure-time virtual environment\n\n#\n\n# .. cmake_module::\n\n#\n\n#    This module manages the creation of virtual python environment during\n\n#    configuration. Execution of this module must be explicitly enabled by\n\n#    setting the variable :ref:`DUNE_PYTHON_VIRTUALENV_SETUP`. Note that some\n\n#    downstream modules will require you to set this variable. The purpose\n\n#    of this virtual environment is to be able to run python code from cmake\n\n#    in situations such as python-based code generation, running postprocessing\n\n#    in python during testing etc.\n\n#\n\n#    Although designed for internal use, this virtualenv can also be manually\n\n#    inspected. A symlink to the activation script is placed in the top level\n\n#    build directory of all Dune modules in the stack. To directly execute a\n\n#    command in the virtualenv, you can use the script :code:`run-in-dune-env <command>`,\n\n#    which is also placed into every build directory.\n\n#\n\n#    All packages installed with :ref:`dune_python_install_package` are automatically\n\n#    installed into the virtualenv.\n\n#\n\n#    After execution of this module, the following are available for use in\n\n#    downstream modules:\n\n#\n\n#    * :code:`DUNE_PYTHON_VIRTUALENV_PATH` The path of the virtual environment\n\n#    * :code:`DUNE_PYTHON_VIRTUALENV_EXECUTABLE` The python interpreter in the virtual environment\n\n#\n\n#    By default, the created virtualenv resides in the first non-installed Dune module of\n\n#    the module stack (if no installation is performed: dune-common). Be aware\n\n#    that mixing installed and non-installed modules may result in a situation,\n\n#    where multiple such environments are created, although only one should.\n\n#    You can change this behavior by either specifying a fixed path for the virtualenv\n\n#    using :ref:`DUNE_PYTHON_VIRTUALENV_PATH` or by enabling\n\n#    :ref:`DUNE_PYTHON_EXTERNAL_VIRTUALENV_FOR_ABSOLUTE_BUILDDIR` if you are using an\n\n#    absolute build directory with dunecontrol. Note that this flag is enabled by default\n\n#    starting from Dune 2.7.\n\n#\n\n# .. cmake_variable:: DUNE_PYTHON_VIRTUALENV_PATH\n\n#\n\n#    When the Dune build system has setup a virtualenv, this variable will contain its location.\n\n#    You can also set this variable to a fixed path when CMake, and the virtualenv will be placed\n\n#    at that location.\n\n#\n\n# .. cmake_variable:: DUNE_PYTHON_EXTERNAL_VIRTUALENV_FOR_ABSOLUTE_BUILDDIR\n\n#\n\n#    Before Dune 2.7, the virtualenv was always placed inside the build directory of  the first\n\n#    non-installed Dune module that the current module depends on. When using installed core modules\n\n#    or a multi-stage installation process, this can lead to situations where there are multiple\n\n#    virtualenvs, making it impossible to find all Python modules installed by upstream modules.\n\n#    In order to avoid this problem at least for builds using an absolute build directory (i.e., the\n\n#    :code:`--builddir` option of dunecontrol refers to an absolute path), the build system will\n\n#    place the virtualenv in a dedicated directory :code:`dune-python-env` inside that absolute\n\n#    build directory, where it will be found by all Dune modules. If you want to disable this\n\n#    behavior, set :code:`DUNE_PYTHON_EXTERNAL_VIRTUALENV_FOR_ABSOLUTE_BUILDDIR=0`.\n\n#\n\n# .. cmake_variable:: DUNE_PYTHON_ALLOW_GET_PIP\n\n#\n\n#    The Dune build system will try to build a virtualenv with pip installed into it,\n\n#    but this can fail in some situations, in particular on Debian and Ubuntu distributions.\n\n#    In this case, you will se a warning message in the CMake output. If you are on Debian\n\n#    or Ubuntu, try installing the :code:`python3-venv` (for Python 3) and / or\n\n#    :code:`python-virtualenv` packages, delete your build directory and try configuring\n\n#    again.\n\n#\n\n#    If that still does not help, set this variable to allow the Dune build system to download\n\n#    :code:`get-pip.py` from https://bootstrap.pypa.io/get-pip.py at configure time and execute\n\n#    it to install pip into the freshly set up virtual environment. While this should normally\n\n#    not be necessary anymore, see https://bugs.launchpad.net/debian/+source/python3.4/+bug/1290847\n\n#    for more information about the underlying distribution bug.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If the user has not specified an absolute, we look through the dependency tree of this module\n\n# for a build directory that already contains a virtual environment.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# pre-populate DUNE_PYTHON_EXTERNAL_VIRTUALENV_FOR_ABSOLUTE_BUILDDIR\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if we haven't found it yet, check in the current build directory - this might be a reconfigure\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# We didn't find anything, so figure out the correct location for building the virtualenv\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Use a dedicated directory not associated with any module\n",
        "Line" : 105,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Create the virtualenv inside our build directory\n",
        "Line" : 108,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# If it does not yet exist, set it up!\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Check for presence of the virtualenv/venv package\n",
        "Line" : 115,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Set some options depending on which virtualenv package is used\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Set up the env itself\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# First, try to build it with pip installed, but only if the user has not set DUNE_PYTHON_ALLOW_GET_PIP\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# we attempted the default installation before, so issue a warning\n",
        "Line" : 151,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# remove the remainder of a potential first attempt\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# try to build the env without pip\n",
        "Line" : 159,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Also store the virtual env interpreter directly\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Write a symlink for activation of the environment into all the\n\n# build directories of the Dune stack\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Also write a small wrapper script 'run-in-dune-env' into the build directory\n\n# This is necessary to execute installed python scripts (the bin path of a virtualenv\n\n# is *not* in the sys path, so a simple `python scriptname` does not work.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# The virtualenv might not contain pip due to the distribution bug described in\n\n# https://bugs.launchpad.net/debian/+source/python3.4/+bug/1290847\n\n# We need to install pip, so if pip is missing, we offer to download and run the get-pip\n\n# script. We ask users for permission to do so, or we allow them to set it up themselves.\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Fetch the get-pip.py script\n",
        "Line" : 205,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Verify that the script was successfully fetched\n",
        "Line" : 209,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Execute the script\n",
        "Line" : 218,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 22
    },
    "cmake/modules/DuneSphinxCMakeDoc.cmake" : {
      "ObjectId" : "c85b13dd3e7948b3e5846c014528fa3359652538",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module to generate CMake API documentation with Sphinx\n\n#\n\n# .. cmake_function:: dune_cmake_sphinx_doc\n\n#\n\n#    .. cmake_brief::\n\n#\n\n#       Generate the documentation that you are just browsing!!!\n\n#\n\n#    .. cmake_param:: BUILDTYPE\n\n#       :multi:\n\n#\n\n#       Set the type of build that is requested. By default, \"html\" is chosen.\n\n#       The list of available build types:\n\n#\n\n#       * `html`\n\n#\n\n#    .. cmake_param:: SPHINX_CONF\n\n#       :single:\n\n#       :argname: conf\n\n#\n\n#       A template for a conf file to be passed to :code:`sphinx-build`.\n\n#       The real configuration file will be generated through CMakes\n\n#       :code:`configure_file` mechanism. A reasonable default file is\n\n#       provided by dune-common. Only use this if you want to create\n\n#       custom documentation.\n\n#\n\n#    .. cmake_param:: RST_SOURCES\n\n#       :multi:\n\n#       :argname: src\n\n#\n\n#       A list of rst sources, that should be configured into the build tree\n\n#       (using :code:`configure_file`). If omitted, this defaults to\n\n#       :code:`index.rst` and :code:`contents.rst` with suitable content.\n\n#       Only use this if you want to create custom documentation.\n\n#\n\n#    .. cmake_param:: MODULE_ONLY\n\n#       :option:\n\n#\n\n#       Only document CMake functionality from the current Dune module.\n\n#\n\n#    Generate a documentation for the CMake API. A set of cmake\n\n#    modules defined by the parameters and all functions and macros\n\n#    there in are automatically generated. The top level directory\n\n#    of the documentation is the current build directory (aka the\n\n#    directory that this function is called from)\n\n#\n\n#    There are some assumptions on how the documentation in\n\n#    the CMake modules is written:\n\n#\n\n#    * At the beginning of each CMake module there is a comment block that is written in restructured text.\n\n#      The first two characters of each line (the comment character\n\n#      and a blank) are ignored. Any resulting content of lines most form valid rst.\n\n#    * TODO document more\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# text for feature summary\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Only proceed if Sphinx was found on the system\n",
        "Line" : 64,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Only proceed if the python interpreter was found by cmake\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Parse Arguments\n",
        "Line" : 76,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Apply defaults\n",
        "Line" : 86,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Extract the script directory from dune-common\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Find the configuration file template.\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Apply defaults to the rst sources that are not module dependent.\n",
        "Line" : 99,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Write the conf.py, which sets up Sphinx into the build directory\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Check whether we need to look through all dependencies\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Now treat the module dependent rst sources.\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Look for a build system documentation exported by the module dep\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# check in the correct path for non-installed modules\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# now check for the correct path taking into account installed ones\n",
        "Line" : 124,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Now process the file, if we have found one\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# add it to index.rst then.\n",
        "Line" : 130,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# ... and copy the rst file to the current build.\n",
        "Line" : 132,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# Write the non-module dependent rst source files from templates\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Generate the list of modules by looking through the module paths\n\n# of all dependencies for files matching *.cmake\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Initialize a variable that collects all dependencies of the documentation\n",
        "Line" : 152,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Generate the rst files for all cmake modules\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Call Sphinx once for each requested build type\n",
        "Line" : 168,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Call the sphinx executable\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 24
    },
    "cmake/modules/DuneStreams.cmake" : {
      "ObjectId" : "e3ad927e89574a82e5fbe3bb9dd33e00622a008c",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This Module configures the DUNE debug streams.\n\n#\n\n# .. cmake_variable:: MINIMAL_DEBUG_LEVEL\n\n#\n\n#    This variable configures the Dune debug streams.\n\n#    Standard debug streams with level below :code:`MINIMAL_DEBUG_LEVEL` will\n\n#    collapse to doing nothing if output is requested. Possible values are\n\n#    :code:`vverb`, :code:`verb`, :code:`info`, :code:`warn` and :code:`grave`.\n\n#    Defaults to :code:`warn`.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# default to warn\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/DuneSymlinkOrCopy.cmake" : {
      "ObjectId" : "9bceeffb3eeb17235d16df05574bb0e6991cf65f",
      "LastModified" : "2019-02-14T13:50:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module provides convenience macros to provide files from the source tree in the build tree.\n\n#\n\n# It provides the following macros:\n\n#\n\n#   dune_add_copy_command(filename)\n\n#\n\n# This macro adds a file-copy command.\n\n# The file_name is the name of a file that exists\n\n# in the source tree. This file will be copied\n\n# to the build tree when executing this command.\n\n# Notice that this does not create a top-level\n\n# target. In order to do this you have to additionally\n\n# call add_custom_target(...) with dependency\n\n# on the file.\n\n#\n\n#   dune_add_copy_target(target_name file_name)\n\n#\n\n# This macro adds a file-copy target under given target_name.\n\n# The file_name is the name of a file that exists\n\n# in the source tree. This file will be copied\n\n# to the build tree.\n\n#\n\n#   dune_add_copy_dependency(target file_name)\n\n#\n\n# This macro adds a copy-dependency to a target\n\n# The file_name is the name of a file that exists\n\n# in the source tree. This file will be copied\n\n# to the build tree.\n\n#\n\n#\n\n# .. cmake_function:: dune_add_copy_command\n\n#\n\n#    .. cmake_param:: filename\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#    TODO DOC ME!\n\n#\n\n# .. cmake_function:: dune_add_copy_target\n\n#\n\n#    .. cmake_param:: target_name\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#    .. cmake_param:: filename\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#    TODO DOC ME!\n\n#\n\n# .. cmake_function:: dune_add_copy_dependency\n\n#\n\n#    .. cmake_param:: target\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#    .. cmake_param:: filename\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#    TODO DOC ME!\n\n#\n\n# .. cmake_function:: dune_symlink_to_source_tree\n\n#\n\n#    .. cmake_param:: NAME\n\n#       :single:\n\n#\n\n#       The name of the symlink, defaults to :code:`src_dir`.\n\n#\n\n#    This function will place a symlink into every subdirectory\n\n#    of the build tree, that allows to jump to the corresponding\n\n#    source directory. Call this from your top-level :code:`CMakeLists.txt`\n\n#    to enable it for a given module. To enable it for all modules,\n\n#    set the variable :ref:`DUNE_SYMLINK_TO_SOURCE_TREE` instead.\n\n#    If used on Windows systems, a warning is issued.\n\n#\n\n# .. cmake_variable:: DUNE_SYMLINK_TO_SOURCE_TREE\n\n#\n\n#    If this variable is set to TRUE, the functionality of\n\n#    :ref:`dune_symlink_to_source_tree` is enabled in all modules.\n\n#    This will place symlinks to the corresponding source directory\n\n#    in every subdirectory of the build directory.\n\n#\n\n# .. cmake_function:: dune_symlink_to_source_files\n\n#\n\n#    .. cmake_param:: FILES\n\n#       :multi:\n\n#       :required:\n\n#\n\n#       The list of files to symlink\n\n#\n\n#    .. cmake_param:: DESTINATION\n\n#       :multi:\n\n#       :required:\n\n#\n\n#       Relative path of the target directory\n\n#\n\n#    Create symlinks in the build tree that\n\n#    point to particular files in the source directory. This is usually\n\n#    used for grid and ini files and the like. On Windows systems,\n\n#    a warning is issued and copying is used as a fallback to\n\n#    symlinking.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if source and binary dir are equal then the symlink will create serious problems\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# parse arguments\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# check for Windows to issue a warning\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# get a list of all files in the current source directory and below.\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# iterate over all files, extract the directory name and write a symlink in the corresponding build directory\n",
        "Line" : 153,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# if source and binary dir are equal then the symlink will create serious problems\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# parse arguments\n",
        "Line" : 168,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# create symlinks for all given files\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# check whether there is an explicitly given destination\n",
        "Line" : 177,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# check for Windows to issue a warning\n",
        "Line" : 183,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# create a copy\n",
        "Line" : 189,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# create symlink\n",
        "Line" : 192,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 13
    },
    "cmake/modules/DuneTestMacros.cmake" : {
      "ObjectId" : "ad0a2a7cce31c8f875f4216b85bf3466d88afb93",
      "LastModified" : "2019-02-14T13:50:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module that provides tools for testing the Dune way.\n\n#\n\n# Note that \"the Dune way\" of doing this has changed after\n\n# the 2.4 release. See the build system documentation for details.\n\n#\n\n# .. cmake_function:: dune_declare_test_label\n\n#\n\n#    .. cmake_brief::\n\n#\n\n#       Declare labels for :ref:`dune_add_test`.\n\n#\n\n#    .. cmake_param:: LABELS\n\n#       :multi:\n\n#\n\n#       The names of labels to declare.  Label names must be nonempty and\n\n#       consist only of alphanumeric characters plus :code:`-` and :code:`_`\n\n#       to make sure it is easy to construct regular expressions from them for\n\n#       :code:`ctest -L ${label_regex}`.\n\n#\n\n#    Labels need to be declared to ensure that the target\n\n#    :code:`build_${label}_tests` exists.  They will normally be declared\n\n#    on-demand by :ref:`dune_add_test`.  But sometimes it is useful to be able to\n\n#    run :code:`make build_${label}_tests` whether or not any tests with that\n\n#    label exists in a module.  For these cases :ref:`dune_declare_test_label` can\n\n#    be called explicitly.\n\n#\n\n#    The label :code:`quick` is always predeclared.\n\n#\n\n# .. cmake_function:: dune_add_test\n\n#\n\n#    .. cmake_brief::\n\n#\n\n#       Adds a test to the Dune testing suite!\n\n#\n\n#    .. cmake_param:: NAME\n\n#       :single:\n\n#\n\n#       The name of the test that should be added. If an executable\n\n#       is also added (by specifying SOURCES), the executable is also\n\n#       named accordingly. If omitted, the name will be deduced from\n\n#       the (single) sources parameter or from the given target. Note\n\n#       that this requires you to take care, that you only use a target\n\n#       or source file for but one such test.\n\n#\n\n#    .. cmake_param:: SOURCES\n\n#       :multi:\n\n#\n\n#       The source files that this test depends on. These are the\n\n#       sources that will be passed to :ref:`add_executable`.\n\n#\n\n#       You *must* specify either :code:`SOURCES` or :code:`TARGET`.\n\n#\n\n#    .. cmake_param:: TARGET\n\n#       :single:\n\n#\n\n#       An executable target which should be used for the test. Use\n\n#       this option over the :code:`SOURCES` parameter if you want to\n\n#       reuse already added targets.\n\n#\n\n#       You *must* specify either :code:`SOURCES` or :code:`TARGET`.\n\n#\n\n#    .. cmake_param:: COMPILE_DEFINITIONS\n\n#       :multi:\n\n#       :argname: def\n\n#\n\n#       A set of compile definitions to add to the target.\n\n#       Only definitions beyond the application of :ref:`add_dune_all_flags`\n\n#       have to be stated.\n\n#       This is only used, if :code:`dune_add_test` adds the executable itself.\n\n#\n\n#    .. cmake_param:: COMPILE_FLAGS\n\n#       :multi:\n\n#       :argname: flag\n\n#\n\n#       A set of non-definition compile flags to add to the target.\n\n#       Only flags beyond the application of :ref:`add_dune_all_flags`\n\n#       have to be stated.\n\n#       This is only used, if :code:`dune_add_test` adds the executable itself.\n\n#\n\n#    .. cmake_param:: LINK_LIBRARIES\n\n#       :multi:\n\n#       :argname: lib\n\n#\n\n#       A list of libraries to link the target to.\n\n#       Only libraries beyond the application of :ref:`add_dune_all_flags`\n\n#       have to be stated.\n\n#       This is only used, if :code:`dune_add_test` adds the executable itself.\n\n#\n\n#    .. cmake_param:: EXPECT_COMPILE_FAIL\n\n#       :option:\n\n#\n\n#       If given, the test is expected to not compile successfully!\n\n#\n\n#    .. cmake_param:: EXPECT_FAIL\n\n#       :option:\n\n#\n\n#       If given, this test is expected to compile, but fail to run.\n\n#\n\n#    .. cmake_param:: CMD_ARGS\n\n#       :multi:\n\n#       :argname: arg\n\n#\n\n#       Command line arguments that should be passed to this test.\n\n#\n\n#    .. cmake_param:: MPI_RANKS\n\n#       :multi:\n\n#       :argname: ranks\n\n#\n\n#       The numbers of cores that this test should be executed with.\n\n#       Note that one test (in the ctest sense) is created for each number\n\n#       given here. Any number exceeding the user-specified processor maximum\n\n#       :ref:`DUNE_MAX_TEST_CORES` will be ignored. Tests with a\n\n#       processor number :code:`n` higher than one will have the suffix\n\n#       :code:`-mpi-n` appended to their name. You need to specify the\n\n#       TIMEOUT option when specifying the MPI_RANKS option.\n\n#\n\n#    .. cmake_param:: CMAKE_GUARD\n\n#       :multi:\n\n#       :argname: condition\n\n#\n\n#       A number of conditions that CMake should evaluate before adding this\n\n#       test. If one of the conditions fails, the test should be shown\n\n#       as skipped in the test summary. Use this feature instead of guarding\n\n#       the call to :code:`dune_add_test` with an :code:`if` clause.\n\n#\n\n#       The passed condition can be a complex expression like\n\n#       `( A OR B ) AND ( C OR D )`. Mind the spaces around the parentheses.\n\n#\n\n#       Example: Write CMAKE_GUARD dune-foo_FOUND if you want your test to only\n\n#       build and run when the dune-foo module is present.\n\n#\n\n#    .. cmake_param:: COMMAND\n\n#       :multi:\n\n#       :argname: cmd\n\n#\n\n#       You may specify the COMMAND option to give the exact command line to be\n\n#       executed when running the test. This defaults to the name of the executable\n\n#       added by dune_add_test for this test. Note that if you specify both CMD_ARGS\n\n#       and COMMAND, the given CMD_ARGS will be put behind your COMMAND. If you use\n\n#       this in combination with the MPI_RANKS parameter, the call to mpi will still be\n\n#       wrapped around the given commands.\n\n#\n\n#    .. cmake_param:: COMPILE_ONLY\n\n#       :option:\n\n#\n\n#       Set if the given test should only be compiled during :code:`make build_tests`,\n\n#       but not run during :code:`make test`. This is useful if you compile the same\n\n#       executable twice, but with different compile flags, where you want to assure that\n\n#       it compiles with both sets of flags, but you already know they will produce the\n\n#       same result.\n\n#\n\n#    .. cmake_param:: TIMEOUT\n\n#       :single:\n\n#\n\n#       If set, the test will time out after the given number of seconds. This supersedes\n\n#       any timeout setting in ctest (see `cmake --help-property TIMEOUT`). If you\n\n#       specify the MPI_RANKS option, you need to specify a TIMEOUT.\n\n#\n\n#    .. cmake_param:: LABELS\n\n#       :multi:\n\n#\n\n#       A list of labels to add to the test.  This has two effects: it sets\n\n#       the LABELS property on the test so :code:`ctest -L ${label_regex}` can\n\n#       be used to run all tests with certain labels.  It also adds any\n\n#       targets created as dependencies to a custom target, so you can build\n\n#       all tests with a particular label by doing :code:`make\n\n#       build_${label}_tests` without having to build all the other tests as\n\n#       well.\n\n#\n\n#       The :code:`build_${label}_tests` targets are created on-demand the\n\n#       first time a test with that label is added.  In some situations it can\n\n#       depend on the values of cmake cache variables whether a test is added,\n\n#       and then it can happen that the :code:`build_${target}_tests` target\n\n#       exists only sometimes.  If your workflow relies on the existance of\n\n#       these targets, even if building them just returns successfully without\n\n#       doing anything, you can ensure they exist by calling\n\n#       :ref:`dune_declare_test_label` unconditionally.  The label\n\n#       :code:`quick` is always predeclared in this way.\n\n#\n\n#       The label names must be non-empty, and must only contain alphanumeric\n\n#       characters other than :code:`-` or :code:`_`.  This restriction is in\n\n#       place to make it easy to construct regular expressions from the label\n\n#       names for :code:`ctest -L ${label_regex}`.\n\n#\n\n#    This function defines the Dune way of adding a test to the testing suite.\n\n#    You may either add the executable yourself through :ref:`add_executable`\n\n#    and pass it to the :code:`TARGET` option, or you may rely on :ref:`dune_add_test`\n\n#    to do so.\n\n#\n\n# .. cmake_variable:: DUNE_REENABLE_ADD_TEST\n\n#\n\n#    You may set this variable to True either through your opts file or in your module\n\n#    (before the call to :code:`include(DuneMacros)`) to suppress the error that is thrown if\n\n#    :code:`add_test` is used. You should only do that if you have proper reason to do so.\n\n#\n\n# .. cmake_variable:: DUNE_MAX_TEST_CORES\n\n#\n\n#    You may set this variable to give an upperbound to the number of processors, that\n\n#    a single test may use. Defaults to 2, when MPI is found and to 1 otherwise.\n\n#\n\n# .. cmake_variable:: DUNE_BUILD_TESTS_ON_MAKE_ALL\n\n#\n\n#    You may set this variable through your opts file or on a per module level (in the toplevel\n\n#    :code:`CMakeLists.txt` before :code:`include(DuneMacros)`) to have the Dune build system\n\n#    build all tests during `make all`. Note, that this may take quite some time for some modules.\n\n#    If not in use, you have to build tests through the target :code:`build_tests`.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# enable the testing suite on the CMake side.\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Introduce a target that triggers the building of all tests\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make sure the label is not empty, and does not contain any funny\n\n# characters, in particular regex characters\n",
        "Line" : 229,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# predefine \"quick\" test label so build_quick_tests can be built\n\n# unconditionally\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set the default on the variable DUNE_MAX_TEST_CORES\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Check whether the parser produced any errors\n",
        "Line" : 260,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Check input for validity and apply defaults\n",
        "Line" : 265,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# try deducing the test name from the executable name\n",
        "Line" : 273,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# try deducing the test name form the source name\n",
        "Line" : 277,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# deducing a name is only possible with a single source argument\n",
        "Line" : 279,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# strip file extension\n",
        "Line" : 284,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Discard all parallel tests if MPI was not found\n",
        "Line" : 309,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Find out whether this test should be a dummy\n",
        "Line" : 314,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# If we do nothing, switch the sources for a dummy source\n",
        "Line" : 325,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Add the executable if it is not already present\n",
        "Line" : 334,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# add all flags to the target!\n",
        "Line" : 337,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# This is just a placeholder\n",
        "Line" : 339,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Make sure to exclude the target from all, even when it is user-provided\n",
        "Line" : 346,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# make sure each label exists and its name is acceptable\n",
        "Line" : 353,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Have build_tests and build_${label}_tests depend on the given target in\n\n# order to trigger the build correctly\n",
        "Line" : 356,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Process the EXPECT_COMPILE_FAIL option\n",
        "Line" : 365,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Add one test for each specified processor number\n",
        "Line" : 371,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# if this is a skipped test because a guard was false, overwrite the command\n",
        "Line" : 388,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "# Now add the actual test\n",
        "Line" : 394,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# Make the test depend on the existence of the target to trigger \"Not Run\" response\n",
        "Line" : 399,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# Define the number of processors (ctest will coordinate this with the -j option)\n",
        "Line" : 403,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "# Apply the timeout (which was defaulted to 5 minutes if not specified)\n",
        "Line" : 405,
        "CharPositionInLine" : 6
      },
      "28" : {
        "Text" : "# Process the EXPECT_FAIL option\n",
        "Line" : 407,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# When using ninja, we must call the build command from ${PROJECT_BINARY_DIR}\n",
        "Line" : 411,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# Skip the test if the return code is 77!\n",
        "Line" : 415,
        "CharPositionInLine" : 6
      },
      "31" : {
        "Text" : "# Set the labels on the test\n",
        "Line" : 417,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 32
    },
    "cmake/modules/FindGMP.cmake" : {
      "ObjectId" : "23b2084a595325edeebf85fc41d298b108b3b495",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# .. cmake_module::\n\n#\n\n#    Find the GNU MULTI-Precision Bignum (GMP) library\n\n#    and the corresponding C++ bindings GMPxx\n\n#\n\n#    You may set the following variables to modify the\n\n#    behaviour of this module:\n\n#\n\n#    :ref:`GMP_ROOT`\n\n#       Path list to search for GMP and GMPxx\n\n#\n\n#    Sets the following variables:\n\n#\n\n#    :code:`GMP_FOUND`\n\n#       True if the GMP library, the GMPxx headers and\n\n#       the GMPxx library were found.\n\n#\n\n# .. cmake_variable:: GMP_ROOT\n\n#\n\n#   You may set this variable to have :ref:`FindGMP` look\n\n#   for the gmp and gmpxx packages in the given path before\n\n#   inspecting system paths.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# search for location of header gmpxx.h\", only at positions given by the user\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# try default paths now\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# check if header is accepted\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# look for library gmp, only at positions given by the user\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# try default paths now\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# look for library gmpxx, only at positions given by the user\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# try default paths now\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# check if library works\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# behave like a CMake module is supposed to behave\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# text for feature summary\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# if GMPxx headers, GMP library, and GMPxx library are found, store results\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# log result\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# log errornous result\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# set HAVE_GMP for config.h\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# register all GMP related flags\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "cmake/modules/FindInkscape.cmake" : {
      "ObjectId" : "0c1af73028ae87e9180556c180e0f667f174a2ba",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# .. cmake_module::\n\n#\n\n#    Module that checks for inkscape\n\n#\n\n#    Sets the following variables\n\n#\n\n#    :code:`INKSCAPE_FOUND`\n\n#       Whether inkscape was found\n\n#\n\n#    :code:`INKSCAPE`\n\n#       Path to inkscape to generate .png's form .svg's\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# text for feature summary\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindLatexMk.cmake" : {
      "ObjectId" : "531e1e360d5416439cab942d437e29ae857ec769",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find module for LatexMk\n\n#\n\n# This module honors the following input variables:\n\n# LATEXMK_ROOT\n\n#   Directory to take the latexmk executable from\n\n# LATEXMK_DIR\n\n#   Alternative variable instead of LATEXMK_ROOT\n\n#\n\n# The module checks for the presence of the LatexMk executable\n\n# and sets the following variables:\n\n#\n\n# LATEXMK_FOUND\n\n#   Whether the latexmk executable was found on the system\n\n# LATEXMK_EXECUTABLE\n\n#   The full path of the found latexmk executable\n\n# LATEXMK_VERSION_STRING\n\n#   A well readable string of the latexmk version.\n\n# LATEXMK_VERSION_MAJOR\n\n#   The major version of the latexmk executable\n\n# LATEXMK_VERSION_MINOR\n\n#   The minor version of the latexmk executable\n\n#\n\n# Copyright (c) 2017, Dominic Kempf, Steffen Müthing\n\n#\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification,\n\n# are permitted provided that the following conditions are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright notice, this\n\n#   list of conditions and the following disclaimer.\n\n#\n\n# * Redistributions in binary form must reproduce the above copyright notice, this\n\n#   list of conditions and the following disclaimer in the documentation and/or\n\n#   other materials provided with the distribution.\n\n#\n\n# * Neither the name of the Universität Heidelberg nor the names of its\n\n#   contributors may be used to endorse or promote products derived from this\n\n#   software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find the actual program\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If found, figure out a version\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/FindMETIS.cmake" : {
      "ObjectId" : "5cdc24324df105eb3ff766be5c0403a3e3705233",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# .. cmake_module::\n\n#\n\n#    Find the METIS library\n\n#\n\n#    You may set the following variables to modify the\n\n#    behaviour of this module:\n\n#\n\n#    :ref:`METIS_ROOT`\n\n#       Prefix, where METIS is installed\n\n#\n\n#    :ref:`METIS_LIB_NAME`\n\n#       Name of the METIS library (default: metis)\n\n#\n\n#    :ref:`METIS_LIBRARY`\n\n#       Full path to the METIS library\n\n#\n\n#    Sets the following variables:\n\n#\n\n#    :code:`METIS_FOUND`\n\n#       True if the METIS library was found.\n\n#\n\n#    :code:`METIS_LIBRARY`\n\n#       Full path to the METIS library\n\n#\n\n#    :code:`METIS_LIBRARIES`\n\n#       List of libraries needed for linking with METIS\n\n#\n\n# .. cmake_variable:: METIS_ROOT\n\n#\n\n#   You may set this variable to have :ref:`FindMETIS` look\n\n#   for the METIS library and includes in the given path\n\n#   before inspecting default system paths.\n\n#\n\n# .. cmake_variable:: METIS_LIB_NAME\n\n#\n\n#   You may set this variable to specify the name of the METIS\n\n#   library that :ref:`FindMETIS` looks for.\n\n#\n\n# .. cmake_variable:: METIS_LIBRARY\n\n#\n\n#   You may set this variable to specify the full path to the METIS\n\n#   library, that should be used by :ref:`FindMETIS`.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# search metis header\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# check metis header\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Save variables\n",
        "Line" : 59,
        "CharPositionInLine" : 25
      },
      "4" : {
        "Text" : "# search metis library\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# we need to check whether we need to link m, copy the lazy solution from FindBLAS and FindLAPACK here.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# check metis library\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# do a backup\n",
        "Line" : 83,
        "CharPositionInLine" : 63
      },
      "8" : {
        "Text" : "# Maybe we are using static scotch libraries. In this case we need to link\n\n# the other scotch libraries too. Let's make a best effort.\n\n# Get the path where METIS_LIBRARY resides\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Search for additional libs only in this directory.\n\n# Otherwise we might find incompatible ones, e.g. for int instead of long\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# unset HAVE_METIS_PARTGRAPHKWAY to force another\n\n# run of check_function_exists(METIS_PartGraphKway\n",
        "Line" : 101,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# behave like a CMake module is supposed to behave\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# if both headers and library are found, store results\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# We need to cache METIS_LIBRARIES as for subsequent runs\n\n# The scotch stuff will not be set again!!!\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# log result\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# log errornous result\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# register all METIS related flags\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "cmake/modules/FindMProtect.cmake" : {
      "ObjectId" : "75b3fcba7b3cad6673809404482a8754cbd6dcc6",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# .. cmake_module::\n\n#\n\n#    Module that detects mprotect support\n\n#\n\n#    Sets the following variables:\n\n#\n\n#    * :code:`HAVE_SYS_MMAN_H`\n\n#    * :code:`HAVE_MPROTECT`\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindPTScotch.cmake" : {
      "ObjectId" : "49ecbfa44311434d3a2ce810dfe7813bdde14228",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# .. cmake_module::\n\n#\n\n#    Module that checks whether PT-Scotch is available.\n\n#\n\n#    You may set the following variables to customize this modules behaviour:\n\n#\n\n#    :ref:`PTSCOTCH_ROOT`\n\n#       Prefix where PT-Scotch is installed.\n\n#\n\n#    :ref:`PTSCOTCH_SUFFIX`\n\n#       Scotch might be compiled using different\n\n#       integer sizes (int32, int64, long). When\n\n#       this is is set the headers and libaries\n\n#       are search under the suffix\n\n#       :code:`include/scotch-${PTSCOTCH_SUFFIX}`, and\n\n#       :code:`lib/scotch-${PTSCOTCH_SUFFIX}`, respectively.\n\n#\n\n#    This module sets the following variables:\n\n#\n\n#    :code:`PTSCOTCH_FOUND`\n\n#       True if PT-Scotch was found.\n\n#\n\n#    :code:`PTSCOTCH_INCLUDE_DIRS`\n\n#       All include directories needed to compile PT-Scotch programs.\n\n#\n\n#    :code:`PTSCOTCH_LIBRARIES`\n\n#       All libraries needed to link PT-Scotch programs.\n\n#\n\n#    :code:`PTSCOTCH_FOUND`\n\n#       True if PT-Scotch was found.\n\n#\n\n# .. cmake_variable:: PTSCOTCH_ROOT\n\n#\n\n#   You may set this variable to have :ref:`FindPTScotch` look\n\n#   for the PTScotch package in the given path before inspecting\n\n#   system paths.\n\n#\n\n# .. cmake_variable:: PTSCOTCH_SUFFIX\n\n#\n\n#   PTScotch might be compiled using different\n\n#   integer sizes (int32, int64, long). When\n\n#   this is is set the headers and libaries\n\n#   are search under the suffix\n\n#   :code:`include/scotch-${PTSCOTCH_SUFFIX}`, and\n\n#   :code:`lib/scotch-${PTSCOTCH_SUFFIX}`, respectively.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Save variables\n",
        "Line" : 64,
        "CharPositionInLine" : 25
      },
      "2" : {
        "Text" : "# behave like a CMake module is supposed to behave\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#restore old values\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# log result\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindParMETIS.cmake" : {
      "ObjectId" : "50612c09ba751fca9c72e85b154f259460c0bdc8",
      "LastModified" : "2019-03-07T19:01:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# .. cmake_module::\n\n#\n\n#    Module that checks whether ParMETIS is available.\n\n#\n\n#    You may set the following variables to configure this modules behaviour:\n\n#\n\n#    :ref:`PARMETIS_ROOT`\n\n#       Prefix where ParMETIS is installed.\n\n#\n\n#    :ref:`METIS_LIB_NAME`\n\n#       Name of the METIS library (default: metis).\n\n#\n\n#    :ref:`PARMETIS_LIB_NAME`\n\n#       Name of the ParMETIS library (default: parmetis).\n\n#\n\n#    :ref:`METIS_LIBRARY`\n\n#       Full path of the METIS library.\n\n#\n\n#    :ref:`PARMETIS_LIBRARY`\n\n#       Full path of the ParMETIS library\n\n#\n\n#    Sets the following variables:\n\n#\n\n#    :code:`PARMETIS_FOUND`\n\n#       True if ParMETIS was found.\n\n#\n\n#    :code:`METIS_LIBRARY`\n\n#       Full path of the METIS library.\n\n#\n\n#    :code:`PARMETIS_LIBRARY`\n\n#       Full path of the ParMETIS library.\n\n#\n\n#    :code:`PARMETIS_LIBRARIES`\n\n#       List of all libraries needed for linking with ParMETIS,\n\n#\n\n# .. cmake_variable:: PARMETIS_ROOT\n\n#\n\n#    You may set this variable to have :ref:`FindParMETIS` look\n\n#    for the ParMETIS library and includes in the given path\n\n#    before inspecting default system paths.\n\n#\n\n# .. cmake_variable:: PARMETIS_LIB_NAME\n\n#\n\n#    You may set this variable to specify the name of the ParMETIS\n\n#    library that :ref:`FindParMETIS` looks for.\n\n#\n\n# .. cmake_variable:: PARMETIS_LIBRARY\n\n#\n\n#    You may set this variable to specify the full path to the ParMETIS\n\n#    library, that should be used by :ref:`FindParMETIS`.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# check METIS and ParMETIS headers\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Save variables\n",
        "Line" : 73,
        "CharPositionInLine" : 25
      },
      "3" : {
        "Text" : "# check whether metis.h is available\n\n# to work around installation bug in ParMETIS 4.0.3\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# search METIS library\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# search ParMETIS library\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# do a backup\n",
        "Line" : 103,
        "CharPositionInLine" : 63
      },
      "7" : {
        "Text" : "# check ParMETIS library\n",
        "Line" : 104,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Maybe we are using static scotch libraries. In this case we need to link\n\n# the other scotch libraries too. Let's make a best effort.\n\n# Get the path where ParMETIS_LIBRARY resides\n",
        "Line" : 111,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Search for additional libs only in this directory.\n\n# Otherwise we might find incompatible ones, e.g. for int instead of long\n",
        "Line" : 115,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# get backup\n",
        "Line" : 131,
        "CharPositionInLine" : 65
      },
      "11" : {
        "Text" : "# behave like a CMake module is supposed to behave\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#restore old values\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# log result\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# log errornous result\n",
        "Line" : 161,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# register all ParMETIS related flags\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "cmake/modules/FindQuadMath.cmake" : {
      "ObjectId" : "ff70b337941ff611571df0dc4af78c391a05686a",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# .. cmake_module::\n\n#\n\n#    Find the GCC Quad-Precision library\n\n#\n\n#    Sets the following variables:\n\n#\n\n#    :code:`QUADMATH_FOUND`\n\n#       True if the Quad-Precision library was found.\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# search for the header quadmath.h\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Save variables\n",
        "Line" : 20,
        "CharPositionInLine" : 25
      },
      "3" : {
        "Text" : "# text for feature summary\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# set HAVE_QUADMATH for config.h\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# -fext-numeric-literals is a GCC extension not available in other compilers like clang\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# register all QuadMath related flags\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/modules/FindSphinx.cmake" : {
      "ObjectId" : "718e20d7556077600cd5ff03ede03c96dce5c8a1",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# .. cmake_module::\n\n#\n\n#    Find Sphinx - the python documentation tool\n\n#\n\n#    You may set the following variables to modify the\n\n#    behaviour of this module:\n\n#\n\n#    :ref:`SPHINX_ROOT`\n\n#       the path to look for sphinx with the highest priority\n\n#\n\n#    The following variables are set by this module:\n\n#\n\n#    :code:`SPHINX_FOUND`\n\n#       whether Sphinx was found\n\n#\n\n#    :code:`SPHINX_EXECUTABLE`\n\n#       the path to the sphinx-build executable\n\n#\n\n# .. cmake_variable:: SPHINX_ROOT\n\n#\n\n#   You may set this variable to have :ref:`FindSphinx` look\n\n#   for the :code:`sphinx-build` executable in the given path\n\n#   before inspecting system paths.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#TODO export version.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/FindSuiteSparse.cmake" : {
      "ObjectId" : "e0bfc918a32a615c721f6888b81d6d498321dd3d",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# .. cmake_module::\n\n#\n\n#    Find the SuiteSparse libraries like UMFPACK or SPQR.\n\n#\n\n#    Example which tries to find Suite Sparse's UMFPack component:\n\n#\n\n#    :code:`find_package(SuiteSparse OPTIONAL_COMPONENTS UMFPACK)`\n\n#\n\n#    `OPTIONAL_COMPONENTS`\n\n#       A list of components. Components are:\n\n#       AMD, BTF, CAMD, CCOLAMD, CHOLMOD, COLAMD, CXSPARSE,\n\n#       KLU, LDL, RBIO, SPQR, UMFPACK\n\n#\n\n#    :ref:`SuiteSparse_ROOT`\n\n#       Path list to search for SuiteSparse\n\n#\n\n#    Sets the following variables:\n\n#\n\n#    :code:`SuiteSparse_FOUND`\n\n#       True if SuiteSparse was found.\n\n#\n\n#    :code:`SuiteSparse_INCLUDE_DIRS`\n\n#       Path to the SuiteSparse include dirs.\n\n#\n\n#    :code:`SuiteSparse_LIBRARIES`\n\n#       Name of the SuiteSparse libraries.\n\n#\n\n#    :code:`SuiteSparse_<COMPONENT>_FOUND`\n\n#       Whether <COMPONENT> was found as part of SuiteSparse.\n\n#\n\n# .. cmake_variable:: SuiteSparse_ROOT\n\n#\n\n#   You may set this variable to have :ref:`FindSuiteSparse` look\n\n#   for SuiteSparse in the given path before inspecting\n\n#   system paths.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# look for desired componenents\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# resolve inter-component dependencies\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find SuiteSparse config:\n\n# look for library at positions given by the user\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# now also include the default paths\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#look for header files at positions given by the user\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#now also look for default paths\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#look for library at positions given by the user\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#now also include the default paths\n",
        "Line" : 94,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#look for header files at positions given by the user\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#now also look for default paths\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# SPQR has different header file name SuiteSparseQR.hpp\n\n#look for header files at positions given by the user\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#now also look for default paths\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# resolve inter-modular dependencies\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# CHOLMOD requires AMD, COLAMD; CAMD and CCOLAMD are optional\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# remove duplicates\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# UMFPack requires AMD, can depend on CHOLMOD\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# check wether cholmod was found\n",
        "Line" : 152,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# remove duplicates\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# check wether everything was found\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# variable used for component handling\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# check version, for SPQR we need at least SuiteSparse 4.3\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# check whether version is at least 4.3\n",
        "Line" : 192,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# make them unique\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# behave like a CMake module is supposed to behave\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# if both headers and library are found, store results\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# log result\n",
        "Line" : 250,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# log errornous result\n",
        "Line" : 264,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "#set HAVE_SUITESPARSE for config.h\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# register all SuiteSparse related flags\n",
        "Line" : 275,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "cmake/modules/FindTBB.cmake" : {
      "ObjectId" : "84e0a3d0f455be3c940aec8b203ec308bab6f616",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Intel Threading Building Blocks include paths and libraries\n\n#\n\n# .. cmake_module::\n\n#\n\n#    TBB is a little special because there are three different ways to provide it:\n\n#\n\n#    * It can be installed using a package manager and just be available on the system include\n\n#      and library paths.\n\n#    * It can be compiled from source. The package doesn't really provide an installation script\n\n#      for this, but expects you to source an environment file called :code:`tbbvars.sh` that updates the\n\n#      required variables like :code:`CPATH` etc.\n\n#    * TBB is shipped as part of the Intel compilers. This bundled version can be enabled by adding\n\n#      :code:`-tbb` to the compiler flags.\n\n#\n\n#    This module can find all three types of installations. They are looked for in the following\n\n#    order of preference: :code:`tbbvars.sh` file (for a custom installation), system paths and finally\n\n#    the built-in version if an Intel compiler is present.\n\n#\n\n#    .. note::\n\n#       If you provide a tbbvars.sh script (via the CMake variable :ref:`TBB_VARS_SH`), this module will\n\n#       not find any libraries installed in the system path! This is on purpose to avoid\n\n#       accidental fallbacks.\n\n#\n\n#    If the option :ref:`TBB_DEBUG` is set to ON, the module will look for the debug version of TBB. Note that\n\n#    this does not work for the built-in library of the Intel Compiler due to linking problems. You can\n\n#    however provide the module with the tbbvars.sh from that built-in installation (usually in the\n\n#    subdirectory :code:`tbb/` of the Intel compiler root path), which will fix that problem.\n\n#\n\n#    Variables used by this module which you may want to set:\n\n#\n\n#    :ref:`TBB_VARS_SH`\n\n#       Path to the :code:`tbbvars.sh` script\n\n#\n\n#    :ref:`TBB_INCLUDE_DIR`\n\n#       Path to the include directory with the TBB headers\n\n#\n\n#    :ref:`TBB_LIBRARY_DIR`\n\n#       Path to the library directory with the TBB libraries\n\n#\n\n#    :ref:`TBB_DEBUG`\n\n#       Option that turns on TBB debugging\n\n#\n\n#    This module supports additional components of TBB that can be listed in the :ref:`find_package` call:\n\n#\n\n#    :code:`cpf`\n\n#       Use comunity preview edition (links to :code:`libtbb_preview` instead of :code:`libtbb`). cpf\n\n#       is not available for the built-in version of the Intel Compiler, but see the note\n\n#       on debug mode above for a fix.\n\n#\n\n#    :code:`allocator`\n\n#       Use TBB's scalable allocator (links to libtbbmalloc).\n\n#\n\n#\n\n#    This module sets the following variables:\n\n#\n\n#    :code:`TBB_FOUND`\n\n#       True if TBB was found and is usable\n\n#\n\n#    :code:`TBB_cpf_FOUND`\n\n#       True if community preview edition was found and is usable\n\n#\n\n#    :code:`TBB_allocator_FOUND`\n\n#       True if scalable allocator library was found and is usable\n\n#\n\n#    :code:`TBB_INCLUDE_DIRS`\n\n#       Path to the TBB include dirs. This variable is empty if the\n\n#       internal TBB version of an Intel compiler is in use\n\n#\n\n#    :code:`TBB_LIBRARIES`\n\n#       List of the TBB libraries that a target must be linked to\n\n#\n\n#    :code:`TBB_COMPILE_DEFINITIONS`\n\n#       Required compile definitions to use TBB\n\n#\n\n#    :code:`TBB_COMPILE_OPTIONS`\n\n#       Required compile options to use TBB\n\n#\n\n#    :code:`TBB_INTEL_COMPILER_INTERNAL_TBB`\n\n#       True if internal TBB version of Intel compiler is in use\n\n#\n\n#    In addition, TBB is automatically registered with the :ref:`dune_enable_all_packages` facility. If you\n\n#    don't want to use that feature, the module also provides the function :ref:`add_dune_tbb_flags`.\n\n#\n\n# .. cmake_function:: add_dune_tbb_flags\n\n#\n\n#    .. cmake_param:: targets\n\n#       :positional:\n\n#       :single:\n\n#       :required:\n\n#\n\n#    Adds all flags required to use TBB to the listed targets\n\n#\n\n# .. cmake_variable:: TBB_VARS_SH\n\n#\n\n#       May be set to have the :ref:`FindTBB` module look for a :code:`tbbvars.sh` script\n\n#\n\n# .. cmake_variable:: TBB_INCLUDE_DIR\n\n#\n\n#       May be set to have the :ref:`FindTBB` module look for TBB includes in custom locations.\n\n#\n\n# .. cmake_variable:: TBB_LIBRARY_DIR\n\n#\n\n#       May be set to have the :ref:`FindTBB` module look for TBB libraries in custom locations.\n\n#\n\n# .. cmake_variable:: TBB_DEBUG\n\n#\n\n#       May be set to have the :ref:`FindTBB` module look for debug TBB libraries.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# source for our little test program. We have to compile this multiple times, so\n\n# store it in a variable for DRY and better readability\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Function to parse a tbbvars.sh file and extract include and library paths.\n\n# This function relies on the bash shell to source the tbbvars.sh file\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# try script from binary Linux installs that requires an 'intel64' argument\n",
        "Line" : 145,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Check whether the user gave us an existing tbbvars.sh file\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Try to find TBB in standard include paths\n",
        "Line" : 196,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Try to find some version of the TBB library in standard library paths\n",
        "Line" : 203,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# helper function to invoke find_library() correctly\n\n# If we are using tbbvars.sh, we exclude system-default library search paths,\n\n# otherwise we leave them in\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# we always want to use TBB in C++11 mode\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# TBB requires this additional compile definition when used in debug mode\n",
        "Line" : 253,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# start looking for components\n\n# We first look for component libraries, because the \"special component\" cpf\n\n# actually replaces the standard libtbb\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# If we could not find libtbb_preview, look for plain libtbb instead\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This avoids special-casing later on\n",
        "Line" : 308,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Don't show these to the user, they are just confusing\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# make sure this variable always exists; it is only used if we pick the internal\n\n# TBB implementation from an Intel Compiler\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# We didn't manage to find TBB yet, so try if we can fall back to the one shipped\n\n# as part of Intel's compiler\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# This while doesn't work in debug mode because -tbb always injects -ltbb into the linker flags, and that clashes\n\n# with -ltbb_debug\n",
        "Line" : 334,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# We'll just compile a program with -tbb and see whether that works\n",
        "Line" : 339,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# yeah, success\n",
        "Line" : 352,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# now check components\n",
        "Line" : 355,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# again, this doesn't work because of the default -ltbb injected by -tbb\n",
        "Line" : 358,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# we'll check for this by trying to link against the library\n",
        "Line" : 363,
        "CharPositionInLine" : 10
      },
      "22" : {
        "Text" : "# clean up check state\n",
        "Line" : 378,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# make sure everything works\n",
        "Line" : 388,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# we don't want to leak any helper variables\n",
        "Line" : 402,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# provide standard find_package() interface\n",
        "Line" : 405,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# set variable for config.h\n",
        "Line" : 429,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# perform DUNE-specific setup tasks\n",
        "Line" : 432,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# function for adding TBB flags to a list of targets\n",
        "Line" : 445,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# text for feature summary\n",
        "Line" : 464,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "cmake/modules/FindUMFPack.cmake" : {
      "ObjectId" : "811253a45a024a672418fd23c8f43d00d27eb975",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# .. cmake_module::\n\n#\n\n#    Find the UMFPack library\n\n#\n\n# .. deprecated:: 3.0\n\n#    Use :code:`find_package(SuiteSparse OPTIONAL_COMPONENTS UMFPACK)` instead\n\n#\n\n#    You may set the following variables to modify the\n\n#    behaviour of this module:\n\n#\n\n#    :ref:`UMFPACK_ROOT`\n\n#       Path list to search for UMFPack.\n\n#\n\n#    Sets the following variables:\n\n#\n\n#    :code:`UMFPACK_FOUND`\n\n#       True if the GMP library was found.\n\n#\n\n#    :code:`UMFPACK_INCLUDE_DIRS`\n\n#       List of include directories with the UMFPack headers\n\n#\n\n#    :code:`UMFPACK_LIBRARIES`\n\n#       List of libraries to link with UMFPack.\n\n#\n\n# .. cmake_variable:: UMFPACK_ROOT\n\n#\n\n#   You may set this variable to have :ref:`FindUMFPack` look\n\n#   for the UMFPack package in the given path before inspecting\n\n#   system paths.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use find_package(SuiteSparse OPTIONAL_COMPONENTS UMFPACK) instead\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# behave like a CMake module is supposed to behave\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if both headers and library are found, store results\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# log result\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# log errornous result\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#set HAVE_UMFPACK for config.h\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# register all umfpack related flags\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/modules/Headercheck.cmake" : {
      "ObjectId" : "872ff554c09493e30ac46ae4130d8d663423499e",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# .. cmake_variable:: ENABLE_HEADERCHECK\n\n#\n\n#    Set this variable to TRUE if you want to use the CMake\n\n#    reimplementation of the old autotools feaure :code:`make headercheck`.\n\n#    There has been a couple of issues with this implementation in\n\n#    the past, so it was deactivated by default.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sets up a global property with the names of all header files\n\n# in the module and a global target depending on all checks\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#glob for headers\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# strip hidden files\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#define headercheck target\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# these macros are used to exclude headers from make headercheck\n\n# call this from a CMakeLists.txt file with a list of headers in that directory\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#make this robust to argument being passed with or without \"\"\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#make this robust to argument being passed with or without \"\"\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# configure all headerchecks\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#do some name conversion\n",
        "Line" : 58,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "#generate the headercheck .cc file\n",
        "Line" : 64,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# add target for the check of current header, this is implemented as a library\n\n# to prevent CMake from automatically trying to link the target, functionality\n\n# of macro try_compile() is unfortunately not availbale due to it not being scriptable.\n",
        "Line" : 67,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "#add PKG_ALL_FLAGS and the directory where the header is located\n",
        "Line" : 74,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 13
    },
    "cmake/modules/LanguageSupport.cmake" : {
      "ObjectId" : "68159e87b5ddc6d22b6af2b38d1cc6069015a8f7",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake/modules/language_support.cmake\n\n#\n\n# Temporary additional general language support is contained within this\n\n# file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This additional function definition is needed to provide a workaround for\n\n# CMake bug 9220.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# On debian testing (cmake 2.6.2), I get return code zero when calling\n\n# cmake the first time, but cmake crashes when running a second time\n\n# as follows:\n\n#\n\n#  -- The Fortran compiler identification is unknown\n\n#  CMake Error at /usr/share/cmake-2.6/Modules/CMakeFortranInformation.cmake:7 (GET_FILENAME_COMPONENT):\n\n#    get_filename_component called with incorrect number of arguments\n\n#  Call Stack (most recent call first):\n\n#    CMakeLists.txt:3 (enable_language)\n\n#\n\n# My workaround is to invoke cmake twice.  If both return codes are zero,\n\n# it is safe to invoke ENABLE_LANGUAGE(Fortran OPTIONAL)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#message(\"DEBUG: language = ${language}\")\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Second run\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Temporary tests of the above function.\n\n#workaround_9220(CXX CXX_language_works)\n\n#message(\"CXX_language_works = ${CXX_language_works}\")\n\n#workaround_9220(CXXp CXXp_language_works)\n\n#message(\"CXXp_language_works = ${CXXp_language_works}\")\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/modules/OverloadCompilerFlags.cmake" : {
      "ObjectId" : "c7fda9e6c5bad5e11b000569faf0332c76094609",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# check whether the user wants to overload compile flags upon calling make\n\n#\n\n# Provides the following macros:\n\n#\n\n#   initialize_compiler_script() : needs to be called before further flags are added to CMAKE_CXX_FLAGS\n\n#   finalize_compiler_script()   : needs to be called at the end of the cmake macros, e.g. in finalize_dune_project\n\n#\n\n# Those two macro calls are hooked into dune_project/finalize_dune_project.\n\n#\n\n# .. cmake_variable:: ALLOW_CXXFLAGS_OVERWRITE\n\n#\n\n#    Setting this option will allow you to overload preprocessor definitions from\n\n#    the command line, as it was possible naturally with the autotools build system.\n\n#    This feature only works with a :code:`Unix Makefiles` based generator. You can\n\n#    use it as:\n\n#\n\n#    :code:`make CXXFLAGS=\"your flags\" GRIDTYPE=\"grid type\"`\n\n#\n\n#    :code:`GRIDTYPE` can be anything defined in :code:`config.h` via the :ref:`dune_define_gridtype` macro from dune-grid.\n\n#    Furthermore any CPP variable of the form :code:`-DVAR=VALUE` can be overloaded on the command line.\n\n#\n\n#    .. note::\n\n#       If you don't know what this is or what it's good for, don't use it.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# init compiler script and store CXX flags\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# check for unix commands necessary\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# set CXXFLAGS as environment variable\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# check for unix commands necessary\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# set CFLAGS as environment variable\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# finalize compiler script and write it\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# check CXX compiler\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# check C compiler\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# for the found compilers for flag overloading generate compiler script\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# only for CXX we need to scan config.h for GRIDTYPE\n",
        "Line" : 115,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# only for CXX we have GRIDTYPE\n",
        "Line" : 124,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 12
    },
    "cmake/modules/UseInkscape.cmake" : {
      "ObjectId" : "67b5b31e406e214a971c7f8b5d4d8a040942a0bc",
      "LastModified" : "2019-03-19T15:58:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Module that provides conversion routines using inkscape\n\n#\n\n# .. cmake_function:: inkscape_generate_png_from_svg\n\n#\n\n#    .. cmake_param:: OUTPUT_DIR\n\n#       :single:\n\n#\n\n#       The output directory for the generated png files.\n\n#       Defaults to the current build directory.\n\n#\n\n#    .. cmake_param:: pngfiles\n\n#       :single:\n\n#       :positional:\n\n#       :required:\n\n#\n\n#       The files that should be converted.\n\n#\n\n#    .. cmake_param:: DPI\n\n#       :single:\n\n#\n\n#       dpi value for the generated image (default: 90)\n\n#\n\n#    TODO Switch to named arguments!\n\n#\n\n#\n\n# .. cmake_function:: inkscape_generate_eps_from_svg\n\n#\n\n#    .. deprecated:: 2.7\n\n#       Switch to PNG instead of EPS and use\n\n#       inkscape_generate_png_from_svg.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/UseLATEX.cmake" : {
      "ObjectId" : "f689a5af41c121a7a552982de9bfc6a3b7bb4e91",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# File: UseLATEX.cmake\n\n# CMAKE commands to actually use the LaTeX compiler\n\n# Version: 2.4.9\n\n# Author: Kenneth Moreland <kmorel@sandia.gov>\n\n#\n\n# Copyright 2004, 2015 Sandia Corporation.\n\n# Under the terms of Contract DE-AC04-94AL85000, there is a non-exclusive\n\n# license for use of this work by or on behalf of the U.S. Government.\n\n#\n\n# This software is released under the BSD 3-Clause License.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are\n\n# met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice,\n\n# this list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright\n\n# notice, this list of conditions and the following disclaimer in the\n\n# documentation and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its\n\n# contributors may be used to endorse or promote products derived from this\n\n# software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS\n\n# IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n\n# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n\n# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n\n# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n\n# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n\n# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n\n# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n\n# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n\n# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n#\n\n# The following function is defined:\n\n#\n\n# add_latex_document_deprecated(<tex_file>\n\n#                    [BIBFILES <bib_files>]\n\n#                    [INPUTS <input_tex_files>]\n\n#                    [IMAGE_DIRS] <image_directories>\n\n#                    [IMAGES] <image_files>\n\n#                    [CONFIGURE] <tex_files>\n\n#                    [DEPENDS] <tex_files>\n\n#                    [MULTIBIB_NEWCITES] <suffix_list>\n\n#                    [USE_BIBLATEX]\n\n#                    [USE_INDEX]\n\n#                    [INDEX_NAMES <index_names>]\n\n#                    [USE_GLOSSARY] [USE_NOMENCL]\n\n#                    [FORCE_PDF] [FORCE_DVI] [FORCE_HTML]\n\n#                    [TARGET_NAME] <name>\n\n#                    [EXCLUDE_FROM_ALL]\n\n#                    [EXCLUDE_FROM_DEFAULTS])\n\n#       Adds targets that compile <tex_file>.  The latex output is placed\n\n#       in LATEX_OUTPUT_PATH or CMAKE_CURRENT_BINARY_DIR if the former is\n\n#       not set.  The latex program is picky about where files are located,\n\n#       so all input files are copied from the source directory to the\n\n#       output directory.  This includes the target tex file, any tex file\n\n#       listed with the INPUTS option, the bibliography files listed with\n\n#       the BIBFILES option, and any .cls, .bst, .clo, .sty, .ist, and .fd\n\n#       files found in the current source directory.  Images found in the\n\n#       IMAGE_DIRS directories or listed by IMAGES are also copied to the\n\n#       output directory and converted to an appropriate format if necessary.\n\n#       Any tex files also listed with the CONFIGURE option are also processed\n\n#       with the CMake CONFIGURE_FILE command (with the @ONLY flag).  Any file\n\n#       listed in CONFIGURE but not the target tex file or listed with INPUTS\n\n#       has no effect. DEPENDS can be used to specify generated files that are\n\n#       needed to compile the latex target.\n\n#\n\n#       The following targets are made. The name prefix is based off of the\n\n#       base name of the tex file unless TARGET_NAME is specified. If\n\n#       TARGET_NAME is specified, then that name is used for the targets.\n\n#\n\n#               name_dvi: Makes <name>.dvi\n\n#               name_pdf: Makes <name>.pdf using pdflatex.\n\n#               name_safepdf: Makes <name>.pdf using ps2pdf.  If using the\n\n#                       default program arguments, this will ensure all fonts\n\n#                       are embedded and no lossy compression has been\n\n#                       performed on images.\n\n#               name_ps: Makes <name>.ps\n\n#               name_html: Makes <name>.html\n\n#               name_auxclean: Deletes <name>.aux and other auxiliary files.\n\n#                       This is sometimes necessary if a LaTeX error occurs\n\n#                       and writes a bad aux file.  Unlike the regular clean\n\n#                       target, it does not delete other input files, such as\n\n#                       converted images, to save time on the rebuild.\n\n#\n\n#       Unless the EXCLUDE_FROM_ALL option is given, one of these targets\n\n#       is added to the ALL target and built by default. Which target is\n\n#       determined by the LATEX_DEFAULT_BUILD CMake variable. See the\n\n#       documentation of that variable for more details.\n\n#\n\n#       Unless the EXCLUDE_FROM_DEFAULTS option is given, all these targets\n\n#       are added as dependencies to targets named dvi, pdf, safepdf, ps,\n\n#       html, and auxclean, respectively.\n\n#\n\n#       USE_BIBLATEX enables the use of biblatex/biber as an alternative to\n\n#       bibtex. Bibtex remains the default if USE_BIBLATEX is not\n\n#       specified.\n\n#\n\n#       If the argument USE_INDEX is given, then commands to build an index\n\n#       are made. If the argument INDEX_NAMES is given, an index file is\n\n#       generated for each name in this list. See the LaTeX package multind\n\n#       for more information about how to generate multiple indices.\n\n#\n\n#       If the argument USE_GLOSSARY is given, then commands to\n\n#       build a glossary are made.  If the argument MULTIBIB_NEWCITES is\n\n#       given, then additional bibtex calls are added to the build to\n\n#       support the extra auxiliary files created with the \\newcite command\n\n#       in the multibib package.\n\n#\n\n# History:\n\n#\n\n# 2.4.9 Use biblatex.cfg file if it exists and the USE_BIBLATEX option is ON.\n\n#\n\n# 2.4.8 Fix synctex issue with absolute paths not being converted.\n\n#\n\n# 2.4.7 Fix some issues with spaces in the path of the working directory where\n\n#       LaTeX is executed.\n\n#\n\n# 2.4.6 Fix parse issue with older versions of CMake.\n\n#\n\n# 2.4.5 Fix issues with files and paths containing spaces.\n\n#\n\n# 2.4.4 Improve error reporting message when LaTeX fails.\n\n#\n\n#       When LaTeX fails, delete the output file, which is invalid.\n\n#\n\n#       Add warnings for \"missing characters.\" These usually mean that a\n\n#       non-ASCII character is in the document and will not be printed\n\n#       correctly.\n\n#\n\n# 2.4.3 Check for warnings from the natbib package. When using natbib,\n\n#       warnings for missing bibliography references look different. So\n\n#       far, natbib seems to be quiet unless something is important, so\n\n#       look for all natbib warnings. (We can change this later if\n\n#       necessary.)\n\n#\n\n# 2.4.2 Fix an issue where new versions of ImageMagick expect the order of\n\n#       options in command line execution of magick/convert. (See, for\n\n#       example, http://www.imagemagick.org/Usage/basics/#why.)\n\n#\n\n# 2.4.1 Add ability to dump LaTeX log file when using batch mode. Batch\n\n#       mode suppresses most output, often including error messages. To\n\n#       make sure critical error messages get displayed, show the full log\n\n#       on failures.\n\n#\n\n# 2.4.0 Remove \"-r 600\" from the default PDFTOPS_CONVERTER_FLAGS. The -r flag\n\n#       is available from the Poppler version of pdftops, but not the Xpdf\n\n#       version.\n\n#\n\n#       Fix an issue with the flags for the different programs not being\n\n#       properly separated.\n\n#\n\n#       Fix an issue on windows where the = character is not allowed for\n\n#       ps2pdf arguments.\n\n#\n\n#       Change default arguments for latex and pdflatex commands. Makes the\n\n#       output more quiet and prints out the file/line where errors occur.\n\n#       (Thanks to Nikos Koukis.)\n\n#\n\n#       After a LaTeX build, check the log file for warnings that are\n\n#       indicative of problems with the build.\n\n#\n\n#       Remove support for latex2html. Instead, use the htlatex program.\n\n#       This is now part of TeX Live and most other distributions. It also\n\n#       behaves much more like the other LaTeX programs. Also fixed some\n\n#       nasty issues with the htlatex arguments.\n\n#\n\n# 2.3.2 Declare LaTeX input files as sources for targets so that they show\n\n#       up in IDEs like QtCreator.\n\n#\n\n#       Fix issue where main tex files in subdirectories were creating\n\n#       invalid targets for building HTML. Just disable the HTML targets in\n\n#       this case.\n\n#\n\n# 2.3.1 Support use of magick command instead of convert command for\n\n#       ImageMagick 7.\n\n#\n\n# 2.3.0 Add USE_BIBLATEX option to support the biblatex package, which\n\n#       requires using the program biber as a replacement for bibtex\n\n#       (thanks to David Tracey).\n\n#\n\n# 2.2.1 Add STRINGS property to LATEX_DEFAULT_BUILD to make it easier to\n\n#       select the default build in the CMake GUI.\n\n#\n\n# 2.2.0 Add TARGET_NAME option.\n\n#\n\n# 2.1.1 Support for finding bmp, ppm, and other image files.\n\n#\n\n# 2.1.0 Fix an error where the pdf target and others were defined multiple\n\n#       times if UseLATEX.cmake was included multiple times.\n\n#\n\n#       Added INDEX_NAMES option to support multiple indexes in a single\n\n#       document from the multind package (thanks to Dan Lipsa).\n\n#\n\n# 2.0.0 First major revision of UseLATEX.cmake updates to more recent features\n\n#       of CMake and some non-backward compatible changes.\n\n#\n\n#       Changed all function and macro names to lower case. CMake's identifiers\n\n#       are case insensitive, but the convention moved from all upper case to\n\n#       all lower case somewhere around the release of CMake 2. (The original\n\n#       version of UseLATEX.cmake predates that.)\n\n#\n\n#       Remove condition matching in if statements. They are no longer necessary\n\n#       and are even discouraged (because else clauses get confusing).\n\n#\n\n#       Use \"new\" features available in CMake such as list and argument parsing.\n\n#\n\n#       Remove some code that has been deprecated for a while.\n\n#\n\n#       Mark variables for compiler and converter executables as advanced to\n\n#       match the more conventional CMake behavior.\n\n#\n\n#       Changed how default builds are specified and add the ability to force\n\n#       a particular build.\n\n#\n\n#       Made the base targets (pdf, dvi, etc.) global. add_latex_document\n\n#       always mangles its target names and these base targets depend on\n\n#       the targets with mangled names.\n\n#\n\n# 1.10.5 Fix for Window's convert check (thanks to Martin Baute).\n\n#\n\n# 1.10.4 Copy font files to binary directory for packages that come with\n\n#       their own fonts.\n\n#\n\n# 1.10.3 Check for Windows version of convert being used instead of\n\n#       ImageMagick's version (thanks to Martin Baute).\n\n#\n\n# 1.10.2 Use htlatex as a fallback when latex2html is not available (thanks\n\n#       to Tomasz Grzegurzko).\n\n#\n\n# 1.10.1 Make convert program mandatory only if actually used (thanks to\n\n#       Julien Schueller).\n\n#\n\n# 1.10.0 Added NO_DEFAULT and DEFAULT_PS options.\n\n#       Fixed issue with cleaning files for LaTeX documents originating in\n\n#       a subdirectory.\n\n#\n\n# 1.9.6 Fixed problem with LATEX_SMALL_IMAGES.\n\n#       Strengthened check to make sure the output directory does not contain\n\n#       the source files.\n\n#\n\n# 1.9.5 Add support for image types not directly supported by either latex\n\n#       or pdflatex.  (Thanks to Jorge Gerardo Pena Pastor for SVG support.)\n\n#\n\n# 1.9.4 Fix issues with filenames containing multiple periods.\n\n#\n\n# 1.9.3 Hide some variables that are now cached but should not show up in\n\n#       the ccmake list of variables.\n\n#\n\n# 1.9.2 Changed MACRO declarations to FUNCTION declarations.  The better\n\n#       FUNCTION scoping will hopefully avoid some common but subtle bugs.\n\n#       This implicitly increases the minimum CMake version to 4.6 (although\n\n#       I honestly only test it with the latest 4.8 version).\n\n#\n\n#       Since we are updating the minimum CMake version, I'm going to start\n\n#       using the builtin LIST commands that are now available.\n\n#\n\n#       Favor using pdftops from the Poppler package to convert from pdf to\n\n#       eps.  It does a much better job than ImageMagick or ghostscript.\n\n#\n\n# 1.9.1 Fixed typo that caused the LATEX_SMALL_IMAGES option to fail to\n\n#       activate.\n\n#\n\n# 1.9.0 Add support for the multibib package (thanks to Antonio LaTorre).\n\n#\n\n# 1.8.2 Fix corner case when an argument name was also a variable containing\n\n#       the text of an argument.  In this case, the CMake IF was matching\n\n#       the argument text with the contents of the variable with the same\n\n#       argument name.\n\n#\n\n# 1.8.1 Fix problem where ps2pdf was not getting the appropriate arguments.\n\n#\n\n# 1.8.0 Add support for synctex.\n\n#\n\n# 1.7.7 Support calling xindy when making glossaries.\n\n#\n\n#       Improved make clean support.\n\n#\n\n# 1.7.6 Add support for the nomencl package (thanks to Myles English).\n\n#\n\n# 1.7.5 Fix issue with bibfiles being copied two different ways, which causes\n\n#       Problems with dependencies (thanks to Edwin van Leeuwen).\n\n#\n\n# 1.7.4 Added the DEFAULT_SAFEPDF option (thanks to Raymond Wan).\n\n#\n\n#       Added warnings when image directories are not found (and were\n\n#       probably not given relative to the source directory).\n\n#\n\n# 1.7.3 Fix some issues with interactions between makeglossaries and bibtex\n\n#       (thanks to Mark de Wever).\n\n#\n\n# 1.7.2 Use ps2pdf to convert eps to pdf to get around the problem with\n\n#       ImageMagick dropping the bounding box (thanks to Lukasz Lis).\n\n#\n\n# 1.7.1 Fixed some dependency issues.\n\n#\n\n# 1.7.0 Added DEPENDS options (thanks to Theodore Papadopoulo).\n\n#\n\n# 1.6.1 Ported the makeglossaries command to CMake and embedded the port\n\n#       into UseLATEX.cmake.\n\n#\n\n# 1.6.0 Allow the use of the makeglossaries command.  Thanks to Oystein\n\n#       S. Haaland for the patch.\n\n#\n\n# 1.5.0 Allow any type of file in the INPUTS lists, not just tex file\n\n#       (suggested by Eric Noulard).  As a consequence, the ability to\n\n#       specify tex files without the .tex extension is removed.  The removed\n\n#       function is of dubious value anyway.\n\n#\n\n#       When copying input files, skip over any file that exists in the\n\n#       binary directory but does not exist in the source directory with the\n\n#       assumption that these files were added by some other mechanism.  I\n\n#       find this useful when creating large documents with multiple\n\n#       chapters that I want to build separately (for speed) as I work on\n\n#       them.  I use the same boilerplate as the starting point for all\n\n#       and just copy it with different configurations.  This was what the\n\n#       separate ADD_LATEX_DOCUMENT method was supposed to originally be for.\n\n#       Since its external use is pretty much deprecated, I removed that\n\n#       documentation.\n\n#\n\n# 1.4.1 Copy .sty files along with the other class and package files.\n\n#\n\n# 1.4.0 Added a MANGLE_TARGET_NAMES option that will mangle the target names.\n\n#\n\n#       Fixed problem with copying bib files that became apparent with\n\n#       CMake 2.4.\n\n#\n\n# 1.3.0 Added a LATEX_OUTPUT_PATH variable that allows you or the user to\n\n#       specify where the built latex documents to go.  This is especially\n\n#       handy if you want to do in-source builds.\n\n#\n\n#       Removed the ADD_LATEX_IMAGES macro and absorbed the functionality\n\n#       into ADD_LATEX_DOCUMENT.  The old interface was always kind of\n\n#       clunky anyway since you had to specify the image directory in both\n\n#       places.  It also made supporting LATEX_OUTPUT_PATH problematic.\n\n#\n\n#       Added support for jpeg files.\n\n#\n\n# 1.2.0 Changed the configuration options yet again.  Removed the NO_CONFIGURE\n\n#       Replaced it with a CONFIGURE option that lists input files for which\n\n#       configure should be run.\n\n#\n\n#       The pdf target no longer depends on the dvi target.  This allows you\n\n#       to build latex documents that require pdflatex.  Also added an option\n\n#       to make the pdf target the default one.\n\n#\n\n# 1.1.1 Added the NO_CONFIGURE option.  The @ character can be used when\n\n#       specifying table column separators.  If two or more are used, then\n\n#       will incorrectly substitute them.\n\n#\n\n# 1.1.0 Added ability include multiple bib files.  Added ability to do copy\n\n#       sub-tex files for multipart tex files.\n\n#\n\n# 1.0.0 If both ps and pdf type images exist, just copy the one that\n\n#       matches the current render mode.  Replaced a bunch of STRING\n\n#       commands with GET_FILENAME_COMPONENT commands that were made to do\n\n#       the desired function.\n\n#\n\n# 0.4.0 First version posted to CMake Wiki.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#############################################################################\n\n# Find the location of myself while originally executing.  If you do this\n\n# inside of a macro, it will recode where the macro was invoked.\n\n#############################################################################\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#############################################################################\n\n# Generic helper functions\n\n#############################################################################\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Match the contents of a file to a regular expression.\n",
        "Line" : 397,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The FILE STRINGS command would be a bit better, but I'm not totally sure\n\n# the match will always be to a whole line, and I don't want to break things.\n",
        "Line" : 399,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# A version of GET_FILENAME_COMPONENT that treats extensions after the last\n\n# period rather than the first.  To the best of my knowledge, all filenames\n\n# typically used by LaTeX, including image files, have small extensions\n\n# after the last dot.\n",
        "Line" : 412,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#############################################################################\n\n# Functions that perform processing during a LaTeX build.\n\n#############################################################################\n",
        "Line" : 430,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Chose the native method for parsing command arguments. Newer versions of\n\n# CMake allow you to just use NATIVE_COMMAND.\n",
        "Line" : 452,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Preps variables for use in execute_process.\n\n# Even though we expect LATEX_WORKING_DIRECTORY to have a single \"argument,\"\n\n# we also want to make sure that we strip out any escape characters that can\n\n# foul up the WORKING_DIRECTORY argument.\n",
        "Line" : 464,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# LaTeX tends to write a file when a failure happens. Delete that file so\n\n# that LaTeX will run again.\n",
        "Line" : 478,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# This is really a bare bones port of the makeglossaries perl script into\n\n# CMake scripting.\n",
        "Line" : 493,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# What crazy person makes a LaTeX index generator that uses different\n\n# identifiers for language than babel (or at least does not support\n\n# the old ones)?\n",
        "Line" : 561,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Ideally, we would check that the language is compatible with the\n\n# default codepage, but I'm hoping that distributions will be smart\n\n# enough to specify their own codepage.  I know, it's asking a lot.\n",
        "Line" : 604,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# So, it is possible (perhaps common?) for aux files to specify a\n\n# language and codepage that are incompatible with each other.  Check\n\n# for that condition, and if it happens run again with the default\n\n# codepage.\n",
        "Line" : 625,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Relative paths\n",
        "Line" : 708,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Absolute paths\n",
        "Line" : 716,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Check for undefined references\n",
        "Line" : 758,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Check for natbib warnings\n",
        "Line" : 772,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Check for overfull\n",
        "Line" : 786,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Check for invalid characters\n",
        "Line" : 800,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "#############################################################################\n\n# Helper functions for establishing LaTeX build.\n\n#############################################################################\n",
        "Line" : 822,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Most windows ports of ghostscript utilities use .bat files for ps2pdf\n\n# commands. bat scripts interpret \"=\" as a special character and separate\n\n# those arguments. To get around this, the ghostscript utilities also\n\n# support using \"#\" in place of \"=\".\n",
        "Line" : 917,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Because it is easier to type, the flags variables are entered as\n\n# space-separated strings much like you would in a shell. However, when\n\n# using a CMake command to execute a program, it works better to hold the\n\n# arguments in semicolon-separated lists (otherwise the whole string will\n\n# be interpreted as a single argument). Use the separate_arguments to\n\n# convert the space-separated strings to semicolon-separated lists.\n",
        "Line" : 944,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Not quite done. When you call separate_arguments on a cache variable,\n\n# the result is written to a local variable. That local variable goes\n\n# away when this function returns (which is before any of them are used).\n\n# So, copy these variables with local scope to cache variables with\n\n# global scope.\n",
        "Line" : 963,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Just holds extensions for known image types.  They should all be lower case.\n\n# For historical reasons, these are all declared in the global scope.\n",
        "Line" : 1016,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# ImageMagick has broken eps to pdf conversion\n\n# use ps2pdf instead\n",
        "Line" : 1116,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# ImageMagick can also be sketchy on pdf to eps conversion.  Not good with\n\n# color spaces and tends to unnecessarily rasterize.\n\n# use pdftops instead\n",
        "Line" : 1126,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# ImageMagick requires a special order of arguments where resize and\n\n# arguments of that nature must be placed after the input image path.\n",
        "Line" : 1148,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# Not ImageMagick convert\n",
        "Line" : 1159,
        "CharPositionInLine" : 9
      },
      "29" : {
        "Text" : "# Makes custom commands to convert a file to a particular type.\n",
        "Line" : 1168,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Check input filename for potential problems with LaTeX.\n",
        "Line" : 1183,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# As a shortcut, we can just copy the file.\n",
        "Line" : 1207,
        "CharPositionInLine" : 6
      },
      "32" : {
        "Text" : "# Check to see if there is another input file of the appropriate type.\n",
        "Line" : 1217,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# If we still need to convert, do it.\n",
        "Line" : 1227,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Adds custom commands to process the given files for dvi and pdf builds.\n\n# Adds the output files to the given variables (does not replace).\n",
        "Line" : 1239,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Check to see if we need to downsample the image.\n",
        "Line" : 1250,
        "CharPositionInLine" : 6
      },
      "36" : {
        "Text" : "# Make sure the output directory exists.\n",
        "Line" : 1259,
        "CharPositionInLine" : 6
      },
      "37" : {
        "Text" : "# Do conversions for dvi.\n",
        "Line" : 1263,
        "CharPositionInLine" : 6
      },
      "38" : {
        "Text" : "# Do conversions for pdf.\n",
        "Line" : 1268,
        "CharPositionInLine" : 6
      },
      "39" : {
        "Text" : "# Special case: output exists but input does not.  Assume that it was\n\n# created elsewhere and skip the input file copy.\n",
        "Line" : 1322,
        "CharPositionInLine" : 6
      },
      "40" : {
        "Text" : "#############################################################################\n\n# Commands provided by the UseLATEX.cmake \"package\"\n\n#############################################################################\n",
        "Line" : 1330,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Parses arguments to add_latex_document and ADD_LATEX_TARGETS and sets the\n\n# variables LATEX_TARGET, LATEX_IMAGE_DIR, LATEX_BIBFILES, LATEX_DEPENDS, and\n\n# LATEX_INPUTS.\n",
        "Line" : 1340,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Deprecated options\n",
        "Line" : 1354,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# Handle invalid and deprecated arguments\n",
        "Line" : 1378,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# Capture the first argument, which is the main LaTeX input.\n",
        "Line" : 1401,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Propagate the result variables to the caller\n",
        "Line" : 1406,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# The commands to run LaTeX.  They are repeated multiple times.\n",
        "Line" : 1422,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# Wrap command in script that dumps the log file on error. This makes sure\n\n# errors can be seen.\n",
        "Line" : 1427,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# Wrap command in script that dumps the log file on error. This makes sure\n\n# errors can be seen.\n",
        "Line" : 1443,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "# Use the main filename (minus the .tex) as the target name. Remove any\n\n# spaces since CMake cannot have spaces in its target names.\n",
        "Line" : 1457,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# Some LaTeX commands may need to be modified (or may not work) if the main\n\n# tex file is in a subdirectory. Make a flag for that.\n",
        "Line" : 1462,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Set up target names.\n",
        "Line" : 1466,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Probably not all of these will be generated, but they could be.\n\n# Note that the aux file is added later.\n",
        "Line" : 1474,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# For each directory in LATEX_IMAGE_DIRS, glob all the image files and\n\n# place them in LATEX_IMAGES.\n",
        "Line" : 1502,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# Dependent .tex files might have their own .aux files created.  Make\n\n# sure these get cleaned as well.  This might replicate the cleaning\n\n# of the main .aux file, which is OK.\n",
        "Line" : 1533,
        "CharPositionInLine" : 6
      },
      "55" : {
        "Text" : "# Repeat these commands twice.\n",
        "Line" : 1547,
        "CharPositionInLine" : 25
      },
      "56" : {
        "Text" : "# Repeat these commands twice.\n",
        "Line" : 1576,
        "CharPositionInLine" : 25
      },
      "57" : {
        "Text" : "# Need to run one more time to remove biblatex' warning\n\n# about page breaks that have changed.\n",
        "Line" : 1689,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Check LaTeX output for important warnings at end of build\n",
        "Line" : 1724,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# Capture the default build.\n",
        "Line" : 1740,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Add commands and targets for building pdf outputs (with pdflatex).\n",
        "Line" : 1747,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Add commands and targets for building dvi outputs.\n",
        "Line" : 1768,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# Since both the pdf and safepdf targets have the same output, we\n\n# cannot properly do the dependencies for both.  When selecting safepdf,\n\n# simply force a recompile every time.\n",
        "Line" : 1803,
        "CharPositionInLine" : 8
      },
      "63" : {
        "Text" : "# The code below to run HTML assumes that LATEX_TARGET.tex is in the\n\n# current directory. I have tried to specify that LATEX_TARGET.tex is\n\n# in a subdirectory. That makes the build targets correct, but the\n\n# HTML build still fails (at least for htlatex) because files are not\n\n# generated where expected. I am getting around the problem by simply\n\n# disabling HTML in this case. If someone really cares, they can fix\n\n# this, but make sure it runs on many platforms and build programs.\n",
        "Line" : 1827,
        "CharPositionInLine" : 6
      },
      "64" : {
        "Text" : "# htlatex places the output in a different location\n",
        "Line" : 1835,
        "CharPositionInLine" : 6
      },
      "65" : {
        "Text" : "# Set default targets.\n",
        "Line" : 1859,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "#############################################################################\n\n# Actually do stuff\n\n#############################################################################\n",
        "Line" : 1927,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Must be part of the actual configure (included from CMakeLists.txt).\n",
        "Line" : 1964,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 68
    },
    "cmake/modules/UseLatexMk.cmake" : {
      "ObjectId" : "857442b3c2233ab64dc291e931462ac8b7bd58c1",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# UseLatexMk.cmake is a CMake module to build Latex documents\n\n# from CMake.\n\n#\n\n# add_latex_document(SOURCE texsource\n\n#                    [TARGET target]\n\n#                    [EXCLUDE_FROM_ALL]\n\n#                    [REQUIRED]\n\n#                    [FATHER_TARGET father1 [father2 ...]]\n\n#                    [RCFILE rcfile1 [rcfile2 ...]]\n\n#                    [INSTALL destination]\n\n#                    [BUILD_ON_INSTALL]\n\n#                    )\n\n#\n\n# The arguments:\n\n# SOURCE\n\n#   Required argument with a single tex source that defines the document to be built\n\n# TARGET\n\n#   An optional target name, defaults to a suitable mangling of the given source and its path.\n\n#   An additional target with _clean appended will be added as well, which cleans the output\n\n#   and all auxiliary files.\n\n# EXCLUDE_FROM_ALL\n\n#   Set this to avoid the target from being built by default. If the FATHER_TARGET\n\n#   parameter is set, this option is automatically set.\n\n# REQUIRED\n\n#   Set this option to issue a fatal error if the document could not\n\n#   be built. By default it is only skipped.\n\n# FATHER_TARGET\n\n#   A list of meta-targets that should trigger a rebuild of this target (like \"make doc\").\n\n#   The targets are expected to exist already. Specifying any such targets will automatically add the\n\n#   above EXCLUDE_FROM_ALL option.\n\n# RCFILE\n\n#   A list configuration file to customize the latexmk build process. These are read by latexmk\n\n#   *after* the automatically generated rc file in the indicated order. Note that latexmk rcfiles\n\n#   override any previous settings.\n\n#   You may also use CMake variables within @'s (like @CMAKE_CURRENT_BINARY_DIR@) and have\n\n#   them replaced with the matching CMake variables (see cmake's configure_file command).\n\n#   Note, that this is a powerful, but advanced feature. For details on what can be achieved\n\n#   see the latexmk manual. Note, that triggering non-PDF builds through latexmkrc files might\n\n#   cause problems with other features of UseLatexMk.\n\n# INSTALL\n\n#   Set this option to an install directory to create an installation rule for this document.\n\n# BUILD_ON_INSTALL\n\n#   Set this option, if you want to trigger a build of this document during installation.\n\n#\n\n# Furthermore, UseLatexMk defines a CMake target clean_latex which cleans the build tree from\n\n# all PDF output and all auxiliary files. Note, that (at least for the Unix Makefiles generator)\n\n# it is not possible to connect this process with the builtin clean target.\n\n#\n\n# Please note the following security restriction:\n\n#\n\n# UseLatexMk relies on latexmk separating input and output directory correctly.\n\n# This includes using an absolute path for the output directory. On some TeX\n\n# systems this requires the disabling of a security measure by setting `openout_any = a`.\n\n# From the latexmk documentation:\n\n#\n\n# Commonly, the directory specified for output files is a subdirectory of the current working direc-\n\n# tory. However, if you specify some other directory, e.g., \"/tmp/foo\" or \"../output\", be aware that\n\n# this could cause problems, e.g., with makeindex or bibtex. This is because modern versions of\n\n# these programs, by default, will refuse to work when they find that they are asked to write to a file\n\n# in a directory that appears not to be the current working directory or one of its subdirectories. This\n\n# is part of security measures by the whole TeX system that try to prevent malicious or errant TeX\n\n# documents from incorrectly messing with a user’s files. If for $out_dir or $aux_dir you really do\n\n# need to specify an absolute pathname (e.g., \"/tmp/foo\") or a path (e.g., \"../output\") that includes a\n\n# higher-level directory, and you need to use makeindex or bibtex, then you need to disable the secu-\n\n# rity measures (and assume any risks). One way of doing this is to temporarily set an operating\n\n# system environment variable openout_any to \"a\" (as in \"all\"), to override the default \"paranoid\"\n\n# setting.\n\n#\n\n# UseLatexMk.cmake allows to reenable the TeX security measure by setting LATEXMK_PARANOID to TRUE\n\n# through cmake -D, but it is not guaranteed to work correctly in that case.\n\n#\n\n# For further informations, visit https://github.com/dokempf/UseLatexMk\n\n#\n\n#\n\n# Copyright (c) 2017, Dominic Kempf, Steffen Müthing\n\n#\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification,\n\n# are permitted provided that the following conditions are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright notice, this\n\n#   list of conditions and the following disclaimer.\n\n#\n\n# * Redistributions in binary form must reproduce the above copyright notice, this\n\n#   list of conditions and the following disclaimer in the documentation and/or\n\n#   other materials provided with the distribution.\n\n#\n\n# * Neither the name of the Universität Heidelberg nor the names of its\n\n#   contributors may be used to endorse or promote products derived from this\n\n#   software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find LATEX and LatexMk\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Find the latexmkrc template file shipped alongside UseLatexMk.cmake\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add the clean_latex target\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Parse the input parameters to the function\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Apply default arguments and check for required arguments\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Construct a nice target name from the source file\n",
        "Line" : 145,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Verify that each source is used exactly once\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Check the existence of the latexmk executable and skip/fail if not present\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Determine the output name\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Inspect the EXCLUDE_FROM_ALL option\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Generate a latexmkrc file for this project\n",
        "Line" : 189,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Process additional latexmkrc files\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Add the BYPRODUCTS parameter, if the CMake version supports it\n",
        "Line" : 205,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Maybe allow latexmk the use of absolute paths\n",
        "Line" : 211,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Call the latexmk executable\n\n# NB: Using add_custom_target here results in the target always being outofdate.\n\n#     This offloads the dependency tracking from cmake to latexmk. This is an\n\n#     intentional decision of UseLatexMk to avoid listing dependencies of the tex source.\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Add dependencies to father targets\n",
        "Line" : 228,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Add installation rules\n",
        "Line" : 236,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Add a clean up rule to the clean_latex target\n",
        "Line" : 244,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 19
    },
    "cmake/modules/latexmkrc.cmake" : {
      "ObjectId" : "872176280b974129a6da05669a77e53827ca0884",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# .latexmkrc generated by CMake from UseLatexMk.cmake starts here\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# .latexmkrc generated by CMake from UseLatexMk.cmake ends here\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/scripts/CMakeLists.txt" : {
      "ObjectId" : "a59060b8eb9fbf97b4e64eb2816152b5cdd2b2c2",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/scripts/CreateDoxyFile.cmake" : {
      "ObjectId" : "2b70bb02e6b4c612a3aaaba26ed9a7d450a1f070",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For now we just support appending Doxyfile and Doxylocal\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Write the list of predefined C preprocessor macros\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# configure_file does not work as it insists an existing input file, which in our\n\n# needs to be generated first.\n\n# Therefore we read the Doxyfile.in and replace the variables using string(CONFIGURE)\n\n# and then write the file.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/scripts/FinalizeHeadercheck.cmake" : {
      "ObjectId" : "a6fdafcbbc70d08cbc1e81c9e3609994c1ee47cd",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this is script is called at the end of all header checks\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#message(\"Running make clean on headercheck targets...\")\n\n#this cleans the build directory from pollution through headerchecks but prevents caching... :/\n\n#file(GLOB_RECURSE list \"./CMakeFiles/headercheck_*/cmake_clean.cmake\")\n\n#foreach(item ${list})\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# execute_process(COMMAND ${CMAKE_COMMAND} -P ${item})\n",
        "Line" : 12,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#endforeach()",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/scripts/InstallFile.cmake" : {
      "ObjectId" : "5d8a9a9c40aebe4e25b48ad6359b939890b3e0ff",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Somehow variable list get destroyed when calling cmake (; is replaced with\n\n# whitespace character. Undo this change\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/scripts/RunDoxygen.cmake" : {
      "ObjectId" : "6084a2bc5c6072da50c945b95222698361396ad7",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "config.h.cmake" : {
      "ObjectId" : "c15d88b03a5ac3574ae5e68cfa94ce12ed858efb",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* config.h.  Generated from config.h.cmake by CMake.  */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* begin dune-common */",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Define to the version of dune-common */",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Define to the major version of dune-common */",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Define to the minor version of dune-common */",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Define to the revision of dune-common */",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Standard debug streams with a level below will collapse to doing nothing */",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* does the compiler support __attribute__((deprecated))? */",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* does the compiler support __attribute__((deprecated(\"message\"))? */",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* does the compiler support __attribute__((unused))? */",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* does the compiler support C++17's class template argument deduction? */",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* does the compiler support C++17's optional? */",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* does the compiler support C++17's variant? */",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* does the compiler support conditionally throwing exceptions in constexpr context? */",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* does the standard library provide <experimental/type_traits> ? */",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* does the standard library provide make_unique() ? */",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* does the standard library provide bool_constant ? */",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* does the standard library provide experimental::bool_constant ? */",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* does the standard library provide apply() ? */",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* does the standard library provide experimental::apply() ? */",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* does the standard library provide experimental::make_array() ? */",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* does the standard library provide experimental::is_detected ? */",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Define if you have a BLAS library. */",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* does the compiler support abi::__cxa_demangle */",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "/* Define if you have LAPACK library. */",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "/* Define to 1 if you have the <malloc.h> header file. */\n// Not used! #cmakedefine01 HAVE_MALLOC_H",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "/* Define if you have the MPI library.  */",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "/* Define if you have the GNU GMP library. The value should be ENABLE_GMP\n   to facilitate activating and deactivating GMP using compile flags. */",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "/* Define if you have the GCC Quad-Precision library. The value should be ENABLE_QUADMATH\n   to facilitate activating and deactivating QuadMath using compile flags. */",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "/* Define if you have the Vc library. The value should be ENABLE_VC\n   to facilitate activating and deactivating Vc using compile flags. */",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "/* Define to 1 if you have the symbol mprotect. */",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "/* Define to 1 if you have the <stdint.h> header file. */",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "/* Define to 1 if you have <sys/mman.h>. */",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "/* Define to 1 if you have the Threading Building Blocks (TBB) library */",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "/* begin private */",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "/* Name of package */",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "/* Define to the address where bug reports for this package should be sent. */",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "/* Define to the full name of this package. */",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "/* Define to the full name and version of this package. */",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "/* Define to the one symbol short name of this package. */",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "/* Define to the home page for this package. */",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "/* Define to the version of this package. */",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "/* Version number of package */",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "/* end private */",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "/* old feature support macros which were tested until 2.4, kept around for one more release */\n/* As these are now always supported due to the new compiler requirements, they are directly */\n/* defined without an explicit test. */",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "/* Define to 1 if the compiler properly supports testing for operator[] */",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "/* Define to ENABLE_UMFPACK if the UMFPack library is available */",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "/* Define to ENABLE_SUITESPARSE if the SuiteSparse library is available */",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "/* Define to ENABLE_SUITESPARSE if the SuiteSparse's AMD library is available */",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "/* Define to ENABLE_SUITESPARSE if the SuiteSparse's BTF library is available */",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "/* Define to ENABLE_SUITESPARSE if the SuiteSparse's CAMD library is available */",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "/* Define to ENABLE_SUITESPARSE if the SuiteSparse's CCOLAMD library is available */",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "/* Define to ENABLE_SUITESPARSE if the SuiteSparse's CHOLMOD library is available */",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "/* Define to ENABLE_SUITESPARSE if the SuiteSparse's COLAMD library is available */",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "/* Define to ENABLE_SUITESPARSE if the SuiteSparse's CXSPARSE library is available */",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "/* Define to ENABLE_SUITESPARSE if the SuiteSparse's KLU library is available */",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "/* Define to ENABLE_SUITESPARSE if the SuiteSparse's LDL library is available */",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "/* Define to ENABLE_SUITESPARSE if the SuiteSparse's RBIO library is available */",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "/* Define to ENABLE_SUITESPARSE if the SuiteSparse's SPQR library is available\n   and if it's version is at least 4.3 */",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "/* Define to ENABLE_SUITESPARSE if the SuiteSparse's UMFPACK library is available */",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "/* Define to 1 if METIS is available */",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "/* Define to ENABLE_PARMETIS if you have the Parmetis library.\n   This is only true if MPI was found\n   by configure _and_ if the application uses the PARMETIS_CPPFLAGS */",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "/* Define to 1 if PT-Scotch is available */",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "/* Include always useful headers */",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "/* end dune-common */",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 65
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "56c3aa475e94059a4fa04181de9919b872c2c6d2",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/buildsystem/CMakeLists.txt" : {
      "ObjectId" : "28a1ceb01720954565c12ab247c97aa2f8572277",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install the buildsystem documentation defined in dune-common\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Also always build the CMake API documentation in dune-common\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "doc/buildsystem/examples/Toolchain-Ubuntu-mingw32.cmake" : {
      "ObjectId" : "5fed8a18b66e2b054622ffb54f4c529a6db7e9cb",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sample toolchain file for building for Windows from an Ubuntu Linux system.\n\n#\n\n# Typical usage:\n\n#    *) install cross compiler: `sudo apt-get install mingw-w64 g++-mingw-w64`\n\n#    *) cd build\n\n#    *) cmake -DCMAKE_TOOLCHAIN_FILE=~/Toolchain-Ubuntu-mingw32.cmake ..\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# cross compilers to use for C and C++\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# enable to generate fully static binaries\n\n# set(CMAKE_EXE_LINKER_FLAGS \"-static -static-libgcc -static-libstdc++\"  CACHE STRING \"executable linker flags\")\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# target environment on the build host system\n\n#   set 1st to dir with the cross compiler's C/C++ headers/libs\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# modify default behavior of FIND_XXX() commands to\n\n# search for headers/libs in the target environment and\n\n# search for programs in the build host environment\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# enable/disable some hardware specific feature\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "doc/comm/CMakeLists.txt" : {
      "ObjectId" : "454194e7d028cad63fda2a24921ca70da2d6b31d",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/doxygen/CMakeLists.txt" : {
      "ObjectId" : "e1ca78184f96558cc7a9391f2ed4bdf486dd7229",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# create Doxyfile.in and Doxyfile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "dune/CMakeLists.txt" : {
      "ObjectId" : "b85be7f4a617bd64be563fd7e08e7a0467b2960e",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dune/common/CMakeLists.txt" : {
      "ObjectId" : "4a5785b695c2b75af6becab5920f0979b370cd86",
      "LastModified" : "2019-04-10T09:54:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#build the library dunecommon\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#install headers\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Install some test headers, because they get used by tests in other modules\n\n# We do this here as test will not be considered for make install\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "dune/common/parallel/CMakeLists.txt" : {
      "ObjectId" : "cb1be5772cc1acea252229ea8e351a866e42a31b",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#install headers\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "dune/common/parallel/test/CMakeLists.txt" : {
      "ObjectId" : "9663e668d18d90f1d3123c4da9da703b9d0c184d",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dune/common/simd/CMakeLists.txt" : {
      "ObjectId" : "08b5081bc44a0428263e6334ca8e307c4e457ea2",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#install headers\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# may be used from dependent modules\n",
        "Line" : 12,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 2
    },
    "dune/common/simd/test/CMakeLists.txt" : {
      "ObjectId" : "ded25bebf629340da259e5f7971a0c95976eeb30",
      "LastModified" : "2019-03-19T15:58:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# We need to explicitly instantiate the tests for small groups of types --\n\n# else the compiler will eat excessive amounts of memory.  This way it seems\n\n# to stay below 1GByte (with g++ 4.9.2 -O0 -g on x86_64 GNU/Linux, looking at\n\n# standardtest).\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Generate files with instanciations, external declarations, and also the\n\n# invocations in the test for each instance.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# no need to install looptest.hh, used by looptest*.cc only\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Generate files with instanciations, external declarations, and also the\n\n# invocations in the test for each instance.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# no need to install standardtest.hh, used by standardtest*.cc only\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# as of Vc-1.3.2: Vc/common/simdarray.h:561: SimdArray<T, N> may only be used\n\n# with T = { double, float, int32_t, uint32_t, int16_t, uint16_t }\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Generate files with instanciations, external declarations, and also the\n\n# invocations in the test for each instance.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# no need to install vcarraytest.hh, used by vctest*.cc only\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generate files with instanciations, external declarations, and also the\n\n# invocations in the test for each instance.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# no need to install vcvectortest.hh, used by vctest*.cc only\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "dune/common/std/CMakeLists.txt" : {
      "ObjectId" : "41d4c3a67fb3047ba3fd87821a3e2a3766b74c12",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dune/common/test/CMakeLists.txt" : {
      "ObjectId" : "3d22ce8d58abbaf96c3f55117c991cea09ad3656",
      "LastModified" : "2019-03-19T15:58:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Generate files with instanciations, external declarations, and also the\n\n# invocations in the test for each instance.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "0534cd8f96411a9bbee921ad29da90b59dc20e43",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "share/CMakeLists.txt" : {
      "ObjectId" : "2f8b821dec4967dcf75e4bd4e2bffedc8e7318e0",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "share/bash-completion/CMakeLists.txt" : {
      "ObjectId" : "451b2779b2b5c8df072e8af62e5e7ef1a8f9b467",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "share/bash-completion/completions/CMakeLists.txt" : {
      "ObjectId" : "a29c827589b626a6a955205afc370df9e553d6ae",
      "LastModified" : "2019-01-18T23:37:40Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 75,
    "CMAKESOURCE" : 1
  },
  "ElapsedTime" : 2153
}