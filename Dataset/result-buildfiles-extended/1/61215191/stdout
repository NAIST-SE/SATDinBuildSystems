{
  "Repository" : "61215191",
  "Revision" : "HEAD",
  "ObjectId" : "bd7617bcfa77f99bc5b3e873f156a044a478053d",
  "CommitTime" : "2019-04-15T16:47:00Z",
  "Files" : {
    "fhq-server/CMakeLists.txt" : {
      "ObjectId" : "95cc3084966b7f4dd375f3c750cd4a7463923b98",
      "LastModified" : "2019-04-15T15:59:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sources\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include header dirs\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# core - 3rdParty\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# core\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# interfaces\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# quazip\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# cmd\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# models\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# validators\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# storages\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TODO include only if libmysqlclient exists \n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# exports\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# utils\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# server\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# employees\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# tasks\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# updates\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# web-server\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# main\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "############################\n\n#####\n\n#foreach (_headerFile ${FHQSRV_HEADERS})\n\n#    get_filename_component(_dir ${_headerFile} PATH)\n\n#    list (APPEND FHQSRV_INCLUDE_DIRS ${_dir})\n\n#endforeach()\n\n#list(REMOVE_DUPLICATES FHQSRV_INCLUDE_DIRS)\n\n#####\n\n############################\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "############################\n\n##### ZLIB\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#####\n\n############################\n",
        "Line" : 287,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "############################\n\n##### LIBPNG\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#####\n\n############################\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "############################\n\n##### CURL\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#####\n\n############################\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "############################\n\n##### mysql \n\n# Find and make sure the system have the header file\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#####\n\n############################\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# target_link_libraries(fhq-server Qt5::Core)\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# install(FILES install_files/fhq-server.conf.sample DESTINATION ${CMAKE_INSTALL_PREFIX}/../etc/fhq-server COMPONENT config)\n\n# install(FILES install_files/fhq-server.service DESTINATION ${CMAKE_INSTALL_PREFIX}/../etc/systemd/system COMPONENT config)\n\n# install(FILES install_files/fhq-server.postinst DESTINATION ${CMAKE_INSTALL_PREFIX}/../var/lib/dpkg/info COMPONENT config)\n\n# install(DIRECTORY DESTINATION ${CMAKE_INSTALL_PREFIX}/share/fhq-server)\n\n# install(DIRECTORY DESTINATION ${CMAKE_INSTALL_PREFIX}/log/fhq-server)\n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "fhq-server/cmake/FindMYSQL.cmake" : {
      "ObjectId" : "738f5881d6e7d612af79c72f12f6fc4227f33fe1",
      "LastModified" : "2019-02-28T03:43:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find mysqlclient\n\n# Find the native MySQL includes and library\n\n#\n\n#  MYSQL_INCLUDE_DIR - where to find mysql.h, etc.\n\n#  MYSQL_LIBRARIES   - List of libraries when using MySQL.\n\n#  MYSQL_FOUND       - True if MySQL found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "fhq-server/cmake/FindPostgreSQL.cmake" : {
      "ObjectId" : "3e71f7dbec595d44aec4f749126e1001a92a2d30",
      "LastModified" : "2019-02-28T03:43:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\nFindPostgreSQL\n--------------\n\nFind the PostgreSQL installation.\n\nIMPORTED Targets\n^^^^^^^^^^^^^^^^\n\nThis module defines :prop_tgt:`IMPORTED` target ``PostgreSQL::PostgreSQL``\nif PostgreSQL has been found.\n\nResult Variables\n^^^^^^^^^^^^^^^^\n\nThis module will set the following variables in your project:\n\n``PostgreSQL_FOUND``\n  True if PostgreSQL is found.\n``PostgreSQL_LIBRARIES``\n  the PostgreSQL libraries needed for linking\n``PostgreSQL_INCLUDE_DIRS``\n  the directories of the PostgreSQL headers\n``PostgreSQL_LIBRARY_DIRS``\n  the link directories for PostgreSQL libraries\n``PostgreSQL_VERSION_STRING``\n  the version of PostgreSQL found\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ----------------------------------------------------------------------------\n\n# History:\n\n# This module is derived from the module originally found in the VTK source tree.\n\n#\n\n# ----------------------------------------------------------------------------\n\n# Note:\n\n# PostgreSQL_ADDITIONAL_VERSIONS is a variable that can be used to set the\n\n# version number of the implementation of PostgreSQL.\n\n# In Windows the default installation of PostgreSQL uses that as part of the path.\n\n# E.g C:\\Program Files\\PostgreSQL\\8.4.\n\n# Currently, the following version numbers are known to this module:\n\n# \"11\" \"10\" \"9.6\" \"9.5\" \"9.4\" \"9.3\" \"9.2\" \"9.1\" \"9.0\" \"8.4\" \"8.3\" \"8.2\" \"8.1\" \"8.0\"\n\n#\n\n# To use this variable just do something like this:\n\n# set(PostgreSQL_ADDITIONAL_VERSIONS \"9.2\" \"8.4.4\")\n\n# before calling find_package(PostgreSQL) in your CMakeLists.txt file.\n\n# This will mean that the versions you set here will be found first in the order\n\n# specified before the default ones are searched.\n\n#\n\n# ----------------------------------------------------------------------------\n\n# You may need to manually set:\n\n#  PostgreSQL_INCLUDE_DIR  - the path to where the PostgreSQL include files are.\n\n#  PostgreSQL_LIBRARY_DIR  - The path to where the PostgreSQL library files are.\n\n# If FindPostgreSQL.cmake cannot find the include files or the library files.\n\n#\n\n# ----------------------------------------------------------------------------\n\n# The following variables are set if PostgreSQL is found:\n\n#  PostgreSQL_FOUND         - Set to true when PostgreSQL is found.\n\n#  PostgreSQL_INCLUDE_DIRS  - Include directories for PostgreSQL\n\n#  PostgreSQL_LIBRARY_DIRS  - Link directories for PostgreSQL libraries\n\n#  PostgreSQL_LIBRARIES     - The PostgreSQL libraries.\n\n#\n\n# The ``PostgreSQL::PostgreSQL`` imported target is also created.\n\n#\n\n# ----------------------------------------------------------------------------\n\n# If you have installed PostgreSQL in a non-standard location.\n\n# (Please note that in the following comments, it is assumed that <Your Path>\n\n# points to the root directory of the include directory of PostgreSQL.)\n\n# Then you have three options.\n\n# 1) After CMake runs, set PostgreSQL_INCLUDE_DIR to <Your Path>/include and\n\n#    PostgreSQL_LIBRARY_DIR to wherever the library pq (or libpq in windows) is\n\n# 2) Use CMAKE_INCLUDE_PATH to set a path to <Your Path>/PostgreSQL<-version>. This will allow find_path()\n\n#    to locate PostgreSQL_INCLUDE_DIR by utilizing the PATH_SUFFIXES option. e.g. In your CMakeLists.txt file\n\n#    set(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} \"<Your Path>/include\")\n\n# 3) Set an environment variable called ${PostgreSQL_ROOT} that points to the root of where you have\n\n#    installed PostgreSQL, e.g. <Your Path>.\n\n#\n\n# ----------------------------------------------------------------------------\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Define additional search paths for root directories.\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Look for an installation.\n\n#\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Look in other places.\n",
        "Line" : 123,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# Help the user find it if we cannot.\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Look in other places.\n",
        "Line" : 137,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# Help the user find it if we cannot.\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# The PostgreSQL library.\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Setting some more prefixes for the library\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Help the user find it if we cannot.\n",
        "Line" : 165,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Some platforms include multiple pg_config.hs for multi-lib configurations\n\n# This is a temporary workaround.  A better solution would be to compile\n\n# a dummy c file and extract the value of the symbol.\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Did we find anything?\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Now try to get the include and library path.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "fhq-server/src/3rdParty/quazip-0.7.3/CMakeLists.txt" : {
      "ObjectId" : "3d2fb550190c9a253ba0843c1dd4baed5b69daac",
      "LastModified" : "2019-02-28T03:43:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMP0042: Explicitly acknowledge MACOSX_RPATH\n\n# (introduced in CMake 2.8.12, enabled by default in CMake 3.0,\n\n# and producing a warning when unset since 3.7.1)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# try Qt5 first, and prefer that if found\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# if there is no QT_ROOT, try to deduce it from Qt QtCore include\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Use system zlib on unix and Qt ZLIB on Windows\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# All build libraries are moved to this directory\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "fhq-server/src/3rdParty/quazip-0.7.3/FindQuaZip.cmake" : {
      "ObjectId" : "23f4918db4f441d9b45cf9b1d65a2b7a3425429a",
      "LastModified" : "2019-02-28T03:43:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# QUAZIP_FOUND               - QuaZip library was found\n\n# QUAZIP_INCLUDE_DIR         - Path to QuaZip include dir\n\n# QUAZIP_INCLUDE_DIRS        - Path to QuaZip and zlib include dir (combined from QUAZIP_INCLUDE_DIR + ZLIB_INCLUDE_DIR)\n\n# QUAZIP_LIBRARIES           - List of QuaZip libraries\n\n# QUAZIP_ZLIB_INCLUDE_DIR    - The include dir of zlib headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 9,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#     pkg_check_modules(PC_QCA2 QUIET qca2)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "fhq-server/src/3rdParty/quazip-0.7.3/includes.pri" : {
      "ObjectId" : "8362f9758c141a4978bb2581ae55a8b8b2f13e72",
      "LastModified" : "2019-02-28T03:43:00Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "fhq-server/src/3rdParty/quazip-0.7.3/quazip.pri" : {
      "ObjectId" : "07cd9c043ef9ba6ddc52776b003d66d38c1aeb0d",
      "LastModified" : "2019-02-28T03:43:00Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "fhq-server/src/3rdParty/quazip-0.7.3/quazip.pro" : {
      "ObjectId" : "86d4587547e0dce330a1969bc3f68e38c4a94227",
      "LastModified" : "2019-02-28T03:43:00Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "fhq-server/src/3rdParty/quazip-0.7.3/quazip/CMakeLists.txt" : {
      "ObjectId" : "b6b8ab6e27a117a19c16d8be83dcd228536eb8db",
      "LastModified" : "2019-02-28T03:43:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set all include directories for in and out of source builds\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Must be added to enable export macro\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Windows uses .lib extension for both static and shared library\n\n# *nix systems use different extensions for SHARED and STATIC library and by convention both libraries have the same name\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link against ZLIB_LIBRARIES if needed (on Windows this variable is empty)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "fhq-server/src/3rdParty/quazip-0.7.3/quazip/quazip.pri" : {
      "ObjectId" : "1a9db99b7578c662792874d198868f1304663afa",
      "LastModified" : "2019-02-28T03:43:00Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "fhq-server/src/3rdParty/quazip-0.7.3/quazip/quazip.pro" : {
      "ObjectId" : "3e10f36907c5dc19ef778186a44a56f3bf7124ad",
      "LastModified" : "2019-02-28T03:43:00Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# The ABI version.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 1.0.0 is the first stable ABI.\n\n# The next binary incompatible change will be 2.0.0 and so on.\n\n# The existing QuaZIP policy on changing ABI requires to bump the\n\n# major version of QuaZIP itself as well. Note that there may be\n\n# other reasons for chaging the major version of QuaZIP, so\n\n# in case where there is a QuaZIP major version bump but no ABI change,\n\n# the VERSION variable will stay the same.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For example:\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# QuaZIP 1.0 is released after some 0.x, keeping binary compatibility.\n\n# VERSION stays 1.0.0.\n\n# Then some binary incompatible change is introduced. QuaZIP goes up to\n\n# 2.0, VERSION to 2.0.0.\n\n# And so on.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This one handles dllimport/dllexport directives.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# You'll need to define this one manually if using a build system other\n\n# than qmake or using QuaZIP sources directly in your project.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Input\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# workaround for qdatetime.h macro bug\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Note, on Symbian you may run into troubles with LGPL.\n\n# The point is, if your application uses some version of QuaZip,\n\n# and a newer binary compatible version of QuaZip is released, then\n\n# the users of your application must be able to relink it with the\n\n# new QuaZip version. For example, to take advantage of some QuaZip\n\n# bug fixes.\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# This is probably best achieved by building QuaZip as a static\n\n# library and providing linkable object files of your application,\n\n# so users can relink it.\n",
        "Line" : 72,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "#Export headers to SDK Epoc32/include directory\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "unit-tests/CMakeLists.txt" : {
      "ObjectId" : "dc1ff2363e14a156cc00850847992d0d5f9f77b4",
      "LastModified" : "2019-04-15T15:59:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sources\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include header dirs\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# deprecated\n",
        "Line" : 23,
        "CharPositionInLine" : 69
      },
      "3" : {
        "Text" : "# core - 3rdParty\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# core\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# validators\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# interfaces\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# storages\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# utils\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# unit_tests\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# list (APPEND UNIT_TESTS_SOURCES \"src/unit_tests/unit_test_base64.h\")\n\n# list (APPEND UNIT_TESTS_SOURCES \"src/unit_tests/unit_test_base64.cpp\")\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# main\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "############################\n\n##### ZLIB\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#####\n\n############################\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "############################\n\n##### LIBPNG\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#####\n\n############################\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "############################\n\n##### CURL\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#####\n\n############################\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "############################\n\n##### mysql \n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#####\n\n############################\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "############################\n\n##### PostgreSQL\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# FIND_PACKAGE(PostgreSQL)\n\n# IF(PostgreSQL_FOUND)\n\n#  list (APPEND UNIT_TESTS_INCLUDE_DIRS ${PostgreSQL_INCLUDE_DIR})\n\n#   list (APPEND UNIT_TESTS_LIBRARIES ${PostgreSQL_LIBRARIES})\n\n#   list (APPEND UNIT_TESTS_INCLUDE_DIRS \"src/storages/postgresql\")\n\n#   list (APPEND UNIT_TESTS_SOURCES \"../fhq-server/src/storages/postgresql/postgresql_storage.cpp\")\n\n#   list (APPEND UNIT_TESTS_SOURCES \"../fhq-server/src/storages/postgresql/postgresql_storage.h\")\n\n# ELSE(PostgreSQL_FOUND)\n\n#   MESSAGE(WARNING \"Could not find library for PostgreSQL. If it's not need for you just ignore this message.\")\n\n# ENDIF(PostgreSQL_FOUND)\n\n#####\n\n############################\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    }
  },
  "FileTypes" : {
    "CMAKE" : 7,
    "QMAKE" : 5
  },
  "ElapsedTime" : 633
}