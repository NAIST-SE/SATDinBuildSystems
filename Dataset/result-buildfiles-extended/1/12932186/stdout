{
  "Repository" : "12932186",
  "Revision" : "HEAD",
  "ObjectId" : "7d30f19ce82dc4afbc34508f610a0311608da1c7",
  "CommitTime" : "2016-05-11T18:05:54Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "aea0d3b513b4691b27b669654f8168efb145b7e8",
      "LastModified" : "2015-05-08T18:27:13Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# to wrap scripts and deploy them to $(TARGET)/bin using tools in\n\n# the dev_container. right now, these vars are defined in\n\n# Makefile.common, so it's redundant here.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#WRAP_RSCRIPT_TOOL = wrap_rscript\n\n#WRAP_RSCRIPT_SCRIPT = bash $(TOOLS_DIR)/$(WRAP_RSCRIPT_TOOL).sh\n\n#SRC_R = $(wildcard scripts/*.R)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# You can change these if you are putting your tests somewhere\n\n# else or if you are not using the standard .t suffix\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is a very client centric view of release engineering.\n\n# We assume our primary product for the community is the client\n\n# libraries and command line interfaces on which specific \n\n# science applications can be built.\n\n#\n\n# A service is composed of a client and a server, each of which\n\n# should be independently deployable. Clients are composed of\n\n# an application programming interface and a command line\n\n# interface. In our make targets, the deploy-service deploys\n\n# the server, the deploy-client deploys the application\n\n# programming interface libraries, and the deploy-scripts deploys\n\n# the command line interface (usually scripts written in a\n\n# scripting language but java executables also qualify), and the\n\n# deploy target would be equivelant to deploying a service (client\n\n# libs, scripts, and server).\n\n#\n\n# Because the deployment of the server side code depends on the\n\n# specific software module being deployed, the strategy needs\n\n# to be one that leaves this decision to the module developer.\n\n# This is done by having the deploy target depend on the\n\n# deploy-service target. The module developer who chooses for\n\n# good reason not to deploy the server with the client simply\n\n# manages this dependancy accordingly. One option is to have\n\n# a deploy-service target that does nothing, the other is to\n\n# remove the dependancy from the deploy target.\n\n#\n\n# A smiliar naming convention is used for tests. \n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Test Section\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# test-all is deprecated. \n\n# test-all: test-client test-scripts test-service\n\n#\n\n# What does it mean to test a client. This is a test of a client\n\n# library. If it is a client-server module, then it should be\n\n# run against a running server. You can say that this also tests\n\n# the server, and I agree. You can add a test-service dependancy\n\n# to the test-client target if it makes sense to you. This test\n\n# example assumes there is already a tested running server.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# run each test\n",
        "Line" : 85,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# What does it mean to test a script? A script test should test\n\n# the command line scripts. If the script is a client in a client-\n\n# server architecture, then there should be tests against a \n\n# running server. You can add a test-service dependancy to the\n\n# test-client target. You could also add a deploy-service and\n\n# start-server dependancy to the test-scripts target if it makes\n\n# sense to you. Future versions of the make files for services\n\n# will move in this direction.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# run each test\n",
        "Line" : 104,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# What does it mean to test a server. A server test should not\n\n# rely on the client libraries or scripts in so far as you should\n\n# not have a test-service target that depends on the test-client\n\n# or test-scripts targets. Otherwise, a circular dependency\n\n# graph could result.\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# run each test\n",
        "Line" : 137,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# here are the standard KBase deployment targets (deploy,deploy-client, deploy-scripts, & deploy-service)\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Deploy client artifacts, including the application programming interface\n\n# libraries, command line scripts, and associated reference documentation.\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Deploy command line scripts.  The scripts are \"wrapped\" so users do not\n\n# need to modify their environment to run KBase scripts.\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Deploy documentation of the application programming interface.\n\n# (Waiting for resolution on documentation of command line scripts).\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Deploy service start and stop scripts.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# the above service.cfg is not correct at the moment\n\n# Use this if you want to unlink the generation of the docs from\n\n# the generation of the libs. Not recommended, but could be a\n\n# reason for it that I'm not seeing.\n\n# The compile-docs should depend on build-libs so that we are ensured\n\n# of having a set of documentation that is based on the latest\n\n# type spec.\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Build libs should be dependent on the type specification and the\n\n# type compiler. Building the libs in this way means that you don't\n\n# need to put automatically generated code in a source code version\n\n# control repository (ie cvs, git). It also ensures that you always\n\n# have the most  up-to-date libs and documentation if your compile\n\n# docs depends on the compiled libs.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\t\t--scripts scripts \\ # script is not working\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "build.xml" : {
      "ObjectId" : "aeff8fb7eb3ee659ff305774074c8aeff9e79984",
      "LastModified" : "2016-03-04T19:21:16Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " set global properties for this build ",
        "Line" : 7,
        "CharPositionInLine" : 48
      },
      "1" : {
        "Text" : " Might not need the following jars (may need refactoring code) ",
        "Line" : 38,
        "CharPositionInLine" : 75
      },
      "2" : {
        "Text" : " Create the output directory structure",
        "Line" : 54,
        "CharPositionInLine" : 50
      },
      "3" : {
        "Text" : " Compile class files",
        "Line" : 61,
        "CharPositionInLine" : 32
      },
      "4" : {
        "Text" : " Copy resource files",
        "Line" : 65,
        "CharPositionInLine" : 32
      },
      "5" : {
        "Text" : " Clean up internal temporary files and folders",
        "Line" : 113,
        "CharPositionInLine" : 58
      },
      "CommentCount" : 6
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 1,
    "ANT" : 1
  },
  "ElapsedTime" : 1318
}