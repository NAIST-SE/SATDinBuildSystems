{
  "Repository" : "4682168",
  "Revision" : "HEAD",
  "ObjectId" : "7c981c0faf040584e980eb0cadfea1ac5a7cd482",
  "CommitTime" : "2015-07-30T20:41:20Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "1de6a11d3c8c5d84d38635f4703332f38ab933cd",
      "LastModified" : "2015-05-25T01:15:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable the use of MACOSX_RPATH by default; this effectively allows plug 'n'\n\n# play functionality, so to speak -- the resulting shared library files can\n\n# simply be copied over into the end-user's application bundle or framework\n\n# bundle. No mucking around with install_name_tool.\n\n#\n\n# (Minimum required CMake: v2.8.12)\n\n#\n\n#   See also:\n\n#\n\n# cmake --help-policy cmp0042\n\n# http://www.kitware.com/blog/home/post/510\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake Environment\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Opt out of using CMake v3.0 PROJECT_VERSION variables management for the\n\n# project.\n\n# http://www.cmake.org/cmake/help/v3.0/command/project.html#command:project\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set ( CMAKE_VERBOSE_MAKEFILE OFF CACHE PATH \"Verbose Makefile\" )\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Project Options\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Sets PROJECT_NAME variable for us\n",
        "Line" : 53,
        "CharPositionInLine" : 18
      },
      "6" : {
        "Text" : "# Platform detection\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Building nomlib on Windows is only supported as a static library for the\n\n# moment\n",
        "Line" : 59,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# We only support building nomlib as a dynamic library at the moment\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# TODO: We should be setting CMAKE_BUILD_TYPE directly from the command line\n\n# instead of DEBUG\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# set ( CMAKE_VERBOSE_MAKEFILE ON )\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# TODO: Enable -Wsign-conversion, -Wextra\n\n# TODO: Consider enabling some of these run-time checks that clang offers,\n\n# i.e.:: -fsanitize=address, -fsanitize=integer, -fsanitize=undefined,\n\n# -fsanitize=unsigned-integer-overflow, etc.\n\n# See also: http://clang.llvm.org/docs/UsersManual.html#controlling-code-generation\n\n# See also: Malloc Debugging under OSX: https://developer.apple.com/library/mac/documentation/Performance/Conceptual/ManagingMemory/Articles/MallocDebug.html#//apple_ref/doc/uid/20001884-CJBJFIDD\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Measure the time it takes per source file to build, so we can try\n\n# speeding up slow builds!\n\n# set ( CMAKE_CXX_FLAGS_DEBUG \"${CMAKE_CXX_FLAGS_DEBUG} -ftime-report\" )\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# TODO: split these options up like we have for other platforms\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Build with optimizations for maximum speed and minimal size\n",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Enable NOM_ASSERT macros\n",
        "Line" : 99,
        "CharPositionInLine" : 43
      },
      "16" : {
        "Text" : "# Disable NOM_ASSERT macros\n",
        "Line" : 102,
        "CharPositionInLine" : 33
      },
      "17" : {
        "Text" : "# Utility macro helpers\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# TODO: Rename to NOMLIB_SRC_DIR..?\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# TODO: Rename to NOMLIB_INCLUDE_ROOT_DIR..?\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# TODO: Rename to NOMLIB_INCLUDE_DIR..?\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Relative path from project root to nomlib demonstration examples\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Resources path for engine examples\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Unit testing resources path\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Additional flags to pass add_executable -- used when library examples are\n\n# built\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Files used with documentation generation\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# CMAKE_SYSTEM_PREFIX_PATH is searched to find libraries when the find_package\n\n# command is used.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Installation prefix path set for our project\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Doxygen configuration\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Third-party dependencies\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Redistribution paths must be absolute, a directory and end with a trailing\n\n# slash character (these are fed to CMake's install command). Only filenames\n\n# with the extension of '.dll' and '.lib' (case-insensitive) will be copied.\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# The CMake-distributed FindOpenAL.cmake doesn't recognize lib/x86, lib/x64,\n\n# so in order to avoid creating our own, we break from our norm and conform\n\n# to libs/Win32, libs/Win64\n",
        "Line" : 190,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# FreeType2\n",
        "Line" : 201,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Use platform-distributed headers for OpenAL; should automatically use the\n\n# proper platform SDK version as configured by CMAKE_OSX_SYSROOT\n",
        "Line" : 223,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# FIXME: This file needs its RPATH modified for redistribution; it is **not**\n\n# being used as the run-time library for executables yet. We are using brew's\n\n# version installed under /usr/local\n",
        "Line" : 236,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# TODO\n",
        "Line" : 243,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# List of our source code to be compiled\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Installation phase\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Bundle libraries we depend on in the appropriate modules\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# dylibs\n",
        "Line" : 276,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# Install nomlib's header files in a stub framework, nomlib.framework\n\n#\n\n# NOTE: The trailing slash is necessary, to prevent the last directory\n\n# component -- 'nomlib' -- from being copied. This keeps the nomlib root\n\n# namespace preserved, so we can include headers the same way across\n\n# platforms, i.e.: <nomlib/config.hpp>.\n",
        "Line" : 283,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# nomlib's icon\n",
        "Line" : 294,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Install nomlib's CMake find module; this should end up in a spot that is\n\n# automatically searched by find_package.\n",
        "Line" : 301,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# Install software license & general project information\n",
        "Line" : 309,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# Install the generated documentation files\n\n# if( NOM_INSTALL_GENERATED_DOCS )\n\n#   install(  DIRECTORY ${PROJECT_BINARY_DIR}/docs/html\n\n#             DESTINATION \"${PROJECT_NAME}.framework/Resources/Documentation\"\n\n#             PATTERN \".*\" EXCLUDE\n\n#   )\n\n# endif( NOM_INSTALL_GENERATED_DOCS )\n",
        "Line" : 316,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Install hardware definitions for input devices (game controllers)\n",
        "Line" : 324,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# POSIX install layout scheme is the default installation scheme. This is\n\n# applicable to OS X when FRAMEWORK=off.\n",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Install nomlib's header files\n",
        "Line" : 334,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# i.e.: /usr/local/include/nomlib/\n",
        "Line" : 336,
        "CharPositionInLine" : 34
      },
      "49" : {
        "Text" : "# Install nomlib's icon\n",
        "Line" : 340,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# Install nomlib's cmake module; this should be installed somewhere that is\n\n# automatically searched by find_package.\n\n#\n\n# See also (installation prefixes for a package):\n\n# http://www.cmake.org/cmake/help/v3.0/command/find_package.html?highlight=find_package.\n",
        "Line" : 347,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# i.e.: C:\\Program Files (x86)\\nomlib\\CMake\n",
        "Line" : 353,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# Install hardware definitions for input devices (game controllers)\n",
        "Line" : 361,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# i.e.: /usr/local/share/nomlib/CMake\n",
        "Line" : 368,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# Install software license & general project information\n",
        "Line" : 377,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# Install the generated documentation files\n",
        "Line" : 384,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# FIXME (prettify)\n",
        "Line" : 395,
        "CharPositionInLine" : 60
      },
      "57" : {
        "Text" : "# nomlib examples configuration\n",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# NOTE: we *MUST* enable testing from the top-level build script -- that's this\n\n# file -- or else 'make test' breaks. (Dated 2014-04-05)\n",
        "Line" : 403,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Make a version file containing the current version from git\n\n#\n\n# Source: http://brianmilco.blogspot.com/2012/11/cmake-automatically-use-git-tags-as.html\n\n#\n\n# NOTE: This has been removed from the project due to wrong version output from\n\n# `git describe` when using our git branching strategy -- also known as Vincent\n\n# Driessen’s \"Git branching model\".\n\n#\n\n# In short, the problem is introduced during the \"Finishing a release branch\"\n\n# section of the model, when we create our release tag. The algorithm\n\n# `git describe` uses to determine the \"nearest\" tag is, I believe, the root\n\n# cause of the problem. It's especially worth mentioning that the problem only\n\n# occurs on non-HEAD branches -- i.e.: development branches, such as dev or\n\n# feature/<name>.\n\n#\n\n# Full problem description: http://www.xerxesb.com/2010/git-describe-and-the-tale-of-the-wrong-commits/\n\n#\n\n# include( GetGitRevisionDescription )\n\n# git_describe( GIT_REVISION )\n\n# string( REGEX REPLACE \"^v[0-9]+\\\\.[0-9]+\\\\.[0-9]+(.*)\" \"\\\\1\" VERSION_SHA1 \"${GIT_REVISION}\" )\n",
        "Line" : 410,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Auto-generate a build revision file containing the last recorded git revision\n\n# number (top of branch).\n",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# git_rev_number(GIT_REVISION) # Full SHA\n",
        "Line" : 434,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Uninstall target support; 'make uninstall'\n",
        "Line" : 440,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# TODO: Windows platform support\n",
        "Line" : 451,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# CPack configuration\n",
        "Line" : 453,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "# Platform specific generator presets\n",
        "Line" : 458,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 66
    },
    "Resources/CMake/nomlib-config.cmake" : {
      "ObjectId" : "d92020460337b41f7240cd14b5c6a158babb6fa9",
      "LastModified" : "2015-06-06T07:46:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate nomlib\n\n#\n\n# This module defines:\n\n#\n\n# NOMLIB_FOUND, TRUE when all the specified components are found, FALSE when\n\n# one or more components are not found.\n\n#\n\n# NOMLIB_XXX_FOUND, TRUE when the specified component (debug or release) is\n\n# found, FALSE otherwise.\n\n#\n\n# NOMLIB_LIBRARIES, the list of libraries corresponding to the found\n\n# components.\n\n#\n\n# NOMLIB_INCLUDE_DIR, the path where nomlib's development header files are\n\n# located.\n\n#\n\n# NOMLIB_EXTERNAL_INCLUDE_DIRS, the paths where required external development\n\n# header files are located.\n\n#\n\n# NOMLIB_DEPENDENCIES, the paths where the required external libraries are\n\n# located.\n\n#\n\n# NOTE: On OS X, framework libraries are preferred (chosen) over dynamic\n\n# libraries.\n\n#\n\n# Usage\n\n#\n\n# find_package( nomlib [QUIET] COMPONENTS ... [REQUIRED] [OPTIONAL_COMPONENTS] ... )\n\n#\n\n# QUIET, disables output messages when the component cannot be found.\n\n#\n\n# REQUIRED, stops CMake processing with an error message when the component\n\n# cannot be found.\n\n#\n\n# If nomlib is not installed in a standard path -- one that is automatically\n\n# searched by CMake -- you can set the NOMLIB_ROOT CMake variable before\n\n# invoking find_package( nomlib ... ) with the root installation prefix.\n\n#\n\n# The NOMLIB_ROOT variable can also be set from the environment and invoked at\n\n# the time of CMake generation (cmake ..).\n\n#\n\n# Example\n\n#\n\n# find_package( nomlib COMPONENTS core file math audio system graphics REQUIRED\n\n#               OPTIONAL_COMPONENTS audio )\n\n#\n\n# include_directories( ${NOMLIB_INCLUDE_DIR} )\n\n# add_executable( app ... )\n\n# target_link_libraries( app ${NOMLIB_LIBRARIES} )\n\n#\n\n# Findnomlib.cmake TODO\n\n#\n\n# - [ ] Support find_package version syntax, i.e.:\n\n# ```find_package( nomlib 0.11.0 ... )```\n\n# - [ ] Support explicit use of debug && release libraries.\n\n# - [ ] Ensure that the proper libraries are selected, depending on\n\n# architecture (i.e.: 32-bit VS 64-bit).\n\n#\n\n# Copyright (c) 2014 Jeffrey Carpenter <i8degrees@gmail.com>\n\n#\n\n# Distributed under the Simplified BSD License; see accompanying file\n\n# LICENSE.md.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n#\n\n# To distribute this file outside of CMake, substitute the full license text\n\n# for the above reference.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# IMPORTANT: NOMLIB_DEPS_PREFIX will be an external CMake variable within\n\n# this scope, of which **must** already be set by the parent script calling\n\n# FIND_PACKAGE, and should **never** be modified for sake of the parent\n\n# script.\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# The path **prefixes** used in the search for nomlib library components; used\n\n# in calls made to find_library (CMake).\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# homebrew\n",
        "Line" : 103,
        "CharPositionInLine" : 17
      },
      "4" : {
        "Text" : "# Fink\n",
        "Line" : 105,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 106,
        "CharPositionInLine" : 17
      },
      "6" : {
        "Text" : "# Blastwave\n",
        "Line" : 107,
        "CharPositionInLine" : 15
      },
      "7" : {
        "Text" : "# Additional path **suffixes** used in the search for nomlib library components\n\n# in Windows land; used in calls made to find_library (CMake).\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\n#   set(VC_LIB_PATH_SUFFIX lib/x64)\n\n# else()\n\n#   set(VC_LIB_PATH_SUFFIX lib/x86)\n\n# endif()\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The path **suffixes** used in the search for nomlib library components; used\n\n# in calls made to find_library (CMake).\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# OpenAL\n",
        "Line" : 128,
        "CharPositionInLine" : 17
      },
      "11" : {
        "Text" : "# OpenAL\n",
        "Line" : 131,
        "CharPositionInLine" : 17
      },
      "12" : {
        "Text" : "# Initialize default state of module\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Err: missing nomlib component that is marked required\n",
        "Line" : 161,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Locate third-party libraries\n\n#\n\n# output_var  The variable to assign results output to\n\n# output_name The name to use as a NOTFOUND result (the err condition)\n\n# ...         Library names to search for\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Additional path suffixes used in the search for libraries (.lib files) in\n\n# Windows land\n",
        "Line" : 180,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Path to Windows lib files\n",
        "Line" : 184,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Required by our OpenAL path convention for locating Windows lib files\n",
        "Line" : 188,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Required for finding libRocket libs on OSX\n",
        "Line" : 192,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Try to find the external dependencies from the pre-packaged locations\n\n# first\n",
        "Line" : 196,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# osx, *nix\n",
        "Line" : 203,
        "CharPositionInLine" : 45
      },
      "21" : {
        "Text" : "# windows\n",
        "Line" : 204,
        "CharPositionInLine" : 36
      },
      "22" : {
        "Text" : "# unset( output_var )\n",
        "Line" : 208,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Add the required external project includes\n",
        "Line" : 231,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# System library\n",
        "Line" : 264,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Add the required external project includes\n",
        "Line" : 278,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Handle errors\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Err: missing installation of developer header files for nomlib -- have you\n\n# tried setting installation prefix with NOMLIB_ROOT?\n",
        "Line" : 313,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Handle missing nomlib components with respect given to QUIET, REQUIRED\n\n# options\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Hide from cmake-gui\n\n# TODO\n\n# mark_as_advanced( NOM_DEPENDENCIES_DIR )\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 30
    },
    "cmake/CPackConfig.cmake" : {
      "ObjectId" : "72f3f699ce5576cf5346b607782963f7dbdf253b",
      "LastModified" : "2014-01-12T07:59:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file controls the generation details of our packages through CPack\n\n# variables set below.\n\n#\n\n# These variables should be set in the CMake list file of the project *BEFORE*\n\n# the CPack module is included.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# PackageMaker refuses to let us use the Markdown extension (MD) -_-\n\n#\n\n# TODO / Generate these text files on the fly from the Markdown sources\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set ( CPACK_RESOURCE_FILE_README \"${CMAKE_TEMPLATE_PATH}/README.txt\" )\n\n#set ( CPACK_RESOURCE_FILE_WELCOME \"${CMAKE_TEMPLATE_PATH}/Welcome.txt\" )\n\n#set ( CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_TEMPLATE_PATH}/Description.txt\" )\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO / verify these package dependency names\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set ( CPACK_INSTALL_PREFIX ${CMAKE_CURRENT_BINARY_DIR} )\n\n#set ( CPACK_PACKAGING_INSTALL_PREFIX ${CMAKE_INSTALL_PREFIX} )\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/doxygen.cmake" : {
      "ObjectId" : "158aa960ff118e502d1018e3fe0a77cc4ad7db49",
      "LastModified" : "2014-05-15T19:48:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Include support for generation of documentation via doxygen\n\n#\n\n# This script depends on the following CMake variables being set before\n\n# inclusion of said script:\n\n#\n\n#   CMAKE_TEMPLATE_PATH\n\n#   PROJECT_BINARY_DIR\n\n#\n\n#   References\n\n#\n\n# 1. http://www.bluequartz.net/projects/EIM_Segmentation/SoftwareDocumentation/html/usewithcmakeproject.html\n\n# 2. http://mementocodex.wordpress.com/2013/01/19/how-to-generate-code-documentation-with-doxygen-and-cmake-a-slightly-improved-approach/\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Control whether or not to see warnings regarding incomplete documentation\n\n# from doxygen.\n\n# Valid values are \"YES\" or \"NO\" with a default value of \"NO\".\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Control whether or not to see messages generated by doxygen\n\n# Valid values are \"YES\" or \"NO\" with a default value of \"NO\".\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if( NOT DOXYGEN_FOUND )\n\n#   message ( FATAL_ERROR \"Doxygen & graphviz is required to generate the documentation.\")\n\n# endif ( NOT DOXYGEN_FOUND )\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Setup Doxygen for documentation build only if we find the tools installed\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#set ( DOXY_EXTRA_FILES \"\" )\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Template Doxyfile\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Generate docs only when dependencies change\n\n# add_custom_command  ( OUTPUT ${DOXY_HTML_INDEX_FILE}\n\n#                       COMMAND ${DOXYGEN_EXECUTABLE} ${DOXYFILE}\n\n#                       MAIN_DEPENDENCY ${DOXYFILE} ${DOXYFILE_IN}\n\n#                       DEPENDS project_targets ${DOXY_EXTRA_FILES}\n\n#                       COMMENT \"Generating HTML documentation\"\n\n#                     )\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Add 'make docs' target\n\n# add_custom_target ( docs ALL DEPENDS ${DOXY_HTML_INDEX_FILE} )\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Build documentation files using 'make docs', or via IDE's 'docs' target.\n",
        "Line" : 53,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 10
    },
    "cmake/macros.cmake" : {
      "ObjectId" : "307cd30919985564abe01b8a6df4f8d1dbfa8a87",
      "LastModified" : "2015-06-06T07:46:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Helper macros for CMake build scripts\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add runtime search path to our application bundle so that we can find its\n\n# dependencies at launch.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Modify runtime search path for a library or application\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Change the install name path of a library\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Create and link a library module\n\n#\n\n# source parameter should be enclosed within double quotes.\n\n# headers parameter is not implemented; reserved for future implementation.\n\n#\n\n# external_deps parameters should be separated by semicolons when multiple\n\n# dependencies are specified and enclosed within double quotes.\n\n#\n\n# TODO: Future expansion of this macro should strongly consider refactoring with\n\n# the use of the CMakeParseArguments module.\n\n# http://www.cmake.org/cmake/help/v3.0/module/CMakeParseArguments.html\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The Application Binary Interface (ABI) version; PATCH level versions are\n\n# intended **not** to break the ABI version.\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# The Application Programming Interface (API) version\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Create target.framework\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# TODO?\n\n# PUBLIC_HEADER\n\n# \"${source}\"\n",
        "Line" : 99,
        "CharPositionInLine" : 28
      },
      "9" : {
        "Text" : "# Copy target's library file to $CMAKE_INSTALL_PREFIX/lib\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#\n\n# target parameter is not implemented; reserved for future implementation.\n\n#\n\n# dest parameter is not implemented; reserved for future implementation.\n\n# macro(nom_install_dep target external_deps dest)\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#   # Bundle the appropriate external dependencies\n\n#   foreach( dep ${external_deps} )\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#     if( IS_DIRECTORY ${dep} )\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#       # Bundle frameworks we depend on that are not system library bundles\n\n#       install(  DIRECTORY ${dep}\n\n#                 DESTINATION \"nomlib.framework/Frameworks\"\n\n#                 PATTERN \".*\" EXCLUDE )\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#     else( NOT IS_DIRECTORY ${dep} )\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#       # if( IS_SYMLINK ${dep} )\n\n#       #   # Resolve real file path when symbolic so CMake's install command\n\n#       #   # copies the real file\n\n#       #   get_filename_component( dep ${dep} REALPATH )\n\n#       # endif( IS_SYMLINK ${dep} )\n\n#       # message( STATUS \"DEP IS A FILE: ${dep}\" )\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#       # Bundle dynamic libraries (*.dylib) that we depend on\n\n#       install(  FILES ${dep}\n\n#                 DESTINATION \"nomlib.framework/Frameworks\"\n\n#                 PATTERN \".*\" EXCLUDE )\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#       endif( IS_DIRECTORY ${dep} )\n\n#     endforeach( dep ${external_deps} )\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# endmacro(nom_install_dep target external_deps dest)\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Helper function for adding tests through CTest\n\n#\n\n# IMPORTANT: We cannot use the GTEST_ADD_TESTS macro here for adding tests that\n\n# rely on the nom::VisualUnitTest framework because of the way that the macro\n\n# breaks up the test run -- it ends up executing each individual test in a\n\n# separate process, i.e.: 'SpriteTest.SpriteInterfaceWithTextureReference' and\n\n# 'SpriteTest.SpriteInterfaceWithTextureRawPointer' are treated as two\n\n# separated executable binaries.\n\n#  This is bad for us because our screen-dumping creates new timestamped\n\n# directories on every new instance of the framework, which normally is OK\n\n# because this yields one directory, but in the case of multiple executable\n\n# runs ... spawns an awful lot more than I'd prefer.\n\n#   I hope to one day figure out a proper solution for this work flow issue,\n\n# but in the mean time ... this is the best I can come up with.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Helper function for adding an engine unit test\n\n#\n\n# IMPORTANT: Avoid using the newer add_test syntax, i.e.:\n\n# add_test(NAME <name> COMMAND <command>), because these tests are not\n\n# added to the default test configuration! Using the newer add_test\n\n# syntax leads me to this err message when running ctest from the project's\n\n# build directory (CMake generated XCode project files):\n\n#     \"Test not available without configuration. (Missing \"-C <config>\"?)\"\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "cmake/modules/FindLibRocket.cmake" : {
      "ObjectId" : "0824c76f6778e43f96a4bf9f168dac3e0276c9d6",
      "LastModified" : "2014-11-30T12:27:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate LibRocket libraries\n\n#\n\n# This module defines:\n\n# LIBROCKET_LIBRARIES, the name of the libraries to link against\n\n# LIBROCKET_INCLUDE_DIRS, where to find the development header files\n\n# LIBROCKET_FOUND, if false, do not try to link to LIBROCKET_LIBRARIES\n\n#\n\n# Written by Jeffrey Carpenter <i8degrees@gmail.com>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# release\n",
        "Line" : 11,
        "CharPositionInLine" : 20
      },
      "2" : {
        "Text" : "# debug\n",
        "Line" : 12,
        "CharPositionInLine" : 22
      },
      "3" : {
        "Text" : "# release\n",
        "Line" : 18,
        "CharPositionInLine" : 24
      },
      "4" : {
        "Text" : "# debug\n",
        "Line" : 19,
        "CharPositionInLine" : 26
      },
      "5" : {
        "Text" : "# release\n",
        "Line" : 25,
        "CharPositionInLine" : 24
      },
      "6" : {
        "Text" : "# debug\n",
        "Line" : 26,
        "CharPositionInLine" : 26
      },
      "7" : {
        "Text" : "# TODO\n\n# set(  LIBROCKET_CORE_LUA_NAMES\n\n#       libRocketCoreLua # release\n\n#       libRocketCoreLua-d # debug\n\n#       libRocketCoreLua.1.dylib\n\n#       RocketCoreLua\n\n# )\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# TODO\n\n# set(  LIBROCKET_CONTROLS_LUA_NAMES\n\n#       libRocketControlsLua # release\n\n#       libRocketControlsLua-d # debug\n\n#       libRocketControlsLua.1.dylib\n\n#       RocketControlsLua\n\n# )\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# homebrew\n",
        "Line" : 50,
        "CharPositionInLine" : 25
      },
      "10" : {
        "Text" : "# Fink\n",
        "Line" : 51,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 52,
        "CharPositionInLine" : 17
      },
      "12" : {
        "Text" : "# Blastwave\n",
        "Line" : 53,
        "CharPositionInLine" : 15
      },
      "13" : {
        "Text" : "# Core/Core.h\n",
        "Line" : 57,
        "CharPositionInLine" : 51
      },
      "14" : {
        "Text" : "# Rocket include/Rocket\n",
        "Line" : 61,
        "CharPositionInLine" : 20
      },
      "15" : {
        "Text" : "# Controls/Controls.h\n",
        "Line" : 66,
        "CharPositionInLine" : 59
      },
      "16" : {
        "Text" : "# Rocket include/Rocket\n",
        "Line" : 70,
        "CharPositionInLine" : 20
      },
      "17" : {
        "Text" : "# Debugger/Debugger.h\n",
        "Line" : 75,
        "CharPositionInLine" : 59
      },
      "18" : {
        "Text" : "# Rocket include/Rocket\n",
        "Line" : 79,
        "CharPositionInLine" : 20
      },
      "19" : {
        "Text" : "# TODO\n\n# find_path(  LIBROCKET_LUA_INCLUDE_DIR Rocket/Lua # Lua/Lua.h\n\n#             HINTS\n\n#             $ENV{LIBROCKETDIR}\n\n#             PATH_SUFFIXES\n\n#             include # Rocket include/Rocket\n\n#             PATHS\n\n#             ${LIBROCKET_SEARCH_PATHS}\n\n# )\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# TODO\n\n# find_library( LIBROCKET_LUA_LIBRARY\n\n#               NAMES ${LIBROCKET_LUA_NAMES}\n\n#               HINTS\n\n#               $ENV{LIBROCKETDIR}\n\n#               PATH_SUFFIXES\n\n#               lib64 lib ${VC_LIB_PATH_SUFFIX}\n\n#               PATHS\n\n#               ${LIBROCKET_SEARCH_PATHS}\n\n# )\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# CACHE PATH \"libRocket development header files\"\n",
        "Line" : 145,
        "CharPositionInLine" : 6
      },
      "22" : {
        "Text" : "# TODO\n\n# if( LIBROCKET_LUA_INCLUDE_DIR_FOUND )\n\n#   list( APPEND LIBROCKET_INCLUDE_DIRS ${LIBROCKET_LUA_INCLUDE_DIR} )\n\n# endif( LIBROCKET_LUA_INCLUDE_DIR_FOUND )\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# CACHE PATH \"LibRocket libraries\"\n",
        "Line" : 157,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "# TODO\n\n# if( LIBROCKET_LUA_LIBRARY_FOUND )\n\n#   list( APPEND LIBROCKET_LIBRARIES ${LIBROCKET_LUA_LIBRARY} )\n\n# endif( LIBROCKET_LUA_LIBRARY_FOUND )\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBROCKET_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# LIBROCKET_LUA_LIBRARY\n",
        "Line" : 182,
        "CharPositionInLine" : 18
      },
      "27" : {
        "Text" : "# LIBROCKET_LUA_INCLUDE_DIR\n",
        "Line" : 186,
        "CharPositionInLine" : 18
      },
      "CommentCount" : 28
    },
    "cmake/modules/FindSDL2.cmake" : {
      "ObjectId" : "5947205717692a7451fb6e1a3dafafeed4e9cc82",
      "LastModified" : "2014-11-30T12:27:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# Source: https://code.google.com/p/freerct/source/browse/trunk/CMake/FindSDL2.cmake\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 75,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 76,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 77,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# For SDL2main\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# For MinGW library\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 13
    },
    "cmake/modules/FindSDL2_image.cmake" : {
      "ObjectId" : "3f481d457d8c3fcbf1034c1a91b96044a92f83f0",
      "LastModified" : "2014-11-30T12:27:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindSDL2_image\n\n# -------------\n\n#\n\n# Locate SDL2_image library\n\n#\n\n# This module defines:\n\n#\n\n# ::\n\n#\n\n#   SDL2_IMAGE_LIBRARIES, the name of the library to link against\n\n#   SDL2_IMAGE_INCLUDE_DIRS, where to find the headers\n\n#   SDL2_IMAGE_FOUND, if false, do not try to link against\n\n#   SDL2_IMAGE_VERSION_STRING - human-readable string containing the version of SDL_image\n\n#\n\n# $SDL2IMAGEDIR is an environment variable that would correspond to the\n\n# ./configure --prefix=$SDL2IMAGEDIR used in building SDL2_image.\n\n#\n\n# Created by Eric Wing.  This was influenced by the FindSDL.cmake\n\n# module, but with modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 42,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 43,
        "CharPositionInLine" : 19
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 44,
        "CharPositionInLine" : 17
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindSDL2_ttf.cmake" : {
      "ObjectId" : "cbf72d1d34e4e1c6de4173e3c16e94ed4421ebfc",
      "LastModified" : "2014-11-30T12:27:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindSDL2_ttf\n\n# -----------\n\n#\n\n# Locate SDL2_ttf library\n\n#\n\n# This module defines:\n\n#\n\n# ::\n\n#\n\n#   SDL2_TTF_LIBRARIES, the name of the library to link against\n\n#   SDL2_TTF_INCLUDE_DIRS, where to find the headers\n\n#   SDL2_TTF_FOUND, if false, do not try to link against\n\n#\n\n# $SDL2TTFDIR is an environment variable that would correspond to the\n\n# ./configure --prefix=$SDL2TTFDIR used in building SDL2_ttf.\n\n#\n\n# Created by Eric Wing.  This was influenced by the FindSDL.cmake\n\n# module, but with modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 41,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 42,
        "CharPositionInLine" : 19
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 43,
        "CharPositionInLine" : 17
      },
      "CommentCount" : 5
    },
    "cmake/modules/Findlibsndfile.cmake" : {
      "ObjectId" : "6f102c90f9765c0dad6d60a40efcc380b8f8e42d",
      "LastModified" : "2014-11-30T12:27:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate libsndfile library\n\n#\n\n# This module defines:\n\n# LIBSNDFILE_LIBRARY, the name of the library to link against\n\n# LIBSNDFILE_INCLUDE_DIR, where to find development header files\n\n# LIBSNDFILE_FOUND, if false, do not try to link to LIBSNDFILE_LIBRARY\n\n#\n\n# Written by Jeffrey Carpenter <i8degrees@gmail.com>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# homebrew\n",
        "Line" : 15,
        "CharPositionInLine" : 25
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 16,
        "CharPositionInLine" : 10
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 17,
        "CharPositionInLine" : 17
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 18,
        "CharPositionInLine" : 15
      },
      "5" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBSNDFILE_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/modules/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "c8d27f2e8ce494c96404086ce58982239916a44c",
      "LastModified" : "2014-11-30T12:27:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 45,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 49,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# check if this is a submodule\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#\t(ARGN MATCHES \"||\") OR\n\n#\t(ARGN MATCHES \"\\\\;\"))\n\n#\tmessage(\"Please report the following error to the project!\")\n\n#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "cmake/modules/GetGitRevisionNumber.cmake" : {
      "ObjectId" : "8687e89f053bfa4bd237958dbef71243d612d528",
      "LastModified" : "2014-11-30T12:27:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  git_rev_number(<var> [<additional arguments to git rev-parse> ...])\n\n#\n\n# Returns the results of `git rev-parse HEAD` on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# This script derives from GetGitRevisionDescription.cmake, found at\n\n# [cmake-modules](https://github.com/rpavlik/cmake-modules).\n\n#\n\n# Author:\n\n# Copyright (c) 2014, Jeffrey Carpenter <i8degrees@gmail.com>\n\n# Distributed under the Simplified BSD License\n\n# (See accompanying project file LICENSE.md or copy at\n\n# http://en.wikipedia.org/wiki/BSD_licenses#2-clause_license_.28.22Simplified_BSD_License.22_or_.22FreeBSD_License.22.29)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n# (ARGN MATCHES \"||\") OR\n\n# (ARGN MATCHES \"\\\\;\"))\n\n# message(\"Please report the following error to the project!\")\n\n# message(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# additional args passed by end-user\n",
        "Line" : 59,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# set(out \"${out}-${res}-NOTFOUND\")\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Use only the set err message 'GIT-NOTFOUND' for the output variable,\n\n# instead of both the resulting output in addition to 'GIT-NOTFOUND'.\n",
        "Line" : 73,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cmake/platform.cmake" : {
      "ObjectId" : "0daf3debca75f30238e8c42519e7a328cdf353b1",
      "LastModified" : "2015-06-06T07:46:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Platform detection script for CMake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Always use SDL2's enhanced assert facilities.\n\n#\n\n# See also: include/nomlib/config.hpp.in\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: Rename to NOM_PLATFORM_OSX\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# TODO: Rename to BUILD_FRAMEWORK\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# This variable influences the system header files version we build against,\n\n# which in turn determines the **minimum** version of OS X this build will\n\n# be binary compatible with (run on).\n\n#\n\n# Internally, this influences the search paths for system header files and\n\n# also instructs CMake to pass -mmacosx-version-min to the compiler.\n\n#\n\n# To modify this variable's resulting value, you should pass\n\n# -DCMAKE_OSX_DEPLOYMENT_TARGET=<ver> to CMake at the time of project files\n\n# generation -- 'cmake ..' from your out-of-source build directory.\n\n#\n\n# NOTE: CMAKE_OSX_SYSROOT must be set **before** the project command is\n\n# called.\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# libc++ requires OSX v10.7+\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Tested on Ubuntu v12.04-LTS\n",
        "Line" : 41,
        "CharPositionInLine" : 46
      },
      "7" : {
        "Text" : "# TODO: Rename to NOM_PLATFORM_LINUX\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Clang is not supported on Linux due to libc++ not being distributed by\n\n# default yet\n",
        "Line" : 46,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# ARCH_32 and ARCH_64 are not presently used here, but are reserved for future\n\n# consistency with the other supported platforms.\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# TODO: Rename to NOM_PLATFORM_WINDOWS\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Not Linux nor OSX\n",
        "Line" : 64,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# I was able to shave off close to 50% time compiling nomlib by leaving\n\n# the UNIVERSAL option off by default.\n\n#\n\n# PPC is not officially supported because I have no means whatsoever of\n\n# testing such a package.\n\n#\n\n# TODO; we might be able to put these platform checks shown below in the\n\n# CMAKE_SYSTEM_NAME checks above.\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Reserved for future use\n",
        "Line" : 83,
        "CharPositionInLine" : 35
      },
      "14" : {
        "Text" : "# Reserved for future use\n",
        "Line" : 87,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 15
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "baf3d68419331822024d83fa65b5f2aa7c93e1b0",
      "LastModified" : "2015-07-30T20:41:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: Remove checks for the necessary build units in order to compile\n\n# examples. In hindsight, this check is worse than no check at all, because we\n\n# have no warning / error when the build unit check is FALSE -- this can lead\n\n# to confusion.\n\n#\n\n# TODO: consider adding a custom POST_BUILD command here so that we do not have\n\n# to manually execute the 'install' target in order to get the example's\n\n# Resources, etc. to copy.\n\n#\n\n#   OS X with cmake generated Xcode project files:\n\n#\n\n# xcodebuild -target install\n\n#\n\n#   MSBuild with Visual Studio 2012 project files:\n\n#\n\n# msbuild /t:build INSTALL.vcxproj\n\n#\n\n#   See also,\n\n#\n\n# http://stackoverflow.com/questions/13422202/adding-distinct-xcode-resources-for-multiple-executables-using-cmake\n\n# http://stackoverflow.com/questions/6077810/how-to-correctly-add-resources-to-a-project?rq=1\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use common build output directories for MSVCPP && Xcode project files.\n\n#\n\n# IMPORTANT: Debug and Release build targets **must** be kept in separate build\n\n# trees!\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Release builds\n",
        "Line" : 54,
        "CharPositionInLine" : 7
      },
      "3" : {
        "Text" : "# This path is used for the local installation of required dependencies for\n\n# running examples, such as dependent resource files. Additionally, when\n\n# building on Windows, this will be the path that dependent DLLs are copied to.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Project headers files inclusions; our header files namespace, 'nomlib'\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Third-party dependencies\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Absolute path to project's third-party 'common' directory\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# nomlib-core external deps\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# nomlib-audio external deps\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# nomlib-gui external deps\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add development header files\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# third-party, headers-only dependency TCLAP\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Header file inclusion; third-party -- TCLAP\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Build as console app -- shows cmd.exe window for logging -- only when\n\n# debugging is toggled on\n",
        "Line" : 111,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Implies WIN_MAIN\n",
        "Line" : 114,
        "CharPositionInLine" : 37
      },
      "15" : {
        "Text" : "# MSVCPP should default to Console if we set EXECUTABLE_FLAGS empty\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# We need to link to SDL2main library on Windows\n",
        "Line" : 127,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Search paths file to use in finding the resources path\n",
        "Line" : 133,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# We need to link to SDL2main library on Windows\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# We need to link to SDL2main library on Windows\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# We need to link to SDL2main library on Windows\n",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# We need to link to SDL2main library on Windows\n",
        "Line" : 200,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Additional third-party dependency requirements\n",
        "Line" : 216,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Add development header files; SDL_image.h\n",
        "Line" : 219,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Add development header files; SDL_ttf.h\n",
        "Line" : 226,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Add development header files; gl.h\n",
        "Line" : 233,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Add development header files\n",
        "Line" : 240,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# We need to link to SDL2main library on Windows\n",
        "Line" : 246,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# We need to link to SDL2main library on Windows\n",
        "Line" : 260,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# We need to link to SDL2main library on Windows\n",
        "Line" : 274,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# We need to link to SDL2main library on Windows\n",
        "Line" : 290,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Install library dependencies into binary output directory\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# In case end-user overrides third-party dependencies\n",
        "Line" : 311,
        "CharPositionInLine" : 21
      },
      "CommentCount" : 33
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "8e80429d4de627d773cd1efbcb8702f5e703c561",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Project modules source tree root\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use common build output directories for MSVCPP && Xcode project files.\n\n#\n\n# IMPORTANT: Debug and Release build targets **must** be kept in separate build\n\n# trees!\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Release builds\n",
        "Line" : 20,
        "CharPositionInLine" : 7
      },
      "3" : {
        "Text" : "# Third-party dependencies\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# SDL2 is required by nomlib-core, which is a required dependency among all\n\n# other modules.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Do not link SDL2main; we do this explicitly\n",
        "Line" : 30,
        "CharPositionInLine" : 34
      },
      "6" : {
        "Text" : "# These variables influence preprocessor definitions for config.hpp.in --\n\n# part of nomlib-core\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TODO: include and library paths need to be added to\n\n# cmake/modules/FindLibRocket.cmake\n\n# set( NOM_USE_LIBROCKET_LUA FALSE )\n",
        "Line" : 40,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Stub option (not implemented)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Stub option (not implemented)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# nomlib-core\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# nomlib-file\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# nomlib-math\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# nomlib-ptree\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# nomlib-serializers\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# nomlib-system\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# nomlib-graphics\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# nomlib-gui\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# nomlib-audio\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "src/audio/CMakeLists.txt" : {
      "ObjectId" : "3bd7d54ad84af61ca7c93e2a4ebebfd0da1cf6f2",
      "LastModified" : "2015-07-30T20:41:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# nomlib-audio library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Library headers inclusion path\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Library name\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Default implementation sources (always built)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Common dependencies on all platforms\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# OpenAL implementation\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Platform-specific dependencies\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Add development header files; al.h, alc.h\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Add development header files; sndfile.h\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Add and link the library\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Re-declare globally, so other build units that depend on us can refer to this\n\n# variable\n\n# set( NOM_AUDIO_LIBRARY ${NOM_AUDIO_LIBRARY} PARENT_SCOPE )\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "src/core/CMakeLists.txt" : {
      "ObjectId" : "1ff20fc4f384d797da54d0d7d6508ab930fd7d8c",
      "LastModified" : "2015-07-30T20:41:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# nomlib-core library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Library headers inclusion path\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Library name\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# auto-generated\n",
        "Line" : 18,
        "CharPositionInLine" : 28
      },
      "4" : {
        "Text" : "# auto-generated\n",
        "Line" : 22,
        "CharPositionInLine" : 29
      },
      "5" : {
        "Text" : "# auto-generated\n",
        "Line" : 25,
        "CharPositionInLine" : 30
      },
      "6" : {
        "Text" : "# Platform-specific implementations & dependencies\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Common on all platforms\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# BSD, OS X && Linux\n",
        "Line" : 59,
        "CharPositionInLine" : 25
      },
      "9" : {
        "Text" : "# Add and link the library\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Re-declare globally, so other build units that depend on us can refer to this\n\n# variable\n\n# set( NOM_CORE_LIBRARY \"${NOM_CORE_LIBRARY}\" PARENT_SCOPE )\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Auto-generated header file containing engine version\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Auto-generated config for engine\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "src/file/CMakeLists.txt" : {
      "ObjectId" : "6d2ec92b903a23e3b37cf2e07eb4a0c37d04fbff",
      "LastModified" : "2014-11-30T12:27:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# nomlib-file library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Library headers inclusion path\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: Relocate to file sub-directory\n\n# ${INC_DIR}/file.hpp\n",
        "Line" : 9,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# Platform-specific implementations & dependencies\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# BSD, OS X && Linux\n",
        "Line" : 23,
        "CharPositionInLine" : 25
      },
      "5" : {
        "Text" : "# TODO: Relocate to file sub-directory\n",
        "Line" : 25,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# TODO: Relocate to file sub-directory\n",
        "Line" : 35,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Common on all platforms\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add and link the library\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Re-declare globally, so other build units that depend on us can refer to this\n\n# variable\n\n# set( NOM_FILE_LIBRARY ${NOM_FILE_LIBRARY} PARENT_SCOPE )\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "src/graphics/CMakeLists.txt" : {
      "ObjectId" : "1c4f705645e344662710646b4bdfb78f534cc774",
      "LastModified" : "2015-07-30T20:41:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# nomlib-graphics library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Library headers inclusion path\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Library name\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# FIXME: This depend on serializers\n",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# TODO: Relocate to graphics\n",
        "Line" : 92,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# TODO: Consider breaking the actions engine off into its own library? It\n\n# appears to be a strong candidate for doing so. I'll see how future build\n\n# times are affected by leaving things as is for now -- because we are able\n\n# to forward declare all graphical components used here, we may well be OK.\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Actions engine\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Common dependencies on all platforms\n",
        "Line" : 145,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# ${SDL2_LIBRARY} ${SDL2_IMAGE_LIBRARY} ${SDL2_TTF_LIBRARY}\n",
        "Line" : 148,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# hqx algorithm (third-party)\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# scale2x algorithm (third-party)\n",
        "Line" : 161,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Platform-specific implementations & dependencies\n",
        "Line" : 174,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Add development header files; SDL_image.h\n",
        "Line" : 178,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Add development header files; SDL_ttf.h & friends\n",
        "Line" : 184,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Add and link the library\n",
        "Line" : 188,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Re-declare globally, so other build units that depend on us can refer to\n\n# this variable\n\n# set( NOM_GRAPHICS_LIBRARY ${NOM_GRAPHICS_LIBRARY} PARENT_SCOPE )\n",
        "Line" : 193,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "src/gui/CMakeLists.txt" : {
      "ObjectId" : "80bf66b2158db1f6a790a427307729e431272ea4",
      "LastModified" : "2014-11-30T12:27:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# nomlib-gui library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Library headers inclusion path\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Library name\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ${SRC_DIR}/gui/DOM.cpp\n\n# ${INC_DIR}/gui/DOM.hpp\n",
        "Line" : 51,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Decorator helpers\n",
        "Line" : 66,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Common dependencies on all platforms\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Platform-specific implementations & dependencies\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add development header files; SDL_image.h\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Add development header files; gl.h\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# if( NOM_USE_LIBROCKET_LUA )\n\n#   find_package( Lua REQUIRED )\n\n#   if( LUA_FOUND )\n\n#     include_directories( ${LUA_INCLUDE_DIR} )\n\n#   endif( LUA_FOUND )\n\n# endif( NOM_USE_LIBROCKET_LUA )\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add development header files\n",
        "Line" : 110,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Add and link the library\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Re-declare globally, so other build units that depend on us can refer to this\n\n# variable\n\n# set( NOM_GUI_LIBRARY ${NOM_GUI_LIBRARY} PARENT_SCOPE )\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "src/math/CMakeLists.txt" : {
      "ObjectId" : "394924094d111d0964b69ac1816aaad4b0dd8edd",
      "LastModified" : "2014-11-30T12:27:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# nomlib-math library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Library headers inclusion path\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Library name\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Platform-specific implementations & dependencies\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Common on all platforms\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add and link the library\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Re-declare globally, so other build units that depend on us can refer to this\n\n# variable\n\n# set( NOM_MATH_LIBRARY \"${NOM_MATH_LIBRARY}\" PARENT_SCOPE )\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/ptree/CMakeLists.txt" : {
      "ObjectId" : "80fe86a95353f4c44b9b2a724743c48186d30eda",
      "LastModified" : "2014-11-30T12:27:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# nomlib-ptree library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Library headers inclusion path\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Library name\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Platform-specific implementations & dependencies\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Common on all platforms\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add and link the library\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Re-declare globally, so other build units that depend on us can refer to this\n\n# variable\n\n# set( NOM_PTREE_LIBRARY ${NOM_PTREE_LIBRARY} PARENT_SCOPE )\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/serializers/CMakeLists.txt" : {
      "ObjectId" : "b5f56caba7d69326240a73cb6c767f6167a8e11a",
      "LastModified" : "2015-07-30T20:41:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# nomlib-serializers library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Library headers inclusion path\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Library name\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Platform-specific implementations & dependencies\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Absolute path to project's third-party 'common' directory\n\n#\n\n# See also: nomlib's third-party/README.md\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# RapidXml is headers-only\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# JsonCpp is built as part of our library source tree\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# third-party headers inclusion for JsonCpp and RapidXml\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Separate third-party sources for IDE project files\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Common on all platforms\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Add and link the library\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Re-declare globally, so other build units that depend on us can refer to this\n\n# variable\n\n# set( NOM_SERIALIZERS_LIBRARY ${NOM_SERIALIZERS_LIBRARY} PARENT_SCOPE )\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "src/system/CMakeLists.txt" : {
      "ObjectId" : "b133a57471ef7f74391e57bdddfd15ff036fb464",
      "LastModified" : "2015-07-30T20:41:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# nomlib-system library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Library headers inclusion path\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Library name\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO: Consider relocating this to graphics\n",
        "Line" : 12,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# TODO: Relocate\n",
        "Line" : 57,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# TODO: Consider relocating this to graphics\n\n# ${SRC_DIR}/system/resource_handlers.cpp\n\n# ${INC_DIR}/system/resource_handlers.hpp\n",
        "Line" : 61,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Platform-specific implementations & dependencies\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Add development header files; SDL_image.h\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Add development header files; SDL_ttf.h\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Common on all platforms\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# FIXME: Needed only by nom::init and nom::quit\n",
        "Line" : 93,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Add and link the library\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Re-declare globally, so other build units that depend on us can refer to this\n\n# variable\n\n# set( NOM_SYSTEM_LIBRARY ${NOM_SYSTEM_LIBRARY} PARENT_SCOPE )\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "a243d7ff6bbe79045b487fe5364e5e1eee1b0870",
      "LastModified" : "2015-07-30T20:41:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unit testing with Google Test\n\n#\n\n# NOTE: Ensure that when you use the GTEST_ADD_TESTS macro, that you supply the\n\n# necessary arguments -- name of test(s) to run -- otherwise you may notice\n\n# CTest skipping the tests all together!\n\n#\n\n# NOTE: You may need to issue a 'make rebuild_cache' after changing test\n\n# fixture names, in order to get 'make test' to recognize the modified test\n\n# code.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Source file inclusion root (directory); must be an absolute path.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header file inclusion root (directory); must be an absolute path.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use common build output directories for MSVCPP && Xcode project files.\n\n#\n\n# IMPORTANT: Debug and Release build targets **must** be kept in separate build\n\n# trees!\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Release builds\n",
        "Line" : 34,
        "CharPositionInLine" : 7
      },
      "5" : {
        "Text" : "# This path is used for the local installation of required dependencies for\n\n# running unit tests, such as dependent resource files. Additionally, when\n\n# building on Windows, this will be the path that dependent DLLs are copied to.\n\n#\n\n# IMPORTANT: This path serves a vital role in the *consistent* usage of CTest\n\n# and GTest across the supported CMake project generators -- Unix Makefiles,\n\n# Xcode and MSVCPP. The path **must** be prepended on every unit test\n\n# executable created using the add_test and GTEST_ADD_TESTS commands.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# TODO: Relocate me?\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Tests for the testing framework\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Project headers files inclusions; our header files namespace, 'nomlib'\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Third-party dependencies\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Absolute path to project's third-party 'common' directory\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# nomlib-core external deps\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Add development header files; SDL.h & friends\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# nomlib-audio external deps\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Add development header files; al.h, alc.h\n",
        "Line" : 92,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# nomlib-gui external deps\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Add development header files\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# third-party, headers-only dependency TCLAP\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Header file inclusion; third-party -- TCLAP\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Unit test dependencies (common / global)\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# TODO\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Link nomlib-unit-test\n",
        "Line" : 172,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Link nomlib-visual-unit-test\n",
        "Line" : 184,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Install library dependencies into tests output directory so we can always\n\n# execute the binaries with the proper dependency versions.\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "tests/src/UnitTest/CMakeLists.txt" : {
      "ObjectId" : "9b376e4aa31bf545cb7917f462ef93d7cf5ff6ae",
      "LastModified" : "2014-11-30T12:27:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# nomlib-unit-test module tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# args\n",
        "Line" : 8,
        "CharPositionInLine" : 21
      },
      "CommentCount" : 2
    },
    "tests/src/VisualUnitTest/CMakeLists.txt" : {
      "ObjectId" : "3785d8e0656566c31f3393efc01fcaf37250232d",
      "LastModified" : "2015-07-30T20:41:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# nomlib-visual-unit-test module tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME\n\n# add_executable( ImageTestSetTest \"ImageTestSetTest.cpp\" )\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# target_link_libraries( ImageTestSetTest nomlib-visual-unit-test )\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# GTEST_ADD_TESTS(  ${TESTS_INSTALL_DIR}/ImageTestSetTest\n\n#                   \"\" # args\n\n#                   \"ImageTestSetTest.cpp\" )\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# FIXME\n\n# add_executable( ImageDiffTest \"ImageDiffTest.cpp\" )\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# target_link_libraries( ImageDiffTest nomlib-visual-unit-test )\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# GTEST_ADD_TESTS(  ${TESTS_INSTALL_DIR}/ImageDiffTest\n\n#                   \"\" # args\n\n#                   \"ImageDiffTest.cpp\" )\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# install(  DIRECTORY\n\n#           \"${NOM_TESTS_RESOURCES_DIR}/ImageDiffTest\"\n\n#           DESTINATION\n\n#           \"${TESTS_INSTALL_DIR}/Resources\"\n\n#           PATTERN \".*\" EXCLUDE\n\n#         )\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "tests/src/actions/CMakeLists.txt" : {
      "ObjectId" : "8c9217695586bbd3094cbfca3919642bfc2c8b6d",
      "LastModified" : "2015-07-30T20:41:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# nomlib-actions module tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NOTE: Any frame rate that your hardware can handle should be fine here; a\n\n# conservative value is chosen here chiefly to lower system utilization\n\n# during test runs.\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Fractional speed modifier values, such as 22.5 and the oddball number of 45\n\n# seemed to carry the most bugs during development of this feature.\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# NOTE: The total test duration of these tests when ran sequentially is\n\n# around ~900 seconds. Therefore, it is strongly recommended that you run\n\n# these tests in parallel when possible -- whether you have more than one\n\n# physical processing core or not does not matter so much, as all but one\n\n# test is designed to be light on system load.\n\n#\n\n#   See also: man 1 ctest, --parallel <jobs>\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# NOTE: Only the standard five timing curve functions are tested here; there\n\n# are many more modes available in the testing suite!\n\n#\n\n#     See also: ActionTest --help, --timing-mode\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Copy resource files for the test\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# args\n",
        "Line" : 109,
        "CharPositionInLine" : 23
      },
      "CommentCount" : 7
    },
    "tests/src/audio/CMakeLists.txt" : {
      "ObjectId" : "e58b7b20e8ec3d47c5c67e02cbb8b3237cf6a094",
      "LastModified" : "2015-07-30T20:41:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# nomlib-audio module tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME: We only need init from nomlib-system\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# args\n",
        "Line" : 20,
        "CharPositionInLine" : 23
      },
      "3" : {
        "Text" : "# Resources for audio tests\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "tests/src/core/CMakeLists.txt" : {
      "ObjectId" : "13f483460753ec14033177ca58704659fb71f187",
      "LastModified" : "2015-07-30T20:41:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# nomlib-core module tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME: We only need nomlib-system for init...\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# args\n",
        "Line" : 24,
        "CharPositionInLine" : 23
      },
      "3" : {
        "Text" : "# args\n",
        "Line" : 42,
        "CharPositionInLine" : 23
      },
      "4" : {
        "Text" : "# NOTE: We don't actually need nomlib-math for this test\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# args\n",
        "Line" : 52,
        "CharPositionInLine" : 23
      },
      "CommentCount" : 6
    },
    "tests/src/graphics/CMakeLists.txt" : {
      "ObjectId" : "915cbd52c270b8d5dd03837e01e5c12b4c2178e6",
      "LastModified" : "2015-07-30T20:41:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# nomlib-graphics module tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# args\n",
        "Line" : 27,
        "CharPositionInLine" : 23
      },
      "2" : {
        "Text" : "# Copy nomlib's window icon resource.\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Copy resource files for the test\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Copy resource files for the test\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Copy resource files for the test\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Copy resource files for the test\n",
        "Line" : 107,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Copy resource files for the test\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 8
    },
    "tests/src/gui/CMakeLists.txt" : {
      "ObjectId" : "f66b8477da1e8c37dfd4d3deea4bba975b1d376a",
      "LastModified" : "2015-07-30T20:41:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# nomlib-gui module tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Search paths to use in finding resources path\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Search paths file to use in finding resources path\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Install additional binary dependencies for the unit tests\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# In case end-user overrides third-party dependencies\n",
        "Line" : 59,
        "CharPositionInLine" : 21
      },
      "CommentCount" : 5
    },
    "tests/src/math/CMakeLists.txt" : {
      "ObjectId" : "feec52e9d30ce10eee7c9cecb1cac4b69274d3d8",
      "LastModified" : "2015-07-30T20:41:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# nomlib-math module tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# args\n",
        "Line" : 14,
        "CharPositionInLine" : 21
      },
      "CommentCount" : 2
    },
    "tests/src/ptree/CMakeLists.txt" : {
      "ObjectId" : "f951e0a801427148457ecdf779113bbc3d7c4863",
      "LastModified" : "2015-07-30T20:41:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# nomlib-ptree module tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# args\n",
        "Line" : 14,
        "CharPositionInLine" : 21
      },
      "CommentCount" : 2
    },
    "tests/src/serializers/CMakeLists.txt" : {
      "ObjectId" : "8be8485b4723de979871f9d35d0551158874a63e",
      "LastModified" : "2015-07-30T20:41:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# nomlib-serializers module tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME: Just needs init...\n",
        "Line" : 13,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# args\n",
        "Line" : 29,
        "CharPositionInLine" : 23
      },
      "3" : {
        "Text" : "# args\n",
        "Line" : 41,
        "CharPositionInLine" : 23
      },
      "4" : {
        "Text" : "# args\n",
        "Line" : 54,
        "CharPositionInLine" : 23
      },
      "5" : {
        "Text" : "# args\n",
        "Line" : 64,
        "CharPositionInLine" : 23
      },
      "6" : {
        "Text" : "# Copy resources file for unit tests if it has been built.\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Search paths to use in resolving the full resources path\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Copy resources file for unit tests if it has been built.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Search paths to use in resolving the full resources path\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# TODO: Use resources cfg file\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# args\n",
        "Line" : 100,
        "CharPositionInLine" : 23
      },
      "12" : {
        "Text" : "# NOTE: We don't actually need nomlib-system here\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# args\n",
        "Line" : 122,
        "CharPositionInLine" : 23
      },
      "CommentCount" : 14
    },
    "tests/src/system/CMakeLists.txt" : {
      "ObjectId" : "446c345ec0a583e34973a9062241ee2c5088c398",
      "LastModified" : "2015-07-30T20:41:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# nomlib-system module tests\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# args\n",
        "Line" : 21,
        "CharPositionInLine" : 23
      },
      "2" : {
        "Text" : "# Copy resource files for the test\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# args\n",
        "Line" : 47,
        "CharPositionInLine" : 23
      },
      "4" : {
        "Text" : "# args\n",
        "Line" : 65,
        "CharPositionInLine" : 23
      },
      "5" : {
        "Text" : "# args\n",
        "Line" : 83,
        "CharPositionInLine" : 23
      },
      "CommentCount" : 6
    }
  },
  "FileTypes" : {
    "CMAKE" : 36
  },
  "ElapsedTime" : 2202
}