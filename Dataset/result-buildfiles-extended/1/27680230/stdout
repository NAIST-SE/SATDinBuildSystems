{
  "Repository" : "27680230",
  "Revision" : "HEAD",
  "ObjectId" : "7729ade0fa291cedb3cbbebb3bafcb9fb8ece81b",
  "CommitTime" : "2019-04-10T14:59:51Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "d399536298d62f022878b0ed012e266deab4cbf6",
      "LastModified" : "2019-04-10T10:53:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# First for the generic no-config case\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Second, for multi-config builds (e.g. msvc)\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# older versions of cmake don't know things support isystem\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# -- make this work? set(python_ADDITIONAL_VERSIONS 2.7 2.6)\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# allow for reproducible builds - python for portability\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# build static libs\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#for config\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TODO: per platform config files?\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# TODO: windows generator on cmake always uses msvc, even if we plan to build with icc\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# todo: change these as required\n",
        "Line" : 154,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# flags only used to build hs libs\n",
        "Line" : 169,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# remove CMake's idea of optimisation\n",
        "Line" : 176,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# If gcc doesn't recognise the host cpu, then mtune=native becomes\n\n# generic, which isn't very good in some cases. march=native looks at\n\n# cpuid info and then chooses the best microarch it can (and replaces\n\n# the flag), so use that for tune.\n",
        "Line" : 184,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# arg1 might exist if using ccache\n",
        "Line" : 189,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# test the parsed flag\n",
        "Line" : 199,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# compiler version checks TODO: test more compilers\n",
        "Line" : 213,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# set compiler flags - more are tested and added later\n",
        "Line" : 235,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# -Werror is most useful during development, don't potentially break\n\n# release builds\n",
        "Line" : 240,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# spurious warnings?\n",
        "Line" : 260,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# don't complain about abi\n",
        "Line" : 269,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# these end up in the config file\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# are we using libc++\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# This is a Linux-only feature for now - requires platform support\n\n# elsewhere\n",
        "Line" : 313,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# testing a builtin takes a little more work\n",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Variable length arrays are way bad, most especially at run time\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Pointer arith on void pointers is doing it wong.\n",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Build our C code with -Wstrict-prototypes -Wmissing-prototypes\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# munge the name so it doesn't break things\n",
        "Line" : 354,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# self-assign should be thrown away, but clang whinges\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# clang gets up in our face for going paren crazy with macros\n",
        "Line" : 384,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# clang compains about unused const vars in our Ragel-generated code.\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# gcc 6 complains about type attributes that get ignored, like alignment\n",
        "Line" : 396,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# note this for later\n\n# g++ doesn't have this flag but clang does\n",
        "Line" : 402,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# gcc5 complains about this\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# PCRE check, we have a fixed requirement for PCRE to use Chimera\n\n# and hscollider\n",
        "Line" : 454,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# we need static libs for Chimera - too much deep magic for shared libs\n",
        "Line" : 464,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# do substitutions\n",
        "Line" : 478,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# expand out library names for pkgconfig static link info\n",
        "Line" : 483,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# this is fragile, but protects us from toolchain specific files\n",
        "Line" : 485,
        "CharPositionInLine" : 8
      },
      "39" : {
        "Text" : "# only replace @ quoted vars\n",
        "Line" : 491,
        "CharPositionInLine" : 47
      },
      "40" : {
        "Text" : "# only set these after all tests are done\n",
        "Line" : 496,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# PCRE check, we have a fixed requirement for PCRE to use Chimera\n\n# and hscollider\n",
        "Line" : 506,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# we need static libs for Chimera - too much deep magic for shared libs\n",
        "Line" : 516,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# we group things by sublibraries, specifying shared and static and then\n\n# choose which ones to build\n",
        "Line" : 1150,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# hs_version.c is added explicitly to avoid some build systems that refuse to\n\n# create a lib without any src (I'm looking at you Xcode)\n",
        "Line" : 1230,
        "CharPositionInLine" : 7
      },
      "45" : {
        "Text" : "# we want the static lib for testing\n",
        "Line" : 1239,
        "CharPositionInLine" : 7
      },
      "46" : {
        "Text" : "# build shared libs\n",
        "Line" : 1248,
        "CharPositionInLine" : 8
      },
      "47" : {
        "Text" : "# SHARED\n",
        "Line" : 1289,
        "CharPositionInLine" : 12
      },
      "48" : {
        "Text" : "# force this lib to use C++ linkage\n",
        "Line" : 1335,
        "CharPositionInLine" : 8
      },
      "49" : {
        "Text" : "# used by tools and other targets\n",
        "Line" : 1367,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# use shared lib without having to change all the targets\n",
        "Line" : 1369,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 51
    },
    "chimera/CMakeLists.txt" : {
      "ObjectId" : "1cd66a3f5193e4d19547dce1d10bfe06b6a9ba90",
      "LastModified" : "2018-07-09T16:10:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Chimera lib\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# only set these after all tests are done\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# expand out library names for pkgconfig static link info\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# this is fragile, but protects us from toolchain specific files\n",
        "Line" : 39,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# only replace @ quoted vars\n",
        "Line" : 46,
        "CharPositionInLine" : 47
      },
      "CommentCount" : 5
    },
    "cmake/arch.cmake" : {
      "ObjectId" : "5be258aa98272660097ae301d0d60c720c911cfd",
      "LastModified" : "2018-02-05T01:25:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# detect architecture features\n\n#\n\n# must be called after determining where compiler intrinsics are defined\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# test the highest level microarch to make sure everything works\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# if not fat runtime, then test given cflags\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# ensure we have the minimum of SSSE3 - call a SSSE3 intrinsic\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# now look for AVX2\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# and now for AVX512\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/attrib.cmake" : {
      "ObjectId" : "5600ce6b7cbc37e1fd85272ebc3872cefc4c5e38",
      "LastModified" : "2018-02-05T01:25:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# tests for compiler properties\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set -Werror so we can't ignore unused attribute warnings\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/backtrace.cmake" : {
      "ObjectId" : "5a446e8947304054503736bd43ef9cb1ced28936",
      "LastModified" : "2018-02-05T01:25:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The `backtrace' function is available on Linux via glibc, and on FreeBSD if\n\n# the 'libexecinfo' package is installed.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FreeBSD 10 has backtrace but requires libexecinfo\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# older FreeBSD requires it from ports\n",
        "Line" : 27,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# cmake scope fun\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/boost.cmake" : {
      "ObjectId" : "44b4e8ba667107d3f6aa74b000643e5afbb2ae36",
      "LastModified" : "2018-02-05T01:25:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Various checks related to Boost\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# we need a more recent boost for libc++\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# we might have boost in tree, so provide a hint and try again\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# otherwise check for Boost installed on the system\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Boost 1.62 has a bug that we've patched around, check if it is required\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Boost 1.62.0\n",
        "Line" : 72,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 6
    },
    "cmake/pcre.cmake" : {
      "ObjectId" : "e0acda5e70fe9331d651026f7e052fe982d837ff",
      "LastModified" : "2019-01-21T01:56:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# first look in pcre-$version or pcre subdirs\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# either provided on cmdline or we've seen it already\n",
        "Line" : 3,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# already processed this file and set up pcre building\n",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# first, check version number\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# PCRE compile options\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# pkgconf should save us\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cmake/platform.cmake" : {
      "ObjectId" : "593c544b599aaf58f5d27d30b4f6c0ef910304b4",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# determine the target arch\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# really only interested in the preprocessor here\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/ragel.cmake" : {
      "ObjectId" : "d3f0b92691031cca661b82cbb46b7905b4d9dcf2",
      "LastModified" : "2018-02-05T01:25:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# function for doing all the dirty work in turning a .rl into C++\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# old cmake needs PATH\n",
        "Line" : 4,
        "CharPositionInLine" : 51
      },
      "CommentCount" : 2
    },
    "cmake/sqlite3.cmake" : {
      "ObjectId" : "a58362da76d2d9fd440c2d076190210906237ac1",
      "LastModified" : "2018-02-05T01:25:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# a lot of noise to find sqlite\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# first check for sqlite on the system\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# look in the source tree\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# now do version checks\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# build sqlite as a static lib to compile into our test programs\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# that's enough about sqlite\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "doc/dev-reference/CMakeLists.txt" : {
      "ObjectId" : "449589f67d023b6aea6ad48c64125ebd18072f34",
      "LastModified" : "2018-02-05T01:25:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "c252c9ace069c1120e6dcd7ed7e68fcadf5b7630",
      "LastModified" : "2018-02-05T01:25:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "6ca3fd8a91768f08ef2f4e2bee87c4bbc6dcfcc8",
      "LastModified" : "2018-07-09T16:10:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# remove some warnings\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add any subdir with a cmake file\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "tools/hsbench/CMakeLists.txt" : {
      "ObjectId" : "465081a8b295e0c6003dd41383fc168ed80ec9e5",
      "LastModified" : "2018-07-09T16:10:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# BSD has the _np funcs in a _np header\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# only set these after all tests are done\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tools/hscheck/CMakeLists.txt" : {
      "ObjectId" : "8f45765a80ba93cc768fea4311f7ebd932607fc9",
      "LastModified" : "2018-07-09T16:10:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# only set these after all tests are done\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "tools/hscollider/CMakeLists.txt" : {
      "ObjectId" : "a4d71b2fd72439248fb9daa40fccee073507d2d7",
      "LastModified" : "2019-01-21T01:59:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# we need static libs - too much deep magic for shared libs\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# only set these after all tests are done\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# WIN32\n",
        "Line" : 83,
        "CharPositionInLine" : 7
      },
      "CommentCount" : 3
    },
    "tools/hsdump/CMakeLists.txt" : {
      "ObjectId" : "4350b0f6d95135e2dba23dc484ff5259d792be03",
      "LastModified" : "2018-07-09T16:10:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# dump support is required\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# only set these after all tests are done\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "unit/CMakeLists.txt" : {
      "ObjectId" : "32e014508e1cbc418401bf91a56ffa4021eb7deb",
      "LastModified" : "2018-07-09T16:10:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# remove some warnings\n\n# cmake's scope means these only apply here\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# spurious warnings?\n",
        "Line" : 35,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# enable Chimera unit tests\n",
        "Line" : 138,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#\n\n# build target to run unit tests\n\n#\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#\n\n# build target to run unit tests\n\n#\n",
        "Line" : 172,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "util/CMakeLists.txt" : {
      "ObjectId" : "ea942ef1a5ced1871d5029e31588f106d9cd434b",
      "LastModified" : "2018-02-05T01:25:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# utility libs\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 19
  },
  "ElapsedTime" : 1231
}