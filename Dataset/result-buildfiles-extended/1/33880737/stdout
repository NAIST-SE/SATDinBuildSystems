{
  "Repository" : "33880737",
  "Revision" : "HEAD",
  "ObjectId" : "67a3b1456dadffc5b2b25ba988c85660fe139e23",
  "CommitTime" : "2019-04-17T19:21:20Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "06e3e5b1373ad9c25ce8cb4970529311f6a1423e",
      "LastModified" : "2019-03-28T16:05:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set as release build by default\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Use two different methods to determine host distribution: lsb_release and if that fails grep /etc/os-release\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Accepted values for DISTRO_ID: trusty (Ubuntu 14.04), xenial (Ubuntu 16.06), fd23 (Fedora 23)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Need special handling for RHEL 7 or CentOS 7\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Regression test\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# obtain specific information about llvm setup\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# setup compilation environment\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#  \"${PROJECT_SOURCE_DIR}/compiler/utils/unittest/googletest/include\" \"${PROJECT_BINARY_DIR}/${LOCAL_LLVM_INCLUDE}\"\n",
        "Line" : 61,
        "CharPositionInLine" : 132
      },
      "8" : {
        "Text" : "#################\n\n# Detect ROCm\n\n#################\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ROCm external dependencies\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "################\n\n# Detect ROCm Device Libs\n\n################\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# If not using the integrated ROCm Device Library,\n\n# then the one installed on the system\n\n# or provided by a user\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# display ROCm information\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "################\n\n# Detect CodeXL Activity Logger\n\n################\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# display CodeXL information\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "################\n\n# Detect profiling API\n\n################\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#################\n\n# Set up version information\n\n#################\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# define HCC version information\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Set HCC version string. The rule for version string is:\n\n# HCC_VERSION_MAJOR . HCC_VERSION_MINOR . HCC_VERSION_PATCH-KALMAR_SDK_COMIT-KALMAR_FRONTEND_COMMIT-KALMAR_BACKEND_COMMIT\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# set default installation path\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# set the installation path for the installer package\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# show HCC version string\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#################\n\n# Detect if we have ROCm stack available\n\n#################\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# at least we need the followings:\n\n# - HSA headers (installed by HSA runtime)\n\n# - HSA runtime libraries (installed by HSA runtime)\n\n# - ROCm Device Library\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#################\n\n# Detect AMDGPU backend for native codegen\n\n#################\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Tokenize HSA_AMDGPU_GPU_TARGET\n",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Temporary workaround for use of old long-form GFX_ip names, to be removed once\n\n# we fully deprecate them.\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# join list\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#################\n\n# Setup HCC backend macro string\n\n# Possible values:\n\n# - AMDGPU : for HSA systems configured with Lightning backend\n\n#################\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#########################\n\n# build target: world\n\n#########################\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# build Clang frontend + AMDGPU backend\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# determine LLVM targets to be built\n\n# AMDGPU is always on\n\n# For host target, x86_64, aarch64, ppc64, ppc64le are currently supported\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# install certain LLVM libraries needed by HIP\n",
        "Line" : 352,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# force library install path to lib\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# move headers to build dir before building rocdl and hcc lib\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# build the integrated ROCm Device Library\n",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# override default option value in ROCDL\n",
        "Line" : 390,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# build rocdl\n",
        "Line" : 401,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# install ROCm Device Library in hcc\n",
        "Line" : 433,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# create documentation\n",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# install documentation\n\n# optionally stored under doc/\n",
        "Line" : 474,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# generate Debian control scripts postinst and postrm\n",
        "Line" : 483,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Default to generate a package appropriate for a distro; users override using command line with -D\n\n# -D writes variables into the cmake cache, and setting CACHE variables won't overwrite variables already in the CACHE\n",
        "Line" : 516,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# generate a tarball for unknown DISTRO_ID\n",
        "Line" : 526,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# DEB package settings\n",
        "Line" : 530,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# control the list of package dependency depending on whether this is an official release build.\n\n# for non-official release build, we want to relax the dependency on rocr runtime\n",
        "Line" : 540,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# RPM package settings\n",
        "Line" : 554,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# disable automatic shared libraries dependency detection\n",
        "Line" : 559,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 48
    },
    "benchmarks/benchEmptyKernel/Makefile" : {
      "ObjectId" : "41c375b71521c185eaa9b1637170a515a769eaf6",
      "LastModified" : "2017-06-03T02:05:26Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# run kernel # of times\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# TODO - should enable OPT=-O3 for benchmarking.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake-tests/CMakeLists.txt" : {
      "ObjectId" : "a851247e092b1d94325caaa9c02ca002dd64d9ed",
      "LastModified" : "2019-03-19T02:15:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Explicitly set the GPU architecture so that\n\n# cmake_test could be cross-compiled on a system\n\n# without a GPU\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Append default hcc installation\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "b9e9da2463f203f94d7725a755fdbf3b10f43508",
      "LastModified" : "2017-11-09T20:40:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# usage of this cmake script\n\n# 1) build hcc first\n\n# 2) run \"make docs\" under hcc build directory to get HTML files produced\n\n# 3) go to docs/ under hcc build directory\n\n# 4) cmake <hcc source>/doc\n\n# 5) make package\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set default installation path\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#################\n\n# Set up version information\n\n#################\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# define HCC version information\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# get date information\n\n# use the last two digits of year + week number as HCC_VERSION_PATCH\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# get commit information\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# set HCC version string\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# show HCC version string\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# create documentation\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# install documentation\n\n# optionally stored under doc/\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "hcc_config/CMakeLists.txt" : {
      "ObjectId" : "0ac851b406142c351a83db79e5ca057e0b1dfde1",
      "LastModified" : "2019-03-28T16:05:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "####################\n\n# CodeXL Activity Logger\n\n####################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "include/CMakeLists.txt" : {
      "ObjectId" : "933af298f33c0371aefb1b73bd3064418f1b9ee6",
      "LastModified" : "2017-06-15T20:04:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Put all hcc headers into the hcc-headers target\n\n# .h and .hpp headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# .inl headers\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# N4494 headers\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Obtain the names of each Header File\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set location for output directory\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Create target for hcc-headers and set dependencies\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Install command for headers\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# PSTL headers\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "include/experimental/CMakeLists.txt" : {
      "ObjectId" : "509b1394b1d6a41ee0ae0179dc1dc9ac12d29c39",
      "LastModified" : "2017-11-09T20:40:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Here we have PSTL header files inside experimental directory and impl sub-directory.\n\n# All PSTL headers should be in the same pstl-headers target, but different output dir\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# PSTL headers from experimental/\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# PSTL headers from experimental/impl/\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Obtain the names of each impl header and add to PSTL\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set location for exp/ output directory\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set location for exp/impl/ output directory\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Create target for pstl-headers and set dependencies\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Install command for PSTL exp headers\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Install command for PSTL impl headers\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "lib/CMakeLists.txt" : {
      "ObjectId" : "eacd540d3b54b4c0e8d79540918a383e03b8defa",
      "LastModified" : "2019-03-28T16:05:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "####################\n\n# C++AMP runtime (mcwamp)\n\n####################\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Library interface to use runtime\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Library interface for building shared libraries\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "####################\n\n# C++AMP tools\n\n####################\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "####################\n\n# C++AMP tools (HSA-specific)\n\n####################\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "####################\n\n# CodeXL Activity Logger\n\n####################\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "####################\n\n# add subdirectories\n\n####################\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "####################\n\n# install targets\n\n####################\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "lib/cpu/CMakeLists.txt" : {
      "ObjectId" : "5968014e47574e48c72282ac0012bb78e2a1a13a",
      "LastModified" : "2017-01-09T17:41:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "####################\n\n# C++AMP runtime (CPU implementation)\n\n####################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lib/hsa/CMakeLists.txt" : {
      "ObjectId" : "2bbeb56e9af71c1a9ad1ebdbab89140add99393d",
      "LastModified" : "2017-06-15T20:04:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "####################\n\n# HCC runtime (HSA implementation)\n\n####################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "####################\n\n# CodeXL Activity Logger Library\n\n####################\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "scripts/cmake/GenerateVersionFromGit.cmake" : {
      "ObjectId" : "627abfc8324f2fc877a85fa2036000277b69da75",
      "LastModified" : "2017-11-09T20:40:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# get date information based on UTC\n\n# use the last two digits of year + week number + day in the week as HCC_VERSION_PATCH\n\n# use the commit date, instead of build date\n\n# add xargs to remove strange trailing newline character\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# get commit information\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "scripts/cmake/ImportedTargets.cmake" : {
      "ObjectId" : "62b1df93781607eb3b5bdc43a838e64f0ab2776d",
      "LastModified" : "2018-04-09T19:41:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "scripts/cmake/MCWAMP.cmake" : {
      "ObjectId" : "dbe2b6e524791a7dd8e5386d6d782d93dc35c3c1",
      "LastModified" : "2019-03-28T16:05:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# gtest\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MCWAMP\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Imported targets\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Additional compile-time options for HCC runtime could be set via:\n\n# - HCC_RUNTIME_CFLAGS\n\n#\n\n# For example: cmake -DHCC_RUNTIME_CFLAGS=-g would configure HCC runtime be built\n\n# with debug information while other parts are not.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Enable debug line info only if it's a release build and HCC_RUNTIME_DEBUG is OFF\n\n# Otherwise, -gline-tables-only would override other existing debug flags\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "####################\n\n# C++AMP runtime interface (mcwamp) \n\n####################\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# LLVM and Clang shall be compiled beforehand\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# LLVM and Clang shall be compiled beforehand\n",
        "Line" : 51,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "####################\n\n# C++AMP runtime (CPU implementation)\n\n####################\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# LLVM and Clang shall be compiled beforehand\n",
        "Line" : 62,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "####################\n\n# C++AMP runtime (HSA implementation) \n\n####################\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# LLVM and Clang shall be compiled beforehand\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# add HSA libraries\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# LLVM and Clang shall be compiled beforehand\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# add HSA libraries\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 15
    },
    "stl-test/CMakeLists.txt" : {
      "ObjectId" : "4dae987490cbb6cb1687b094050cd36dbb8abb1b",
      "LastModified" : "2015-04-07T09:12:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "bb9d4b146cdd1d4b5bc5ea6644ad1798163dac7a",
      "LastModified" : "2019-03-28T16:05:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# gtest\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MCWAMP\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DEPENDS ${CPPAMP_GTEST_LIB}\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "utils/CMakeLists.txt" : {
      "ObjectId" : "9f4f8b9e99748e751cccd0eae4ac3c2267599270",
      "LastModified" : "2015-04-07T09:12:03Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/gtest/CMakeLists.txt" : {
      "ObjectId" : "f71f83f7ee5d3adf2ca331c16d7019503aa1e04f",
      "LastModified" : "2019-03-28T16:05:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 16,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1896
}