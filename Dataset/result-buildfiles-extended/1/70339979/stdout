{
  "Repository" : "70339979",
  "Revision" : "HEAD",
  "ObjectId" : "42dbc6f4d2105a4c08da6d465bcf17eaf3b42fca",
  "CommitTime" : "2019-04-18T06:06:43Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "1c244d419acd247c326743c1f9bb34cf3e64709e",
      "LastModified" : "2019-04-16T03:19:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# get absolute path, but get_filename_component ABSOLUTE only refer with source dir, so find_file here :(\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# add_definitions(-march=native)\n\n# add_definitions(-flto)\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# disable shared library on android\n",
        "Line" : 77,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# disable shared library on xcode ios\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "##############################################\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add_subdirectory(examples)\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "benchmark/CMakeLists.txt" : {
      "ObjectId" : "db33731f89352e11744d2dcf11f26aeb89d9c37f",
      "LastModified" : "2019-03-20T06:50:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "229680e2fcbe68fb7ac895035946b6ddb6b3258e",
      "LastModified" : "2019-04-18T06:06:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/squeezencnn/build.xml" : {
      "ObjectId" : "47b725e7431d183477744548d439b0fa26ecdf04",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked into\n         Version Control Systems. ",
        "Line" : 6,
        "CharPositionInLine" : 38
      },
      "1" : {
        "Text" : " The ant.properties file can be created by you. It is only edited by the\n         'android' tool to add properties to it.\n         This is the place to change some Ant specific build properties.\n         Here are some properties you may want to change/update:\n\n         source.dir\n             The name of the source directory. Default is 'src'.\n         out.dir\n             The name of the output directory. Default is 'bin'.\n\n         For other overridable properties, look at the beginning of the rules\n         files in the SDK, at tools/ant/build.xml\n\n         Properties related to the SDK location or the project target should\n         be updated using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems.\n\n         ",
        "Line" : 28,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : " if sdk.dir was not set from one of the property file, then\n         get it from the ANDROID_HOME env var.\n         This must be done before we load project.properties since\n         the proguard config can use sdk.dir ",
        "Line" : 34,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : " The project.properties file is created and updated by the 'android'\n         tool, as well as ADT.\n\n         This contains project specific properties such as project target, and library\n         dependencies. Lower level build properties are stored in ant.properties\n         (or in .classpath for Eclipse projects).\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems. ",
        "Line" : 48,
        "CharPositionInLine" : 77
      },
      "4" : {
        "Text" : " quick check on sdk.dir ",
        "Line" : 51,
        "CharPositionInLine" : 36
      },
      "5" : {
        "Text" : "\n        Import per project custom build rules if present at the root of the project.\n        This is the place to put custom intermediary targets such as:\n            -pre-build\n            -pre-compile\n            -post-compile (This is typically used for code obfuscation.\n                           Compiled code location: ${out.classes.absolute.dir}\n                           If this is not done in place, override ${out.dex.input.absolute.dir})\n            -post-package\n            -post-build\n            -pre-clean\n    ",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : " Import the actual build file.\n\n         To customize existing targets, there are two options:\n         - Customize only one target:\n             - copy/paste the target into this file, *before* the\n               <import> task.\n             - customize it to your needs.\n         - Customize the whole content of build.xml\n             - copy/paste the content of the rules files (minus the top node)\n               into this file, replacing the <import> task.\n             - customize to your needs.\n\n         ***********************\n         ****** IMPORTANT ******\n         ***********************\n         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,\n         in order to avoid having your file be overridden by tools such as \"android update project\"\n    ",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : " version-tag: 1 ",
        "Line" : 89,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 8
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "d675f7cbafea2405947a093a894e6cf22856e697",
      "LastModified" : "2019-04-16T03:19:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##############################################\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# WITH_LAYER_xxx option\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# look for arch specific implementation and append source\n\n# optimized implementation for armv7, aarch64 or x86\n",
        "Line" : 50,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# generate layer_declaration and layer_registry file\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# fp16 storage\n",
        "Line" : 108,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# fp16 storage + fp16 arithmetic\n",
        "Line" : 127,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# generate layer_type_enum file\n",
        "Line" : 148,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# look for vulkan compute shader and compile\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# layer implementation\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# create new\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "toolchains/aarch64-linux-gnu.toolchain.cmake" : {
      "ObjectId" : "1fa575d842744b12eb2b1993d86c92779affa5a6",
      "LastModified" : "2018-12-22T02:27:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set cross-compiled system type, it's better not use the type which cmake cannot recognized.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# for the reason of aarch64-linux-gnu-gcc DONOT need to be installed, make sure aarch64-linux-gnu-gcc and aarch64-linux-gnu-g++ can be found in $PATH: \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set searching rules for cross-compiler\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set ${CMAKE_C_FLAGS} and ${CMAKE_CXX_FLAGS}flag for cross-compiled process\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# other settings\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "toolchains/arm-linux-gnueabi.toolchain.cmake" : {
      "ObjectId" : "60e2da8205c80238c00e72e59e26ed141af8ea55",
      "LastModified" : "2018-12-22T02:27:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set cross-compiled system type, it's better not use the type which cmake cannot recognized.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# when hislicon SDK was installed, toolchain was installed in the path as below: \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set searching rules for cross-compiler\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set ${CMAKE_C_FLAGS} and ${CMAKE_CXX_FLAGS}flag for cross-compiled process\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# other settings\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "toolchains/arm-linux-gnueabihf.toolchain.cmake" : {
      "ObjectId" : "673ae7d56829901d30a7e825a40d1789c30fdee8",
      "LastModified" : "2018-12-22T02:27:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set cross-compiled system type, it's better not use the type which cmake cannot recognized.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# when hislicon SDK was installed, toolchain was installed in the path as below: \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set searching rules for cross-compiler\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set ${CMAKE_C_FLAGS} and ${CMAKE_CXX_FLAGS}flag for cross-compiled process\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# other settings\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "toolchains/himix100.toolchain.cmake" : {
      "ObjectId" : "c4097287507a88c3425e8c8823b044f79f1db253",
      "LastModified" : "2018-12-22T02:27:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set cross-compiled system type, it's better not use the type which cmake cannot recognized.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# when hislicon SDK was installed, toolchain was installed in the path as below: \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set searching rules for cross-compiler\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set ${CMAKE_C_FLAGS} and ${CMAKE_CXX_FLAGS}flag for cross-compiled process\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# other settings\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "toolchains/hisiv300.toolchain.cmake" : {
      "ObjectId" : "bb749df87603424748aecb74c4eda1e412545f44",
      "LastModified" : "2018-12-22T02:27:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set cross-compiled system type, it's better not use the type which cmake cannot recognized.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# when hislicon SDK was installed, toolchain was installed in the path as below: \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set searching rules for cross-compiler\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set ${CMAKE_C_FLAGS} and ${CMAKE_CXX_FLAGS}flag for cross-compiled process\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# other settings\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "toolchains/hisiv500.toolchain.cmake" : {
      "ObjectId" : "21ef153f1894ace3bbebd0a2d2172ec38094e891",
      "LastModified" : "2018-12-22T02:27:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set cross-compiled system type, it's better not use the type which cmake cannot recognized.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# when hislicon SDK was installed, toolchain was installed in the path as below: \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set searching rules for cross-compiler\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set ${CMAKE_C_FLAGS} and ${CMAKE_CXX_FLAGS}flag for cross-compiled process\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# other settings\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "toolchains/host.gcc.toolchain.cmake" : {
      "ObjectId" : "510a0138660e707d8df1ddde8ce2a338d634a359",
      "LastModified" : "2018-12-22T02:27:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set cross-compiled system type, it's better not use the type which cmake cannot recognized.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if gcc/g++ was installed: \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set searching rules\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set ${CMAKE_C_FLAGS} and ${CMAKE_CXX_FLAGS}flag\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "toolchains/ios.toolchain.cmake" : {
      "ObjectId" : "4afc1db2769eaef23b5eb278d147c4a7794137fa",
      "LastModified" : "2018-12-22T02:27:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of the ios-cmake project. It was retrieved from\n\n# https://github.com/cristeab/ios-cmake.git, which is a fork of\n\n# https://code.google.com/p/ios-cmake/. Which in turn is based off of\n\n# the Platform/Darwin.cmake and Platform/UnixPaths.cmake files which\n\n# are included with CMake 2.8.4\n\n#\n\n# The ios-cmake project is licensed under the new BSD license.\n\n#\n\n# Copyright (c) 2014, Bogdan Cristea and LTE Engineering Software,\n\n# Kitware, Inc., Insight Software Consortium.  All rights reserved.\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n# 1. Redistributions of source code must retain the above copyright\n\n# notice, this list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright\n\n# notice, this list of conditions and the following disclaimer in the\n\n# documentation and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its\n\n# contributors may be used to endorse or promote products derived from\n\n# this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n\n# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n\n# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n\n# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# This file is based off of the Platform/Darwin.cmake and\n\n# Platform/UnixPaths.cmake files which are included with CMake 2.8.4\n\n# It has been altered for iOS development.\n\n#\n\n# Updated by Alex Stewart (alexs.mac@gmail.com)\n\n#\n\n# *****************************************************************************\n\n#      Now maintained by Alexander Widerberg (widerbergaren [at] gmail.com)\n\n#                      under the BSD-3-Clause license\n\n#                   https://github.com/leetal/ios-cmake\n\n# *****************************************************************************\n\n#\n\n#                           INFORMATION / HELP\n\n#\n\n# The following variables control the behaviour of this toolchain:\n\n#\n\n# IOS_PLATFORM: OS (default) or SIMULATOR or SIMULATOR64 or TVOS or SIMULATOR_TVOS or WATCHOS or SIMULATOR_WATCHOS\n\n#    OS = Build for iPhoneOS.\n\n#    OS64 = Build for arm64 arm64e iPhoneOS.\n\n#    SIMULATOR = Build for x86 i386 iPhone Simulator.\n\n#    SIMULATOR64 = Build for x86_64 iPhone Simulator.\n\n#    TVOS = Build for AppleTVOS.\n\n#    SIMULATOR_TVOS = Build for x86_64 AppleTV Simulator.\n\n#    WATCHOS = Build for armv7k arm64_32 for WatchOS.\n\n#    SIMULATOR_WATCHOS = Build for x86_64 for Watch Simulator.\n\n# CMAKE_OSX_SYSROOT: Path to the iOS SDK to use.  By default this is\n\n#    automatically determined from IOS_PLATFORM and xcodebuild, but\n\n#    can also be manually specified (although this should not be required).\n\n# CMAKE_IOS_DEVELOPER_ROOT: Path to the Developer directory for the iOS platform\n\n#    being compiled for.  By default this is automatically determined from\n\n#    CMAKE_OSX_SYSROOT, but can also be manually specified (although this should\n\n#    not be required).\n\n# ENABLE_BITCODE: (1|0) Enables or disables bitcode support. Default 1 (true)\n\n# ENABLE_ARC: (1|0) Enables or disables ARC support. Default 1 (true, ARC enabled by default)\n\n# ENABLE_VISIBILITY: (1|0) Enables or disables symbol visibility support. Default 0 (false, visibility hidden by default)\n\n# IOS_ARCH: (armv7 armv7s armv7k arm64 arm64e arm64_32 i386 x86_64) If specified, will override the default architectures for the given IOS_PLATFORM\n\n#    OS = armv7 armv7s arm64 arm64e (if applicable)\n\n#    OS64 = arm64 arm64e (if applicable)\n\n#    SIMULATOR = i386 x86_64\n\n#    SIMULATOR64 = x86_64\n\n#    TVOS = arm64\n\n#    SIMULATOR_TVOS = x86_64 (i386 has since long been deprecated)\n\n#    WATCHOS = armv7k arm64_32 (if applicable)\n\n#    SIMULATOR_WATCHOS = x86_64 (i386 has since long been deprecated)\n\n#\n\n# This toolchain defines the following variables for use externally:\n\n#\n\n# XCODE_VERSION: Version number (not including Build version) of Xcode detected.\n\n# IOS_SDK_VERSION: Version of iOS SDK being used.\n\n# CMAKE_OSX_ARCHITECTURES: Architectures being compiled for (generated from\n\n#    IOS_PLATFORM).\n\n#\n\n# This toolchain defines the following macros for use externally:\n\n#\n\n# set_xcode_property (TARGET XCODE_PROPERTY XCODE_VALUE XCODE_VARIANT)\n\n#   A convenience macro for setting xcode specific properties on targets.\n\n#   Available variants are: All, Release, RelWithDebInfo, Debug, MinSizeRel\n\n#   example: set_xcode_property (myioslib IPHONEOS_DEPLOYMENT_TARGET \"3.1\" \"all\").\n\n#\n\n# find_host_package (PROGRAM ARGS)\n\n#   A macro used to find executable programs on the host system, not within the\n\n#   iOS environment.  Thanks to the android-cmake project for providing the\n\n#   command.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fix for PThread library not in path\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Get the Xcode version being used.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Default to building for iPhoneOS if not specified otherwise, and we cannot\n\n# determine the platform from the CMAKE_OSX_ARCHITECTURES variable. The use\n\n# of CMAKE_OSX_ARCHITECTURES is such that try_compile() projects can correctly\n\n# determine the value of IOS_PLATFORM from the root project, as\n\n# CMAKE_OSX_ARCHITECTURES is propagated to them by CMake.\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Determine the platform name and architectures for use in xcodebuild commands\n\n# from the specified IOS_PLATFORM name.\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If user did not specify the SDK root to use, then query xcodebuild for it.\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If user did not specify the SDK root to use, then query xcodebuild for it.\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Specify minimum version of deployment target.\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Unless specified, SDK version 2.0 is used by default as minimum target version (watchOS).\n",
        "Line" : 225,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Unless specified, SDK version 8.0 is used by default as minimum target version (iOS, tvOS).\n",
        "Line" : 229,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Use bitcode or not\n",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Unless specified, enable bitcode support by default\n",
        "Line" : 237,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Use ARC or not\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Unless specified, enable ARC support by default\n",
        "Line" : 246,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Use hidden visibility or not\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Unless specified, disable symbols visibility by default\n",
        "Line" : 252,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Get the SDK version information.\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Find the Developer root for the specific iOS platform being compiled for\n\n# from CMAKE_OSX_SYSROOT.  Should be ../../ from SDK specified in\n\n# CMAKE_OSX_SYSROOT.  There does not appear to be a direct way to obtain\n\n# this information from xcrun or xcodebuild.\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Find the C & C++ compilers for the specified SDK.\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Find (Apple's) libtool.\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Configure libtool to be used instead of ar + ranlib to build static libraries.\n\n# This is required on Xcode 7+, but should also work on previous versions of\n\n# Xcode.\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Get the version of Darwin (OS X) of the host.\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Standard settings.\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Force unset of OS X-specific deployment target (otherwise autopopulated),\n\n# required as of cmake 2.8.10.\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Set the architectures for which to build.\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Change the type of target generated for try_compile() so it'll work when cross-compiling\n",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# All iOS/Darwin specific settings - some may be redundant.\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Note that only Xcode 7+ supports the newer more specific:\n\n# -m${XCODE_IOS_PLATFORM}-version-min flags, older versions of Xcode use:\n\n# -m(ios/ios-simulator)-version-min instead.\n",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Xcode 7.0+ uses flags we can build directly from XCODE_IOS_PLATFORM.\n",
        "Line" : 358,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# SIMULATOR or SIMULATOR64 both use -mios-simulator-version-min.\n",
        "Line" : 375,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Hidden visibilty is required for C++ on iOS.\n",
        "Line" : 408,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# In order to ensure that the updated compiler flags are used in try_compile()\n\n# tests, we have to forcibly set them in the CMake cache, not merely set them\n\n# in the local scope.\n",
        "Line" : 417,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old\n\n# build tree (where install_name_tool was hardcoded) and where\n\n# CMAKE_INSTALL_NAME_TOOL isn't in the cache and still cmake didn't fail in\n\n# CMakeFindBinUtils.cmake (because it isn't rerun) hardcode\n\n# CMAKE_INSTALL_NAME_TOOL here to install_name_tool, so it behaves as it did\n\n# before, Alex.\n",
        "Line" : 440,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Set the find root to the iOS developer roots and to user defined paths.\n",
        "Line" : 450,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Default to searching for frameworks first.\n",
        "Line" : 453,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Set up the default search directories for frameworks.\n",
        "Line" : 455,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Only search the specified iOS SDK, not the remainder of the host filesystem.\n",
        "Line" : 460,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# This little macro lets you set any XCode specific property.\n",
        "Line" : 464,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# This macro lets you find executable programs on the host system.\n",
        "Line" : 475,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "toolchains/iossimxc-x64.toolchain.cmake" : {
      "ObjectId" : "cf47224e045080f92b678bce8d71e936e226eb39",
      "LastModified" : "2019-03-20T06:50:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Standard settings\n\n# set(UNIX True)\n\n# set(Darwin True)\n\n# set(IOS True)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# suppress -rdynamic\n\n# set(CMAKE_SYSTEM_NAME Generic)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the sysroot default to the most recent SDK\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set the architecture for iOS\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the find root to the iOS developer roots and to user defined paths\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# searching for frameworks only\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# set up the default search directories for frameworks\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "toolchains/iossimxc.toolchain.cmake" : {
      "ObjectId" : "0395a7d2e9769cc81d8a05fd6c143a68f373c92e",
      "LastModified" : "2019-03-20T06:50:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Standard settings\n\n# set(UNIX True)\n\n# set(Darwin True)\n\n# set(IOS True)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# suppress -rdynamic\n\n# set(CMAKE_SYSTEM_NAME Generic)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the sysroot default to the most recent SDK\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set the architecture for iOS\n\n# set(IOS_ARCH i386)\n\n# set(IOS_ARCH x86_64)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the find root to the iOS developer roots and to user defined paths\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# searching for frameworks only\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# set up the default search directories for frameworks\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "toolchains/iosxc-arm64.toolchain.cmake" : {
      "ObjectId" : "2087cedfb35299b649ca435e7919a99542e49338",
      "LastModified" : "2019-03-20T06:50:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Standard settings\n\n# set(UNIX True)\n\n# set(Darwin True)\n\n# set(IOS True)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# suppress -rdynamic\n\n# set(CMAKE_SYSTEM_NAME Generic)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the sysroot default to the most recent SDK\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set the architecture for iOS\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the find root to the iOS developer roots and to user defined paths\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# searching for frameworks only\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# set up the default search directories for frameworks\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "toolchains/iosxc.toolchain.cmake" : {
      "ObjectId" : "9eab0dd9910a578d0571f74394eed48faa3aa0a1",
      "LastModified" : "2019-03-20T06:50:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Standard settings\n\n# set(UNIX True)\n\n# set(Darwin True)\n\n# set(IOS True)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# suppress -rdynamic\n\n# set(CMAKE_SYSTEM_NAME Generic)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the sysroot default to the most recent SDK\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set the architecture for iOS\n\n# set(IOS_ARCH arm64)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set the find root to the iOS developer roots and to user defined paths\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# searching for frameworks only\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# set up the default search directories for frameworks\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "toolchains/pi3.toolchain.cmake" : {
      "ObjectId" : "38526e183f0a2b20c217a65877450a922df2f503",
      "LastModified" : "2019-03-20T06:50:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/CMakeLists.txt" : {
      "ObjectId" : "baed08d6697b0ca83c4747ed016921b193f62577",
      "LastModified" : "2019-03-20T06:50:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/caffe/CMakeLists.txt" : {
      "ObjectId" : "16a4748ae830ffdd482c789e5c966a640294dcdc",
      "LastModified" : "2019-03-20T06:50:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/mxnet/CMakeLists.txt" : {
      "ObjectId" : "caebc21387b842bed31a32054abfc5599cb73d42",
      "LastModified" : "2019-03-20T06:50:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/onnx/CMakeLists.txt" : {
      "ObjectId" : "361ab81a82c8043d9282cfe305109bba902a870e",
      "LastModified" : "2019-03-20T06:50:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/tensorflow/CMakeLists.txt" : {
      "ObjectId" : "e3e1bd98d5b9b7880f5d28c087d9d95d1b67885a",
      "LastModified" : "2019-03-20T06:50:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 22,
    "ANT" : 1
  },
  "ElapsedTime" : 1207
}