{
  "Repository" : "4611508",
  "Revision" : "HEAD",
  "ObjectId" : "713eeca85cccadde39bf57f8b59ea663a085a347",
  "CommitTime" : "2018-12-11T09:51:23Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "97d02bce4ba3bd5f63525236cf303f7c5e6fd9de",
      "LastModified" : "2017-04-21T18:18:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "####\n\n## Version information\n\n####\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Library version\n\n#\n\n# This should be incremented with every release.  See semver.org.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# API version.\n\n#\n\n# This will go in the pkg-config and shared library names.  Should\n\n# only be changed if the API breaks backwards compatibility.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ABI version\n\n#\n\n# Rules from § 11.4: Library Versioning of the autobook\n\n# https://www.sourceware.org/autobook/autobook/autobook_61.html\n\n#\n\n# 1) If you have changed any of the sources for this library, the\n\n#    revision number must be incremented. This is a new revision of\n\n#    the current interface.\n\n# 2) If the interface has changed, then current must be incremented,\n\n#    and revision reset to ‘0’. This is the first revision of a new\n\n#    interface.\n\n# 3) If the new interface is a superset of the previous interface\n\n#    (that is, if the previous interface has not been broken by the\n\n#    changes in this new release), then age must be incremented. This\n\n#    release is backwards compatible with the previous release.\n\n# 4) If the new interface has removed elements with respect to the\n\n#    previous interface, then you have broken backward compatibility\n\n#    and age must be reset to ‘0’. This release has a new, but\n\n#    backwards incompatible interface.\n\n#\n\n# Conveniently, this also matches semantic versioning for the most\n\n# part (API changes are a bit more complicated since we change the\n\n# library and pkg-config names and can reset these to whatever we\n\n# want, but we don't *have* to.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# https://cmake.org/Bug/view.php?id=8246\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# This only works with gcc/clang at the moment.\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "####\n\n## Compatibility with older CMake\n\n##\n\n## This will probably be removed when Ubuntu bumps their LTS server\n\n## release (and Travis upgrades).\n\n####\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "bindings/CMakeLists.txt" : {
      "ObjectId" : "c74d3658d857ca13253366e0e7976ec3dc2197df",
      "LastModified" : "2013-10-22T23:11:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/vala/CMakeLists.txt" : {
      "ObjectId" : "f06b359e66ff230c34c58ade3294a1edec9968c8",
      "LastModified" : "2013-10-22T23:11:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "bindings/vala/examples/CMakeLists.txt" : {
      "ObjectId" : "a25e542497c0413719fe2d1ee59ca185ada4832d",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/AddCompilerFlags.cmake" : {
      "ObjectId" : "5e3d68648592607d2d55c7f8014b5cb4aa050228",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module provides a convenient way to add C/C++ compiler flags if\n\n# the compiler supports them.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Depending on the settings, some compilers will accept unknown flags.\n\n# We try to disable this behavior by also passing these flags when we\n\n# check if a flag is supported.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##\n\n# Set a variable to different flags, depending on which compiler is in\n\n# use.\n\n#\n\n# Example:\n\n#   set_compiler_flags(VARIABLE varname MSVC /wd666 INTEL /wd1729)\n\n#\n\n#   This will set varname to /wd666 if the compiler is MSVC, and /wd1729\n\n#   if it is Intel.\n\n#\n\n# Possible compilers:\n\n#  - GCC: GNU C Compiler\n\n#  - GCCISH: A compiler that (tries to) be GCC-compatible on the CLI\n\n#    (i.e., anything but MSVC).\n\n#  - CLANG: clang\n\n#  - MSVC: Microsoft Visual C++ compiler\n\n#  - INTEL: Intel C Compiler\n\n#\n\n# Note: the compiler is determined based on the value of the\n\n# CMAKE_C_COMPILER_ID variable, not CMAKE_CXX_COMPILER_ID.\n\n##\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Because https://gcc.gnu.org/wiki/FAQ#wnowarning\n",
        "Line" : 90,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# global_add_compiler_flags (flag1 [flag2 [flag3 ...]]):\n\n#\n\n# This just adds the requested compiler flags to\n\n# CMAKE_C/CXX_FLAGS variable if they work with the compiler.\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Because https://gcc.gnu.org/wiki/FAQ#wnowarning\n",
        "Line" : 137,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 6
    },
    "cmake/CheckPrototypeExists.cmake" : {
      "ObjectId" : "4b720c56e8b6acd78acc7c9c8b6ea6d859938e5e",
      "LastModified" : "2015-04-09T19:58:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check if the prototype for a function exists.\n\n# CHECK_PROTOTYPE_EXISTS (FUNCTION HEADER VARIABLE)\n\n#\n\n#  FUNCTION - the name of the function you are looking for\n\n#  HEADER - the header(s) where the prototype should be declared\n\n#  VARIABLE - variable to store the result\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n# Source: KDE/kdelibs\n\n# <http://websvn.kde.org/trunk/KDE/kdelibs/cmake/modules/CheckPrototypeExists.cmake?pathrev=776742>\n\n#\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/CodeCoverage.cmake" : {
      "ObjectId" : "c8fb8e28bed994e678c8c1b26808ab3c9a7f5f85",
      "LastModified" : "2015-10-06T23:34:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2012 - 2015, Lars Bilke\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification,\n\n# are permitted provided that the following conditions are met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice, this\n\n#    list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its contributors\n\n#    may be used to endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n#\n\n#\n\n# 2012-01-31, Lars Bilke\n\n# - Enable Code Coverage\n\n#\n\n# 2013-09-17, Joakim Söderberg\n\n# - Added support for Clang.\n\n# - Some additional usage instructions.\n\n#\n\n# USAGE:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 0. (Mac only) If you use Xcode 5.1 make sure to patch geninfo as described here:\n\n#      http://stackoverflow.com/a/22404544/80480\n\n#\n\n# 1. Copy this file into your cmake modules path.\n\n#\n\n# 2. Add the following line to your CMakeLists.txt:\n\n#      INCLUDE(CodeCoverage)\n\n#\n\n# 3. Set compiler flags to turn off optimization and enable coverage:\n\n#    SET(CMAKE_CXX_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\t SET(CMAKE_C_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\n\n# 3. Use the function SETUP_TARGET_FOR_COVERAGE to create a custom make target\n\n#    which runs your test executable and produces a lcov code coverage report:\n\n#    Example:\n\n#\t SETUP_TARGET_FOR_COVERAGE(\n\n#\t\t\t\tmy_coverage_target  # Name for custom target.\n\n#\t\t\t\ttest_driver         # Name of the test driver executable that runs the tests.\n\n#\t\t\t\t\t\t\t\t\t# NOTE! This should always have a ZERO as exit code\n\n#\t\t\t\t\t\t\t\t\t# otherwise the coverage generation will not complete.\n\n#\t\t\t\tcoverage            # Name of output directory.\n\n#\t\t\t\t)\n\n#\n\n# 4. Build a Debug build:\n\n#\t cmake -DCMAKE_BUILD_TYPE=Debug ..\n\n#\t make\n\n#\t make my_coverage_target\n\n#\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check prereqs\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOT GCOV_PATH\n",
        "Line" : 78,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Clang version 3.0.0 and greater now supports gcov as well.\n",
        "Line" : 81,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# NOT CMAKE_COMPILER_IS_GNUCXX\n",
        "Line" : 87,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 113,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests.\n\n#\t\t\t\t\t\tMUST return ZERO always, even on errors.\n\n#\t\t\t\t\t\tIf not, no coverage report will be created!\n\n# Param _outputname     lcov output is generated as _outputname.info\n\n#                       HTML report is generated in _outputname/index.html\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# NOT LCOV_PATH\n",
        "Line" : 128,
        "CharPositionInLine" : 9
      },
      "9" : {
        "Text" : "# NOT GENHTML_PATH\n",
        "Line" : 132,
        "CharPositionInLine" : 9
      },
      "10" : {
        "Text" : "# Setup target\n",
        "Line" : 134,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Cleanup lcov\n",
        "Line" : 137,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Run tests\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Capturing lcov counters and generating report\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 153,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE\n",
        "Line" : 159,
        "CharPositionInLine" : 14
      },
      "16" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests\n\n# Param _outputname     cobertura output is generated as _outputname.xml\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# NOT PYTHON_EXECUTABLE\n",
        "Line" : 170,
        "CharPositionInLine" : 9
      },
      "18" : {
        "Text" : "# NOT GCOVR_PATH\n",
        "Line" : 174,
        "CharPositionInLine" : 9
      },
      "19" : {
        "Text" : "# Run tests\n",
        "Line" : 178,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Running gcovr\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 187,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE_COBERTURA\n",
        "Line" : 193,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 23
    },
    "cmake/ExtraWarningFlags.cmake" : {
      "ObjectId" : "61d4532498b5d57d9b60af0760afb06788b4792f",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is basically supposed to be the CMake equivalent of\n\n# https://git.gnome.org/browse/gnome-common/tree/macros2/gnome-compiler-flags.m4\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindClockGettime.cmake" : {
      "ObjectId" : "ddbc447d2ffff1e603b78d0fa738cda036b0cb87",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# mingw puts clock_gettime in pthreads\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "cmake/FindCppCheck.cmake" : {
      "ObjectId" : "2736516c351eb02b5970ba9bda1338f3477db45d",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindIPPDC.cmake" : {
      "ObjectId" : "730922cb7d6d91f0ede99fbfad7a57d6f9e64eb8",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindIconv.cmake" : {
      "ObjectId" : "a4c87b65ec602fbef9c19f9f9bb02aaeaa35d65a",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copied from https://github.com/onyx-intl/cmake_modules/blob/master/FindIconv.cmake\n\n#\n\n# - Try to find Iconv\n\n# Once done this will define\n\n#\n\n#  ICONV_FOUND - system has Iconv\n\n#  ICONV_INCLUDE_DIR - the Iconv include directory\n\n#  ICONV_LIBRARIES - Link these to use Iconv\n\n#  ICONV_SECOND_ARGUMENT_IS_CONST - the second argument for iconv() is const\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/FindLZMA.cmake" : {
      "ObjectId" : "6033a049436ccc91181f8f6b98fb296b00d4642f",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Lzma\n\n# Once done this will define\n\n#  LZMA_FOUND - System has Lzma\n\n#  LZMA_INCLUDE_DIRS - The Lzma include directories\n\n#  LZMA_LIBRARIES - The libraries needed to use liblzma\n\n#  LZMA_DEFINITIONS - Compiler switches required for using liblzma\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LZMA_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindLZO.cmake" : {
      "ObjectId" : "aace04252a7aff16e2a36967fe6a45cd6688b085",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindRAGEL.cmake" : {
      "ObjectId" : "c39edb0912c74e39073658160cb2a46a15425b47",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Ragel executable and provides macros to generate custom build rules\n\n# The module defines the following variables:\n\n#\n\n#  RAGEL_EXECUTABLE - path to the bison program\n\n#  RAGEL_VERSION - version of bison\n\n#  RAGEL_FOUND - true if the program was found\n\n#\n\n# If ragel is found, the module defines the macros:\n\n#\n\n#  RAGEL_TARGET(<Name> <RagelInp> <CodeOutput>\n\n#              [COMPILE_FLAGS <string>])\n\n#\n\n# which will create  a custom rule to generate a state machine. <RagelInp> is\n\n# the path to a Ragel file. <CodeOutput> is the name of the source file\n\n# generated by ragel. If  COMPILE_FLAGS option is specified, the next\n\n# parameter is  added in the bison  command line.\n\n#\n\n# The macro defines a set of variables:\n\n#  RAGEL_${Name}_DEFINED       - true is the macro ran successfully\n\n#  RAGEL_${Name}_INPUT         - The input source file, an alias for <RagelInp>\n\n#  RAGEL_${Name}_OUTPUT_SOURCE - The source file generated by ragel\n\n#  RAGEL_${Name}_OUTPUT_HEADER - The header file generated by ragel\n\n#  RAGEL_${Name}_OUTPUTS       - The sources files generated by ragel\n\n#  RAGEL_${Name}_COMPILE_FLAGS - Options used in the ragel command line\n\n#\n\n#  ====================================================================\n\n#  Example:\n\n#\n\n#   find_package(RAGEL) # or e.g.: find_package(RAGEL 6.6 REQUIRED)\n\n#   RAGEL_TARGET(MyMachine machine.rl ${CMAKE_CURRENT_BINARY_DIR}/machine.cc)\n\n#   add_executable(Foo main.cc ${RAGEL_MyMachine_OUTPUTS})\n\n#  ====================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 2014-02-09, Georg Sauthoff <mail@georg.so>\n\n#\n\n# I don't think that these few lines are even copyrightable material,\n\n# but I am fine with using the BSD/MIT/GPL license on it ...\n\n#\n\n# I've used following references:\n\n# http://www.cmake.org/cmake/help/v2.8.12/cmake.html\n\n# /usr/share/cmake/Modules/FindFLEX.cmake\n\n# /usr/share/cmake/Modules/FindBISON.cmake\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# uses some features which are not available in 2.6\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#============================================================\n\n# RAGEL_TARGET (public macro)\n\n#============================================================\n\n#\n",
        "Line" : 68,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# use this include when module file is located under /usr/share/cmake/Modules\n\n#include(${CMAKE_CURRENT_LIST_DIR}/FindPackageHandleStandardArgs.cmake)\n\n# use this include when module file is located in build tree\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindSnappy.cmake" : {
      "ObjectId" : "cc1e0c5b7611e3005b2b9debc9d36cb7f20b99a1",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Licensed to the Apache Software Foundation (ASF) under one\n\n# or more contributor license agreements.  See the NOTICE file\n\n# distributed with this work for additional information\n\n# regarding copyright ownership.  The ASF licenses this file\n\n# to you under the Apache License, Version 2.0 (the\n\n# \"License\"); you may not use this file except in compliance\n\n# with the License.  You may obtain a copy of the License at\n\n#\n\n#   http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing,\n\n# software distributed under the License is distributed on an\n\n# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n\n# KIND, either express or implied.  See the License for the\n\n# specific language governing permissions and limitations\n\n# under the License.\n\n#\n\n# Tries to find Snappy headers and libraries.\n\n#\n\n# Usage of this module as follows:\n\n#\n\n#  find_package(Snappy)\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n#  SNAPPY_ROOT_DIR  Set this variable to the root installation of\n\n#                    Snappy if the module has problems finding\n\n#                    the proper installation path.\n\n#\n\n# Variables defined by this module:\n\n#\n\n#  SNAPPY_FOUND              System has Snappy libs/headers\n\n#  SNAPPY_LIBRARIES          The Snappy libraries\n\n#  SNAPPY_INCLUDE_DIR        The location of Snappy headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindVala.cmake" : {
      "ObjectId" : "c8fcc51f4a10bd882c05a4078c9f6f27d9d6551a",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n# Find module for the Vala compiler (valac)\n\n#\n\n# This module determines wheter a Vala compiler is installed on the current\n\n# system and where its executable is.\n\n#\n\n# Call the module using \"find_package(Vala) from within your CMakeLists.txt.\n\n#\n\n# The following variables will be set after an invocation:\n\n#\n\n#  VALA_FOUND       Whether the vala compiler has been found or not\n\n#  VALA_EXECUTABLE  Full path to the valac executable if it has been found\n\n#  VALA_VERSION     Version number of the available valac\n\n#  VALA_USE_FILE    Include this file to define the vala_precompile function\n\n##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##\n\n# Copyright 2009-2010 Jakob Westhoff. All rights reserved.\n\n# Copyright 2010-2011 Daniel Pfeifer\n\n# \n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n# \n\n#    1. Redistributions of source code must retain the above copyright notice,\n\n#       this list of conditions and the following disclaimer.\n\n# \n\n#    2. Redistributions in binary form must reproduce the above copyright notice,\n\n#       this list of conditions and the following disclaimer in the documentation\n\n#       and/or other materials provided with the distribution.\n\n# \n\n# THIS SOFTWARE IS PROVIDED BY JAKOB WESTHOFF ``AS IS'' AND ANY EXPRESS OR\n\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n\n# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n\n# EVENT SHALL JAKOB WESTHOFF OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n\n# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n\n# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n\n# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n\n# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n# \n\n# The views and conclusions contained in the software and documentation are those\n\n# of the authors and should not be interpreted as representing official policies,\n\n# either expressed or implied, of Jakob Westhoff\n\n##\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search for the valac executable in the usual system paths\n\n# Some distributions rename the valac to contain the major.minor in the binary name\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Determine the valac version\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments, which may be given to the find call.\n\n# Furthermore set VALA_FOUND to TRUE if Vala has been found (aka.\n\n# VALA_EXECUTABLE is set)\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/FindZPAQ.cmake" : {
      "ObjectId" : "c0b47e1cfd39fa7409edde2e6f0331bd936c872a",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/GenPkgConfig.cmake" : {
      "ObjectId" : "6ad23bf68ec4f0ad59e0c56eedf417325d7d20ab",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# GenPkgConfig.cmake\n\n# (c) 2016 Evan Nemerson\n\n#\n\n# This CMake module is intended to be used to help CMake-based build\n\n# systems generate good pkg-config files.\n\n#\n\n# License:\n\n#\n\n#   Copyright (c) 2016 Evan Nemerson <evan@nemerson.com>\n\n#\n\n#   Permission is hereby granted, free of charge, to any person\n\n#   obtaining a copy of this software and associated documentation\n\n#   files (the \"Software\"), to deal in the Software without\n\n#   restriction, including without limitation the rights to use, copy,\n\n#   modify, merge, publish, distribute, sublicense, and/or sell copies\n\n#   of the Software, and to permit persons to whom the Software is\n\n#   furnished to do so, subject to the following conditions:\n\n#\n\n#   The above copyright notice and this permission notice shall be\n\n#   included in all copies or substantial portions of the Software.\n\n#\n\n#   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n#   EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\n#   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n#   NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\n\n#   HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\n\n#   WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n\n#   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n#   DEALINGS IN THE SOFTWARE.\n\n#\n\n# ====================================================================\n\n#\n\n# THIS IS A WORK IN PROGRESS.  It probably needs a rewrite.\n\n#\n\n# Why not just use configure_file?\n\n# --------------------------------\n\n#\n\n# That's what I used to do, and as far as I could tell it was working,\n\n# but there is a problem.  pkg-config files generally set the prefix\n\n# variable, then use that to generate the libdir, includedir, etc.\n\n# For example:\n\n#\n\n#   prefix=/usr\n\n#   libdir=${prefix}/lib\n\n#   includedir=${prefix}/include\n\n#\n\n#   ...\n\n#   Name: Foo\n\n#   Libs: -L${libdir} -lfoo\n\n#   Cflags: -I${includedir}/foo\n\n#\n\n# With autotools, getting this exact output is trivial.  Everything\n\n# after the ellipsis isn't going to change, so we'll skip it from now\n\n# on, but the first part would look like this:\n\n#\n\n#   prefix=@prefix@\n\n#   libdir=@libdir@\n\n#   includedir=@includedir@\n\n#\n\n# Now, if you go the obvious route with CMake and use configure_file\n\n# (skipping the second section, because it doesn't change):\n\n#\n\n#   prefix=@CMAKE_INSTALL_PREFIX@\n\n#   libdir=@CMAKE_INSTALL_FULL_LIBDIR@\n\n#   includedir=@CMAKE_INSTALL_FULL_INCLUDEDIR@\n\n#\n\n# Which will be replaced with something like:\n\n#\n\n#   prefix=/usr\n\n#   libdir=/usr/lib\n\n#   includedir=/usr/include\n\n#\n\n# This is obviously not very different, why should you care if the\n\n# pkg-config file uses /usr instead of ${path}?  Well, pkg-config\n\n# allows people to override the prefix on Windows when running\n\n# pkg-config (see the --dont-define-prefix and --prefix-variable\n\n# flags, which are only available on Windows).  This means that people\n\n# using Windows can easily move an entire installation tree and still\n\n# have pkg-config work.  If you don't use Windows that may sound like\n\n# a dumb idea, but apparently on Windows it's a thing…\n\n#\n\n# Now, here is the fun part: you know how CMake wants you to write\n\n# Find*.cmake modules instead of relying on pkg-config, and the reason\n\n# they give is that they can't depend on pkg-config files being right?\n\n# Well, this is apparently the big reason for that.  Basically, if it\n\n# weren't for CMake's own stupidity when generating pkg-config files,\n\n# we could just use pkg-config instead of those goddamn Find*.cmake\n\n# modules.\n\n#\n\n# So, this module provides a function to generate a pkg-config file\n\n# which will put \"${prefix}\" in the generated pkg-config file instead\n\n# of the expanded value.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n#\n\n# generate_pkg_config_path(\n\n#   outvar\n\n#   path\n\n#   [var_name var_value]…\n\n#   )\n\n#\n\n# The path is the full path you want to encode in the pkg-config file,\n\n# then you can have any number of argument pairs with the name and\n\n# value of different variables.  For example:\n\n#\n\n#   generate_pkg_config(foo \"/usr/lib64\"\n\n#     libdir \"/usr/lib64\"\n\n#     prefix \"/usr\")\n\n#\n\n# Would place '${libdir}' in the \"foo\" variable.  If you omitted the\n\n# libdir argument, the value would instead be '${path}/lib64'.\n\n# Prefixes are tested in the order passed to the function, so if you\n\n# switched the libdir and prefix aruguments around the result would be\n\n# '${path}/lib64'.\n\n#\n\n###\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We might be in a subdirectory of the value, but we have to be\n\n# careful about a prefix matching but not being a subdirectory\n\n# (for example, /usr/lib64 is not a subdirectory of /usr/lib).\n\n# We'll do this by making sure the next character is a directory\n\n# separator.\n",
        "Line" : 139,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "###\n\n#\n\n# generate_pkg_config(\n\n#   output_file\n\n#   [NAME name]\n\n#   [DESCRIPTION description]\n\n#   [PREFIX prefix]\n\n#   [LIBDIR libdir]\n\n#   [INCLUDEDIR includedir]\n\n#   [DEPENDS …]\n\n#   [CFLAGS …]\n\n#   [LIBRARIES …])\n\n#\n\n# Arguments:\n\n#\n\n#   name: name of the package (default: ${CMAKE_PROJECT_NAME})\n\n#   description: human-readable description\n\n#   output_file: location to write the pkg-config file to.\n\n#   prefix: prefix to use (default: ${CMAKE_INSTALL_PREFIX}\n\n#   libdir: library dir (defualt: ${CMAKE_INSTALL_FULL_LIBDIR})\n\n#   exec_prefix: exec prefix (default: '${prefix}'\n\n#   depends: packages to depend on\n\n#   libraries: library targets\n\n###\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/RequireStandard.cmake" : {
      "ObjectId" : "606d233dfc72ef61a47cbf008d1f2a4629631535",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/SquashPlugin.cmake" : {
      "ObjectId" : "35cb46cd068e3beaa8246c1dc50219bc85612316",
      "LastModified" : "2017-10-31T15:59:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Mostly so we can use the plugins uninstalled\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "cmake/UseVala.cmake" : {
      "ObjectId" : "ead9652d36159c5a05cbbe00f6e0418c2e711792",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n# Compile vala files to their c equivalents for further processing. \n\n#\n\n# The \"vala_precompile\" function takes care of calling the valac executable on\n\n# the given source to produce c files which can then be processed further using\n\n# default cmake functions.\n\n#\n\n# The first parameter provided is a variable, which will be filled with a list\n\n# of c files outputted by the vala compiler. This list can than be used in\n\n# conjuction with functions like \"add_executable\" or others to create the\n\n# neccessary compile rules with CMake.\n\n#\n\n# The following sections may be specified afterwards to provide certain options\n\n# to the vala compiler:\n\n#\n\n# SOURCES\n\n#   A list of .vala files to be compiled. Please take care to add every vala\n\n#   file belonging to the currently compiled project or library as Vala will\n\n#   otherwise not be able to resolve all dependencies.\n\n#\n\n# PACKAGES\n\n#   A list of vala packages/libraries to be used during the compile cycle. The\n\n#   package names are exactly the same, as they would be passed to the valac\n\n#   \"--pkg=\" option.\n\n#\n\n# OPTIONS\n\n#   A list of optional options to be passed to the valac executable. This can be\n\n#   used to pass \"--thread\" for example to enable multi-threading support.\n\n#\n\n# DEFINITIONS\n\n#   A list of symbols to be used for conditional compilation. They are the same\n\n#   as they would be passed using the valac \"--define=\" option.\n\n#\n\n# CUSTOM_VAPIS\n\n#   A list of custom vapi files to be included for compilation. This can be\n\n#   useful to include freshly created vala libraries without having to install\n\n#   them in the system.\n\n#\n\n# GENERATE_VAPI\n\n#   Pass all the needed flags to the compiler to create a vapi for\n\n#   the compiled library. The provided name will be used for this and a\n\n#   <provided_name>.vapi file will be created.\n\n#\n\n# GENERATE_HEADER\n\n#   Let the compiler generate a header file for the compiled code. There will\n\n#   be a header file as well as an internal header file being generated called\n\n#   <provided_name>.h and <provided_name>_internal.h\n\n#\n\n# The following call is a simple example to the vala_precompile macro showing\n\n# an example to every of the optional sections:\n\n#\n\n#   find_package(Vala \"0.12\" REQUIRED)\n\n#   include(${VALA_USE_FILE})\n\n#\n\n#   vala_precompile(VALA_C\n\n#     SOURCES\n\n#       source1.vala\n\n#       source2.vala\n\n#       source3.vala\n\n#     PACKAGES\n\n#       gtk+-2.0\n\n#       gio-1.0\n\n#       posix\n\n#     DIRECTORY\n\n#       gen\n\n#     OPTIONS\n\n#       --thread\n\n#     CUSTOM_VAPIS\n\n#       some_vapi.vapi\n\n#     GENERATE_VAPI\n\n#       myvapi\n\n#     GENERATE_HEADER\n\n#       myheader\n\n#     )\n\n#\n\n# Most important is the variable VALA_C which will contain all the generated c\n\n# file names after the call.\n\n##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##\n\n# Copyright 2009-2010 Jakob Westhoff. All rights reserved.\n\n# Copyright 2010-2011 Daniel Pfeifer\n\n# \n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n# \n\n#    1. Redistributions of source code must retain the above copyright notice,\n\n#       this list of conditions and the following disclaimer.\n\n# \n\n#    2. Redistributions in binary form must reproduce the above copyright notice,\n\n#       this list of conditions and the following disclaimer in the documentation\n\n#       and/or other materials provided with the distribution.\n\n# \n\n# THIS SOFTWARE IS PROVIDED BY JAKOB WESTHOFF ``AS IS'' AND ANY EXPRESS OR\n\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\n\n# MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO\n\n# EVENT SHALL JAKOB WESTHOFF OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n\n# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n\n# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n\n# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n\n# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n# \n\n# The views and conclusions contained in the software and documentation are those\n\n# of the authors and should not be interpreted as representing official policies,\n\n# either expressed or implied, of Jakob Westhoff\n\n##\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Header and internal header is needed to generate internal vapi\n",
        "Line" : 159,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    },
    "docs/CMakeLists.txt" : {
      "ObjectId" : "602d0a4aed149c760c9e4ba606c7f4baae39cc2e",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "f5a6babb7ece66d2779f5833677b8d163f788832",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "packaging/CMakeLists.txt" : {
      "ObjectId" : "751ece337df343b400148dfac4c41ecaf8d745cd",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "packaging/rpm/CMakeLists.txt" : {
      "ObjectId" : "2aeaaa0c2519db344a8ddb6a80e46802ab087013",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/CMakeLists.txt" : {
      "ObjectId" : "f4a4a4ee1bbaa3ad95fa0483d7232411e7d8acec",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/brieflz/CMakeLists.txt" : {
      "ObjectId" : "66e2ef776b9559b58a22d7690f91230d358a3398",
      "LastModified" : "2017-10-31T15:59:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/brotli/CMakeLists.txt" : {
      "ObjectId" : "38d6e3d3783a64a3750a5bb252f7e53ae64ba8a2",
      "LastModified" : "2017-10-31T15:59:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/bsc/CMakeLists.txt" : {
      "ObjectId" : "837f362408e1bb101f2aacc2aa0e552ae7b2abc1",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/bzip2/CMakeLists.txt" : {
      "ObjectId" : "8165112b7dbf9c0ca72dff3d6c70ba87e211cd67",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/copy/CMakeLists.txt" : {
      "ObjectId" : "b6a4e97bade416c001994346502c8896104e806d",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/crush/CMakeLists.txt" : {
      "ObjectId" : "4d75b76baabb7cd07b7b6a45dc5573b4ccf24730",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/csc/CMakeLists.txt" : {
      "ObjectId" : "b2c2a575163e8535743466fd00a5174e92fc3c70",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/density/CMakeLists.txt" : {
      "ObjectId" : "9afed17b5202e3e899eda1cd3cd1db1e621365fd",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/doboz/CMakeLists.txt" : {
      "ObjectId" : "a9defe30b6893d69c067e9af5f077670e21383ae",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/fari/CMakeLists.txt" : {
      "ObjectId" : "a45268050809c71ca5c5a7e95c0de878fdb6f542",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/fastlz/CMakeLists.txt" : {
      "ObjectId" : "723f0b815a51f234db671b049874e043c3dd6279",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/gipfeli/CMakeLists.txt" : {
      "ObjectId" : "2cf1cbccf7673212e44f5c0a2d20f22b8a393c6f",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/heatshrink/CMakeLists.txt" : {
      "ObjectId" : "3f0adf16e41044b87ffcee09b7601686264529df",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/libdeflate/CMakeLists.txt" : {
      "ObjectId" : "2574e2104a3c6f55828a85c6fdac9873560af4a6",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/lz4/CMakeLists.txt" : {
      "ObjectId" : "d184d7ab9c655ffb8b79dcf52b22f76098f4d894",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/lzf/CMakeLists.txt" : {
      "ObjectId" : "160cd20030851463dc933a6c241b833068d8136d",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/lzfse/CMakeLists.txt" : {
      "ObjectId" : "36a1109219abe87afc298b17f360924fd37c1b64",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/lzg/CMakeLists.txt" : {
      "ObjectId" : "acaf3d3e8bd7c2cfa4b6a1860474ed4544091b76",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/lzham/CMakeLists.txt" : {
      "ObjectId" : "15995e83abe963c80d8f2a5eda2b1da8a467b78c",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/lzjb/CMakeLists.txt" : {
      "ObjectId" : "58e532a57b45812785afa7dd4a7bd725dce4703a",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/lzma/CMakeLists.txt" : {
      "ObjectId" : "d326616c3969aa9119a3e9192a5d0452f25c4798",
      "LastModified" : "2017-10-31T15:59:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/lzo/CMakeLists.txt" : {
      "ObjectId" : "25237916f5ee2ca2c63de95b8bda05da9647e8f9",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Contents of this function adapted from lzo/CMakeLists.txt\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Checks for header files\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# mfx_ACC_CHECK_HEADERS\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Checks for typedefs and structures\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# mfx_ACC_CHECK_SIZEOF + mfx_CHECK_SIZEOF\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Checks for library functions\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# mfx_ACC_CHECK_FUNCS\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# mfx_LZO_CHECK_ENDIAN\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# LZO_HAVE_CONFIG_H\n",
        "Line" : 83,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "plugins/miniz/CMakeLists.txt" : {
      "ObjectId" : "06257e270ec5887f99944832afede961bbc6de63",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/ms-compress/CMakeLists.txt" : {
      "ObjectId" : "afd09c32b76011a81e4d8bfb0ad12f418b4a4238",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/ncompress/CMakeLists.txt" : {
      "ObjectId" : "b214c45692202cb0fe1dea48ad8b00f8ebaa5642",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/quicklz/CMakeLists.txt" : {
      "ObjectId" : "6ae3da4ec38cbe39f7e6af9ca094407bbb55e7a4",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/snappy/CMakeLists.txt" : {
      "ObjectId" : "929b729f1e39e6220e986615d9cca075b54c0e7d",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/wflz/CMakeLists.txt" : {
      "ObjectId" : "619c34cf2a710fbc098984b704f4a3c712052dcc",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/yalz77/CMakeLists.txt" : {
      "ObjectId" : "d154c8d1947a604a2b0a118b15bcde79e83e2cd7",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/zlib-ng/CMakeLists.txt" : {
      "ObjectId" : "00dafb2fa2a95c9be1afa4b49df84ac03ad794db",
      "LastModified" : "2017-10-31T15:59:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Begin copied (and slightly modified) from zlib-ng\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## End copied from zlib-ng\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "plugins/zlib/CMakeLists.txt" : {
      "ObjectId" : "5cde91a11ba1575efd6878781da5bc4edcecd0c1",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/zling/CMakeLists.txt" : {
      "ObjectId" : "e3fff9103be5f3616a37391778f3b36e941c9ead",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/zpaq/CMakeLists.txt" : {
      "ObjectId" : "8ced71e46d8bfc1bf480db3eb83d6c0bac8f052e",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/zstd/CMakeLists.txt" : {
      "ObjectId" : "bfd75d9d01a166a5540c6706a8032a757ebdbc59",
      "LastModified" : "2017-10-31T15:59:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "squash/CMakeLists.txt" : {
      "ObjectId" : "0e12203b8263db67618441e9cb6513c6d28fd28f",
      "LastModified" : "2017-10-31T15:59:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# To make lcov happy\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For TinyCThread\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "df46145c5d139acadecf8e287982bde1bb881a48",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/CMakeLists.txt" : {
      "ObjectId" : "451ebac97deed7ba3d07e33739bcca6d269bce77",
      "LastModified" : "2017-02-12T05:09:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 64
  },
  "ElapsedTime" : 1290
}