{
  "Repository" : "53229565",
  "Revision" : "HEAD",
  "ObjectId" : "8e1c0e13f8ba916ee1fc271943f7a2d0a836e849",
  "CommitTime" : "2018-05-12T05:51:15Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "6ec05752c28d8bf05964ddfca58c4370f27657fc",
      "LastModified" : "2017-09-02T06:37:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#$(MAKE) -C $(SRC_DIR) test\n",
        "Line" : 19,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#GPU Docker build\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#GPU Docker prereq build\n\n# (To be used for testing new builds rapidly)\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#CPU-only Docker build\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO: Consider adding a mode 'develop=1' that makes symlinks instead of copying\n\n#         the library and headers.\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#$(INC_DIR)/bifrost/*.hpp\n",
        "Line" : 80,
        "CharPositionInLine" : 51
      },
      "CommentCount" : 6
    },
    "docs/Makefile" : {
      "ObjectId" : "f7d093d3f0ab4ce670a66a52388b7403368fee02",
      "LastModified" : "2017-05-28T19:25:18Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Minimal makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Put it first so that \"make\" without argument is like \"make help\".\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Catch-all target: route all unknown targets to Sphinx using the new\n\n# \"make mode\" option.  $(O) is meant as a shortcut for $(SPHINXOPTS).\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "python/Makefile" : {
      "ObjectId" : "fe0f3a80b0cc8c2734994647c64cdf6c96af24d4",
      "LastModified" : "2017-09-02T06:37:49Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# WAR for 'const char**' being generated as POINTER(POINTER(c_char)) instead of POINTER(c_char_p)\n",
        "Line" : 25,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# WAR for a buggy WAR in ctypesgen that breaks type checking and auto-byref functionality\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "# WAR for a buggy WAR in ctypesgen that breaks string buffer arguments (e.g., as in address.py)\n",
        "Line" : 29,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# WAR for psrdada API using char* instead of void* for buffer pointers, which\n\n#   otherwise get inadvertently converted to Python strings.\n",
        "Line" : 42,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 4
    },
    "src/Makefile" : {
      "ObjectId" : "793b613f92cf0d542bc744b82463647c8231d6f5",
      "LastModified" : "2018-05-09T04:29:19Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# These files require the CUDA Toolkit to compile\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# All CUDA archs supported by this version of nvcc\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Intersection of user-specified archs and supported archs\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Latest valid arch\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO: Need to deal with 32/64 detection here\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# All PTX archs included in the lib (typically only one)\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Latest PTX arch included in the lib\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# We prune out all archs except those to be included in libbifrost *and*\n\n#   the latest PTX arch included in libcufft_static.\n\n#   E.g., We may have GPU_ARCHS=\"35 61\" but libcufft_static might only\n\n#     include sm_60 and compute_60, so we need to keep compute_60 in order\n\n#     to support sm_61.\n",
        "Line" : 153,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Note: This needs to be compiled with \"-dc\" to make CUFFT callbacks work\n",
        "Line" : 160,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# TODO: \"nvcc -dlink ...\" does not error or warn when a -lblah is not found\n",
        "Line" : 165,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Note: $(LIB) must go at after OBJS\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "test/benchmarks/development_vs_gpuspec/Makefile" : {
      "ObjectId" : "6d62b281e34b3717a9cac94241d53dddc4801c49",
      "LastModified" : "2017-07-26T02:57:40Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Be silent\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 5
  },
  "ElapsedTime" : 1401
}