{
  "Repository" : "13380823",
  "Revision" : "HEAD",
  "ObjectId" : "03abaf7d699b2b6662587350633af44434a8fb37",
  "CommitTime" : "2019-04-11T18:48:19Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "e06113b42230883c900c920abcc9358643433315",
      "LastModified" : "2019-02-12T10:46:57Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Currently targeting to TRAVIS CI cmake version from 2011\n",
        "Line" : 1,
        "CharPositionInLine" : 38
      },
      "1" : {
        "Text" : "# CMake 3.0 Compiler id for Apple Clang is now ``AppleClang``.\n\n# CMake 3.0 ``MACOSX_RPATH`` is enabled by default.\n\n# CMake 3.0 Error on non-existent dependency in add_dependencies.\n\n# CMake 3.1 Only interpret ``if()`` arguments as variables or keywords when unquoted.\n\n# CMake 3.2 Honor link flags in ``try_compile()`` source-file signature.\n\n# CMake 3.3 Ninja requires custom command byproducts to be explicit.\n",
        "Line" : 3,
        "CharPositionInLine" : 12
      },
      "2" : {
        "Text" : "# --- Provide good defaults for searching for packages (i.e. ismrmrd)\n\n#set(CMAKE_PREFIX_PATH \"\")\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# check the compiler version\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#Compiler version is not set on Ubuntu 12.02 (gcc 4.6)\n",
        "Line" : 43,
        "CharPositionInLine" : 38
      },
      "6" : {
        "Text" : "#VERSIONING AND INSTALL PATHS\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#Set the build type to Release if not specified\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# build options for 64 bits system\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# whether to install dependencies\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# build options for OpenMP support\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#add_definitions(-DUNICODE -D_UNICODE)\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#to fix compiler limitations in Visual Studio Express\n",
        "Line" : 134,
        "CharPositionInLine" : 38
      },
      "13" : {
        "Text" : "#disable warnings, 4251: needs to have dll-interface to be used by clients\n\n#disable warnings, 4344: behavior change: use of explicit template arguments\n\n#disable warnings, 4996: the POSIX name for this item is deprecated. Instead, use the ISO C++ conformant name\n",
        "Line" : 135,
        "CharPositionInLine" : 29
      },
      "14" : {
        "Text" : "# The two flags below is to fix Windows problems in relation to multiple defined operators new/delete and some constructors that are defined in our headers\n\n#  set (CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} /FORCE:MULTIPLE\")\n\n#  set (CMAKE_SHARED_LINKER_FLAGS \"${CMAKE_SHARED_LINKER_FLAGS} /FORCE:MULTIPLE\")\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# whether to suppress compilation warnings\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# necessary for Windows and RHEL <=6 systems\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# We actually only use system and thread explicitly, but they require linking in date_time and chrono\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#  if (NOT WIN32)\n\n#    set(CUDA_PROPAGATE_HOST_FLAGS OFF)\n\n#  endif ()\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#set(CUDA_VERBOSE_BUILD ON)\n",
        "Line" : 283,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Compile kernels for compute models 1.0 and 2.0 as default for Cuda 4.1\n\n# Support compute model 3.0 from Cuda 4.2 and up\n\n# Support compute model 3.5 from Cuda 5 and up\n",
        "Line" : 285,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "#Add support for the default ubuntu package of gtest (which is not compiled\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# check whether ILP64 MKL should is used\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Read and parse armadillo config.hpp to find out whether BLAS uses long long\n",
        "Line" : 326,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# bart needs cuda\n",
        "Line" : 344,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# explicitly set it, just in case BUILD_MATLAB_SUPPORT was set to OFF\n\n# after Matlab was already found.\n",
        "Line" : 427,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# install dependencies for WIN32\n",
        "Line" : 463,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#  ---   Main Library  (end) ----\n",
        "Line" : 478,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Create package\n",
        "Line" : 480,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "apps/CMakeLists.txt" : {
      "ObjectId" : "9850e93bce4511eda809766ce5572fc450d68804",
      "LastModified" : "2016-06-30T14:43:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/clients/CMakeLists.txt" : {
      "ObjectId" : "254097f88dec664d2cb1648452f7cab1bca921e7",
      "LastModified" : "2016-06-30T14:43:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/clients/gadgetron_ismrmrd_client/CMakeLists.txt" : {
      "ObjectId" : "a86efddc2585f656af397286fefb36578810b684",
      "LastModified" : "2016-11-04T17:57:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/clients/utilities/CMakeLists.txt" : {
      "ObjectId" : "ba7063e3491e0dd512411a64b6c0ea6bab405b51",
      "LastModified" : "2016-06-30T14:43:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/gadgetron/CMakeLists.txt" : {
      "ObjectId" : "123bacb2ef7ae34718597a9041aaa9f1300c7c0b",
      "LastModified" : "2018-11-19T09:31:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# EndGadget.h\n\n# EndGadget.cpp\n\n# GadgetStreamInterface.cpp\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "apps/matlab/CMakeLists.txt" : {
      "ObjectId" : "a78d074032a8c7acb31201f43aba304e7ed356e8",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# matlab warpper\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/standalone/CMakeLists.txt" : {
      "ObjectId" : "3c97117fac68a0a5554f942b0d04d8be01bc5f14",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/standalone/cpu/CMakeLists.txt" : {
      "ObjectId" : "da2fee8b5b33fd00708bb828b24879f875d72464",
      "LastModified" : "2014-12-24T18:15:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory(MRI)\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_subdirectory(deblurring)\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "apps/standalone/cpu/denoising/2d/CMakeLists.txt" : {
      "ObjectId" : "28bc38190b0a7c73cde7baffee6544195fbd6cd8",
      "LastModified" : "2018-08-27T17:51:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/standalone/cpu/denoising/CMakeLists.txt" : {
      "ObjectId" : "5c4cec952f417a65103e547fae979731e4884c60",
      "LastModified" : "2013-03-22T01:33:45Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/standalone/cpu/gtplus/CMakeLists.txt" : {
      "ObjectId" : "d7ed182860fa20d4c13c067a662628142c6bce4e",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# matlab warpper\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/standalone/cpu/nfft/CMakeLists.txt" : {
      "ObjectId" : "179c6f89aa9ea76ceed6eae84190bb1b78cd2e63",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/standalone/cpu/registration/2d/CMakeLists.txt" : {
      "ObjectId" : "a893e63a9db90e41532329ca66a1201184c7e06b",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# matlab wrapper\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/standalone/cpu/registration/3d/CMakeLists.txt" : {
      "ObjectId" : "fe3e2616dd4b16efe03ce795b10e3b52664734b8",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/standalone/cpu/registration/CMakeLists.txt" : {
      "ObjectId" : "6b17369e05823459d1ddcabc9076a59b30dc2c82",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/standalone/gpu/CMakeLists.txt" : {
      "ObjectId" : "10c132d4b56cbe293adb25bc650a589e7feb993e",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/standalone/gpu/ct/CMakeLists.txt" : {
      "ObjectId" : "77738f04e608e48259871d5158f70ec59a4f6cee",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/standalone/gpu/ct/xray/CMakeLists.txt" : {
      "ObjectId" : "74b1babbd37a7157a9bf25840e636bfd6271f605",
      "LastModified" : "2018-07-09T17:25:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/standalone/gpu/deblurring/2d/CMakeLists.txt" : {
      "ObjectId" : "c429758cb16016a7a865fba293a00e5ac406cf3b",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/standalone/gpu/deblurring/3d/CMakeLists.txt" : {
      "ObjectId" : "725bebae6a58d0a7d5710a10dcdf08be88441ccb",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/standalone/gpu/deblurring/CMakeLists.txt" : {
      "ObjectId" : "5550044e7d4d6a8856404746297b4aea6bc37aff",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/standalone/gpu/denoising/2d/CMakeLists.txt" : {
      "ObjectId" : "35c3e7e3baf86a63538d409a44f00270d7b8967f",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/standalone/gpu/denoising/CMakeLists.txt" : {
      "ObjectId" : "5c4cec952f417a65103e547fae979731e4884c60",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/standalone/gpu/mri/CMakeLists.txt" : {
      "ObjectId" : "866ed620c3342f92f1fda2db24009e0ee42deaa4",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/standalone/gpu/mri/nfft/2d/CMakeLists.txt" : {
      "ObjectId" : "36fd0a5057a70710844ed614f994fbfda33c041f",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_executable(moco moco.cpp)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#target_link_libraries(moco gpusolvers gpureg gpucore gpuparallelmri gpuoperators gpunfft hostutils ${CUDA_LIBRARIES})\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "apps/standalone/gpu/mri/nfft/CMakeLists.txt" : {
      "ObjectId" : "68dd4c7f062f12c2b0d5f8e39609064fc7fda037",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/standalone/gpu/mri/nfft/ms2d/CMakeLists.txt" : {
      "ObjectId" : "a2600e820d552ed6084202b5011b43a8b93c9ece",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/standalone/gpu/mri/sense/CMakeLists.txt" : {
      "ObjectId" : "11e472de3f6e24d84fb22efdd684b95461b0c621",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory(cartesian)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/standalone/gpu/mri/sense/noncartesian/CMakeLists.txt" : {
      "ObjectId" : "c319e2b698daae5041e7c1479596e261e98f9410",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/standalone/gpu/mri/sense/noncartesian/radial/2d_golden_ratio/CMakeLists.txt" : {
      "ObjectId" : "0b5b049d1ef3c75bac60c4ee5fdc861d161322f4",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/standalone/gpu/mri/sense/noncartesian/radial/2d_golden_ratio_gui/CMakeLists.txt" : {
      "ObjectId" : "b5b23dd57eb2580e052d21a7558be5d30fb1245e",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#We need binary and source dirs in this because of the header files created by the make process\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/standalone/gpu/mri/sense/noncartesian/radial/2d_golden_ratio_kt/CMakeLists.txt" : {
      "ObjectId" : "5826cb53f2d49f10185e0c2e953d5a066e039188",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/standalone/gpu/mri/sense/noncartesian/radial/CMakeLists.txt" : {
      "ObjectId" : "5767e0a8c46ddf369b1b6f2848afed6adcc2e4d9",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#if (QT4_FOUND AND GLEW_FOUND AND GLUT_FOUND AND OPENGL_FOUND)\n\n#  add_subdirectory(2d_golden_ratio_gui)\n\n#endif ()\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/standalone/gpu/registration/2d/CMakeLists.txt" : {
      "ObjectId" : "9d33eb7559bb7283afdaa9d5157fe5a4788e31dd",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_executable(test_reg_sense_recon test_reg_sense_recon.cpp)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#target_link_libraries(test_reg_sense_recon \n\n#  hostutils \n\n#  gpureg \n\n#  gpucore \n\n#  gpuoperators\n\n#  gpusolvers \n\n#  gpunfft \n\n#  gpuparallelmri \n\n#  ${CUDA_LIBRARIES}\n\n#  )\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "apps/standalone/gpu/registration/3d/CMakeLists.txt" : {
      "ObjectId" : "3980478c78b0c40e190d442f2dc83c6bd2ae7cf2",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/standalone/gpu/registration/CMakeLists.txt" : {
      "ObjectId" : "4b458f11f437078bf2f7c62e637efa3240bbfb1d",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "chroot/CMakeLists.txt" : {
      "ObjectId" : "fb0810d90b3d291eec0dcf43477ea39a314941b9",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/CMakeLists.txt" : {
      "ObjectId" : "7d6ae9f9c441a91db241d0b0f4900a4b39624465",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#if (UNIX)\n\n#    if (NOT APPLE)\n\n#        install(FILES ./debian/postinst DESTINATION ${GADGETRON_INSTALL_CMAKE_PATH} COMPONENT main)\n\n#        install(FILES ./debian/postinst_web DESTINATION ${GADGETRON_INSTALL_CMAKE_PATH} COMPONENT web)\n\n#    endif ()\n\n#endif ()\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindACE.cmake" : {
      "ObjectId" : "d377f4b6b03653a21af887dc186d270b6d3cc06d",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\r\n\n# Find the ACE client includes and library\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module defines\r\n\n# ACE_INCLUDE_DIR, where to find ace.h\r\n\n# ACE_LIBRARIES, the libraries to link against ... !! NOT header is old !! ...\r\n\n# ACE_FOUND, if false, you cannot build anything that requires ACE\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This is the new header...\r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "######################################################################## \r\n\n## check pkg-config for ace information, if available \r\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "######################################################################## \r\n\n##  general find \r\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# in YARP1, config was in another directory \r\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "######################################################################## \r\n\n## OS-specific extra linkage \r\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Solaris needs some extra libraries that may not have been found already \r\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#message(STATUS \"need to link solaris-specific libraries\") \r\n\n#  link_libraries(socket rt) \r\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Windows needs some extra libraries \r\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#message(STATUS \"need to link windows-specific libraries\") \r\n\n#link_libraries(winmm) \r\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "######################################################################## \r\n\n## finished - now just set up flags and complain to user if necessary \r\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# TSS: backwards compatibility\r\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "cmake/FindArmadillo.cmake" : {
      "ObjectId" : "9fabca8b35b214e3800e86be5cd0fbc3ac50c8f2",
      "LastModified" : "2018-07-06T17:18:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Armadillo\n\n# Find the Armadillo C++ library\n\n#\n\n# Using Armadillo:\n\n#  find_package(Armadillo REQUIRED)\n\n#  include_directories(${ARMADILLO_INCLUDE_DIRS})\n\n#  add_executable(foo foo.cc)\n\n#  target_link_libraries(foo ${ARMADILLO_LIBRARIES})\n\n# This module sets the following variables:\n\n#  ARMADILLO_FOUND - set to true if the library is found\n\n#  ARMADILLO_INCLUDE_DIRS - list of required include directories\n\n#  ARMADILLO_LIBRARIES - list of libraries to be linked\n\n#  ARMADILLO_VERSION_MAJOR - major version number\n\n#  ARMADILLO_VERSION_MINOR - minor version number\n\n#  ARMADILLO_VERSION_PATCH - patch version number\n\n#  ARMADILLO_VERSION_STRING - version number as a string (ex: \"1.0.4\")\n\n#  ARMADILLO_VERSION_NAME - name of the version (ex: \"Antipodean Antileech\")\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2011 Clement Creusot <creusot@cs.york.ac.uk>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# UNIX paths are standard, no need to write.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Extract version information from <armadillo>\n\n# ------------------------------------------------------------------------\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# WARNING: Early releases of Armadillo didn't have the arma_version.hpp file.\n\n# (e.g. v.0.9.8-1 in ubuntu maverick packages (2001-03-15))\n\n# If the file is missing, set all values to 0\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Read and parse armdillo version header file for version number\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# WARNING: The number of spaces before the version name is not one.\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#======================\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Checks 'REQUIRED', 'QUIET' and versions.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# version_var fails with cmake < 2.8.4.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Hide internal variables\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#======================\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "cmake/FindBART.cmake" : {
      "ObjectId" : "d590e18808c44eb5fcd494807498dbeb1b9fc999",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "############################################################################\n\n# FindBART\n\n#\n\n# Find BART includes and libraries\n\n# \n\n# This module defines the following variables:\n\n#\n\n# BART_ROOT            -where to find bart root \n\n# BART_INCLUDE_DIR     -where to find the main.h and bart_embed_api.h\n\n# BART_LIBARIES_DIR    -List of libraries when using bart\n\n# BART_DIR             -where to find bart source code \n\n# BART_FOUND           -Set to True if bart is found\n\n#\n\n# BART_VERSION_STRING  -The version of bart found (major.minor.patch)\n\n# BART_VERSION_MAJOR   -The major version of bart\n\n# BART_VERSION_MINOR   -The minor version of bart\n\n# BART_VERSION_PATCH   -The patch version of bart\n\n############################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set default directories\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Get BART version\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindCBLAS.cmake" : {
      "ObjectId" : "5d7a9bbe72d8b12c14aef33b16db4c1eac44be7f",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindCUDA_advanced.cmake" : {
      "ObjectId" : "030e3c46dbc84c2ef30cba3b21101615eba6d6ff",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Check for GPUs present and their compute capability\n\n# based on http://stackoverflow.com/questions/2285185/easiest-way-to-test-for-existence-of-cuda-capable-gpu-from-cmake/2297877#2297877 (Christopher Bruns)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# COMPILE_RESULT_VAR is TRUE when compile succeeds\n\n# RUN_RESULT_VAR is zero when a GPU is found\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/FindDCMTK.cmake" : {
      "ObjectId" : "f8e4affed4f3616bd090c3f28de6d3c72a7b1814",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - find DCMTK libraries and applications\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  DCMTK_INCLUDE_DIRS   - Directories to include to use DCMTK\n\n#  DCMTK_LIBRARIES     - Files to link against to use DCMTK\n\n#  DCMTK_FOUND         - If false, don't try to use DCMTK\n\n#  DCMTK_DIR           - (optional) Source directory for DCMTK\n\n#  DCMTK_HOME          - install path for dcmtk binaries/headers/libs\n\n#\n\n# DCMTK_DIR can be used to make it simpler to find the various include\n\n# directories and compiled libraries if you've just compiled it in the\n\n# source tree. Just set it to the root of the tree where you extracted\n\n# the source (default to /usr/include/dcmtk/)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================\n\n# Copyright 2004-2009 Kitware, Inc.\n\n# Copyright 2009-2010 Mathieu Malaterre <mathieu.malaterre@gmail.com>\n\n# Copyright 2010 Thomas Sondergaard <ts@medical-insight.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Written for VXL by Amitha Perera.\n\n# Upgraded for GDCM by Mathieu Malaterre.\n\n# Modified for EasyViz by Thomas Sondergaard.\n\n# Updated to work with non-standard install paths by Joseph Naegele\n\n#\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Allow for non-standard dcmtk installation locations\n\n# Set the DCMTK_HOME environment variable to make life easier!!\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Compatibility: This variable is deprecated\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/FindFFTW3.cmake" : {
      "ObjectId" : "ab54c0cbcc1d8abca16a83294f91f66d73b9324c",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find FFTW3.\n\n# Usage: find_package(FFTW3 [COMPONENTS [single double long-double threads]])\n\n#\n\n# Variables used by this module:\n\n#  FFTW3_ROOT_DIR             - FFTW3 root directory\n\n# Variables defined by this module:\n\n#  FFTW3_FOUND                - system has FFTW3\n\n#  FFTW3_INCLUDE_DIR          - the FFTW3 include directory (cached)\n\n#  FFTW3_INCLUDE_DIRS         - the FFTW3 include directories\n\n#                               (identical to FFTW3_INCLUDE_DIR)\n\n#  FFTW3[FL]?_LIBRARY         - the FFTW3 library - double, single(F), \n\n#                               long-double(L) precision (cached)\n\n#  FFTW3[FL]?_THREADS_LIBRARY - the threaded FFTW3 library - double, single(F), \n\n#                               long-double(L) precision (cached)\n\n#  FFTW3_LIBRARIES            - list of all FFTW3 libraries found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (C) 2009-2010\n\n# ASTRON (Netherlands Institute for Radio Astronomy)\n\n# P.O.Box 2, 7990 AA Dwingeloo, The Netherlands\n\n#\n\n# This file is part of the LOFAR software suite.\n\n# The LOFAR software suite is free software: you can redistribute it and/or\n\n# modify it under the terms of the GNU General Public License as published\n\n# by the Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# The LOFAR software suite is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License along\n\n# with the LOFAR software suite. If not, see <http://www.gnu.org/licenses/>.\n\n#\n\n# $Id: FindFFTW3.cmake 15918 2010-06-25 11:12:42Z loose $\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use double precision by default.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Loop over each component.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If using threads, we need to link against threaded libraries as well.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Keep a list of variable names that we need to pass on to\n\n# find_package_handle_standard_args().\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Search for all requested libraries.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Search for the header file.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set FFTW3_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake/FindGLEW.cmake" : {
      "ObjectId" : "85d35642f1f4d3f1f2e7d94d8b3d1b3a94fd339c",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GLEW\n\n# Once done this will define\n\n#  \n\n#  GLEW_FOUND        - system has GLEW\n\n#  GLEW_INCLUDE_DIR  - the GLEW include directory\n\n#  GLEW_LIBRARY_DIR  - where the libraries are\n\n#  GLEW_LIBRARY      - Link these to use GLEW\n\n#   \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/FindGMatlab.cmake" : {
      "ObjectId" : "bcbda56c7ded6088c8c6a2dd7b4c0b7a8d1fdbc7",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - this module looks for Matlab\n\n# Defines:\n\n#  MATLAB_INCLUDE_DIR:  include path for mex.h, engine.h\n\n#  MATLAB_LIBRARIES:    required libraries: libmex, etc\n\n#  MATLAB_JARS:         optional java jars: jmi.jar, util.jar, etc\n\n#  MATLAB_MEX_LIBRARY:  path to libmex.lib\n\n#  MATLAB_MX_LIBRARY:   path to libmx.lib\n\n#  MATLAB_ENG_LIBRARY:  path to libeng.lib\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n\n#\n\n#  Modified April 2013 - Joseph Naegele\n\n#   - Updated to work on OS X 10._\n\n#   - Added Matlab's Java Jars as MATLAB_JARS\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Assume people are generally using 7.1,\n\n# if using 7.0 need to link to: ../extern/lib/win32/microsoft/msvc70\n",
        "Line" : 35,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Same here, there are also: bcc50 and bcc51 directories\n",
        "Line" : 40,
        "CharPositionInLine" : 16
      },
      "4" : {
        "Text" : "# find each library\n\n# give it it's own cmake variable\n\n# add it to the list of libraries\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# don't pick up libmx on OS X > 10.9\n",
        "Line" : 80,
        "CharPositionInLine" : 32
      },
      "CommentCount" : 6
    },
    "cmake/FindGadgetron.cmake" : {
      "ObjectId" : "d1abae877629d0235c3fcdc638d0ac8165bb5431",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Find the Gadgetron Installation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module defines\n\n# GADGETRON_INCLUDE_DIR, where to finds Gadget.h\n\n# GADGETRON_HOME, Gadgetron Root Dir\n\n# GADGETRON_LIB_DIR, This is where all the installed gadgetron libraries live\n\n# GADGETRON_FOUND, if false, you cannot build anything that requires Gadgetron\n\n# GADGETRON_VERSION_STRING, if Gadgetron is found, this verison string will be set\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Keep a list of variable names that we need to pass on to\n\n# find_package_handle_standard_args().\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Search for the header file.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set FFTW_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If Cuda is detected on the system some header files will be needed\n\n# -- whether Cuda is used or not --\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Extract version information from \"incluce/gadgetron/gadgetron_config.h\"\n\n# ------------------------------------------------------------------------\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Read and parse header file for version number\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 8
    },
    "cmake/FindGperftools.cmake" : {
      "ObjectId" : "cd990662cf1b197890f1e0662a1cde08b6f03ca3",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tries to find Gperftools.\n\n#\n\n# Usage of this module as follows:\n\n#\n\n#     find_package(Gperftools)\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n#  Gperftools_ROOT_DIR  Set this variable to the root installation of\n\n#                       Gperftools if the module has problems finding\n\n#                       the proper installation path.\n\n#\n\n# Variables defined by this module:\n\n#\n\n#  GPERFTOOLS_FOUND              System has Gperftools libs/headers\n\n#  GPERFTOOLS_LIBRARIES          The Gperftools libraries (tcmalloc & profiler)\n\n#  GPERFTOOLS_INCLUDE_DIR        The location of Gperftools headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindMKL.cmake" : {
      "ObjectId" : "38999712c63e7e4b2f5b9121059da8d8c18593c9",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the MKL libraries\n\n# Modified from Armadillo's ARMA_FindMKL.cmake\n\n# This module defines\n\n#  MKL_INCLUDE_DIR, the directory for the MKL headers\n\n#  MKL_LIB_DIR, the directory for the MKL library files\n\n#  MKL_COMPILER_LIB_DIR, the directory for the MKL compiler library files\n\n#  MKL_LIBRARIES, the libraries needed to use Intel's implementation of BLAS & LAPACK.\n\n#  MKL_FOUND, If false, do not try to use MKL; if true, the macro definition USE_MKL is added.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the include path\n\n# TODO: what if MKL is not installed in /opt/intel/mkl?\n\n# try to find at /opt/intel/mkl\n\n# in windows, try to find MKL at C:/Program Files (x86)/Intel/Composer XE/mkl\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set(MKL_LIBRARIES ${MKL_LIBRARIES} mkl_gnu_thread)\n\n#set(MKL_LIBRARIES ${MKL_LIBRARIES} gomp)\n",
        "Line" : 116,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Extract version information from <mkl.h>\n\n# ------------------------------------------------------------------------\n",
        "Line" : 132,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Read and parse header file for version number\n",
        "Line" : 142,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Read and parse header file for version number\n",
        "Line" : 158,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# mark_as_advanced(MKL_LIBRARY)\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/FindNumPy.cmake" : {
      "ObjectId" : "2f2b75434b267a390e34833771098493061ef625",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the NumPy libraries\r\n\n# This module finds if NumPy is installed, and sets the following variables\r\n\n# indicating where it is.\r\n\n#\r\n\n# TODO: Update to provide the libraries and paths for linking npymath lib.\r\n\n#\r\n\n#  NUMPY_FOUND               - was NumPy found\r\n\n#  NUMPY_VERSION             - the version of NumPy found as a string\r\n\n#  NUMPY_VERSION_MAJOR       - the major version number of NumPy\r\n\n#  NUMPY_VERSION_MINOR       - the minor version number of NumPy\r\n\n#  NUMPY_VERSION_PATCH       - the patch version number of NumPy\r\n\n#  NUMPY_VERSION_DECIMAL     - e.g. version 1.6.1 is 10601\r\n\n#  NUMPY_INCLUDE_DIRS        - path to the NumPy include files\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#============================================================================\r\n\n# Copyright 2012 Continuum Analytics, Inc.\r\n\n#\r\n\n# MIT License\r\n\n#\r\n\n# Permission is hereby granted, free of charge, to any person obtaining\r\n\n# a copy of this software and associated documentation files\r\n\n# (the \"Software\"), to deal in the Software without restriction, including\r\n\n# without limitation the rights to use, copy, modify, merge, publish,\r\n\n# distribute, sublicense, and/or sell copies of the Software, and to permit\r\n\n# persons to whom the Software is furnished to do so, subject to\r\n\n# the following conditions:\r\n\n#\r\n\n# The above copyright notice and this permission notice shall be included\r\n\n# in all copies or substantial portions of the Software.\r\n\n#\r\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\r\n\n# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\r\n\n# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\n\n# OTHER DEALINGS IN THE SOFTWARE.\r\n\n#\r\n\n#============================================================================\r\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Finding NumPy involves calling the Python interpreter\r\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Convert the process output into a list\r\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The output from Python was unexpected. Raise an error always\r\n\n# here, because we found NumPy, but it appears to be corrupted somehow.\r\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Make sure all directory separators are '/'\r\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Get the major and minor version numbers\r\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/FindOctave.cmake" : {
      "ObjectId" : "0e20696a237dfc538a1a2470ab98fe9466f13b5a",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the build flags to compile octave shared objects (oct and mex files)\n\n# Once done this will define\n\n#\n\n# OCTAVE_FOUND - if OCTAVE is found\n\n# OCTAVE_CXXFLAGS - extra flags\n\n# OCTAVE_INCLUDE_DIRS - include directories\n\n# OCTAVE_LINK_DIRS - link directories\n\n# OCTAVE_LIBRARY_RELEASE - the relase version\n\n# OCTAVE_LIBRARY_DEBUG - the debug version\n\n# OCTAVE_LIBRARY - a default library, with priority debug.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use mkoctfile\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/FindPLplot.cmake" : {
      "ObjectId" : "d77e5097773267998cdc6c2c03c0e5b8fba87cda",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the PLplot libraries\n\n# This module defines\n\n#  PLPLOT_INCLUDE_DIR, the directory for the PLplot headers\n\n#  PLPLOT_LIB_DIR, the directory for the PLplot library files\n\n#  PLPLOT_LIBRARIES, the libraries needed to use PLplot.\n\n#  PLPLOT_FOUND, If false, do not try to use PLplot; if true, the macro definition USE_PLPLOT is added.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# linux distribution has older PLplot version\n\n# the 'd' means double precision, not debug\n",
        "Line" : 44,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 2
    },
    "cmake/FindPython3.cmake" : {
      "ObjectId" : "1b11ca839575bb618890cc3f1622b75ec7bf7f1a",
      "LastModified" : "2018-12-03T20:31:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the python 3 libraries\n\n#   This module defines\n\n#   PYTHONLIBS_FOUND           - have the Python libs been found\n\n#   PYTHON_EXECUTABLE          - path to python executable\n\n#   PYTHON_LIBRARIES           - path to the python library\n\n#   PYTHON_INCLUDE_PATH        - path to where Python.h is found (deprecated)\n\n#   PYTHON_INCLUDE_DIRS        - path to where Python.h is found\n\n#   PYTHON_DEBUG_LIBRARIES     - path to the debug library (deprecated)\n\n#   PYTHONLIBS_VERSION_STRING  - version of the Python libs found (since CMake 2.8.8)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find the python version\n",
        "Line" : 93,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 3
    },
    "cmake/FindZFP.cmake" : {
      "ObjectId" : "93f9c72892c5450b25edf1b35ac528c54adf567c",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\r\n\n# Find the ZFP includes and library\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This module defines\r\n\n# ZFP_INCLUDE_DIR, where to find zfp.h\r\n\n# ZFP_LIBRARIES, the libraries to link against\r\n\n# ZFP_FOUND, if false, you cannot build anything that requires ZFP\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "######################################################################## \r\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TSS: backwards compatibility\r\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/InstallLinuxDependencies.cmake" : {
      "ObjectId" : "490800e6e4e6d8a13aa7b320d5a596b6345d4d1d",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#install dependencies\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/InstallWinDependencies.cmake" : {
      "ObjectId" : "f32b4cc8287c4d1622078707864b81967cb62082",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#install dependencies\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/gadgetron_cpack.cmake" : {
      "ObjectId" : "a6ac619bd529bd8c2d39fd83308a3ac1c8c73204",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n# Find available package generators\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DEB\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Enable/Disable automatic search for dependencies:\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Enable/Disable component install for CPack generator DEB\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set dependencies explicitly\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Where the package metadata are\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Where the package to be installed\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# NSLS\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Set dependencies explictly\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "cmake/gadgetron_web_cpack.cmake" : {
      "ObjectId" : "60a815397ef519f937d882a388d856cf97ea5521",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n# Find available package generators\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# DEB\n",
        "Line" : 6,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# NSLS\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# set dependencies explictly\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# where the package metadata are\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# where the package to be installed\n\n# set(CPACK_PACKAGE_INSTALL_DIRECTORY ${CMAKE_INSTALL_PREFIX})\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "9a9e706a93b2d9952df33768ac13c2e4bd412b92",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/doxygen/CMakeLists.txt" : {
      "ObjectId" : "11382f280cc3bdf6e5bea7e824ecb122ed0bb52f",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gadgets/CMakeLists.txt" : {
      "ObjectId" : "d392682ac859d9dc2a1f54fdbfc64a8a4d6faf1f",
      "LastModified" : "2019-04-03T15:13:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These dependencies should have been found already to even get in here, but we play safe\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note: main CMakeLists.txt already finds PythonLibs and NumPy\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# BUILD_PYTHON_SUPPORT\n",
        "Line" : 50,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 3
    },
    "gadgets/bart/CMakeLists.txt" : {
      "ObjectId" : "0ace26aca4aa063056c1b444e27081788092e1f4",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# double colon only for imported or alias libraries\n",
        "Line" : 2,
        "CharPositionInLine" : 30
      },
      "1" : {
        "Text" : "# ==============================================================================\n\n# First try to find either the BARTmain library or a path to the BART source code\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ==============================================================================\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ------------------------------------------------------------------------------\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "gadgets/cartesian/CMakeLists.txt" : {
      "ObjectId" : "1f34d9e65d8a7b315001c76f79c566c19e8e7cff",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gadgets/cmr/CMakeLists.txt" : {
      "ObjectId" : "e70ea56d5d64378010f164859e97b3c81aa38257",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These are needed to get the linking to work properly when\n\n# MKL is installed, but Armadillo is NOT using it.\n",
        "Line" : 7,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "gadgets/dicom/CMakeLists.txt" : {
      "ObjectId" : "457fe03af101dd623ec26b842b524ae16019a4f9",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DCMTK-necessary preprocessor flags\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sanity check:\n\n#message(\"DCMTK ${DCMTK_HOME}\")\n\n#message(\"Include: ${DCMTK_INCLUDE_DIRS}\")\n\n#message(\"Libraries: ${GT_DICOM_LIBRARIES}\")\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for GadgetIsmrmrdReadWrite.h\n",
        "Line" : 30,
        "CharPositionInLine" : 48
      },
      "CommentCount" : 3
    },
    "gadgets/distributed/CMakeLists.txt" : {
      "ObjectId" : "478e183514e0115dd8c32db56e1bf9f1fa656fc4",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gadgets/epi/CMakeLists.txt" : {
      "ObjectId" : "6b670c83868d6b1a9850afe1ec5f2408d63452ff",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gadgets/fatwater/CMakeLists.txt" : {
      "ObjectId" : "5e052a602934e3a9380927e777bd1b99a03c5bab",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gadgets/gpu/CMakeLists.txt" : {
      "ObjectId" : "b5ea67c008e3ade043cd731b94001046d75c0de4",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gadgets/grappa/CMakeLists.txt" : {
      "ObjectId" : "5a38d3f269aeb11688c3b863ea6d4aa7b3f4fdf1",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gadgets/grappa/config/CMakeLists.txt" : {
      "ObjectId" : "715f76b4cb33e36a55ab5253c9efd35d45097b5c",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gadgets/hyper/CMakeLists.txt" : {
      "ObjectId" : "d32e25b18b671c869d931a01b9230c51015c12d8",
      "LastModified" : "2018-12-03T20:31:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gadgets/interventional_mri/CMakeLists.txt" : {
      "ObjectId" : "6f26a6e558aba08ceb9f49ccc309773617e5e12a",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gadgets/matlab/CMakeLists.txt" : {
      "ObjectId" : "296ee84efa6f36995f4d30fa4a076d1e3494b31a",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gadgets/moco/CMakeLists.txt" : {
      "ObjectId" : "2763f03d990ba0b152fb5032bbd901862fe96bf4",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gadgets/moco/config/CMakeLists.txt" : {
      "ObjectId" : "4344d3f792c757ccec5914dd0f3da536d60a4519",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gadgets/mri_core/CMakeLists.txt" : {
      "ObjectId" : "55964abfc6408867e1087f8f6862cba8d4cd8568",
      "LastModified" : "2019-04-03T15:13:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This is a fix for the bug in SVD when MKL is multi-threaded\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# These are needed to get the linking to work properly when\n\n# MKL is installed, but Armadillo is NOT using it.\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# if there is python, add gadgets using python\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "gadgets/mri_noncartesian/CMakeLists.txt" : {
      "ObjectId" : "20daac9ea4bf4124f464b9fd24a033f7b6ee12c0",
      "LastModified" : "2018-12-03T20:31:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gadgets/plplot/CMakeLists.txt" : {
      "ObjectId" : "3e909abb1cd7718c9765106fb72279e7bc6a93aa",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gadgets/pmri/CMakeLists.txt" : {
      "ObjectId" : "a5c2564fc753e674872a3c9819563454527c5141",
      "LastModified" : "2018-12-03T20:31:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The two flags below is to fix Windows problems in relation to multiple defined constructors in our headers\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "gadgets/pmri/config/CMakeLists.txt" : {
      "ObjectId" : "5198082f85d2e76c970bce66b518aaccf92a10ad",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#install (FILES \n\n#  generic_gpusense_cg_unoptimized.xml \n\n#  generic_gpusense_sb_unoptimized.xml \n\n#  DESTINATION ${GADGETRON_INSTALL_CONFIG_PATH})\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "gadgets/python/CMakeLists.txt" : {
      "ObjectId" : "608a0512cf89727b6c4215f9b0cec8168c557273",
      "LastModified" : "2019-04-03T15:13:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: The Gadgetron Python code uses Numpy C-API code\n\n# from Numpy versions < 1.7. If Numpy version is >= 1.7\n\n# you will get compiler warnings\n\n#add_definitions(-DNPY_NO_DEPRECATED_API=NPY_1_7_API_VERSION)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#We should probably not set soversion on the python module. Causes problems with clang\n\n#set_target_properties(GadgetronPythonMRI PROPERTIES VERSION ${GADGETRON_VERSION_STRING} SOVERSION ${GADGETRON_SOVERSION})\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#add_subdirectory(examples)\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "gadgets/python/config/CMakeLists.txt" : {
      "ObjectId" : "8b137891791fe96927ad78e64b0aad7bded08bdc",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gadgets/python/utils/CMakeLists.txt" : {
      "ObjectId" : "de816ca883887e29a2b816b763b71a325f79b639",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gadgets/radial/CMakeLists.txt" : {
      "ObjectId" : "6bfcfc146e3216d3ce879520c9340108dce4ddf0",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gadgets/radial/config/CMakeLists.txt" : {
      "ObjectId" : "7b066389b1e68b72deadba2f290ec1c29a7ea687",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gadgets/spiral/CMakeLists.txt" : {
      "ObjectId" : "5d600163b4541c32b9826e182dcf9c9d16246698",
      "LastModified" : "2019-04-03T15:13:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gadgets/spiral/config/CMakeLists.txt" : {
      "ObjectId" : "d2f9c7a257115d163f65a5cc9adf3bf730306f0f",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "gadgets/util/CMakeLists.txt" : {
      "ObjectId" : "eab24bc4b40ed01247e1e6c9b25a58c692a9b993",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "617b1fb384e35baea51acde48cb92e1f5c7f782c",
      "LastModified" : "2019-04-03T15:13:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#        vector_td_test.cpp\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/performance/CMakeLists.txt" : {
      "ObjectId" : "f8bdf67c4575a458638a988701a8caafd1b81183",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/CMakeLists.txt" : {
      "ObjectId" : "a67509159fc97c0be263bec228420931dfa37303",
      "LastModified" : "2019-04-03T15:13:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Should we compile the python toolbox\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "toolboxes/cloudbus/CMakeLists.txt" : {
      "ObjectId" : "9c111c45e140e75ff40a93a2a0683e3a54298485",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/cmr/CMakeLists.txt" : {
      "ObjectId" : "b03b0e53530735db5ca10a0189709ecedd4c5fe8",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/core/CMakeLists.txt" : {
      "ObjectId" : "8d4efde1b9f6770767ebd8ecc0585325e493f747",
      "LastModified" : "2019-04-03T15:13:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/core/cpu/CMakeLists.txt" : {
      "ObjectId" : "996299283d9d35b5cde18eca6844353cef69524d",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#if (MKL_FOUND)\n\n#    include_directories( ${MKL_INCLUDE_DIR} )\n\n#    link_directories( ${MKL_LIB_DIR} ${MKL_COMPILER_LIB_DIR} )\n\n#endif ()\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "toolboxes/core/cpu/hostutils/CMakeLists.txt" : {
      "ObjectId" : "11cfde59a9bce4bd990337ecdb3f91a1ea7f9ab7",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/core/cpu/math/CMakeLists.txt" : {
      "ObjectId" : "1e075fa89a4aa98b51e0888a2839bde2759125e4",
      "LastModified" : "2019-04-03T15:13:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/core/gpu/CMakeLists.txt" : {
      "ObjectId" : "ef87251a2100ad9392492d4ae58b872d74582823",
      "LastModified" : "2019-04-03T15:13:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/ct/CMakeLists.txt" : {
      "ObjectId" : "b6277b2ac43804dee79a88fff26a836d28406933",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/ct/xray/CMakeLists.txt" : {
      "ObjectId" : "a4a2f348ec63963d2fd7af6227e5a8ab4c37cb49",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/ct/xray/gpu/CMakeLists.txt" : {
      "ObjectId" : "f2d55be3de56965417e5b371120ae0ec35f63650",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/denoise/CMakeLists.txt" : {
      "ObjectId" : "08c4eaa5d49fe9afb4b8de8ee95b448b98d8c879",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/dwt/CMakeLists.txt" : {
      "ObjectId" : "b9ac3c615eadb9ea4227482b9a207843d883466e",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/dwt/cpu/CMakeLists.txt" : {
      "ObjectId" : "da7cf67abc3ca0acbccdd4b5b2f5fc7e12b9a214",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/dwt/gpu/CMakeLists.txt" : {
      "ObjectId" : "849fdae76cd1481be4f7cb623bfb8f84000ca70e",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/fatwater/CMakeLists.txt" : {
      "ObjectId" : "149540f61a29875633f8c40bd44f4dd1d8e6b39c",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/ffd/CMakeLists.txt" : {
      "ObjectId" : "850f7210003b0c6b954d693aadc33f99d26e76e6",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_library(gadgetron_toolbox_cpuffd SHARED ${ffd_header_files} ${ffd_src_files} )\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set_target_properties(gadgetron_toolbox_cpuffd PROPERTIES VERSION ${GADGETRON_VERSION_STRING} SOVERSION ${GADGETRON_SOVERSION})\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#install(TARGETS gadgetron_toolbox_cpuffd DESTINATION lib COMPONENT main)\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "toolboxes/fft/CMakeLists.txt" : {
      "ObjectId" : "eef3657e8f9a4811fa9213886f382e306eaaaac7",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/fft/cpu/CMakeLists.txt" : {
      "ObjectId" : "dfb2393cb951ad827462e65f4f8c1247fab9056d",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/fft/gpu/CMakeLists.txt" : {
      "ObjectId" : "82e79db6dcdd50a4e9db2e61a2a6f29bff5a41ec",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/gadgettools/CMakeLists.txt" : {
      "ObjectId" : "9d3ddc5ea2b775d4fe6cd7099962d399f3c79e62",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/gadgettools/ismrmrd/CMakeLists.txt" : {
      "ObjectId" : "33ba686be9b343d96f7cdc98b309ec15bab65f3e",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/image/CMakeLists.txt" : {
      "ObjectId" : "f23df668f718ad9efc07c0113a90d9f139a38897",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/image/cpu/CMakeLists.txt" : {
      "ObjectId" : "cde3739c8b09849424d28467b72686cf19b3348a",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/image_io/CMakeLists.txt" : {
      "ObjectId" : "9b388631fa42f75d07c891e93808e025032d4c86",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/klt/CMakeLists.txt" : {
      "ObjectId" : "6f4785a4ad7adb07f0a77890a96390631a9a66a0",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/klt/cpu/CMakeLists.txt" : {
      "ObjectId" : "a95d6704f5d7bc500197c6c63dada749cb325e9d",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/log/CMakeLists.txt" : {
      "ObjectId" : "aeb87cd7fb7f8c70c9c623b96f09e7e2719d92eb",
      "LastModified" : "2019-04-03T15:13:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/matlab/@gadgetron/CMakeLists.txt" : {
      "ObjectId" : "d2a9ecb9318330de4b8bb843c6fe006f9219e16f",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/matlab/CMakeLists.txt" : {
      "ObjectId" : "50b643227cd76cabe0caf739c3a8fc00820a1997",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory(@gadgetron)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "toolboxes/mri/CMakeLists.txt" : {
      "ObjectId" : "fb8842dc6aac41e5d601366b1531e07dccb3e74e",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/mri/epi/CMakeLists.txt" : {
      "ObjectId" : "4d1bc9ce25c4511535428027513744d2dbfbc4f7",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# install(TARGETS epi DESTINATION lib)\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#if (GTEST_FOUND)\n\n#    add_subdirectory(ut)\n\n#endif ()\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "toolboxes/mri/hyper/CMakeLists.txt" : {
      "ObjectId" : "83da83d13c5622bd401687134622be1e88056359",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/mri/pmri/CMakeLists.txt" : {
      "ObjectId" : "863c5fb92cec5eee5f8499b29dfd4a36484252f3",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/mri/pmri/gpu/CMakeLists.txt" : {
      "ObjectId" : "439ce157e01775022800d1bb2fc85dfe15a38a6a",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/mri_core/CMakeLists.txt" : {
      "ObjectId" : "8f2a6acf482b8fde7a089ff1892c878963a07ded",
      "LastModified" : "2019-04-03T15:13:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# if there is python, add python binding\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "toolboxes/mri_image/CMakeLists.txt" : {
      "ObjectId" : "676802e5d0d5fbf964f9e05d880b95f0925c5533",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_library(gadgetron_toolbox_mri_image SHARED ${mri_image_header_files} ${mri_image_source_files} )\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set_target_properties(gadgetron_toolbox_mri_image PROPERTIES VERSION ${GADGETRON_VERSION_STRING} SOVERSION ${GADGETRON_SOVERSION})\n\n#set_target_properties(gadgetron_toolbox_mri_image PROPERTIES LINKER_LANGUAGE CXX)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#target_link_libraries(gadgetron_toolbox_mri_image \n\n#                    gadgetron_toolbox_cpucore \n\n#                    gadgetron_toolbox_cpucore_math \n\n#                    ${ARMADILLO_LIBRARIES} )\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# install(TARGETS gadgetron_toolbox_mri_image DESTINATION lib COMPONENT main)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "toolboxes/nfft/CMakeLists.txt" : {
      "ObjectId" : "12deebe372a0c551e4d28251fd32713852bcfd78",
      "LastModified" : "2019-04-03T15:13:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/nfft/cpu/CMakeLists.txt" : {
      "ObjectId" : "bba58218b8d500ce5e024c1f73537746c1d251d1",
      "LastModified" : "2019-04-03T15:13:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/nfft/gpu/CMakeLists.txt" : {
      "ObjectId" : "ab01e22d466d58da188e6eb4e1f9cb8ae9d2de61",
      "LastModified" : "2019-04-03T15:13:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/node_discovery/CMakeLists.txt" : {
      "ObjectId" : "ee922eefc3eff8f49f1e6add2f1ce8227be6362d",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/operators/CMakeLists.txt" : {
      "ObjectId" : "fc58ea3137e6fa1401f65b3cb3361c7586d7b9f7",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/operators/cpu/CMakeLists.txt" : {
      "ObjectId" : "f622f19d6ddc9ed577e128e3d13fe74d0c46ec26",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/operators/gpu/CMakeLists.txt" : {
      "ObjectId" : "171a5eb97c568e69e38df92e767a60b0b93c31e9",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/pattern_recognition/CMakeLists.txt" : {
      "ObjectId" : "c442a916fa05638a54b254f115ac44c9a4f2e054",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/plplot/CMakeLists.txt" : {
      "ObjectId" : "95f5234ce735f463638c7bb31e2f7e2a50925582",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# gadgetron_toolbox_plplot is a toolbox for plotting gadgetron data structures using PLplot\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "toolboxes/plplot/ut/CMakeLists.txt" : {
      "ObjectId" : "f6e4290035963c7044883f5236ec82c49b0502d8",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/python/CMakeLists.txt" : {
      "ObjectId" : "462d5cbb61dce062b97e2344c615c2f63e5a8aef",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# only add this definition to the library, not the example binaries\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "toolboxes/python/example/CMakeLists.txt" : {
      "ObjectId" : "4e9238421fabdc486f72bca294f0dad27f430a73",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/registration/CMakeLists.txt" : {
      "ObjectId" : "b19925d8235f447738ad4aade3342e375feb0934",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/registration/optical_flow/CMakeLists.txt" : {
      "ObjectId" : "ed860b547a2c730f9f825daa572c298b7d9204d8",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/registration/optical_flow/cpu/CMakeLists.txt" : {
      "ObjectId" : "52a2b49c3e283f2281e9118aa5fe2e8efc5cba62",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/registration/optical_flow/gpu/CMakeLists.txt" : {
      "ObjectId" : "17417e36f83db17aace03d5acd00305c50d63244",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  cuRegistration_utils.cu\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  cuRegistration_utils.h\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "toolboxes/rest/CMakeLists.txt" : {
      "ObjectId" : "b16b09cfddf4aec5c17f8b28bd5271dc5342c678",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/solvers/CMakeLists.txt" : {
      "ObjectId" : "c1048d615b1ab763fa3f37bf4fb7c51700a57e76",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "toolboxes/solvers/cpu/CMakeLists.txt" : {
      "ObjectId" : "2cd621be68068212716d63015a93050bf0f970ad",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# install(TARGETS gadgetron_toolbox_cpu_solver DESTINATION lib COMPONENT main)\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "toolboxes/solvers/gpu/CMakeLists.txt" : {
      "ObjectId" : "2b3fa5990a9b62bc192295b3fc8e0e60ff688452",
      "LastModified" : "2018-11-09T05:28:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 150
  },
  "ElapsedTime" : 2448
}