{
  "Repository" : "7001612",
  "Revision" : "HEAD",
  "ObjectId" : "4d1d119233349d6347fa3a9f4c0095fd2b57384e",
  "CommitTime" : "2019-01-19T20:48:47Z",
  "Files" : {
    "Makefile.am" : {
      "ObjectId" : "09247a1ca2249c29a9167dbc329bd1a2915456de",
      "LastModified" : "2018-10-04T10:25:44Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# This is a non-recursive Makefile, see\n\n# https://github.com/OpenLightingProject/ola/issues/397 for links to useful\n\n# documentation.\n\n#\n\n# Rather than defining everything in a single Makefile we include a Makefile.mk\n\n# from each directory. This gives the build rules a bit more structure.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# As suggested by libtoolize\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When running distcheck we want to enable the Python modules.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# C++ FLAGS variables\n\n# ------------------------------------------------------------------------------\n\n# COMMON_CXXFLAGS\n\n# The common C++ flags. This may include -Werror if fatal-warning was enabled\n\n# in ./configure. AM_CXXFLAGS defaults to this, and it should be preferred.\n\n#\n\n# COMMON_PROTOBUF_CXXFLAGS\n\n# The common C++ flags with some warnings protobuf code throws disabled. Use\n\n# this for generated protobuf code that does not build correctly with\n\n# COMMON_CXXFLAGS.\n\n#\n\n# COMMON_CXXFLAGS_ONLY_WARNINGS\n\n# The common C++ flags with (non-fatal) warnings enabled. Use this for 3rd\n\n# party code that does not build correctly with COMMON_CXXFLAGS.\n\n#\n\n# COMMON_TESTING_FLAGS\n\n# The common C++ flags for testing.\n\n#\n\n# COMMON_TESTING_FLAGS_ONLY_WARNINGS\n\n# The common C++ flags for testing with (non-fatal) warnings enabled. Use this\n\n# for 3rd party code that does not build correctly with COMMON_TESTING_FLAGS.\n\n#\n\n# COMMON_TESTING_PROTOBUF_FLAGS\n\n# The common C++ flags for testing with some warnings protobuf code throws\n\n# disabled.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The generated protobuf files don't compile with -Werror on win32 so we\n\n# disable fatal warnings on WIN32.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# We have to use gnu++11 for some reason, so stop it complaining about\n\n# auto_ptr\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# AM_CXXFLAGS is used when target_CXXFLAGS isn't specified.\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# LIBS variables\n\n# ------------------------------------------------------------------------------\n\n#\n\n# COMMON_TESTING_LIBS\n\n# The set of libraries used in the unittests.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Due to MinGW's handling of library archives, we need to append this.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Setup pkgconfigdir, the path where .pc files are installed.\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Define a custom runner for .py tests\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Variables used by the included Makefile.mk(s)\n\n# ------------------------------------------------------------------------------\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Common automake variables.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Append to this to define an install-exec-hook.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Test programs, these are added to check_PROGRAMS and TESTS if BUILD_TESTS is\n\n# true.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Files in built_sources are included in BUILT_SOURCES and CLEANFILES\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Test scripts are run if BUILD_TESTS is true.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# The includes\n\n# -----------------------------------------------------------------------------\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Since `make install` relinks the libraries, this should be in the order in\n\n# which libraries depend on each other. e.g. common, plugin_api, plugins, server.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# olad/plugin_api/Makefile.mk is included directly due to the order of\n\n# dependencies between them; we need to build olad/plugin_api, then the\n\n# plugins, then olad\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# -----------------------------------------------------------------------------\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Now some post-processing\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# -----------------------------------------------------------------------------\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# This gives us a rather hacky method to build the files normally built during\n\n# the build, so they are present for Doxygen to run against\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# I can't figure out how to safely execute a command (mvn) in a subdirectory,\n\n# so this is recursive for now.\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# dvi is run from make distcheck. Do nothing.\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "java/Makefile.am" : {
      "ObjectId" : "aab382ea7c56c51bc7ec0ddea788fda8fd3b7c45",
      "LastModified" : "2018-02-18T04:54:58Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# OLA Java client\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# .jars aren't really data, but it sure ain't a program.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "java/pom.xml" : {
      "ObjectId" : "5a8feadf93fc2a0b6c69f809e23b83f89441dd92",
      "LastModified" : "2019-01-01T12:29:39Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "AUTOMAKE" : 2,
    "MAVEN" : 1
  },
  "ElapsedTime" : 1510
}