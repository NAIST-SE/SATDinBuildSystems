{
  "Repository" : "4912063",
  "Revision" : "HEAD",
  "ObjectId" : "a83d2dc1022bca6912773a23cb339fc26971e67f",
  "CommitTime" : "2019-04-19T01:02:38Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "cf62bf795a22a246e062c66037399006f8b8ecbd",
      "LastModified" : "2019-04-01T19:48:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Also update changelog in debian folder!\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# package version\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Git repo info\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## C++11 ##\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## os specific library ending ##\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## For touch workaround, may need to be disabled for a Wayland Build\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Libraries ##\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# GTK+\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# GLIB\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# GThread\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# LibXML\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Poppler\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# zlib\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# libzip\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# pthreads\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# portaudio\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# sndfile\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Additional features ##\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# CppUnit\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Mac integration\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Plugins / scripting\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## I18n ##\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## Configuration headers and developement options ##\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Development options\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Debug options\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Advanced development config\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Enabel gcov support â€“ expanded in src/\n",
        "Line" : 171,
        "CharPositionInLine" : 55
      },
      "27" : {
        "Text" : "## Source building ##\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Final targets and installing ##\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Install resources\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Install desktop shortcuts for Linux\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Install desktop entry\n\n#install(FILES data/albert.desktop DESTINATION /share/applications )\n",
        "Line" : 224,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# Install icons\n",
        "Line" : 227,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# Symlink are not easy to use with CMake, therefor simple install a copy...\n",
        "Line" : 231,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# Uninstall target\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 35
    },
    "PreLoad.cmake" : {
      "ObjectId" : "ed463831ad6f228a742598f72fd083073ec521ac",
      "LastModified" : "2018-12-15T20:30:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Fix for windows\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/find/FindICU.cmake" : {
      "ObjectId" : "1646660d733c9928ee362c9b55679c49a47af0f2",
      "LastModified" : "2018-12-15T20:30:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module can find the International Components for Unicode (ICU) Library\n\n#\n\n# Requirements:\n\n# - CMake >= 2.8.3 (for new version of find_package_handle_standard_args)\n\n#\n\n# The following variables will be defined for your use:\n\n#   - ICU_FOUND             : were all of your specified components found (include dependencies)?\n\n#   - ICU_INCLUDE_DIRS      : ICU include directory\n\n#   - ICU_LIBRARIES         : ICU libraries\n\n#   - ICU_VERSION           : complete version of ICU (x.y.z)\n\n#   - ICU_MAJOR_VERSION     : major version of ICU\n\n#   - ICU_MINOR_VERSION     : minor version of ICU\n\n#   - ICU_PATCH_VERSION     : patch version of ICU\n\n#   - ICU_<COMPONENT>_FOUND : were <COMPONENT> found? (FALSE for non specified component if it is not a dependency)\n\n#\n\n# For windows or non standard installation, define ICU_ROOT variable to point to the root installation of ICU. Two ways:\n\n#   - run cmake with -DICU_ROOT=<PATH>\n\n#   - define an environment variable with the same name before running cmake\n\n# With cmake-gui, before pressing \"Configure\":\n\n#   1) Press \"Add Entry\" button\n\n#   2) Add a new entry defined as:\n\n#     - Name: ICU_ROOT\n\n#     - Type: choose PATH in the selection list\n\n#     - Press \"...\" button and select the root installation of ICU\n\n#\n\n# Example Usage:\n\n#\n\n#   1. Copy this file in the root of your project source directory\n\n#   2. Then, tell CMake to search this non-standard module in your project directory by adding to your CMakeLists.txt:\n\n#     set(CMAKE_MODULE_PATH ${PROJECT_SOURCE_DIR})\n\n#   3. Finally call find_package() once, here are some examples to pick from\n\n#\n\n#   Require ICU 4.4 or later\n\n#     find_package(ICU 4.4 REQUIRED)\n\n#\n\n#   if(ICU_FOUND)\n\n#      include_directories(${ICU_INCLUDE_DIRS})\n\n#      add_executable(myapp myapp.c)\n\n#      target_link_libraries(myapp ${ICU_LIBRARIES})\n\n#   endif(ICU_FOUND)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright (c) 2011-2013, julp\n\n#\n\n# Distributed under the OSI-approved BSD License\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n#=============================================================================\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "########## Private ##########\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Prefix for all ICU relative public variables\n",
        "Line" : 55,
        "CharPositionInLine" : 58
      },
      "4" : {
        "Text" : "# Prefix for all ICU relative internal variables\n",
        "Line" : 58,
        "CharPositionInLine" : 58
      },
      "5" : {
        "Text" : "# Prefix for all pkg-config relative internal variables\n",
        "Line" : 61,
        "CharPositionInLine" : 58
      },
      "6" : {
        "Text" : "# <icu component name> <library name 1> ... <library name N>\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Common and Data libraries\n\n# Internationalization library\n\n# Stream and I/O Library\n\n# Layout library\n\n# Paragraph Layout library\n",
        "Line" : 99,
        "CharPositionInLine" : 42
      },
      "8" : {
        "Text" : "########## Public ##########\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# may be done in the icu_declare_component macro\n",
        "Line" : 117,
        "CharPositionInLine" : 85
      },
      "10" : {
        "Text" : "# Check components\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# uc required at least\n",
        "Line" : 121,
        "CharPositionInLine" : 45
      },
      "12" : {
        "Text" : "# Includes\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########## <part to keep synced with tests/version/CMakeLists.txt> ##########\n",
        "Line" : 143,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# ICU >= 4\n",
        "Line" : 144,
        "CharPositionInLine" : 72
      },
      "15" : {
        "Text" : "# ICU [2;4[\n",
        "Line" : 146,
        "CharPositionInLine" : 77
      },
      "16" : {
        "Text" : "# ICU [1.4;2[\n",
        "Line" : 148,
        "CharPositionInLine" : 75
      },
      "17" : {
        "Text" : "# ICU 1.3\n",
        "Line" : 150,
        "CharPositionInLine" : 67
      },
      "18" : {
        "Text" : "# ICU 1.3\n",
        "Line" : 156,
        "CharPositionInLine" : 105
      },
      "19" : {
        "Text" : "# [1.3;1.4[ as #define ICU_VERSION \"3\" (no patch version, ie all 1.3.X versions will be detected as 1.3.0)\n",
        "Line" : 157,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "#\n\n# Since version 4.9.1, ICU release version numbering was totaly changed, see:\n\n# - http://site.icu-project.org/download/49\n\n# - http://userguide.icu-project.org/design#TOC-Version-Numbers-in-ICU\n\n#\n",
        "Line" : 162,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# ICU [1.4;1.8[\n",
        "Line" : 170,
        "CharPositionInLine" : 125
      },
      "22" : {
        "Text" : "# [1.4;1.8[ as #define U_ICU_VERSION \"1.4.1.2\" but it seems that some 1.4.1(?:\\.\\d)? have releasing error and appears as 1.4.0\n",
        "Line" : 171,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# copy CMAKE_MATCH_1, no longer valid on the following if\n",
        "Line" : 172,
        "CharPositionInLine" : 67
      },
      "24" : {
        "Text" : "########## </part to keep synced with tests/version/CMakeLists.txt> ##########\n",
        "Line" : 186,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Check dependencies (implies pkg-config)\n",
        "Line" : 188,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Check libraries\n",
        "Line" : 204,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# both not found\n",
        "Line" : 231,
        "CharPositionInLine" : 160
      },
      "28" : {
        "Text" : "# one or both found\n",
        "Line" : 234,
        "CharPositionInLine" : 162
      },
      "29" : {
        "Text" : "# release not found => we are in debug\n",
        "Line" : 236,
        "CharPositionInLine" : 89
      },
      "30" : {
        "Text" : "# debug not found => we are in release\n",
        "Line" : 238,
        "CharPositionInLine" : 91
      },
      "31" : {
        "Text" : "# both found\n",
        "Line" : 240,
        "CharPositionInLine" : 19
      },
      "32" : {
        "Text" : "# Try to find out compiler flags\n",
        "Line" : 251,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Check find_package arguments\n",
        "Line" : 263,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# IN (args)\n",
        "Line" : 285,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# OUT\n\n# Found\n",
        "Line" : 290,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Flags\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Linking\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Version\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "cmake/find/FindOpenJPEG.cmake" : {
      "ObjectId" : "0148daea3e1852edd8b46654f6ed0d4bc59d520a",
      "LastModified" : "2018-12-15T20:30:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###\n\n# -*- cmake -*-\n\n#\n\n# File:  FindOpenJPEG.cmake\n\n#\n\n# Original script was copied from:\n\n# http://code.google.com/p/emeraldviewer/source/browse/indra/cmake\n\n#\n\n# $Id$\n\n###\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Find OpenJPEG\n\n# Find the OpenJPEG includes and library\n\n# This module defines\n\n#  OPENJPEG_INCLUDE_DIR, where to find openjpeg.h, etc.\n\n#  OPENJPEG_LIBRARIES, the libraries needed to use OpenJPEG.\n\n#  OPENJPEG_FOUND, If false, do not try to use OpenJPEG.\n\n# also defined, but not for general use are\n\n#  OPENJPEG_LIBRARY, where to find the OpenJPEG library.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/find/Gettext.cmake" : {
      "ObjectId" : "36b31d81edbc81a687ba09b8238f0c789fa82d3f",
      "LastModified" : "2018-12-15T20:30:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# cmake/Gettext.cmake\n\n# Copyright (C) 2012, 2013, Valama development team\n\n#\n\n# Valama is free software: you can redistribute it and/or modify it\n\n# under the terms of the GNU General Public License as published by the\n\n# Free Software Foundation, either version 3 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# Valama is distributed in the hope that it will be useful, but\n\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License along\n\n# with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n#\n\n##\n\n#\n\n# Heavily based on Jim Nelson's Gettext.cmake in Geary project:\n\n# https://github.com/ypcs/geary\n\n#\n\n##\n\n# Add find_package handler for gettext programs msgmerge, msgfmt, msgcat and\n\n# xgettext.\n\n##\n\n# Constant:\n\n# XGETTEXT_OPTIONS_DEFAULT: Provide common xgettext options.\n\n# XGETTEXT_VALA_OPTIONS_DEFAULT: Provide common xgettext options for Vala files.\n\n# XGETTEXT_GLADE_OPTIONS_DEFAULT: Provide common xgettext options for glade.\n\n##\n\n# The gettext_create_pot macro creates .pot files with xgettext from multiple\n\n# source files.\n\n# Provide target 'pot' to generate .pot file.\n\n#\n\n# Supported sections:\n\n#\n\n# PACKAGE (optional)\n\n#   Gettext package name. Get exported to parent scope.\n\n#   Default: ${PROJECT_NAME}\n\n#\n\n# VERSION (optional)\n\n#   Gettext package version. Get exported to parent scope.\n\n#   Default: ${${GETTEXT_PACKAGE_NAME}_VERSION}\n\n#   (${GETTEXT_PACKAGE_NAME} is package name from option above)\n\n#\n\n# OPTIONS (optional)\n\n#   Pass list of xgettext options (you can use XGETTEXT_OPTIONS_DEFAULT,\n\n#   XGETTEXT_VALA_OPTIONS_DEFAULT and XGETTEXT_GLADE_OPTIONS_DEFAULT\n\n#   constants).\n\n#   Default: ${XGETTEXT_{,VALA,GLADE}_OPTIONS_DEFAULT}\n\n#\n\n# SRCFILES (optional/mandatory)\n\n#   List of source files to extract gettext strings from. Globbing is\n\n#  supported.\n\n#\n\n# GLADEFILES (optional/mandatory)\n\n#   List of glade source files to extract gettext strings from. Globbing is\n\n#   supported.\n\n#\n\n# DESKTOPFILES (optional/mandatory)\n\n#   List of .desktop files to extract gettext strings from. Globbing is\n\n#   supported.\n\n#   intltool required.\n\n#\n\n# GSETTINGSFILES (optional/mandatory)\n\n#   List of gsettings (.gschema.xml) files to extract gettext strings from.\n\n#   Globbing is supported.\n\n#   intltool required.\n\n#\n\n# Either SRCFILES or GLADEFILES or DESKTOPFILES or GSETTINGSFILES (or all)\n\n# have to be filled with some files.\n\n#\n\n##\n\n# The gettext_create_translations function generates .gmo files from .po files\n\n# and install them as .mo files.\n\n# Provide target 'translations' to build .gmo files.\n\n#\n\n# Supported sections:\n\n#\n\n# ALL (optional)\n\n#   Make translations target a dependency of the 'all' target. (Build\n\n#   translations with every build.)\n\n#\n\n# PODIR (optional)\n\n#   Directory with .po files.\n\n#   Default: ${CMAKE_CURRENT_SOURCE_DIR}\n\n#\n\n# LOCALEDIR (optional)\n\n#   Base directory where to install translations.\n\n#   Default: share/cmake\n\n#\n\n# LANGUAGES (optional)\n\n#   List of language 'short names'. This is in generel the part before the .po.\n\n#   With English locale this is e.g. 'en_GB' or 'en_US' etc.\n\n#\n\n# POFILES (optional)\n\n#   List of .po files.\n\n#\n\n##\n\n#\n\n# The following call is a simple example (within project po directory):\n\n#\n\n#   include(Gettext)\n\n#   if(XGETTEXT_FOUND)\n\n#     set(potfile \"${CMAKE_CURRENT_SOURCE_DIR}/my_project.pot\")\n\n#     gettext_create_pot(\"${potfile}\"\n\n#       SRCFILES\n\n#         \"${PROJECT_SOURCE_DIR}/src/*.vala\"\n\n#     )\n\n#     gettext_create_translations(\"${potfile}\" ALL)\n\n#   endif()\n\n#\n\n##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#### Changed GLOB to GLOB_RECURSE on line 246\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Export variable to use it as status info.\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#TODO: Make this configurable.\n",
        "Line" : 167,
        "CharPositionInLine" : 33
      },
      "4" : {
        "Text" : "# Export for status information.\n",
        "Line" : 208,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Make sure file exists even if no translatable strings available.\n",
        "Line" : 412,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# vim: set ai ts=2 sts=2 et sw=2\n",
        "Line" : 705,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/include/C++11.cmake" : {
      "ObjectId" : "dfc2014650355c277997e5bd610ac0a9d233b729",
      "LastModified" : "2018-12-15T20:30:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Macro that checks for C++11 support and sets compiler flags\n\n# If C++11 is not present it throws message with MESSAGE_SEVERITY.\n\n# Bear in mind, that for MSVC it's just passing \"-std=c++0x\" to compiler.\n\n#\n\n# Macro:\n\n#   CheckCXX11(MESSAGE_SEVERITY)\n\n#       MESSAGE_SEVERITY        it's not mandatory and has default value of \"STATUS\"\n\n#                               this is severity of message if no C++11 was found\n\n#\n\n# Output variables:\n\n#   COMPILER_SUPPORTS_CXX11     ON when compiler supports C++11\n\n#   COMPILER_CXX11_FLAG         compiler flag that adds support for C++11\n\n#\n\n#\n\n# Copyright (c) 2015, Marek PikuÅ‚a <marek@pikula.co>\n\n# All rights reserved.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\") see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY without even the implied warranty of MERCHANTABILITY\n\n# or FITNESS FOR A PARTICULAR PURPOSE. See the License for more information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# MSVC has C++11 turned on by default\n",
        "Line" : 29,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "cmake/include/ExternalDeb.cmake" : {
      "ObjectId" : "065830eec006e4f061e5f917d443eaa5ebdfea27",
      "LastModified" : "2018-12-15T20:30:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Install local dependency from external deb package\n\n#\n\n# Functions:\n\n#\n\n#   target_architecture_deb (output_var)\n\n#       Sets output_var to current architecture (usable for Debin repos)\n\n#        output_var     name of return variable\n\n#\n\n#   ExternalDeb_add (NAME URL)\n\n#       Downloads and installs external deb from URL.\n\n#\n\n#       Parameters:\n\n#        NAME   name of deb (used for internal naming)\n\n#        URL    full URL to deb, with %ARCH% variable, which is replaced with current arch\n\n#               (basing on target_architecture_deb function) â€“ should be usable for wget\n\n#\n\n#       Returns:\n\n#        ${NAME}_FOUND          if deb was installed properly\n\n#        ${NAME}_INCLUDE_DIRS   list of include dirs\n\n#        ${NAME}_LIBRARY_DIRS   list of library dirs (included in link_directories list)\n\n#        ${NAME}_SLIBRARIES     list of static libraries\n\n#        ${NAME}_DLIBRARIES     list of dynamic libraries\n\n#           All lists are generated by this simple cmake script, so they may be incomplete!\n\n#\n\n#       Dependencies:\n\n#        wget   for downloading deb from URL\n\n#        ar     to unpack deb archive\n\n#        tar    to unpack internal data archive\n\n#\n\n#\n\n# Copyright (c) 2015, Marek PikuÅ‚a <marek@pikula.co>\n\n# All rights reserved.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\") see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY without even the implied warranty of MERCHANTABILITY\n\n# or FITNESS FOR A PARTICULAR PURPOSE. See the License for more information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/include/GitRepo.cmake" : {
      "ObjectId" : "20457091d8c1d701a63072165cb84c1c17490c14",
      "LastModified" : "2018-12-15T20:30:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Get basic informations about current git repo (if any)\n\n#\n\n# Variables:\n\n#   GIT_ORIGIN_URL    origin URL of current git repo\n\n#   GIT_ORIGIN_OWNER  origin repo owner\n\n#   GIT_ORIGIN_REPO   origin repo name\n\n#   GIT_BRANCH        current git branch\n\n#\n\n#   PROJECT_BUGREPORT URL to git issue tracker basing on origin remote (if git not found set default tracker)\n\n#\n\n#\n\n# Copyright (c) 2015, Marek PikuÅ‚a <marek@pikula.co>\n\n# All rights reserved.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\") see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY without even the implied warranty of MERCHANTABILITY\n\n# or FITNESS FOR A PARTICULAR PURPOSE. See the License for more information.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Remove ssh repo host prefix\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/include/TargetArch.cmake" : {
      "ObjectId" : "73d77b372ed081a66293689f061d2d6eb12c681e",
      "LastModified" : "2018-12-15T20:30:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# From https://github.com/petroules/solar-cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Based on the Qt 5 processor detection code, so should be very accurate\n\n# https://qt.gitorious.org/qt/qtbase/blobs/master/src/corelib/global/qprocessordetection.h\n\n# Currently handles arm (v5, v6, v7), x86 (32/64), ia64, and ppc (32/64)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Regarding POWER/PowerPC, just as is noted in the Qt source,\n\n# \"There are many more known variants/revisions that we do not handle/detect.\"\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set ppc_support to TRUE before including this file or ppc and ppc64\n\n# will be treated as invalid architectures since they are no longer supported by Apple\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# On OS X we use CMAKE_OSX_ARCHITECTURES *if* it was set\n\n# First let's normalize the order of the values\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Note that it's not possible to compile PowerPC applications if you are using\n\n# the OS X SDK version 10.6 or later - you'll need 10.4/10.5 for that, so we\n\n# disable it by default\n\n# See this page for more information:\n\n# http://stackoverflow.com/questions/5333490/how-can-we-restore-ppc-ppc64-as-well-as-full-10-4-10-5-sdk-support-to-xcode-4\n",
        "Line" : 60,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Architecture defaults to i386 or ppc on OS X 10.5 and earlier, depending on the CPU type detected at runtime.\n\n# On OS X 10.6+ the default is x86_64 if the CPU supports it, i386 otherwise.\n",
        "Line" : 66,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Now add all the architectures in our normalized order\n",
        "Line" : 83,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# Detect the architecture in a rather creative way...\n\n# This compiles a small C program which is a series of ifdefs that selects a\n\n# particular #error preprocessor directive whose message string contains the\n\n# target architecture. The program will always fail to compile (both because\n\n# file is not a valid C program, and obviously because of the presence of the\n\n# #error preprocessor directives... but by exploiting the preprocessor in this\n\n# way, we can detect the correct target architecture even when cross-compiling,\n\n# since the program itself never needs to be run (only the compiler/preprocessor)\n",
        "Line" : 104,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Parse the architecture name from the compiler output\n",
        "Line" : 121,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Get rid of the value marker leaving just the architecture name\n",
        "Line" : 124,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# If we are compiling with an unknown architecture this variable should\n\n# already be set to \"unknown\" but in the case that it's empty (i.e. due\n\n# to a typo in the code), then set it to unknown\n",
        "Line" : 127,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 12
    },
    "cmake/include/Version.cmake" : {
      "ObjectId" : "d0692275ac3828c20a40aa4d7751c2f832844894",
      "LastModified" : "2018-12-15T20:30:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Adopted from https://github.com/xbmc/xbmc\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# distro codename\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Parses git info and sets variables used to identify the build\n\n# Arguments:\n\n#   stamp variable name to return\n\n# Optional Arguments:\n\n#   FULL: generate git HEAD commit in the form of 'YYYYMMDD-hash'\n\n#         if git tree is dirty, value is set in the form of 'YYYYMMDD-hash-dirty'\n\n#         if no git tree is found, value is set in the form of 'YYYYMMDD-nogitfound'\n\n#         if FULL is not given, stamp is generated following the same process as above\n\n#         but without 'YYYYMMDD'\n\n# On return:\n\n#   Variable is set with generated stamp to PARENT_SCOPE\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# allow manual setting GIT_VERSION\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# get tree status i.e. clean working tree vs dirty (uncommited or unstashed changes, etc.)\n",
        "Line" : 33,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# get HEAD commit SHA-1\n",
        "Line" : 44,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# get HEAD commit date\n",
        "Line" : 54,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 7
    },
    "po/CMakeLists.txt" : {
      "ObjectId" : "646ebcd6730045b8fa5f02f1639e2d848e939af6",
      "LastModified" : "2018-12-22T12:27:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "f252433301a8d7da41797b7dc7bd9965227dc220",
      "LastModified" : "2019-03-11T19:59:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Build poppler ##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Basic variables ##\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build xournal-thumbnailer as it doesn't need CXX_FLAGS from below\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Used for both util and xournalpp targets\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# optimize for size (the Windows .exe is really big)\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Nothing to do for APPLE\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Used to compile xournalpp and xournalpp-test\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Build util lib ##\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Sources ##\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# These dirs are xournalpp only so it's safe to add then recursively\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Here GLOB_RECURSE wouldn't be safe\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Concatenate SOURCES lists\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Concatenate SOURCES lists\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Core library ##\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Used for xournalpp and xournalpp-test\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## xournalpp main program ##\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "src/util/CMakeLists.txt" : {
      "ObjectId" : "3ab5c5efea2b894010568f840ce93b4be85612c8",
      "LastModified" : "2018-12-28T16:24:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Util is pretty small so GLOB_RECURSE is sufficient\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/xoj-preview-extractor/CMakeLists.txt" : {
      "ObjectId" : "6c9722f4745cad8cf612459ff8a97cffce03d158",
      "LastModified" : "2019-03-11T19:59:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## xournal-thumbnailer executable ##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Windows does not support the thumbniler like this\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "## Install ##\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Desktop install targets ##\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "0a45b31facc0aec47540d4454860a417112a1cff",
      "LastModified" : "2018-12-28T16:24:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Additional config ##\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Building ##\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Test base\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## ------------------------\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# These dirs are xournalpp only so it's safe to add then recursively\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Util Test\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## ------------------------\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# LoadHandler\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## CTest ##\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    }
  },
  "FileTypes" : {
    "CMAKE" : 15
  },
  "ElapsedTime" : 2397
}