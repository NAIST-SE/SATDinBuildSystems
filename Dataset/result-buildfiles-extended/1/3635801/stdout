{
  "Repository" : "3635801",
  "Revision" : "HEAD",
  "ObjectId" : "7fbc1e358f29c4c7ce54306cabeb02644778716f",
  "CommitTime" : "2019-04-14T23:23:15Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "741e70196b9a8054ed5298f8fc2d6409cc04d436",
      "LastModified" : "2019-04-14T22:22:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# *-* Mode: cmake; *-*\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# \"Do not add flags to export symbols from executables without the ENABLE_EXPORTS target property.\"\n\n# This avoids linking executables with -rdynamic. -rdynamic has been observed\n\n# to cause rr_exec_stub to be linked with the dynamic linker with some\n\n# version(s) of clang (but linked to an incorrect file name, causing\n\n# exec of rr_exec_stub to fail).\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# On single configuration generators, make Debug the default configuration\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CAREFUL!  \"-\" is an invalid character in RPM package names, while\n\n# debian is happy with it.  However, \"_\" is illegal in debs, while RPM\n\n# is cool with it.  Sigh.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Define __STDC_LIMIT_MACROS so |#include <stdint.h>| works as expected.\n\n# Define __STDC_FORMAT_MACROS so |#include <inttypes.h>| works as expected.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Check that compiling 32-bit code on a 64-bit target works, if required.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# try_compile won't accept LINK_FLAGS, so do this manually.\n",
        "Line" : 106,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# If we're cross-compiling a 32-bit rr build on a 64-bit host we need\n\n# to ensure we're looking for the right libraries.\n\n# This has been tested on Ubuntu and Fedora.\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ==== brotli ====\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ==== brotli ====\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Check for Python >=2.7 but not Python 3.\n",
        "Line" : 240,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Check for required Python modules\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Check for gdb\n",
        "Line" : 273,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# We need to know where our generated files are.\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Order matters here! syscall_hook.S must be immediately before syscallbuf.c,\n\n# breakpoint_table.S must be before overrides.c, which must be last.\n",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Ensure that CMake knows about our generated files.\n\n#\n\n# Alphabetical, please.\n",
        "Line" : 318,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# grsecurity needs these. But if we add them ourselves, they may conflict\n\n# with other flags added in other ways, and they all have to match :-(. So\n\n# don't do this until a better solution presents itself\n\n#  add_custom_command(TARGET ${target}\n\n#                     POST_BUILD\n\n#                     COMMAND setfattr ARGS -n user.pax.flags -v m $<TARGET_FILE:${target}>)\n",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Urgh ... this might not work for everyone, but there doesn't seem to be\n\n# a way to persuade pkg-confing/pkg_check_modules to produce the right flags\n",
        "Line" : 513,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Note that this works for both clang++ and g++\n",
        "Line" : 516,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Build 32-bit librrpreload on 64-bit builds.\n\n# We copy the source files into '32' subdirectories in the output\n\n# directory, so we can set different compile options on them.\n\n# This sucks but I can't find a better way to get CMake to build\n\n# the same source file in two different ways.\n",
        "Line" : 583,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##--------------------------------------------------\n\n## Testing\n",
        "Line" : 627,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# A \"basic test\" consists of a foo.c source file. All basic tests use the\n\n# same basic_test.run driver script. The test name is passed as an additional\n\n# parameter to the driver script. This script just does\n\n# \"compare_test EXIT-SUCCESS\", i.e. records and replays the program and verifies\n\n# that the output of both runs is identical and contains EXIT-SUCCESS.\n\n#\n\n# NB: you must update this variable when adding a new test source\n\n# file.  The list is not generated automatically.\n\n#\n\n# Alphabetical, please.\n",
        "Line" : 630,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# pivot_root ... disabled because it fails when run as root and does nothing otherwise\n",
        "Line" : 853,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# sched_attr ... disabled since suitable headers are not widely available yet\n",
        "Line" : 872,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# A \"test with program\" consists of a foo.c source file and a foo.run driver\n\n# script.  See src/test/util.sh to learn how the .run files work.\n\n#\n\n# NB: you must update this variable when adding a new test source\n\n# file.  The list is not generated automatically.\n\n#\n\n# Alphabetical, please.\n",
        "Line" : 995,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Disabled because it's very slow\n\n# check_session_leaks\n",
        "Line" : 1025,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Disabled because it fails\n\n# clone_share_vm\n",
        "Line" : 1032,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Disabled because issue #1806 makes tests fail on Debian 8.5 at least\n\n# history\n",
        "Line" : 1062,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Not called ps, because that interferes with using real 'ps' in tests\n",
        "Line" : 1086,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# A \"test without program\" is a foo.run driver script only, which does\n\n# something with one of the test executables above (or has special rules\n\n# to build its own executable).\n\n#\n\n# NB: you must update this variable when adding a new test source\n\n# file.  The list is not generated automatically.\n\n#\n\n# Alphabetical, please.\n",
        "Line" : 1145,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Test disabled because it requires libuvc to be built and installed, and a\n\n# working USB camera\n\n# add_executable(usb src/test/usb.c)\n\n# post_build_executable(usb)\n\n# add_dependencies(usb Generated)\n\n# target_link_libraries(usb -lrt -L/usr/local/lib -luvc -lusb-1.0)\n",
        "Line" : 1261,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# cpuid test needs to link with cpuid_loop.S\n",
        "Line" : 1285,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Check if we're running on KNL. If so, we allot more time to tests, due to\n\n# reduced single-core performance.\n",
        "Line" : 1293,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# The real timeouts are handled by test-monitor\n",
        "Line" : 1304,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Run 32-bit tests on 64-bit builds.\n\n# We copy the test files into '32' subdirectories in the output\n\n# directory, so we can set different compile options on them.\n\n# This sucks but I can't find a better way to get CMake to build\n\n# the same source file in two different ways.\n",
        "Line" : 1327,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# cpuid test needs to link with cpuid_loop.S\n",
        "Line" : 1371,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# Run only syscallbuf-enabled and native-bitness tests\n",
        "Line" : 1426,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "##--------------------------------------------------\n\n## Package configuration\n",
        "Line" : 1429,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Don't strip binaries. It's important/useful for librrpreload at least to\n\n# have debug symbols. For package releases, pass -Dstrip=TRUE to strip symbols\n\n# from the rr binary at build time.\n",
        "Line" : 1444,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# XXX Cmake 2.8.7 doesn't know how to avoid specifying /usr,\n\n# /usr/bin, etc, as files to be installed, but distros are finicky\n\n# about their specification.  We want to manually filter those paths\n\n# out of our install list but 2.8.7 also isn't capable of that.\n",
        "Line" : 1465,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Prevent binaries from being stripped\n",
        "Line" : 1473,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "##--------------------------------------------------\n\n## Misc\n",
        "Line" : 1478,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 42
    }
  },
  "FileTypes" : {
    "CMAKE" : 1
  },
  "ElapsedTime" : 774
}