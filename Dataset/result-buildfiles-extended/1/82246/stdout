{
  "Repository" : "82246",
  "Revision" : "HEAD",
  "ObjectId" : "00c6dcc91c8d769c74ed9063277b1120c9084427",
  "CommitTime" : "2015-04-26T05:12:59Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "c66c63d34d08b6946595bc13b931e67cb4158b62",
      "LastModified" : "2013-10-23T19:42:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set (CMAKE_EXE_LINKER_FLAGS -lc++abi)\n\n#set (CMAKE_SHARED_LINKER_FLAGS -lc++abi)\n\n#set (CMAKE_MODULE_LINKER_FLAGS -lc++abi)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# for double-conversion.h\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO: compile miniz separately, so warnings remain high for ten-specific code in zip.cc\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "benchmarks/CMakeLists.txt" : {
      "ObjectId" : "5879522b9b8304ee2a736fa8537348a77b978a9c",
      "LastModified" : "2013-03-23T07:42:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/ExternalProject.cmake" : {
      "ObjectId" : "a0a9aead50168dd076c0a35b42ec387b79de09cd",
      "LastModified" : "2013-03-29T14:28:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Create custom targets to build projects in external trees\n\n# The 'ExternalProject_Add' function creates a custom target to drive\n\n# download, update/patch, configure, build, install and test steps of an\n\n# external project:\n\n#  ExternalProject_Add(<name>    # Name for custom target\n\n#    [DEPENDS projects...]       # Targets on which the project depends\n\n#    [PREFIX dir]                # Root dir for entire project\n\n#    [LIST_SEPARATOR sep]        # Sep to be replaced by ; in cmd lines\n\n#    [TMP_DIR dir]               # Directory to store temporary files\n\n#    [STAMP_DIR dir]             # Directory to store step timestamps\n\n#   #--Download step--------------\n\n#    [DOWNLOAD_DIR dir]          # Directory to store downloaded files\n\n#    [DOWNLOAD_COMMAND cmd...]   # Command to download source tree\n\n#    [CVS_REPOSITORY cvsroot]    # CVSROOT of CVS repository\n\n#    [CVS_MODULE mod]            # Module to checkout from CVS repo\n\n#    [CVS_TAG tag]               # Tag to checkout from CVS repo\n\n#    [SVN_REPOSITORY url]        # URL of Subversion repo\n\n#    [SVN_REVISION rev]          # Revision to checkout from Subversion repo\n\n#    [SVN_USERNAME john ]        # Username for Subversion checkout and update\n\n#    [SVN_PASSWORD doe ]         # Password for Subversion checkout and update\n\n#    [SVN_TRUST_CERT 1 ]         # Trust the Subversion server site certificate\n\n#    [GIT_REPOSITORY url]        # URL of git repo\n\n#    [GIT_TAG tag]               # Git branch name, commit id or tag\n\n#    [URL /.../src.tgz]          # Full path or URL of source\n\n#    [URL_MD5 md5]               # MD5 checksum of file at URL\n\n#    [TIMEOUT seconds]           # Time allowed for file download operations\n\n#   #--Update/Patch step----------\n\n#    [UPDATE_COMMAND cmd...]     # Source work-tree update command\n\n#    [PATCH_COMMAND cmd...]      # Command to patch downloaded source\n\n#   #--Configure step-------------\n\n#    [SOURCE_DIR dir]            # Source dir to be used for build\n\n#    [CONFIGURE_COMMAND cmd...]  # Build tree configuration command\n\n#    [CMAKE_COMMAND /.../cmake]  # Specify alternative cmake executable\n\n#    [CMAKE_GENERATOR gen]       # Specify generator for native build\n\n#    [CMAKE_ARGS args...]        # Arguments to CMake command line\n\n#    [CMAKE_CACHE_ARGS args...]  # Initial cache arguments, of the form -Dvar:string=on\n\n#   #--Build step-----------------\n\n#    [BINARY_DIR dir]            # Specify build dir location\n\n#    [BUILD_COMMAND cmd...]      # Command to drive the native build\n\n#    [BUILD_IN_SOURCE 1]         # Use source dir for build dir\n\n#   #--Install step---------------\n\n#    [INSTALL_DIR dir]           # Installation prefix\n\n#    [INSTALL_COMMAND cmd...]    # Command to drive install after build\n\n#   #--Test step------------------\n\n#    [TEST_BEFORE_INSTALL 1]     # Add test step executed before install step\n\n#    [TEST_AFTER_INSTALL 1]      # Add test step executed after install step\n\n#    [TEST_COMMAND cmd...]       # Command to drive test\n\n#   #--Output logging-------------\n\n#    [LOG_DOWNLOAD 1]            # Wrap download in script to log output\n\n#    [LOG_UPDATE 1]              # Wrap update in script to log output\n\n#    [LOG_CONFIGURE 1]           # Wrap configure in script to log output\n\n#    [LOG_BUILD 1]               # Wrap build in script to log output\n\n#    [LOG_TEST 1]                # Wrap test in script to log output\n\n#    [LOG_INSTALL 1]             # Wrap install in script to log output\n\n#   #--Custom targets-------------\n\n#    [STEP_TARGETS st1 st2 ...]  # Generate custom targets for these steps\n\n#    )\n\n# The *_DIR options specify directories for the project, with default\n\n# directories computed as follows.\n\n# If the PREFIX option is given to ExternalProject_Add() or the EP_PREFIX\n\n# directory property is set, then an external project is built and installed\n\n# under the specified prefix:\n\n#   TMP_DIR      = <prefix>/tmp\n\n#   STAMP_DIR    = <prefix>/src/<name>-stamp\n\n#   DOWNLOAD_DIR = <prefix>/src\n\n#   SOURCE_DIR   = <prefix>/src/<name>\n\n#   BINARY_DIR   = <prefix>/src/<name>-build\n\n#   INSTALL_DIR  = <prefix>\n\n# Otherwise, if the EP_BASE directory property is set then components\n\n# of an external project are stored under the specified base:\n\n#   TMP_DIR      = <base>/tmp/<name>\n\n#   STAMP_DIR    = <base>/Stamp/<name>\n\n#   DOWNLOAD_DIR = <base>/Download/<name>\n\n#   SOURCE_DIR   = <base>/Source/<name>\n\n#   BINARY_DIR   = <base>/Build/<name>\n\n#   INSTALL_DIR  = <base>/Install/<name>\n\n# If no PREFIX, EP_PREFIX, or EP_BASE is specified then the default\n\n# is to set PREFIX to \"<name>-prefix\".\n\n# Relative paths are interpreted with respect to the build directory\n\n# corresponding to the source directory in which ExternalProject_Add is\n\n# invoked.\n\n#\n\n# If SOURCE_DIR is explicitly set to an existing directory the project\n\n# will be built from it.\n\n# Otherwise a download step must be specified using one of the\n\n# DOWNLOAD_COMMAND, CVS_*, SVN_*, or URL options.\n\n# The URL option may refer locally to a directory or source tarball,\n\n# or refer to a remote tarball (e.g. http://.../src.tgz).\n\n#\n\n# The 'ExternalProject_Add_Step' function adds a custom step to an external\n\n# project:\n\n#  ExternalProject_Add_Step(<name> <step> # Names of project and custom step\n\n#    [COMMAND cmd...]        # Command line invoked by this step\n\n#    [COMMENT \"text...\"]     # Text printed when step executes\n\n#    [DEPENDEES steps...]    # Steps on which this step depends\n\n#    [DEPENDERS steps...]    # Steps that depend on this step\n\n#    [DEPENDS files...]      # Files on which this step depends\n\n#    [ALWAYS 1]              # No stamp file, step always runs\n\n#    [WORKING_DIRECTORY dir] # Working directory for command\n\n#    [LOG 1]                 # Wrap step in script to log output\n\n#    )\n\n# The command line, comment, and working directory of every standard\n\n# and custom step is processed to replace tokens\n\n# <SOURCE_DIR>,\n\n# <BINARY_DIR>,\n\n# <INSTALL_DIR>,\n\n# and <TMP_DIR>\n\n# with corresponding property values.\n\n#\n\n# The 'ExternalProject_Get_Property' function retrieves external project\n\n# target properties:\n\n#  ExternalProject_Get_Property(<name> [prop1 [prop2 [...]]])\n\n# It stores property values in variables of the same name.\n\n# Property names correspond to the keyword argument names of\n\n# 'ExternalProject_Add'.\n\n#\n\n# The 'ExternalProject_Add_StepTargets' function generates custom targets for\n\n# the steps listed:\n\n#  ExternalProject_Add_StepTargets(<name> [step1 [step2 [...]]])\n\n#\n\n# If STEP_TARGETS is set then ExternalProject_Add_StepTargets is automatically\n\n# called at the end of matching calls to ExternalProject_Add_Step. Pass\n\n# STEP_TARGETS explicitly to individual ExternalProject_Add calls, or\n\n# implicitly to all ExternalProject_Add calls by setting the directory property\n\n# EP_STEP_TARGETS.\n\n#\n\n# If STEP_TARGETS is not set, clients may still manually call\n\n# ExternalProject_Add_StepTargets after calling ExternalProject_Add or\n\n# ExternalProject_Add_Step.\n\n#\n\n# This functionality is provided to make it easy to drive the steps\n\n# independently of each other by specifying targets on build command lines.\n\n# For example, you may be submitting to a sub-project based dashboard, where\n\n# you want to drive the configure portion of the build, then submit to the\n\n# dashboard, followed by the build portion, followed by tests. If you invoke\n\n# a custom target that depends on a step halfway through the step dependency\n\n# chain, then all the previous steps will also run to ensure everything is\n\n# up to date.\n\n#\n\n# For example, to drive configure, build and test steps independently for each\n\n# ExternalProject_Add call in your project, write the following line prior to\n\n# any ExternalProject_Add calls in your CMakeLists file:\n\n#\n\n#   set_property(DIRECTORY PROPERTY EP_STEP_TARGETS configure build test)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2008-2012 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Pre-compute a regex to match documented keywords for each command.\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#message(\"function [${_ep_func}]\")\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#message(\"  keyword [${_ep_key}]\")\n",
        "Line" : 175,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Transfer the arguments to this function into target properties for the\n\n# new custom target we just added so that we can set up all the build steps\n\n# correctly based on target properties.\n\n#\n\n# We loop through ARGN and consider the namespace starting with an\n\n# upper-case letter followed by at least two more upper-case letters,\n\n# numbers or underscores to be keywords.\n",
        "Line" : 187,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Value\n",
        "Line" : 209,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Missing Keyword\n",
        "Line" : 222,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# assert(base)\n",
        "Line" : 526,
        "CharPositionInLine" : 9
      },
      "9" : {
        "Text" : "# Make the directories at CMake configure time *and* add a custom command\n\n# to make them at build time. They need to exist at makefile generation\n\n# time for Borland make and wmake so that CMake may generate makefiles\n\n# with \"cd C:\\short\\paths\\with\\no\\spaces\" commands in them.\n\n#\n\n# Additionally, the add_custom_command is still used in case somebody\n\n# removes one of the necessary directories and tries to rebuild without\n\n# re-running cmake.\n",
        "Line" : 560,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# IMPORTANT: this MUST be a macro and not a function because of the\n\n# in-place replacements that occur in each ${var}\n\n#\n",
        "Line" : 579,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Write out values into an initial cache, that will be passed to CMake with -C\n",
        "Line" : 596,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# This is required to build up lists in variables, or complete an entry\n",
        "Line" : 603,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Assume this is a list to append to the last var\n",
        "Line" : 620,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Catch the final line of the args\n",
        "Line" : 624,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Replace location tags.\n",
        "Line" : 629,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Write out the initial cache file to the location specified.\n",
        "Line" : 631,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Explicit empty string means no configure step for this project\n",
        "Line" : 655,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Default is \"use cmake\":\n",
        "Line" : 659,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Otherwise we have to analyze the value:\n",
        "Line" : 662,
        "CharPositionInLine" : 6
      },
      "20" : {
        "Text" : "# CMake project.  Select build command based on generator.\n",
        "Line" : 683,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# The project uses the same Makefile generator.  Use recursive make.\n",
        "Line" : 687,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# Drive the project with \"cmake --build\".\n",
        "Line" : 696,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# But for \"TEST\" drive the project with corresponding \"ctest\".\n",
        "Line" : 707,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# if(cfg_cmd_id STREQUAL \"configure\")\n",
        "Line" : 713,
        "CharPositionInLine" : 11
      },
      "25" : {
        "Text" : "# Non-CMake project.  Guess \"make\" and \"make install\" and \"make test\".\n",
        "Line" : 714,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# Try to get the parallel arguments\n",
        "Line" : 716,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "# Use user-specified arguments instead of default arguments, if any.\n",
        "Line" : 729,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# GNU make recognizes the string \"$(MAKE)\" as recursive make, so\n\n# ensure that it appears directly in the makefile.\n",
        "Line" : 748,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Wrap multiple 'COMMAND' lines up into a second-level wrapper\n\n# script so all output can be sent to one log file.\n",
        "Line" : 777,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Wrap the command in a script to log output to files.\n",
        "Line" : 809,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# This module used to use \"/${CMAKE_CFG_INTDIR}\" directly and produced\n\n# makefiles with \"/./\" in paths for custom command dependencies. Which\n\n# resulted in problems with parallel make -j invocations.\n\n#\n\n# This function was added so that the suffix (search below for ${cfgdir}) is\n\n# only set to \"/${CMAKE_CFG_INTDIR}\" when ${CMAKE_CFG_INTDIR} is not going to\n\n# be \".\" (multi-configuration build systems like Visual Studio and Xcode...)\n\n#\n",
        "Line" : 838,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Depend on other external projects (target-level).\n",
        "Line" : 873,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# Steps depending on this step.\n",
        "Line" : 897,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Dependencies on files.\n",
        "Line" : 907,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Dependencies on steps.\n",
        "Line" : 910,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# The command to run.\n",
        "Line" : 917,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Replace list separators.\n",
        "Line" : 926,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Replace location tags.\n",
        "Line" : 932,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Custom comment?\n",
        "Line" : 935,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Run every time?\n",
        "Line" : 941,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# Wrap with log script?\n",
        "Line" : 950,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Add custom \"step target\"?\n",
        "Line" : 966,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# TODO: Perhaps file:// should be copied to download dir before extraction.\n",
        "Line" : 1032,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# The git submodule update '--recursive' flag requires git >= v1.6.5\n\n#\n",
        "Line" : 1110,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# For the download step, and the git clone operation, only the repository\n\n# should be recorded in a configured RepositoryInfo file. If the repo\n\n# changes, the clone script should be run again. But if only the tag\n\n# changes, avoid running the clone script again. Let the 'always' running\n\n# update step checkout the new tag.\n\n#\n",
        "Line" : 1122,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# Since git clone doesn't succeed if the non-empty source_dir exists,\n\n# create a cmake script to invoke as download command.\n\n# The script will delete the source directory and then call git clone.\n\n#\n",
        "Line" : 1140,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# TODO: Should download and extraction be different steps?\n",
        "Line" : 1170,
        "CharPositionInLine" : 8
      },
      "48" : {
        "Text" : "# TODO: Make sure external projects use the proper compiler\n",
        "Line" : 1323,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Depend on other external projects (file-level).\n",
        "Line" : 1327,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# If there are any CMAKE_CACHE_ARGS, write an initial cache and use it\n",
        "Line" : 1349,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# If anything about the configure command changes, (command itself, cmake\n\n# used, cmake args or cmake generator) then re-run the configure step.\n\n# Fixes issue http://public.kitware.com/Bug/view.php?id=10258\n\n#\n",
        "Line" : 1370,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Only actually add the test step if one of the test related properties is\n\n# explicitly set. (i.e. the test step is omitted unless requested...)\n\n#\n",
        "Line" : 1457,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Add a custom target for the external project.\n",
        "Line" : 1493,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# The 'complete' step depends on all other steps and creates a\n\n# 'done' mark.  A dependent external project's 'configure' step\n\n# depends on the 'done' mark so that it rebuilds when this project\n\n# rebuilds.  It is important that 'done' is not the output of any\n\n# custom command so that CMake does not propagate build rules to\n\n# other external project targets, which may cause problems during\n\n# parallel builds.  However, the Ninja generator needs to see the entire\n\n# dependency graph, and can cope with custom commands belonging to\n\n# multiple targets, so we add the 'done' mark as an output for Ninja only.\n",
        "Line" : 1504,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# Depend on other external projects (target-level).\n",
        "Line" : 1529,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# Set up custom build steps based on the target properties.\n\n# Each step depends on the previous one.\n\n#\n\n# The target depends on the output of the final step.\n\n# (Already set up above in the DEPENDS of the add_custom_target command.)\n\n#\n",
        "Line" : 1535,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# Test is special in that it might depend on build, or it might depend\n\n# on install.\n\n#\n",
        "Line" : 1549,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 58
    },
    "cmake/ParseArguments.cmake" : {
      "ObjectId" : "34a55b67de272a5db6c75a2a75f3db83aacf719c",
      "LastModified" : "2013-04-23T20:30:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: remove this when we get a new cmake\n\n# cmake 2.8.3 includes a better version, but we're on 2.8.0 :(\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/configure.cmake" : {
      "ObjectId" : "1e056ebc939131aaac1ce997d53fdabcd3ab84e7",
      "LastModified" : "2013-04-23T20:30:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# functions require cmake 2.6\n\n# function to run ./configure; make; make install\n\n# and properly handled cmake dependencies\n\n# configure_flags are passed at the end\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/prog.cmake" : {
      "ObjectId" : "d7be95a0043a18df6b6782a6f0deb1002522aa13",
      "LastModified" : "2013-10-23T19:54:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For building programs inside libten;\n\n#  these will only ever be tests, most likely\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# general flags for any compilation with gcc/g++\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# profile guided optimization\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# release- and debug-specific flags for gcc\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# now that we know what the UB flags are, paste them into the cmake macros\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/ragel.cmake" : {
      "ObjectId" : "cbe6b9691a77cb8f40fd3e388e298eb70f8255d4",
      "LastModified" : "2013-04-23T20:30:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/ten.cmake" : {
      "ObjectId" : "0e02b1ff788cd80a6746369d22bf743e0e5b165e",
      "LastModified" : "2013-10-16T03:21:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## boost\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Linux doesn't need this\n",
        "Line" : 10,
        "CharPositionInLine" : 33
      },
      "2" : {
        "Text" : "# Prevent falling back to system paths when using a custom Boost prefix.\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#add_definitions(-DUSE_UCONTEXT)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## jansson\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## c-ares\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## valgrind\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## finally, libten\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# needed for std::thread features\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# for stlencoders and stringencoders\n",
        "Line" : 77,
        "CharPositionInLine" : 39
      },
      "CommentCount" : 10
    },
    "cmake/version.cmake" : {
      "ObjectId" : "04c2c29a024ca8e261492a122ea6de882ddc7e5d",
      "LastModified" : "2013-04-23T20:30:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/Makefile" : {
      "ObjectId" : "643d25ac79973c49f3f6cf1bdea6cd6512428246",
      "LastModified" : "2013-04-23T20:30:51Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Internal variables.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "5e5f205176753f0cbc76c295a246bd3a4d057c10",
      "LastModified" : "2013-04-23T20:30:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "googletest/CMakeLists.txt" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2015-04-26T03:43:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "googletest/Makefile.am" : {
      "ObjectId" : "9c96b42572ca943d5fb4d4303842f12a545e8523",
      "LastModified" : "2015-04-26T03:43:50Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sample files that we don't compile.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# C++ test files that we don't compile directly.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Python tests that we don't run.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake script\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC project files\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# xcode project files\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# xcode sample files\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# C++Builder project files\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Distribute and install M4 macro\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Bulid rules for samples and tests. Automake's naming for some of\n\n# these variables isn't terribly obvious, so this is a brief\n\n# reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A simple sample on using gtest.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Another sample.  It also verifies that libgtest works.\n",
        "Line" : 246,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests most constructs of gtest and verifies that libgtest_main\n\n# and libgtest work.\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Tests that fused gtest files compile and work.\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build rules for putting fused Google Test files into the distribution\n\n# package. The user can also create those files by manually running\n\n# scripts/fuse_gtest_files.py.\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Test can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "googletest/cmake/internal_utils.cmake" : {
      "ObjectId" : "93e6dbb7c196d33706425ffbe3fcf3ed48d07f03",
      "LastModified" : "2015-04-26T03:43:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 50,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# 1400 is Visual Studio 2005\n",
        "Line" : 59,
        "CharPositionInLine" : 33
      },
      "9" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 60,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 65,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# 1500 is Visual Studio 2008\n",
        "Line" : 69,
        "CharPositionInLine" : 33
      },
      "13" : {
        "Text" : "# Conditional expression is constant.\n\n# When compiling with /W4, we get several instances of C4127\n\n# (Conditional expression is constant). In our code, we disable that\n\n# warning on a case-by-case basis. However, on Visual Studio 2005,\n\n# the warning fires on std::list. Therefore on that compiler and earlier,\n\n# we disable the warning project-wide.\n",
        "Line" : 70,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 78,
        "CharPositionInLine" : 39
      },
      "15" : {
        "Text" : "# Suppress \"unreachable code\" warning on VS 2012 and later.\n\n# http://stackoverflow.com/questions/3232669 explains the issue.\n",
        "Line" : 79,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 101,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 110,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# The pthreads library is available and allowed.\n",
        "Line" : 122,
        "CharPositionInLine" : 32
      },
      "22" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 187,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# We are not supporting Python tests on Linux yet as they consider\n\n# all Linux environments to be google3 and try to use google3 features.\n",
        "Line" : 231,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# ${CMAKE_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 234,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 36
    },
    "googletest/make/Makefile" : {
      "ObjectId" : "9ac74493ba55246597e90b898fae847ae358eab5",
      "LastModified" : "2015-04-26T03:43:50Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building Google Test and using it in user\n\n# tests.  Please tweak it to suit your environment and project.  You\n\n# may want to move it to your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds gtest.a and gtest_main.a.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For simplicity and to avoid depending on Google Test's\n\n# implementation details, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Test\n\n# compiles fast and for ordinary users its source rarely changes.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Builds a sample test.  A test should link with either gtest.a or\n\n# gtest_main.a, depending on whether it defines its own main()\n\n# function.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "googletest/scripts/test/Makefile" : {
      "ObjectId" : "cdff584637b7a6e9df1fa43ce8f588c43815e561",
      "LastModified" : "2015-04-26T03:43:50Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A Makefile for fusing Google Test and building a sample test against it.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make check  - makes everything and runs the built sample test.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Points to the root of fused Google Test, relative to where this file is.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Paths to the fused gtest files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find the sample test.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find gtest_main.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# We have no idea here whether pthreads is available in the system, so\n\n# disable its use.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "c0e65adceae96c526c5ef0cbd01ab920fec64b1d",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "91dd6214d435dc6ad3fa406fa3c8b32993f185ef",
      "LastModified" : "2013-10-23T19:54:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# release 1.7.0\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Disable install\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Disable update\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 14,
    "MAKEFILE" : 3,
    "AUTOMAKE" : 1
  },
  "ElapsedTime" : 1113
}