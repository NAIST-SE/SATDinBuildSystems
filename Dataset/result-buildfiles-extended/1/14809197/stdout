{
  "Repository" : "14809197",
  "Revision" : "HEAD",
  "ObjectId" : "23a3d0b04b80ba882b5bbb8e61c9496739c258fd",
  "CommitTime" : "2019-03-25T17:32:25Z",
  "Files" : {
    "ardesp/Arduino/libraries/Adafruit_GFX_Library/fontconvert/Makefile" : {
      "ObjectId" : "47f5a0e15a5a1587cd379507a1b5cfc8bbd9299f",
      "LastModified" : "2017-03-29T21:51:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "ardesp/Arduino/libraries/ArduinoJson/CMakeLists.txt" : {
      "ObjectId" : "66c565b5b46f82c479c9b4281e3a8015e200c3f2",
      "LastModified" : "2018-02-22T13:35:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ardesp/Arduino/libraries/ArduinoJson/fuzzing/Makefile" : {
      "ObjectId" : "f3ed397f54e7615f1281cc0fe092bca5219af158",
      "LastModified" : "2018-01-05T05:07:00Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# CAUTION: this file is invoked by https://github.com/google/oss-fuzz\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ardesp/Arduino/libraries/ArduinoJson/test/CMakeLists.txt" : {
      "ObjectId" : "4fee0ea1cad5cb2b05d75b7d5c7b4c22cf3b8def",
      "LastModified" : "2018-02-22T13:35:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the flag exists in 4.4 but is buggy\n",
        "Line" : 44,
        "CharPositionInLine" : 36
      },
      "2" : {
        "Text" : "# Set warning level\n\n# Treats all compiler warnings as errors.\n",
        "Line" : 62,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 3
    },
    "ardesp/Arduino/libraries/ArduinoJson/test/DynamicJsonBuffer/CMakeLists.txt" : {
      "ObjectId" : "9030f376032c9df3f63d443e70d6d710e7d95d96",
      "LastModified" : "2018-02-22T13:35:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ardesp/Arduino/libraries/ArduinoJson/test/IntegrationTests/CMakeLists.txt" : {
      "ObjectId" : "9294bbbf9848f99764ee764e4374a598a1a9ef70",
      "LastModified" : "2018-02-22T13:35:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# issue 544\n",
        "Line" : 13,
        "CharPositionInLine" : 30
      },
      "CommentCount" : 2
    },
    "ardesp/Arduino/libraries/ArduinoJson/test/JsonArray/CMakeLists.txt" : {
      "ObjectId" : "ec0e5206b508626e6a5e132c40368b24044f31fd",
      "LastModified" : "2018-02-22T13:35:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ardesp/Arduino/libraries/ArduinoJson/test/JsonBuffer/CMakeLists.txt" : {
      "ObjectId" : "34b3e735a817ad6548420ac460322fd114caa473",
      "LastModified" : "2018-02-22T13:35:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ardesp/Arduino/libraries/ArduinoJson/test/JsonObject/CMakeLists.txt" : {
      "ObjectId" : "93e8f0ded8cc2c7c83ab214a3b0d270999c77470",
      "LastModified" : "2018-02-22T13:35:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ardesp/Arduino/libraries/ArduinoJson/test/JsonVariant/CMakeLists.txt" : {
      "ObjectId" : "0a00a15a1d4dfd737b9c3492088b617baae7147f",
      "LastModified" : "2018-02-22T13:35:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ardesp/Arduino/libraries/ArduinoJson/test/JsonWriter/CMakeLists.txt" : {
      "ObjectId" : "12a12bfdd50ba481245901d45bfabbcb14a8725f",
      "LastModified" : "2018-02-22T13:35:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ardesp/Arduino/libraries/ArduinoJson/test/Misc/CMakeLists.txt" : {
      "ObjectId" : "0b54bd7bd44f69112a8c9e7fe7683581fc225f8c",
      "LastModified" : "2018-02-22T13:35:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ardesp/Arduino/libraries/ArduinoJson/test/Polyfills/CMakeLists.txt" : {
      "ObjectId" : "d96ce719de8004d9cc93ca5a4a92617e74092f98",
      "LastModified" : "2018-02-22T13:35:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ardesp/Arduino/libraries/ArduinoJson/test/StaticJsonBuffer/CMakeLists.txt" : {
      "ObjectId" : "00c78dfa5986024650b84651250fc9f443e624c0",
      "LastModified" : "2018-02-22T13:35:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ardesp/Arduino/libraries/ArduinoJson/third-party/catch/CMakeLists.txt" : {
      "ObjectId" : "59515f54132a9eceb69535b8991a8c9021d8e92c",
      "LastModified" : "2018-02-22T13:35:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ArduinoJson - arduinojson.org\n\n# Copyright Benoit Blanchon 2014-2018\n\n# MIT License\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ardesp/Arduino/libraries/IRremoteESP8266/test/Makefile" : {
      "ObjectId" : "0630e1dfea4e044913fe58c3f3f9517b1fbf054a",
      "LastModified" : "2018-03-06T16:11:03Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# SYNOPSIS:\n\n#\n\n#   make [all]               - makes everything.\n\n#   make TARGET              - makes the given target.\n\n#   make run                 - makes everything and runs all the tests.\n\n#   make clean               - removes all files generated by make.\n\n#   make install-googletest  - install the googletest code suite\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Build and run all the tests.\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10,
      "Errorlog" : "line 60:8 token recognition error at: '\"PASS: \\o'\nline 60:19 token recognition error at: '\\o'\nline 60:46 token recognition error at: '\\o'\nline 60:50 token recognition error at: '\\o'\nline 60:53 token recognition error at: '\"; \\\\n\\tfi\\n\\ninstall-googletest :\\n\\tgit clone https://github.com/google/googletest.git ../lib/googletest\\n\\n# Builds gtest.a and gtest_main.a.\\n\\n# Usually you shouldn't tweak such internal variables, indicated by a\\n# trailing _.\\nGTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)\\n\\n# All the IR protocol object files.\\nPROTOCOLS = ir_NEC.o ir_Sony.o ir_Samsung.o ir_JVC.o ir_RCMM.o ir_RC5_RC6.o \\\\n    ir_LG.o ir_Mitsubishi.o ir_Fujitsu.o ir_Sharp.o ir_Sanyo.o ir_Denon.o ir_Dish.o \\\\n\\t\\tir_Panasonic.o ir_Whynter.o ir_Coolix.o ir_Aiwa.o ir_Sherwood.o \\\\n\\t\\tir_Kelvinator.o ir_Daikin.o ir_Gree.o ir_Pronto.o ir_Nikai.o ir_Toshiba.o \\\\n\\t\\tir_Midea.o ir_Magiquest.o ir_Lasertag.o ir_Carrier.o ir_Haier.o\\n\\n# Common object files\\nCOMMON_OBJ = IRutils.o IRtimer.o IRsend.o IRrecv.o ir_GlobalCache.o \\\\n             $(PROTOCOLS) gtest_main.a\\n# Common dependencies\\nCOMMON_DEPS = $(USER_DIR)/IRrecv.h $(USER_DIR)/IRsend.h $(USER_DIR)/IRtimer.h \\\\n              $(USER_DIR)/IRutils.h $(USER_DIR)/IRremoteESP8266.h\\n# Common test dependencies\\nCOMMON_TEST_DEPS = $(COMMON_DEPS) IRrecv_test.h IRsend_test.h\\n\\n# For simplicity and to avoid depending on Google Test's\\n# implementation details, the dependencies specified below are\\n# conservative and not optimized.  This is fine as Google Test\\n# compiles fast and for ordinary users its source rarely changes.\\ngtest-all.o : $(GTEST_SRCS_)\\n\\t$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \\\\n        $(GTEST_DIR)/src/gtest-all.cc\\n\\ngtest_main.o : $(GTEST_SRCS_)\\n\\t$(CXX) $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \\\\n        $(GTEST_DIR)/src/gtest_main.cc\\n\\ngtest.a : gtest-all.o\\n\\t$(AR) $(ARFLAGS) $@ $^\\n\\ngtest_main.a : gtest-all.o gtest_main.o\\n\\t$(AR) $(ARFLAGS) $@ $^\\n\\n# Builds our test.  A test should link with either gtest.a or\\n# gtest_main.a, depending on whether it defines its own main()\\n# function.\\n\\nIRutils.o : $(USER_DIR)/IRutils.cpp $(USER_DIR)/IRutils.h $(USER_DIR)/IRremoteESP8266.h\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/IRutils.cpp\\n\\nIRutils_test.o : IRutils_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c IRutils_test.cpp\\n\\nIRutils_test : IRutils_test.o ir_NEC.o ir_Nikai.o ir_Toshiba.o $(COMMON_OBJ) gtest_main.a\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nIRtimer.o : $(USER_DIR)/IRtimer.cpp $(USER_DIR)/IRtimer.h\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/IRtimer.cpp\\n\\nIRsend.o : $(USER_DIR)/IRsend.cpp $(USER_DIR)/IRsend.h $(USER_DIR)/IRremoteESP8266.h\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/IRsend.cpp\\n\\nIRsend_test.o : IRsend_test.cpp $(USER_DIR)/IRsend.h $(USER_DIR)/IRrecv.h IRsend_test.h $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c IRsend_test.cpp\\n\\nIRsend_test : IRsend_test.o $(COMMON_OBJ)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nIRrecv.o : $(USER_DIR)/IRrecv.cpp $(USER_DIR)/IRrecv.h $(USER_DIR)/IRremoteESP8266.h $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/IRrecv.cpp\\n\\nIRrecv_test.o : IRrecv_test.cpp $(USER_DIR)/IRsend.h $(USER_DIR)/IRrecv.h IRsend_test.h $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c IRrecv_test.cpp\\n\\nIRrecv_test : IRrecv_test.o $(COMMON_OBJ)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_NEC.o : $(USER_DIR)/ir_NEC.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_NEC.cpp\\n\\nir_NEC_test.o : ir_NEC_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_NEC_test.cpp\\n\\nir_NEC_test : $(COMMON_OBJ) ir_NEC_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_GlobalCache.o : $(USER_DIR)/ir_GlobalCache.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_GlobalCache.cpp\\n\\nir_GlobalCache_test.o : ir_GlobalCache_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_GlobalCache_test.cpp\\n\\nir_GlobalCache_test : $(COMMON_OBJ) ir_GlobalCache_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Sherwood.o : $(USER_DIR)/ir_Sherwood.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Sherwood.cpp\\n\\nir_Sherwood_test.o : ir_Sherwood_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Sherwood_test.cpp\\n\\nir_Sherwood_test : $(COMMON_OBJ) ir_Sherwood_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Sony.o : $(USER_DIR)/ir_Sony.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Sony.cpp\\n\\nir_Sony_test.o : ir_Sony_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Sony_test.cpp\\n\\nir_Sony_test : $(COMMON_OBJ) ir_Sony_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Samsung.o : $(USER_DIR)/ir_Samsung.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Samsung.cpp\\n\\nir_Samsung_test.o : ir_Samsung_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Samsung_test.cpp\\n\\nir_Samsung_test : $(COMMON_OBJ) ir_Samsung_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Kelvinator.o : $(USER_DIR)/ir_Kelvinator.cpp $(USER_DIR)/ir_Kelvinator.h $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Kelvinator.cpp\\n\\nir_Kelvinator_test.o : ir_Kelvinator_test.cpp $(USER_DIR)/ir_Kelvinator.h $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Kelvinator_test.cpp\\n\\nir_Kelvinator_test : $(COMMON_OBJ) ir_Kelvinator_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_JVC.o : $(USER_DIR)/ir_JVC.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_JVC.cpp\\n\\nir_JVC_test.o : ir_JVC_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_JVC_test.cpp\\n\\nir_JVC_test : $(COMMON_OBJ) ir_JVC_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_RCMM.o : $(USER_DIR)/ir_RCMM.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_RCMM.cpp\\n\\nir_RCMM_test.o : ir_RCMM_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_RCMM_test.cpp\\n\\nir_RCMM_test : $(COMMON_OBJ) ir_RCMM_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_LG.o : $(USER_DIR)/ir_LG.h $(USER_DIR)/ir_LG.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_LG.cpp\\n\\nir_LG_test.o : ir_LG_test.cpp $(USER_DIR)/ir_LG.h $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_LG_test.cpp\\n\\nir_LG_test : $(COMMON_OBJ) ir_LG_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Mitsubishi.o : $(USER_DIR)/ir_Mitsubishi.h $(USER_DIR)/ir_Mitsubishi.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Mitsubishi.cpp\\n\\nir_Mitsubishi_test.o : ir_Mitsubishi_test.cpp $(USER_DIR)/ir_Mitsubishi.h $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Mitsubishi_test.cpp\\n\\nir_Mitsubishi_test : $(COMMON_OBJ) ir_Mitsubishi_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Fujitsu.o : $(USER_DIR)/ir_Fujitsu.h $(USER_DIR)/ir_Fujitsu.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Fujitsu.cpp\\n\\nir_Fujitsu_test.o : ir_Fujitsu_test.cpp $(USER_DIR)/ir_Fujitsu.h $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Fujitsu_test.cpp\\n\\nir_Fujitsu_test : $(COMMON_OBJ) ir_Fujitsu_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Sharp.o : $(USER_DIR)/ir_Sharp.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Sharp.cpp\\n\\nir_Sharp_test.o : ir_Sharp_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Sharp_test.cpp\\n\\nir_Sharp_test : $(COMMON_OBJ) ir_Sharp_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_RC5_RC6.o : $(USER_DIR)/ir_RC5_RC6.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_RC5_RC6.cpp\\n\\nir_RC5_RC6_test.o : ir_RC5_RC6_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_RC5_RC6_test.cpp\\n\\nir_RC5_RC6_test : $(COMMON_OBJ) ir_RC5_RC6_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Panasonic.o : $(USER_DIR)/ir_Panasonic.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Panasonic.cpp\\n\\nir_Panasonic_test.o : ir_Panasonic_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Panasonic_test.cpp\\n\\nir_Panasonic_test : $(COMMON_OBJ) ir_Panasonic_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Dish.o : $(USER_DIR)/ir_Dish.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Dish.cpp\\n\\nir_Dish_test.o : ir_Dish_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Dish_test.cpp\\n\\nir_Dish_test : $(COMMON_OBJ) ir_Dish_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Whynter.o : $(USER_DIR)/ir_Whynter.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Whynter.cpp\\n\\nir_Whynter_test.o : ir_Whynter_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Whynter_test.cpp\\n\\nir_Whynter_test : $(COMMON_OBJ) ir_Whynter_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Coolix.o : $(USER_DIR)/ir_Coolix.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Coolix.cpp\\n\\nir_Coolix_test.o : ir_Coolix_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Coolix_test.cpp\\n\\nir_Coolix_test : $(COMMON_OBJ) ir_Coolix_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Aiwa.o : $(USER_DIR)/ir_Aiwa.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Aiwa.cpp\\n\\nir_Aiwa_test.o : ir_Aiwa_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Aiwa_test.cpp\\n\\nir_Aiwa_test : $(COMMON_OBJ) ir_Aiwa_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Denon.o : $(USER_DIR)/ir_Denon.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Denon.cpp\\n\\nir_Denon_test.o : ir_Denon_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Denon_test.cpp\\n\\nir_Denon_test : $(COMMON_OBJ) ir_Denon_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Sanyo.o : $(USER_DIR)/ir_Sanyo.cpp $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Sanyo.cpp\\n\\nir_Sanyo_test.o : ir_Sanyo_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Sanyo_test.cpp\\n\\nir_Sanyo_test : $(COMMON_OBJ) ir_Sanyo_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Daikin.o : $(USER_DIR)/ir_Daikin.cpp $(USER_DIR)/ir_Daikin.h $(COMMON_DEPS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Daikin.cpp\\n\\nir_Daikin_test.o : ir_Daikin_test.cpp $(USER_DIR)/ir_Daikin.h $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Daikin_test.cpp\\n\\nir_Daikin_test : $(COMMON_OBJ) ir_Daikin_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Gree.o : $(USER_DIR)/ir_Gree.cpp $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Gree.cpp\\n\\nir_Gree_test.o : ir_Gree_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Gree_test.cpp\\n\\nir_Gree_test : $(COMMON_OBJ) ir_Gree_test.o ir_Kelvinator.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Pronto.o : $(USER_DIR)/ir_Pronto.cpp $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Pronto.cpp\\n\\nir_Pronto_test.o : ir_Pronto_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Pronto_test.cpp\\n\\nir_Pronto_test : $(COMMON_OBJ) ir_Pronto_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Nikai.o : $(USER_DIR)/ir_Nikai.cpp $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Nikai.cpp\\n\\nir_Nikai_test.o : ir_Nikai_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Nikai_test.cpp\\n\\nir_Nikai_test : $(COMMON_OBJ) ir_Nikai_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Toshiba.o : $(USER_DIR)/ir_Toshiba.cpp $(USER_DIR)/ir_Toshiba.h $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Toshiba.cpp\\n\\nir_Toshiba_test.o : ir_Toshiba_test.cpp $(USER_DIR)/ir_Toshiba.h $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Toshiba_test.cpp\\n\\nir_Toshiba_test : $(COMMON_OBJ) ir_Toshiba_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Midea.o : $(USER_DIR)/ir_Midea.cpp $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Midea.cpp\\n\\nir_Midea_test.o : ir_Midea_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Midea_test.cpp\\n\\nir_Midea_test : $(COMMON_OBJ) ir_Midea_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Magiquest.o : $(USER_DIR)/ir_Magiquest.cpp $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Magiquest.cpp\\n\\nir_Magiquest_test.o : ir_Magiquest_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Magiquest_test.cpp\\n\\nir_Magiquest_test : $(COMMON_OBJ) ir_Magiquest_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Lasertag.o : $(USER_DIR)/ir_Lasertag.cpp $(USER_DIR)/ir_RC5_RC6.cpp $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Lasertag.cpp\\n\\nir_Lasertag_test.o : ir_Lasertag_test.cpp $(USER_DIR)/ir_RC5_RC6.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Lasertag_test.cpp\\n\\nir_Lasertag_test : $(COMMON_OBJ) ir_Lasertag_test.o ir_RC5_RC6.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Carrier.o : $(USER_DIR)/ir_Carrier.cpp $(COMMON_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Carrier.cpp\\n\\nir_Carrier_test.o : ir_Carrier_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Carrier_test.cpp\\n\\nir_Carrier_test : $(COMMON_OBJ) ir_Carrier_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\\nir_Haier.o : $(USER_DIR)/ir_Haier.cpp $(USER_DIR)/ir_Haier.h $(COMMON_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/ir_Haier.cpp\\n\\nir_Haier_test.o : ir_Haier_test.cpp $(COMMON_TEST_DEPS) $(GTEST_HEADERS)\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -I$(USER_DIR) -c ir_Haier_test.cpp\\n\\nir_Haier_test : $(COMMON_OBJ) ir_Haier_test.o\\n\\t$(CXX) $(CPPFLAGS) $(CXXFLAGS) -lpthread $^ -o $@\\n\u0000'\n"
    },
    "ardesp/Arduino/libraries/IRremoteESP8266/tools/Makefile" : {
      "ObjectId" : "a80cedf668fc918f7cb33a789e5218d412a7f599",
      "LastModified" : "2018-03-06T16:11:03Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find test code.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All the IR protocol object files.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Common object files\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Common dependencies\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Common test dependencies\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "ardesp/Arduino/libraries/PubSubClient/tests/Makefile" : {
      "ObjectId" : "1f7163675fd513448fa3260d8e9f7d4d58199c7e",
      "LastModified" : "2018-01-05T05:07:00Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "ardesp/Arduino/libraries/ssd1306/tools/kernelmod/Makefile" : {
      "ObjectId" : "460d30e48e226fe0f31202c5a369f7f09bad4718",
      "LastModified" : "2018-02-22T13:35:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "build_doc/Kicad_schematic_files/aquaponics-system.pro" : {
      "ObjectId" : "3a878d09e03829ebe74ee878b5edf43da9c80425",
      "LastModified" : "2018-02-22T13:35:11Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "build_doc/Kicad_schematic_files/waterelf.pro" : {
      "ObjectId" : "3ca9bee0633daf50a32a64d7134709eece5a7a52",
      "LastModified" : "2018-02-22T13:35:11Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "lua/Makefile" : {
      "ObjectId" : "d9a1c66661d0591213ebbbd7b9e115906ab2da48",
      "LastModified" : "2018-02-22T13:35:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile - toplevel build for Whiffy Fishy\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# store the SDK etc. either in ~/esp8266-stuff, or use ./esp8266-local-sdk\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# SDK and dev tool paths\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# which serial port?\n\n# for the Pi: ESPPORT=/dev/ttyAMA0\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# an innocuous default target\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rebuild nodemcu\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# copy a binary build of the firmware to our local tree\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# flash the firmware to the ESP8266\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# TODO         0x7E000 bin/blank.bin\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# run ESPlorer\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# run mqtt-spy (note: install mosquitto broker first!)\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "lua/joinme/Makefile" : {
      "ObjectId" : "7e5f4475b739fcba30a1385217d27f447e9cc009",
      "LastModified" : "2018-02-22T13:35:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "lua/wegrow/Makefile" : {
      "ObjectId" : "7e5f4475b739fcba30a1385217d27f447e9cc009",
      "LastModified" : "2018-02-22T13:35:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "wegrow-web/Makefile" : {
      "ObjectId" : "05f2aa58a0e263d9063b034abee66e58e46740b6",
      "LastModified" : "2018-02-22T13:35:11Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 13,
    "QMAKE" : 2,
    "MAKEFILE" : 10
  },
  "ElapsedTime" : 3257
}