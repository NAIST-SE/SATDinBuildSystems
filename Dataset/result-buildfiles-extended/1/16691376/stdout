{
  "Repository" : "16691376",
  "Revision" : "HEAD",
  "ObjectId" : "8e6500ae47ff74539cd2c0a9c4eebe96e69ca81d",
  "CommitTime" : "2017-11-28T22:54:12Z",
  "Files" : {
    "3rdparty/CMakeLists.txt" : {
      "ObjectId" : "ec9822c1c5168b1475b92338452657c7577c13f9",
      "LastModified" : "2014-04-28T19:33:48Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/cjson/CMakeLists.txt" : {
      "ObjectId" : "e666d34eb40a2d70a645915d123c8459e2230d64",
      "LastModified" : "2014-03-06T12:19:15Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/flite_hts_engine/CMakeLists.txt" : {
      "ObjectId" : "eb34c7c581948b1941b17f119083323e8d1a4140",
      "LastModified" : "2014-04-30T14:27:25Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/flite_hts_engine/Makefile.am" : {
      "ObjectId" : "5adc48cca96ccaae82bce5d65c004b8e72b7e40a",
      "LastModified" : "2014-03-10T09:32:43Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "3rdparty/flite_hts_engine/bin/Makefile.am" : {
      "ObjectId" : "f611f92ec608a72fd65b204c1e60ea50d9279351",
      "LastModified" : "2014-03-10T09:32:43Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "3rdparty/flite_hts_engine/lib/Makefile.am" : {
      "ObjectId" : "37af2968fc98e87ef1bbbccf7ca421a594cc6f32",
      "LastModified" : "2014-03-10T09:32:43Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "3rdparty/hts_engine_API/CMakeLists.txt" : {
      "ObjectId" : "da17894ad7f86224983c769f7c352297ba106b0a",
      "LastModified" : "2014-03-10T09:32:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/hts_engine_API/Makefile.am" : {
      "ObjectId" : "8cb280f02648a42f119c372183767c42fbaed5d7",
      "LastModified" : "2014-03-10T09:32:43Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "3rdparty/hts_engine_API/bin/Makefile.am" : {
      "ObjectId" : "29a38f6fdfbb5092bc992debfd176460bb368b4d",
      "LastModified" : "2015-12-30T23:05:25Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "3rdparty/hts_engine_API/lib/Makefile.am" : {
      "ObjectId" : "0e62b3ef27ea520fd286899bed26a36476662f83",
      "LastModified" : "2015-12-30T23:05:25Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "3rdparty/iaxclient/lib/CMakeLists.txt" : {
      "ObjectId" : "1a667a4e7b46d2d3c3c9bb0b9f14790297ce5032",
      "LastModified" : "2015-12-30T23:05:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists.txt, for utils/iaxclient/lib - 20130925\n\n# even if we don't select the codec, speex is used for pre-processing audio\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# for GSM\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# turn off various warnings\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# to use fgfs config.h to get FG version, if needed\n",
        "Line" : 150,
        "CharPositionInLine" : 35
      },
      "4" : {
        "Text" : "# add an iaxclient_lib version string\n",
        "Line" : 151,
        "CharPositionInLine" : 38
      },
      "5" : {
        "Text" : "# eof\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "3rdparty/iaxclient/lib/libiax2/Makefile.am" : {
      "ObjectId" : "40d3da560aa85acfb985fe1f6c4a6e1a96124274",
      "LastModified" : "2014-03-10T09:32:43Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "3rdparty/iaxclient/lib/libiax2/src/Makefile.am" : {
      "ObjectId" : "ac02c622ae2f15b74341ff3d60bf09885c310565",
      "LastModified" : "2014-03-10T09:32:43Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# -DDEBUG_DEFAULT \n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "3rdparty/mongoose/CMakeLists.txt" : {
      "ObjectId" : "26182797d421169fa7db12098a280454ae81e859",
      "LastModified" : "2014-03-10T09:32:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "3rdparty/sqlite3/CMakeLists.txt" : {
      "ObjectId" : "8ddae70e3da5f98b976058162541ab93d1f8280d",
      "LastModified" : "2017-03-30T09:24:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeLists.txt" : {
      "ObjectId" : "800932c3416a99be589f39b4d400b12d4c9b3fa0",
      "LastModified" : "2017-11-09T13:34:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Mac RPATH policy\n",
        "Line" : 12,
        "CharPositionInLine" : 3
      },
      "1" : {
        "Text" : "# Set a default build type if none was specified\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set the possible values of build type for cmake-gui\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Set the possible values of build type for cmake-gui\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# when building, don't use the install RPATH already\n\n# (but later on when installing)\n",
        "Line" : 37,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# let's use & require C++11 - note these are only functional with CMake 3.1\n\n# we do manual fallbacks for CMake 3.0 in the compilers section\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# We have some custom .cmake scripts not in the official distribution.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Warning when build is not an out-of-source build.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# using 10.7 because boost requires libc++ and 10.6 doesn't include it\n\n# Cmake documentation says we must set this before calling project(), but\n\n# it only seems to be picked up setting it /after/ the call to project()\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# System detection/default settings\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# read 'version' file into a variable (stripping any newlines or spaces)\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# add a dependency on the versino file\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# FlightGear packaging (to build a source tarball)\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# FlightGear base package path\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Change the default build type to something fast\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#####################################################################################\n\n# Configure library search paths\n\n#####################################################################################\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# FlightGear build options\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# additional utilities\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# when building an OSG with commit 15ec7e2ae7a8b983ecc44e1ce7363a9a9fa7da95\n\n# applied, we can use better link options\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# nothing\n",
        "Line" : 218,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# for iaxclient.h\n",
        "Line" : 233,
        "CharPositionInLine" : 69
      },
      "21" : {
        "Text" : "# Setup MSVC 3rd party directories\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Keep PLIB INPUT enabled as long as EventInput does not replace current joystick configurations.\n",
        "Line" : 255,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# check required dependencies\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "##############################################################################\n\n## Sqlite3 setup\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# this target is defined in src/Navaids/CMakeLists.txt\n",
        "Line" : 292,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Sqlite always depends on the threading lib\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "##############################################################################\n\n## DBus setup\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#if we don't have pkg-config, assume we don't have libdbus-1-dev either http://packages.debian.org/sid/libdbus-1-dev\n",
        "Line" : 306,
        "CharPositionInLine" : 29
      },
      "29" : {
        "Text" : "##############################################################################\n",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "##############################################################################\n\n## Qt5 setup setup\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# copied from KDAB's GammaRay CMakeLists.txt\n\n# Sanity checking, we need private includes for the following modules\n",
        "Line" : 349,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : "#HACK: CMake with broken Qt5Quick_PRIVATE_INCLUDE_DIRS\n",
        "Line" : 354,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# don't try to build FGQCanvas if Qt wasn't found correctly\n",
        "Line" : 367,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "##############################################################################\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# FlightGear and SimGear versions need to match major + minor\n\n# split version string into components, note CMAKE_MATCH_0 is the entire regexp match\n",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "##############################################################################\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# needed to avoid link errors on multiply-defined standard C++\n\n# symbols. This issue was fixed in OSG commit 15ec7e2ae7a8b983ecc44e1ce7363a9a9fa7da95\n",
        "Line" : 489,
        "CharPositionInLine" : 10
      },
      "38" : {
        "Text" : "# needed for debug builds with VS2015\n",
        "Line" : 495,
        "CharPositionInLine" : 12
      },
      "39" : {
        "Text" : "# following is needed, because config.h is include 'bare', whereas\n\n# version.h is included as <Include/version.h> - this should be cleaned up\n",
        "Line" : 529,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# configure a header file to pass some of the CMake settings\n\n# to the source code\n",
        "Line" : 543,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#and the same for the version header\n",
        "Line" : 550,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# enable CTest / make test target\n",
        "Line" : 560,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "# tests disabled until shared library export is fixed on Windows\n",
        "Line" : 566,
        "CharPositionInLine" : 6
      },
      "44" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n### uninstall target\n\n#-----------------------------------------------------------------------------\n",
        "Line" : 581,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 45
    },
    "CMakeModules/ConfigureCPack.cmake" : {
      "ObjectId" : "c21f914a3862f57b6339004dd523424439da790e",
      "LastModified" : "2014-03-10T09:32:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ConfigureCPack.cmake -- Configure CPack packaging\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# clean tar-balls do not contain SCM (.git/.gitignore/...) files.\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# split version string into components, note CMAKE_MATCH_0 is the entire regexp match\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMakeModules/ConfigureMsvc3rdParty.cmake" : {
      "ObjectId" : "dd06badec94cfee5b8a32e3dd9a742d67d57c123",
      "LastModified" : "2017-03-30T09:24:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ConfigureMsvc3rdParty.cmake - Configure 3rd Party Library Paths on Windows\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if this variable was not set by the user, set it to 3rdparty root's\n\n# parent dir, which is the normal location for people using our\n\n# windows-3rd-party repo\n",
        "Line" : 44,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "CMakeModules/DetectArch.cmake" : {
      "ObjectId" : "33849d1a53ef163a555c592074f2c7ffd38ec482",
      "LastModified" : "2017-03-30T09:24:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# using Clang\n",
        "Line" : 20,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# using TinyCC\n",
        "Line" : 23,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# using GCC\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# using Intel C++\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# using Visual Studio C++\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# using SGI MIPSpro\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "CMakeModules/DetectBrowser.cmake" : {
      "ObjectId" : "6d4be54525cc8d498c45eb1af519ff79b29fb84a",
      "LastModified" : "2017-03-30T09:24:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DetectBrowser.cmake -- Detect web browser launcher application\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set default command to open browser. Override with -DWEB_BROWSER=...\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# opening the web browser is hardcoded for Mac and Windows,\n\n# so this doesn't really have an effect...\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# \"xdg-open\" provides run-time detection of user's preferred browser on (most) Linux.\n",
        "Line" : 10,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Debian is different: \"sensible-browser\" provides auto-detection\n",
        "Line" : 14,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# Default for non Linux/non Mac/non Windows platform...\n",
        "Line" : 18,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 6
    },
    "CMakeModules/DetectDistro.cmake" : {
      "ObjectId" : "5f81a4b713acfcd9b03312c94ab82928c2b6efb5",
      "LastModified" : "2017-03-30T09:24:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# DetectDistro.cmake -- Detect Linux distribution\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Detect Linux distribution (if possible)\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "CMakeModules/FindAAX.cmake" : {
      "ObjectId" : "4e0bfdcd27ada32ad916c00fc0e1023223482875",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate AAX\n\n# This module defines\n\n# AAX_LIBRARIES\n\n# AAX_FOUND, if false, do not try to link to AAX \n\n# AAX_INCLUDE_DIR, where to find the headers\n\n#\n\n# $AAXDIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$AAXDIR\n\n# used in building AAX.\n\n#\n\n# Created by Erik Hofman.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/FindCrashRpt.cmake" : {
      "ObjectId" : "89383fd52704d6a9351c40485bc68269d62f8270",
      "LastModified" : "2017-03-30T09:24:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find CrashRpt\n\n# ~~~~~~~~~~~~\n\n# Copyright (c) 2014, James Turner <zakalawe at mac dot com>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n# CMake module to search for CrashRpt library\n\n#\n\n# If it's found it sets CRASHRPT_FOUND to TRUE\n\n# and following variables are set:\n\n#    CRASHRPT_FOUND_INCLUDE_DIR\n\n#    CRASHRPT_FOUND_LIBRARY\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/FindFlite.cmake" : {
      "ObjectId" : "7a54708d0d6073695e7bf105c9a8f1adeca3bd73",
      "LastModified" : "2017-03-30T09:24:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Flite\n\n# Once done this will define\n\n#\n\n#  FLITE_FOUND - system has Flite\n\n#  FLITE_INCLUDE_DIRS - the Flite include directory\n\n#  FLITE_LIBRARIES - Link these to use Flite\n\n#  FLITE_DEFINITIONS - Compiler switches required for using Flite\n\n#\n\n#  Copyright (c) 2013 Saikrishna Arcot <saiarcot895@gmail.com>\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#set(FLITE_DEFINITIONS ${_FliteCflags})\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# show the FLITE_INCLUDE_DIRS and FLITE_LIBRARIES variables only in the advanced view\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "CMakeModules/FindGit.cmake" : {
      "ObjectId" : "06df3b0919d61264dabd07aeb64c2e404e516bc5",
      "LastModified" : "2017-03-30T09:24:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The module defines the following variables:\n\n#   GIT_EXECUTABLE - path to git command line client\n\n#   GIT_FOUND - true if the command line client was found\n\n# Example usage:\n\n#   find_package(Git)\n\n#   if(GIT_FOUND)\n\n#     message(\"git found: ${GIT_EXECUTABLE}\")\n\n#   endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2010 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for 'git' or 'eg' (easy git)\n\n#\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Prefer .cmd variants on Windows unless running in a Makefile\n\n# in the MSYS shell.\n\n#\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set GIT_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "CMakeModules/FindGooglePerfTools.cmake" : {
      "ObjectId" : "c787e87e16a287030a79d9e0d04135336b861d58",
      "LastModified" : "2017-03-30T09:24:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GooglePerfTools headers and libraries\n\n#\n\n# Usage of this module as follows:\n\n#\n\n#   find_package(GooglePerfTools)\n\n#\n\n# Variables used by this module, they can change the default behaviour and need\n\n# to be set before calling find_package:\n\n#\n\n#  GooglePerfTools_ROOT_DIR  Set this variable to the root installation of\n\n#                            GooglePerfTools if the module has problems finding\n\n#                            the proper installation path.\n\n#\n\n# Variables defined by this module:\n\n#\n\n#  GooglePerfTools_FOUND              System has GooglePerfTools libs/headers\n\n#  GooglePerfTools_LIBRARIES          The GooglePerfTools libraries\n\n#  GooglePerfTools_INCLUDE_DIR        The location of GooglePerfTools headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/FindGsm.cmake" : {
      "ObjectId" : "1add357c1da3527b2edb83bb44176c9ba1b0ff4e",
      "LastModified" : "2017-03-30T09:24:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GSM\n\n# Once done this will define\n\n#\n\n#  GSM_FOUND - system has GSM\n\n#  GSM_INCLUDE_DIRS - the GSM include directory\n\n#  GSM_LIBRARIES - Link these to use GSM\n\n#  GSM_DEFINITIONS - Compiler switches required for using GSM\n\n#\n\n#  Copyright (c) 2006 Andreas Schneider <mail@cynapses.org>\n\n#  Edited by Saikrishna Arcot <saiarcot895@gmail.com> to find the GSM library\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n\n#include(UsePkgConfig)\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#FIXME pkgconfig does not work: return a carriage return that makes compilation failed\n\n#pkgconfig(speex _GsmIncDir _GsmLinkDir _GsmLinkFlags _GsmCflags)\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#set(GSM_DEFINITIONS ${_GsmCflags})\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# show the GSM_INCLUDE_DIRS and GSM_LIBRARIES variables only in the advanced view\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "CMakeModules/FindHtsEngine.cmake" : {
      "ObjectId" : "ebd15c0c46755742dc0acebb8fa85d1b55a158e9",
      "LastModified" : "2017-03-30T09:24:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find HTS Engine\n\n# Once done this will define\n\n#\n\n#  HTS_ENGINE_FOUND - system has HTS Engine\n\n#  HTS_ENGINE_INCLUDE_DIRS - the HTS Engine include directory\n\n#  HTS_ENGINE_LIBRARIES - Link these to use HTS Engine\n\n#  HTS_ENGINE_DEFINITIONS - Compiler switches required for using HTS Engine\n\n#\n\n#  Copyright (c) 2013 Saikrishna Arcot <saiarcot895@gmail.com>\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#set(HTS_ENGINE_DEFINITIONS ${_HTS_EngineCflags})\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# show the HTS_ENGINE_INCLUDE_DIRS and HTS_ENGINE_LIBRARIES variables only in the advanced view\n",
        "Line" : 75,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "CMakeModules/FindPLIB.cmake" : {
      "ObjectId" : "b787983c15722fb6b53ad61ed7c1744eacc081b2",
      "LastModified" : "2017-03-30T09:24:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate PLIB\n\n# This module defines\n\n# PLIB_LIBRARIES\n\n# PLIB_FOUND, if false, do not try to link to PLIB \n\n# PLIB_INCLUDE_DIR, where to find the headers\n\n#\n\n# $PLIBDIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$PLIBDIR\n\n# used in building PLIB.\n\n#\n\n# Created by James Turner. This was influenced by the FindOpenAL.cmake module.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distributed this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# check for dynamic framework on Mac ()\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# account for alternative Windows PLIB distribution naming\n",
        "Line" : 62,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#message(STATUS \"Simgear ${compLibName}_RELEASE ${componentLibRelease}\")\n",
        "Line" : 87,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#message(STATUS \"Simgear ${compLibName}_DEBUG ${componentLibDebug}\")\n",
        "Line" : 89,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#message(STATUS \"found ${componentLib}\")\n",
        "Line" : 92,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# clear value\n",
        "Line" : 101,
        "CharPositionInLine" : 27
      },
      "8" : {
        "Text" : "# based on the contents of deps, add other required PLIB\n\n# static library dependencies. Eg PUI requires FNT\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# handle MSVC confusion over pu/pui naming, by removing\n\n# 'pu' and then adding it back\n",
        "Line" : 109,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# everything needs ul\n",
        "Line" : 120,
        "CharPositionInLine" : 30
      },
      "11" : {
        "Text" : "# clean up\n",
        "Line" : 121,
        "CharPositionInLine" : 36
      },
      "12" : {
        "Text" : "# look for traditional static libraries\n",
        "Line" : 124,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# resolve frameworks to full paths\n",
        "Line" : 134,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# anything needed here?\n",
        "Line" : 142,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# check_function_exists(hidinit)\n",
        "Line" : 145,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 16
    },
    "CMakeModules/FindSQLite3.cmake" : {
      "ObjectId" : "5210c8b690fa29bfcd100885a973b43f080564a7",
      "LastModified" : "2017-03-30T09:24:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Sqlite3\n\n# ~~~~~~~~~~~~\n\n# Copyright (c) 2007, Martin Dobias <wonder.sk at gmail.com>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n\n# CMake module to search for Sqlite3 library\n\n#\n\n# If it's found it sets SQLITE3_FOUND to TRUE\n\n# and following variables are set:\n\n#    SQLITE3_INCLUDE_DIR\n\n#    SQLITE3_LIBRARY\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIND_PATH and FIND_LIBRARY normally search standard locations\n\n# before the specified paths. To search non-standard paths first,\n\n# FIND_* is invoked first with specified paths and NO_DEFAULT_PATH\n\n# and then again with no specified paths to search the default\n\n# locations. When an earlier FIND_* succeeds, subsequent FIND_*s\n\n# searching for the same item do nothing. \n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "CMakeModules/FindSpeex.cmake" : {
      "ObjectId" : "95a8d1a28c6ee22203d5460e66d4ac7c2d8719d0",
      "LastModified" : "2017-03-30T09:24:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Speex\n\n# Once done this will define\n\n#\n\n#  SPEEX_FOUND - system has Speex\n\n#  SPEEX_INCLUDE_DIRS - the Speex include directory\n\n#  SPEEX_LIBRARIES - Link these to use Speex\n\n#  SPEEX_DEFINITIONS - Compiler switches required for using Speex\n\n#\n\n#  Copyright (c) 2006 Andreas Schneider <mail@cynapses.org>\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n\n#include(UsePkgConfig)\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#FIXME pkgconfig does not work: return a carriage return that makes compilation failed\n\n#pkgconfig(speex _SpeexIncDir _SpeexLinkDir _SpeexLinkFlags _SpeexCflags)\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#set(SPEEX_DEFINITIONS ${_SpeexCflags})\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# show the SPEEX_INCLUDE_DIRS and SPEEX_LIBRARIES variables only in the advanced view\n",
        "Line" : 84,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "CMakeModules/FindSpeexdsp.cmake" : {
      "ObjectId" : "84ebb5665068a2ffb2ff44b4d3fe4cbd8acb8579",
      "LastModified" : "2017-03-30T09:24:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Speex extended library\n\n# Once done this will define\n\n#\n\n#  SPEEXDSP_FOUND - system has Speex extended library\n\n#  SPEEXDSP_INCLUDE_DIRS - the Speex extended library include directory\n\n#  SPEEXDSP_LIBRARIES - Link these to use Speex extended library\n\n#  SPEEXDSP_DEFINITIONS - Compiler switches required for using Speex extended library\n\n#\n\n#  Copyright (c) 2006 Andreas Schneider <mail@cynapses.org>\n\n#  Edited by Saikrishna Arcot <saiarcot895@gmail.com> to find the Speex extended library\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n\n#include(UsePkgConfig)\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#FIXME pkgconfig does not work: return a carriage return that makes compilation failed\n\n#pkgconfig(speexdsp _SpeexDspIncDir _SpeexDspLinkDir _SpeexDspLinkFlags _SpeexDspCflags)\n",
        "Line" : 26,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#set(SPEEXDSP_DEFINITIONS ${_SpeexDspCflags})\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# show the SPEEXDSP_INCLUDE_DIRS and SPEEXDSP_LIBRARIES variables only in the advanced view\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 6
    },
    "CMakeModules/FindUDev.cmake" : {
      "ObjectId" : "f6d2a257542db9ead54a7e8c876c46ef41df17e9",
      "LastModified" : "2017-03-30T09:24:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Configure libudev environment\n\n#\n\n# UDEV_FOUND - system has a libudev\n\n# UDEV_INCLUDE_DIR - where to find header files\n\n# UDEV_LIBRARIES - the libraries to link against udev\n\n# UDEV_STABLE - it's true when is the version greater or equals to 143 - version when the libudev was stabilized in its API\n\n#\n\n# copyright (c) 2011 Petr Vanek <petr@scribus.info>\n\n# Redistribution and use of this file is allowed according to the terms of the BSD license.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# retvale is 0 of the condition is \"true\" so we need to negate the value...\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "CMakeModules/FlightGearComponent.cmake" : {
      "ObjectId" : "0136e447c85e03a9c2fada0e5630c2b3ea0c74bb",
      "LastModified" : "2017-03-30T09:24:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/SelectLibraryConfigurations.cmake" : {
      "ObjectId" : "edba5d9d6e7fd66acb5d26f2a6000c635ece2e50",
      "LastModified" : "2017-03-30T09:24:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# select_library_configurations( basename )\n\n#\n\n# This macro takes a library base name as an argument, and will choose good\n\n# values for basename_LIBRARY, basename_LIBRARIES, basename_LIBRARY_DEBUG, and\n\n# basename_LIBRARY_RELEASE depending on what has been found and set.  If only\n\n# basename_LIBRARY_RELEASE is defined, basename_LIBRARY, basename_LIBRARY_DEBUG,\n\n# and basename_LIBRARY_RELEASE will be set to the release value.  If only\n\n# basename_LIBRARY_DEBUG is defined, then basename_LIBRARY,\n\n# basename_LIBRARY_DEBUG and basename_LIBRARY_RELEASE will take the debug value.  \n\n#\n\n# If the generator supports configuration types, then basename_LIBRARY and\n\n# basename_LIBRARIES will be set with debug and optimized flags specifying the\n\n# library to be used for the given configuration.  If no build type has been set\n\n# or the generator in use does not support configuration types, then\n\n# basename_LIBRARY and basename_LIBRARIES will take only the release values.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2009 Kitware, Inc.\n\n# Copyright 2009 Will Dicharry <wdicharry@stellarscience.com>\n\n# Copyright 2005-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distributed this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This macro was adapted from the FindQt4 CMake module and is maintained by Will\n\n# Dicharry <wdicharry@stellarscience.com>.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Utility macro to check if one variable exists while another doesn't, and set\n\n# one that doesn't exist to the one that exists.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# if only the release version was found, set the debug to be the release\n\n# version.\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# if only the debug version was found, set the release value to be the\n\n# debug value.\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# if the generator supports configuration types or CMAKE_BUILD_TYPE\n\n# is set, then set optimized and debug options.\n",
        "Line" : 53,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# If there are no configuration types or build type, just use\n\n# the release version\n",
        "Line" : 63,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 8
    },
    "README.cmake" : {
      "ObjectId" : "863c2e77a9ac9078b1b5721d721a417fab43ac59",
      "LastModified" : "2017-03-30T09:24:07Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "icons/CMakeLists.txt" : {
      "ObjectId" : "d8ba9cac2b29789ce362c098f1af231f9d2412ca",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "man/CMakeLists.txt" : {
      "ObjectId" : "355e8c386ead77814888b83b3516016c44686112",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Don't install man pages on Windows\n",
        "Line" : 1,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 1
    },
    "man/it/CMakeLists.txt" : {
      "ObjectId" : "493bd5c89bd4f8ce6113e17921d890539c6dd370",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "man/it/man1/CMakeLists.txt" : {
      "ObjectId" : "4532a81d4fc8ba16a35f79dd4d1f47a821251fc0",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "man/it/man5/CMakeLists.txt" : {
      "ObjectId" : "db7e64cd57e73f91a626b8d8d7901d20ee1a265a",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "man/man1/CMakeLists.txt" : {
      "ObjectId" : "0e805af6867bba56a43e56fd6aa5c6898f9d6d1d",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "man/man5/CMakeLists.txt" : {
      "ObjectId" : "7a81f8588ee0503ca78bba0fed174281a2cbeeac",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "package/CMakeLists.txt" : {
      "ObjectId" : "b92f0ac91e504c275fdf07954bd1116f2715459a",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "scripts/CMakeLists.txt" : {
      "ObjectId" : "b61db7ba4a624fad235268ac76a352a515f51631",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install bash and zsh completion files.\n\n#\n\n# The install path is not detected at runtime (contrary to what the\n\n# bash-completion documentation suggests, see\n\n# <https://github.com/scop/bash-completion/blob/master/README.md>) to account\n\n# for those cases where the FlightGear installation prefix is not /usr.\n\n# See <https://sourceforge.net/p/flightgear/flightgear/merge-requests/96/#e6f4>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "scripts/java/FGClient/build.xml" : {
      "ObjectId" : "d10590f8189fd7c2ee9fe6b31f88f35be89bafa7",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "ANT",
      "CommentCount" : 0
    },
    "src/AIModel/CMakeLists.txt" : {
      "ObjectId" : "08105fee0a26b14b9882853a8e255de9639685a3",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ATC/CMakeLists.txt" : {
      "ObjectId" : "934338115bff1d4d8c33b54f05c4cf5261b0f6c6",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Aircraft/CMakeLists.txt" : {
      "ObjectId" : "419923663828cf9a67f4e0987b724b3a3362f1ef",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Airports/CMakeLists.txt" : {
      "ObjectId" : "48e8cf8245d2de4d7da187b550548c1db8c4a756",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Autopilot/CMakeLists.txt" : {
      "ObjectId" : "130edc0abda50237d5872e2c05210601f0166f94",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "0ed3618babb6780fb2b481ba4cb794ed6d28c39a",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# note order here affects link order, and hence linking correctness\n\n# on systems with a traditional ld (eg, GNU ld on Linux)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/Canvas/CMakeLists.txt" : {
      "ObjectId" : "cc4ec18fc4a1db8d0cb1a4e7920b1461d89a6bd2",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Cockpit/CMakeLists.txt" : {
      "ObjectId" : "42b03bac23be3ad7e549a989cb114f7cce38e14e",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/EmbeddedResources/CMakeLists.txt" : {
      "ObjectId" : "662623a0eb30366367e89c0749ab27679ae30853",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Environment/CMakeLists.txt" : {
      "ObjectId" : "26ce261dfa47d9a2fcd3fa3abde88e8fbf718587",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/FDM/CMakeLists.txt" : {
      "ObjectId" : "72a956761240853acbfc778198ae0d929dc81599",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME - push this down once JSBSim doesn't expose private headers\n",
        "Line" : 167,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/FDM/JSBSim/CMakeLists.txt" : {
      "ObjectId" : "f203b4a4eec3f150c12f7610e16ff03bf8aa4430",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# eof\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/FDM/YASim/CMakeLists.txt" : {
      "ObjectId" : "0d7efa88158c74e61187aabef1cc631b4b6cf05d",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/GUI/CMakeLists.txt" : {
      "ObjectId" : "b4ce97216403265341c818facdf5d35f5945697f",
      "LastModified" : "2017-10-31T09:54:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Input/CMakeLists.txt" : {
      "ObjectId" : "629fe66edf912a27cf4c28775700e1f0f90ab02c",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Instrumentation/CMakeLists.txt" : {
      "ObjectId" : "ee3cd55fce58f219c36a57449f17bf179de5c9c3",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Main/CMakeLists.txt" : {
      "ObjectId" : "74c7fd7a75a53b93fc4364fb00078efee7270187",
      "LastModified" : "2017-10-31T09:54:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# On Windows, make sure fgrcc can be run (it needs third-party libraries)\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# important we pass WIN32 here so the console is optional. Other\n\n# platforms ignore this option. If a console is needed we allocate\n\n# it manually via AllocConsole()\n\n# similarly pass MACOSX_BUNDLE so we generate a .app on Mac\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#-----------------------------------------------------------------------------\n\n# MacOSX bundle packagaing\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# in our local CMakeModules dir\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#-----------------------------------------------------------------------------\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#message(STATUS \"fg libs ${FG_LIBS}\")\n\n#message(STATUS \"OSG libs ${OPENSCENEGRAPH_LIBRARIES}\")\n\n#message(STATUS \"SG libs ${SIMGEAR_LIBRARIES}\")\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# FIXME - remove once JSBSim doesn't expose private headers\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "src/Model/CMakeLists.txt" : {
      "ObjectId" : "21e295a99426faacd5fb4b52ed2d07a53ddc3d5c",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/MultiPlayer/CMakeLists.txt" : {
      "ObjectId" : "c2d0f59b55b2e7ab2cec0421132435ca4100b22b",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Navaids/CMakeLists.txt" : {
      "ObjectId" : "3196eba235b6845b80fefc8f63796f05ccbba23e",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Network/CMakeLists.txt" : {
      "ObjectId" : "7a928830134b210d303b05a8fc8d383a6d7a1981",
      "LastModified" : "2017-11-24T21:54:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Network/HLA/CMakeLists.txt" : {
      "ObjectId" : "aeed0529dbd2d43a0e416e72cbe52eb7572d15aa",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Network/http/CMakeLists.txt" : {
      "ObjectId" : "5f426515b04cddde8fe4b6fa4b83e18052ae0955",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Radio/CMakeLists.txt" : {
      "ObjectId" : "a1221aef7ac12675ea2b966fc1b26a122826c155",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Scenery/CMakeLists.txt" : {
      "ObjectId" : "7a4d0e3f8a29848b2a0f70d1e563e6959e4be1e7",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Scripting/CMakeLists.txt" : {
      "ObjectId" : "1a40daa70ab7f585f0bf0ae0a30a9d79f8e1d955",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Sound/CMakeLists.txt" : {
      "ObjectId" : "8b342435f102efc1560ed33e431389b3a51b39cf",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Systems/CMakeLists.txt" : {
      "ObjectId" : "bacc7efc3160dd5306a306b4d20ab5df9f4a02cf",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Time/CMakeLists.txt" : {
      "ObjectId" : "5366a247779b43ac23dc4171b75582c95dc89b73",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Traffic/CMakeLists.txt" : {
      "ObjectId" : "adc7fcd2d443b2e1628d97493902b99463c67bf0",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/Viewer/CMakeLists.txt" : {
      "ObjectId" : "1ac79feb0a284147632614f205670169644d20e1",
      "LastModified" : "2017-11-24T21:54:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "07e964c1faa010a13da95c334de048661f3f7130",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  ATC/GroundController.cxx\n\n#  ATC/atc_mgr.cxx\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "utils/CMakeLists.txt" : {
      "ObjectId" : "6e4d5613d803061535f671aa64f7f85e27e43fb4",
      "LastModified" : "2017-11-24T21:54:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# win32 is just excluded because of not having argument parsing there ...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "utils/GPSsmooth/CMakeLists.txt" : {
      "ObjectId" : "fdc83663969629fceb9ac24175ab4e5dd3fe89a6",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/TerraSync/CMakeLists.txt" : {
      "ObjectId" : "93ab7c888257560668c85cba2eb3302af1920e9b",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_executable(terrasync terrasync.cxx)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#target_link_libraries(terrasync SimGearCore)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#install(TARGETS terrasync RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR})\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "utils/demconvert/CMakeLists.txt" : {
      "ObjectId" : "ad89bbf8e2f33292aafd8b38faa642afde7dee69",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/fgai/CMakeLists.txt" : {
      "ObjectId" : "5c6f569244b069d2f6f38fab2b0c65f9988521aa",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/fgcom/CMakeLists.txt" : {
      "ObjectId" : "273c2d256c27d677f5f8e6103ceb95cd0b8efc5b",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copy positions.txt content in const char* _positionsData[];\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "utils/fgelev/CMakeLists.txt" : {
      "ObjectId" : "9e729ef4c03a2278a94a3a47160bd925c360db15",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/fgpanel/CMakeLists.txt" : {
      "ObjectId" : "24f144ff8ada13bfe4276dae6df517921e833c4a",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMAKE > 3.1 : target_sources(fgpanel\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "utils/fgqcanvas/CMakeLists.txt" : {
      "ObjectId" : "e1bc2774e2823b539bab3aa2d8d3545c4ee87f98",
      "LastModified" : "2017-11-24T21:54:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#qt5_wrap_ui(uic_sources temporarywidget.ui)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# so ui_foo.h files are found\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "utils/fgqcanvas/fgcanvas.pro" : {
      "ObjectId" : "bee81c22fb20093f3ddd27c289752b28e1cdd22a",
      "LastModified" : "2017-11-24T21:54:32Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "utils/fgviewer/CMakeLists.txt" : {
      "ObjectId" : "cc258b0ed90a7d96029140c6163001714fafc062",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/stgmerge/CMakeLists.txt" : {
      "ObjectId" : "ef615dc52f659a5ad964a25c2f3b2525f28a4307",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/traffic/CMakeLists.txt" : {
      "ObjectId" : "bff4a40e7c8f8cd26668465a7b16fc8fb93d9e78",
      "LastModified" : "2017-10-31T09:53:34Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 81,
    "QMAKE" : 1,
    "AUTOMAKE" : 8,
    "ANT" : 1
  },
  "ElapsedTime" : 4142
}