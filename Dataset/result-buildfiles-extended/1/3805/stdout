{
  "Repository" : "3805",
  "Revision" : "HEAD",
  "ObjectId" : "299f033ef955a7593c9d3796238c6dc690b537c8",
  "CommitTime" : "2019-02-03T02:35:12Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "9422a808ebb7d95177f3dc7429dbd2466b36abc2",
      "LastModified" : "2019-02-03T02:35:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO:\n\n# Update to NEW and fix things up\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Let AUTOMOC and AUTOUIC process generated files\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TODO:\n\n# Disable automatic qtmain linking\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###\n\n### Tomahawk application info\n\n###\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# add_definitions is only in the scope of this directory and all directories\n\n# below it. Tomahawk Libraries and plugins that are built with Tomahawk are\n\n# not included in out-of-source build so we need to re-add_definitions there.\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# enforce proper symbol exporting on all platforms but Windows\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# enforce using constBegin, constEnd for const-iterators\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# build options\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# build options for development purposes\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# generate version string\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# base string used in release and unstable builds\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# additional info for non-release builds\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# write Tomahawk version to cache\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# set paths\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# make predefined install dirs available everywhere\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# installer creation\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# deps\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# We need this to find the paths to qdbusxml2cpp and co\n",
        "Line" : 188,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# FIXME: CrashReporter depends on deprecated QHttp\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#FIXME: give useful explanation\n",
        "Line" : 210,
        "CharPositionInLine" : 133
      },
      "20" : {
        "Text" : "# we need pthreads too\n",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "### QtSparkle\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "### libportfwd\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#### submodules start\n\n# automatically init submodules here, don't delete this code we may add submodules again\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# this installs headers and such and should really be handled in a separate package by packagers\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# IF( FALSE )\n\n#     IF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.gitmodules)\n\n#         EXECUTE_PROCESS(COMMAND git submodule init WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} )\n\n#         EXECUTE_PROCESS(COMMAND git submodule update WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} )\n\n#     ENDIF(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/.gitmodules)\n\n# ENDIF()\n",
        "Line" : 299,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#### submodules end\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#show dep log\n",
        "Line" : 310,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# make uninstall support\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Make linking as strict on linux as it is on osx. Then we don't break linking on mac so often\n\n#\n\n# On using Address Sanitizer, we cannot link to the ASAN lib, so\n\n# --no-undefined would break the build.\n",
        "Line" : 322,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Early configure these files as we need them later on\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Add all targets to the build-tree export set\n",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Export the package for use from the build-tree\n\n# (this registers the build-tree with a global CMake-registry)\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Create a TomahawkBuildTreeSettings.cmake file for the use from the build tree\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Create the TomahawkConfig.cmake and TomahawkConfigVersion files\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Install the cmake files\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Install the export set for use with the install-tree\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 37
    },
    "CMakeModules/CMakeDateStamp.cmake" : {
      "ObjectId" : "0b6a3896f75724746abfd9d40e8176f4f431461b",
      "LastModified" : "2011-07-20T00:05:16Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/CMakeVersionSource.cmake" : {
      "ObjectId" : "826546807282e67f47d283b5e393ee92a7e8fc20",
      "LastModified" : "2011-07-20T04:56:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to identify the current development source version.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/CheckTagLibFileName.cmake" : {
      "ObjectId" : "e5b3706c97a98905bbcbf4c0aa953e7e058b8c8d",
      "LastModified" : "2018-10-30T19:19:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# taglib changed filenames to be a char/wchar struct on some platforms, need to check for it\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/FindJreen.cmake" : {
      "ObjectId" : "05fc19b845a3b3e596a4bdd3495d37c1960eb90c",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find libjreen\n\n# Find the libjreen includes and the libjreen libraries\n\n# This module defines\n\n# LIBJREEN_INCLUDE_DIR, root jreen include dir. Include jreen includes with jreen/foo.h\n\n# LIBJREEN_LIBRARY, the path to libjreen\n\n# LIBJREEN_FOUND, whether libjreen was found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/FindLIBVLC.cmake" : {
      "ObjectId" : "db797ada6d76449fdef49ffb0a65f1165204b4a4",
      "LastModified" : "2015-12-22T18:12:48Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/FindLibAttica.cmake" : {
      "ObjectId" : "bb919da773a2f1d81c4b983f95fb185495643bb7",
      "LastModified" : "2011-09-11T22:15:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the Attica library\n\n# Once done this will define\n\n#\n\n#   LIBATTICA_FOUND          Indicates that Attica was found\n\n#   LIBATTICA_LIBRARIES      Libraries needed to use Attica\n\n#   LIBATTICA_LIBRARY_DIRS   Paths needed for linking against Attica\n\n#   LIBATTICA_INCLUDE_DIR    Path needed for finding Attica include files\n\n#\n\n# The minimum required version of LibAttica can be specified using the\n\n# standard syntax, e.g. find_package(LibAttica 0.20)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2009 Frederik Gladhorn <gladhorn@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Support LIBATTICA_MIN_VERSION for compatibility:\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the minimum version of LibAttica we require\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 28,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# Store the version number in the cache, so we don't have to search everytime:\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "CMakeModules/FindLibLastFm.cmake" : {
      "ObjectId" : "6b9442405adcd544078282556bb14461a70fd777",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find LibLastFm\n\n#\n\n#  LIBLASTFM_FOUND - system has liblastfm\n\n#  LIBLASTFM_INCLUDE_DIRS - the liblastfm include directories\n\n#  LIBLASTFM_LIBRARIES - link these to use liblastfm\n\n#\n\n# (c) Dominik Schmidt <dev@dominik-schmidt.de>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include dir\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Track.h doesn't exist in liblastfm-0.3.1, was called Track back then\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Finally the library itself\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "CMakeModules/FindLibraryWithDebug.cmake" : {
      "ObjectId" : "afa422dddae82c19ad87c4dcab58cf9f77fc1bce",
      "LastModified" : "2011-09-11T22:15:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n#  FIND_LIBRARY_WITH_DEBUG\n\n#  -> enhanced FIND_LIBRARY to allow the search for an\n\n#     optional debug library with a WIN32_DEBUG_POSTFIX similar\n\n#     to CMAKE_DEBUG_POSTFIX when creating a shared lib\n\n#     it has to be the second and third argument\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2007, Christian Ehrlicher, <ch.ehrlicher@gmx.de>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# no WIN32_DEBUG_POSTFIX -> simply pass all arguments to FIND_LIBRARY\n",
        "Line" : 16,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# on non-win32 we don't need to take care about WIN32_DEBUG_POSTFIX\n",
        "Line" : 27,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# 1. get all possible libnames\n",
        "Line" : 33,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# just one name\n",
        "Line" : 64,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# search the release lib\n",
        "Line" : 72,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# search the debug lib\n",
        "Line" : 78,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# both libs found\n",
        "Line" : 86,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# only release found\n",
        "Line" : 94,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# only debug (or nothing) found\n",
        "Line" : 99,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 11
    },
    "CMakeModules/FindLucene++.cmake" : {
      "ObjectId" : "afcfd6b05a94d5e971f512a668063585ee9cc596",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# This module looks for lucene++ support\n\n# It will define the following values\n\n#\n\n# LUCENEPP_INCLUDE_DIRS = LUCENEPP_INCLUDE_DIR + LUCENEPP_LIBRARY_DIR\n\n# LUCENEPP_INCLUDE_DIR  = where lucene++/Lucene.h can be found\n\n# LUCENEPP_LIBRARY_DIR  = where liblucene++.so can be found\n\n# LUCENEPP_LIBRARIES    = the libraries to link against lucene++\n\n# LUCENEPP_VERSION      = The lucene++ version string\n\n# LUCENEPP_FOUND        = set to 1 if lucene++ is found\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/FindQCA2.cmake" : {
      "ObjectId" : "6121b9b88ef481bb72ecfe2bab22dcd69cc3d626",
      "LastModified" : "2012-04-30T21:04:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find QCA2 (Qt Cryptography Architecture 2)\n\n# Once done this will define\n\n#\n\n#  QCA2_FOUND - system has QCA2\n\n#  QCA2_INCLUDE_DIR - the QCA2 include directory\n\n#  QCA2_LIBRARIES - the libraries needed to use QCA2\n\n#  QCA2_DEFINITIONS - Compiler switches required for using QCA2\n\n#\n\n# use pkg-config to get the directories and then use these values\n\n# in the FIND_PATH() and FIND_LIBRARY() calls\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Michael Larouche, <michael.larouche@kdemail.net>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "CMakeModules/FindQtSparkle.cmake" : {
      "ObjectId" : "694bd2f9d6fbbf3b421703d1e2247b386c983736",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find qtsparkle\n\n# Find the qtsparkle includes and the qtsparkle libraries\n\n# This module defines\n\n# QTSPARKLE_INCLUDE_DIR, root qtsparkle include dir. Include qtsparkle includes with qtsparkle/foo.h\n\n# QTSPARKLE_LIBRARY, the path to qtsparkle\n\n# QTSPARKLE_FOUND, whether qtsparkle was found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/FindQuaZip.cmake" : {
      "ObjectId" : "a0ab66a59d75abc593208aa019ef59624fc70bd4",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# QUAZIP_FOUND               - QuaZip library was found\n\n# QUAZIP_INCLUDE_DIR         - Path to QuaZip include dir\n\n# QUAZIP_INCLUDE_DIRS        - Path to QuaZip and zlib include dir (combined from QUAZIP_INCLUDE_DIR + ZLIB_INCLUDE_DIR)\n\n# QUAZIP_LIBRARIES           - List of QuaZip libraries\n\n# QUAZIP_ZLIB_INCLUDE_DIR    - The include dir of zlib headers\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 9,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#     pkg_check_modules(PC_QCA2 QUIET qca2)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "CMakeModules/FindSparsehash.cmake" : {
      "ObjectId" : "9408b77b07847bc35a3bcb7b85365b857fe4dbd8",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find google-sparsehash\n\n# Find the google-sparsehash includes\n\n# This module defines\n\n# SPARSEHASH_INCLUDE_DIR, root jreen include dir.\n\n# SPARSEHASH_FOUND, whether libjreen was found\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/FindTaglib.cmake" : {
      "ObjectId" : "d4ada25922f5d63d25090aba60577bd1591b73e5",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the Taglib library\n\n# Once done this will define\n\n#\n\n#  TAGLIB_FOUND - system has the taglib library\n\n#  TAGLIB_CFLAGS - the taglib cflags\n\n#  TAGLIB_LIBRARIES - The libraries needed to use taglib\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#reset vars\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#\tMESSAGE( STATUS \"PATHS: ${PATHS}\")\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# if taglib-config has been found\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "#\t\t\tmessage(STATUS \"Found taglib: ${TAGLIB_LIBRARIES}\")\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "CMakeModules/FindTelepathyQt.cmake" : {
      "ObjectId" : "5d9427f676bcc40a390461838a139c3d1cfded39",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2013, Teo Mrnjavac <teo@kde.org>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeModules/MacroLogFeature.cmake" : {
      "ObjectId" : "3631f93b5e964bad587539e196b1ca2535f8115d",
      "LastModified" : "2018-10-30T18:41:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file defines the Feature Logging macros.\n\n#\n\n# MACRO_LOG_FEATURE(VAR FEATURE DESCRIPTION URL [REQUIRED [MIN_VERSION [COMMENTS]]])\n\n#   Logs the information so that it can be displayed at the end\n\n#   of the configure run\n\n#   VAR : TRUE or FALSE, indicating whether the feature is supported\n\n#   FEATURE: name of the feature, e.g. \"libjpeg\"\n\n#   DESCRIPTION: description what this feature provides\n\n#   URL: home page\n\n#   REQUIRED: TRUE or FALSE, indicating whether the featue is required\n\n#   MIN_VERSION: minimum version number. empty string if unneeded\n\n#   COMMENTS: More info you may want to provide.  empty string if unnecessary\n\n#\n\n# MACRO_DISPLAY_FEATURE_LOG()\n\n#   Call this to display the collected results.\n\n#   Exits CMake with a FATAL error message if a required feature is missing\n\n#\n\n# Example:\n\n#\n\n# INCLUDE(MacroLogFeature)\n\n#\n\n# FIND_PACKAGE(JPEG)\n\n# MACRO_LOG_FEATURE(JPEG_FOUND \"libjpeg\" \"Support JPEG images\" \"http://www.ijg.org\" TRUE \"3.2a\" \"\")\n\n# ...\n\n# MACRO_DISPLAY_FEATURE_LOG()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Alexander Neundorf, <neundorf@kde.org>\n\n# Copyright (c) 2006, Allen Winter, <winter@kde.org>\n\n# Copyright (c) 2009, Sebastian Trueg, <trueg@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# _required _minvers _comments)\n",
        "Line" : 57,
        "CharPositionInLine" : 58
      },
      "3" : {
        "Text" : "#      SET(_logtext \"${_logtext}\\n\") #double-space missing features?\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# in FeatureSummary.cmake since CMake 2.8.3\n",
        "Line" : 95,
        "CharPositionInLine" : 33
      },
      "5" : {
        "Text" : "# in FeatureSummary.cmake since CMake 2.8.3\n",
        "Line" : 103,
        "CharPositionInLine" : 31
      },
      "CommentCount" : 6
    },
    "CMakeModules/MacroOptionalFindPackage.cmake" : {
      "ObjectId" : "d4ed48e33a59170d9ed8f9b3223a42b5c4883cfd",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - MACRO_OPTIONAL_FIND_PACKAGE() combines FIND_PACKAGE() with an OPTION()\n\n# MACRO_OPTIONAL_FIND_PACKAGE( <name> [QUIT] )\n\n# This macro is a combination of OPTION() and FIND_PACKAGE(), it\n\n# works like FIND_PACKAGE(), but additionally it automatically creates\n\n# an option name WITH_<name>, which can be disabled via the cmake GUI.\n\n# or via -DWITH_<name>=OFF\n\n# The standard <name>_FOUND variables can be used in the same way\n\n# as when using the normal FIND_PACKAGE()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006-2010 Alexander Neundorf, <neundorf@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This is just a helper macro to set a bunch of variables empty.\n\n# We don't know whether the package uses UPPERCASENAME or CamelCaseName, so we try both:\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "TomahawkAddLibrary.cmake" : {
      "ObjectId" : "c325828fd15cd6758d489dd11f15a59776f997a6",
      "LastModified" : "2018-10-30T19:15:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# parse arguments (name needs to be saved before passing ARGN into the macro)\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#     message(\"*** Arguments for ${LIBRARY_NAME}\")\n\n#     message(\"Sources: ${LIBRARY_SOURCES}\")\n\n#     message(\"Link libraries: ${LIBRARY_LINK_LIBRARIES}\")\n\n#     message(\"UI: ${LIBRARY_UI}\")\n\n#     message(\"TARGET_TYPE: ${LIBRARY_TARGET_TYPE}\")\n\n#     message(\"EXPORT_MACRO: ${LIBRARY_EXPORT_MACRO}\")\n\n#     message(\"NO_INSTALL: ${LIBRARY_NO_INSTALL}\")\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# qt stuff\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# add resources from current dir\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# add target\n",
        "Line" : 39,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# default\n",
        "Line" : 44,
        "CharPositionInLine" : 11
      },
      "6" : {
        "Text" : "# definitions - can this be moved into set_target_properties below?\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Dear CMake, i hate you! Sincerely, domme\n\n# At least in CMake 2.8.8, you CANNOT set more than one COMPILE_DEFINITIONS value\n\n# only takes the first one if called multiple times or bails out with wrong number of arguments\n\n# when passing in a list, thus i redefine the export macro here in hope it won't mess up other targets\n\n# Dear domme,\n\n# \"The COMPILE_DEFINITIONS property may be set to a semicolon-separated list\"\n\n# Sincerely, CMake Documentation\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# add link targets\n",
        "Line" : 69,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# add soversion\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# make installation optional, maybe useful for dummy plugins one day\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "TomahawkAddPlugin.cmake" : {
      "ObjectId" : "50b8a01898a0ff66b597a3bb2b6bfd5c1e9979dc",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# parse arguments (name needs to be saved before passing ARGN into the macro)\n",
        "Line" : 5,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#     message(\"*** Arguments for ${PLUGIN_NAME}\")\n\n#     message(\"Sources: ${PLUGIN_SOURCES}\")\n\n#     message(\"Link libraries: ${PLUGIN_LINK_LIBRARIES}\")\n\n#     message(\"UI: ${PLUGIN_UI}\")\n\n#     message(\"TYPE: ${PLUGIN_TYPE}\")\n\n#     message(\"EXPORT_MACRO: ${PLUGIN_EXPORT_MACRO}\")\n\n#     message(\"NO_INSTALL: ${PLUGIN_NO_INSTALL}\")\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# create target name once for convenience\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# create option to disable plugins\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# determine target type\n",
        "Line" : 36,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    },
    "TomahawkCPack.cmake" : {
      "ObjectId" : "2178d136b21c25dfdfdc470c53c20f6e47abfdc6",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Package file name without extension. Also a directory of installer  cmake-2.5.0-Linux-i686\n",
        "Line" : 5,
        "CharPositionInLine" : 81
      },
      "1" : {
        "Text" : "# CPACK_GENERATOR   CPack generator to be used  STGZ;TGZ;TZ\n\n# CPACK_INCLUDE_TOPLEVEL_DIRECTORY    Controls whether CPack adds a top-level directory, usually of the form ProjectName-Version-OS, to the top of package tree.  0 to disable, 1 to enable\n\n# CPACK_INSTALL_CMAKE_PROJECTS    List of four values: Build directory, Project Name, Project Component, Directory in the package     /home/andy/vtk/CMake-bin;CMake;ALL;/\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# File used as a description of a project     /path/to/project/ReadMe.txt\n",
        "Line" : 10,
        "CharPositionInLine" : 71
      },
      "3" : {
        "Text" : "#  Description summary of a project\n",
        "Line" : 11,
        "CharPositionInLine" : 74
      },
      "4" : {
        "Text" : "# CPACK_PACKAGE_EXECUTABLES   List of pairs of executables and labels. Used by the NSIS generator to create Start Menu shortcuts.     ccmake;CMake\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Installation directory on the target system -> C:\\Program Files\\fellody\n",
        "Line" : 13,
        "CharPositionInLine" : 73
      },
      "6" : {
        "Text" : "# Registry key used when installing this project  CMake 2.5.0\n",
        "Line" : 14,
        "CharPositionInLine" : 72
      },
      "7" : {
        "Text" : "# Package name, defaults to the project name\n",
        "Line" : 15,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "# Used to build library and executable names\n",
        "Line" : 16,
        "CharPositionInLine" : 58
      },
      "9" : {
        "Text" : "# Package vendor name\n",
        "Line" : 17,
        "CharPositionInLine" : 61
      },
      "10" : {
        "Text" : "# CPACK_SOURCE_GENERATOR  List of generators used for the source package  TGZ;TZ\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Pattern of files in the source tree that won't be packaged\n",
        "Line" : 26,
        "CharPositionInLine" : 116
      },
      "12" : {
        "Text" : "# Name of the source package\n",
        "Line" : 27,
        "CharPositionInLine" : 87
      },
      "13" : {
        "Text" : "# CPACK_SOURCE_STRIP_FILES    List of files in the source tree that will be stripped. Starting with CMake 2.6.0 CPACK_SOURCE_STRIP_FILES will be a boolean variable which enables stripping of all files (a list of files evaluates to TRUE in CMake, so this change is compatible).\n\n# CPACK_STRIP_FILES   List of files to be stripped. Starting with CMake 2.6.0 CPACK_STRIP_FILES will be a boolean variable which enables stripping of all files (a list of files evaluates to TRUE in CMake, so this change is compatible).   bin/ccmake;bin/cmake;bin/cpack;bin/ctest\n\n# CPACK_SYSTEM_NAME   System name, defaults to the value of ${CMAKE_SYSTEM_NAME}.     Linux-i686\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Advanced settings\n\n# CPACK_CMAKE_GENERATOR   What CMake generator should be used if the project is CMake project. Defaults to the value of CMAKE_GENERATOR.  Unix Makefiles\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# License file for the project, used by the STGZ, NSIS, and PackageMaker generators.  /home/andy/vtk/CMake/Copyright.txt\n",
        "Line" : 34,
        "CharPositionInLine" : 69
      },
      "16" : {
        "Text" : "# CPACK_RESOURCE_FILE_README  ReadMe file for the project, used by PackageMaker generator.    /home/andy/vtk/CMake/Templates/CPack.GenericDescription.txt\n\n# CPACK_RESOURCE_FILE_WELCOME     Welcome file for the project, used by PackageMaker generator.   /home/andy/vtk/CMake/Templates/CPack.GenericWelcome.txt\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Directory for the installed files.  - needed to provide anything to avoid an error# CPACK_INSTALL_COMMANDS  Extra commands to install components.\n",
        "Line" : 39,
        "CharPositionInLine" : 33
      },
      "18" : {
        "Text" : "# CPACK_INSTALL_DIRECTORIES   Extra directories to install.\n\n# CPACK_MONOLITHIC_INSTALL    When set disables the component-based installer.\n\n# CPACK_PACKAGING_INSTALL_PREFIX  Sets the default root that the generated package installs into, '/usr' is the default for the debian and redhat generators  /usr/local\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##\n\n# INSTALL DEPS\n\n##\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Set the options file that needs to be included inside CMakeCPackOptions.cmake\n\n#SET(QT_DIALOG_CPACK_OPTIONS_FILE ${CMake_BINARY_DIR}/Source/QtDialog/QtDialogCPack.cmake)\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# File included at cpack time, once per generator after setting CPACK_GENERATOR to the actual generator being used; allows per-generator setting of CPACK_* variables at cpack time.  ${PROJECT_BINARY_DIR}/CPackOptions.cmake\n",
        "Line" : 54,
        "CharPositionInLine" : 72
      },
      "CommentCount" : 22
    },
    "admin/CMakeLists.txt" : {
      "ObjectId" : "3612d0219c9c41ebae3a85acadf485f23b4659f6",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "admin/win/Toolchain-mingw32-openSUSE.cmake" : {
      "ObjectId" : "7e78476ff6afe89371ce3111247c98ffd9a33e1d",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this one is important\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# specify the cross compiler\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# where is the target environment containing libraries\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## configure qt variables\n\n# generic\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# dirs\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# phonon -_-\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "lang/translations.cmake" : {
      "ObjectId" : "9e8b46872151a04319c311aa0dd630b37c4941f4",
      "LastModified" : "2018-10-30T19:15:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# tomahawk and qt language files\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# build explicitly enabled languages\n",
        "Line" : 15,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Write file and configure it aferwards to make it a BYPRODUCT: https://gitlab.kitware.com/cmake/cmake/issues/16367\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "## HACK HACK HACK - around rcc limitations to allow out of source-tree building\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Copy the QRC file to the output directory\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Run the resource compiler (rcc_options should already be set)\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "e24d6ab4ea3948740a21e7b979572d6781a0affe",
      "LastModified" : "2018-10-30T18:41:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# library\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# plugins\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# application\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# tools\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/accounts/CMakeLists.txt" : {
      "ObjectId" : "27f98725e2d3594d029235f622523ce79712bb3e",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/accounts/google/CMakeLists.txt" : {
      "ObjectId" : "82d813e3d58010feb234231768609619f92b6b2e",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# terrible hack to access ui_XmppConfigWidget.h\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/accounts/hatchet/CMakeLists.txt" : {
      "ObjectId" : "5e74cabf122951c63607406c16f4dca5875258be",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/accounts/xmpp/CMakeLists.txt" : {
      "ObjectId" : "737495004763f1dabfb8e2755c45e5e41b790371",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/accounts/zeroconf/CMakeLists.txt" : {
      "ObjectId" : "34dcc558359ea82edd2b6327d762f06f0c1f293e",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/crashreporter/CMakeLists.txt" : {
      "ObjectId" : "5a88819a6c1153f395853f940c745b41044c60af",
      "LastModified" : "2018-10-30T18:41:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/infoplugins/CMakeLists.txt" : {
      "ObjectId" : "6906edeb2a55004e7d7afc9021107ef39da61da3",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/infoplugins/generic/CMakeLists.txt" : {
      "ObjectId" : "7ed4bdea2f0b6d9793074651b9224fe9912af290",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Spotify\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "#Rovi\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "src/infoplugins/linux/CMakeLists.txt" : {
      "ObjectId" : "a99e100f131c618d011c061233613a355daabc13",
      "LastModified" : "2018-10-30T19:15:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/infoplugins/mac/CMakeLists.txt" : {
      "ObjectId" : "764afb7009b0995e7e252b8bea30bcde06d6f509",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libtomahawk-playdarapi/CMakeLists.txt" : {
      "ObjectId" : "2fef13ff2b178cf3184dcf05a8bd2ab822c37bc9",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libtomahawk-widgets/CMakeLists.txt" : {
      "ObjectId" : "7678870c885a9e424b3ecf338173010762c18e16",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libtomahawk/CMakeLists.txt" : {
      "ObjectId" : "d264b66fdd12985122aebb0afdef7b51a2c7445c",
      "LastModified" : "2018-10-30T19:15:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    accounts/spotify/SpotifyPlaylistUpdater.cpp\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ScriptPlugins\n",
        "Line" : 347,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# System\n",
        "Line" : 427,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# System\n",
        "Line" : 462,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Thirdparty shipped with tomahawk\n",
        "Line" : 512,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# External deps\n",
        "Line" : 518,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# TagLib\n",
        "Line" : 535,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Install header files\n",
        "Line" : 546,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# file( GLOB playlistDynamicEchonestHeaders \"playlist/dynamic/echonest/*.h\" )\n",
        "Line" : 564,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# install( FILES ${playlistDynamicEchonestHeaders} DESTINATION include/libtomahawk/playlist/dynamic/echonest )\n",
        "Line" : 593,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "src/libtomahawk/TomahawkConfig.cmake" : {
      "ObjectId" : "184319bb95ca5ade172909190be0744cece40667",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this is not how you do it but proper exporting of targets causes weird issues with cross-compiling for me\n\n#TODO: we can easily write the install dir on configuration of this file\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/libtomahawk/accounts/configstorage/CMakeLists.txt" : {
      "ObjectId" : "88ac22f2d25629df4a4816149e973f6cec6b96f3",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libtomahawk/accounts/configstorage/telepathy/CMakeLists.txt" : {
      "ObjectId" : "eba874ff702318e31029aa2b910847693fdaa010",
      "LastModified" : "2018-10-30T18:41:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/CMakeLists.txt" : {
      "ObjectId" : "979a251fb04bddc8cd1788700361758968d1ce46",
      "LastModified" : "2018-10-30T18:41:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tests/tomahawk_add_test.cmake" : {
      "ObjectId" : "9cfe9c46e187cfdb77bcb7d0fe2ba3498174fa8c",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tomahawk/CMakeLists.linux.cmake" : {
      "ObjectId" : "2ab5ce665de51970b8cbe060eb95708baa6e5601",
      "LastModified" : "2018-10-30T18:41:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tomahawk/CMakeLists.osx.cmake" : {
      "ObjectId" : "01ed1c5e2079dc12ea003ead7c5cc955e8116817",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  find_library(GROWL Growl)\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Uses Darwin kernel version.\n\n# 9.8.0  -> 10.5/Leopard\n\n# 10.4.0 -> 10.6/Snow Leopard\n\n# 11.x.x -> Lion\n\n# 12.x.x -> Mountain Lion\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Use two different sparkle update tracks for debug and release\n\n# We have to change the URL in the Info.plist file :-/\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Disable non-release sparkle for now. We haven't used it yet.\n\n#  IF( NOT CMAKE_BUILD_TYPE STREQUAL \"Release\" )\n\n#      set(TOMAHAWK_SPARKLE_UPDATE_URL \"http://download.tomahawk-player.org/sparkle-debug\")\n\n#  ENDIF()\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/tomahawk/CMakeLists.txt" : {
      "ObjectId" : "373f295bc51d0109036656fb2d25098ff760be4a",
      "LastModified" : "2018-10-30T19:15:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# SET( CMAKE_RUNTIME_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}\" )\n\n# SET( CMAKE_LIBRARY_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}\" )\n\n# SET( CMAKE_ARCHIVE_OUTPUT_DIRECTORY \"${CMAKE_BINARY_DIR}\" )\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# build plugins\n\n# use glob, but hardcoded list for now:\n\n#FILE( GLOB plugindirs \"src/plugins/*\" )\n\n#FOREACH( moddir ${plugindirs} )\n\n#    MESSAGE( status \"Building plugin: ${moddir}\" )\n\n#    ADD_SUBDIRECTORY( ${moddir} )\n\n#ENDFOREACH( moddir )\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# currently only in libtomahawk, we might want to properly split what's in which config file\n\n# configure_file(${CMAKE_CURRENT_SOURCE_DIR}/Config.h.in\n\n#                ${CMAKE_CURRENT_BINARY_DIR}/config.h)\n\n# configure_file(${CMAKE_CURRENT_SOURCE_DIR}/TomahawkVersion.h.in\n\n#                ${CMAKE_CURRENT_BINARY_DIR}/TomahawkVersion.h)\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# translations\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# OUTFILE is currently only supported in my branch, see https://git.reviewboard.kde.org/r/126303/\n\n# once merged (and released), we can remove this conditional usage\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#INCLUDE( \"CPack.txt\" )\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/tomahawk/CMakeLists.unix.cmake" : {
      "ObjectId" : "63a3699e9d23ba1ec4d73cc291d5e335bebe3ca9",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tomahawk/CMakeLists.win32.cmake" : {
      "ObjectId" : "485391cf6ddba2f64933345c683366e105071006",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# third party shipped with tomahawk\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# system libs\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/tools/CMakeLists.txt" : {
      "ObjectId" : "16eb6fd57e3bc764a4cedec85a0d391232b01204",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tools/database-reader/CMakeLists.txt" : {
      "ObjectId" : "afad1c69d8d1e0b7eac02df504634c3b6a3ba06b",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/tools/tomahawk-test-musicscan/CMakeLists.txt" : {
      "ObjectId" : "bca62f30b07a67c36b0d8a1cc53597bf102a7f2c",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/viewpages/CMakeLists.txt" : {
      "ObjectId" : "8530d9307f1cc61a1fdbfe96adf1b7f2f1c2fd50",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/viewpages/charts/CMakeLists.txt" : {
      "ObjectId" : "7ceec74bfb9eeb4d3dadd439877f00a42d28ca94",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/viewpages/dashboard/CMakeLists.txt" : {
      "ObjectId" : "08ed901faf05c47c063bbaaa7b4e2bbe7412a231",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/viewpages/networkactivity/CMakeLists.txt" : {
      "ObjectId" : "84497dad95ac6dab7129c95d9ce06a4239191ca3",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#tomahawk_add_plugin(networkactivity\n\n#    TYPE viewpage\n\n#    EXPORT_MACRO TOMAHAWK_VIEWPAGE_EXPORT_PRO\n\n#    SOURCES\n\n#        NetworkActivity.cpp\n\n#        NetworkActivityWidget.cpp\n\n#        NetworkActivityWorker.cpp\n\n#    UI\n\n#        NetworkActivityWidget.ui\n\n#    QT5_MODULES Concurrent\n\n#    LINK_LIBRARIES\n\n#        tomahawk-widgets\n\n#)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/viewpages/newreleases/CMakeLists.txt" : {
      "ObjectId" : "3d4dfb8dbfee447e09334185970eb2a386037721",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/viewpages/whatsnew_0_8/CMakeLists.txt" : {
      "ObjectId" : "50fa3ef3c76b9beae8cca939cba434e889db0b3c",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/CMakeLists.txt" : {
      "ObjectId" : "032f3b9b371fd16c0b1afc7ed8ceb9f619170819",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/SPMediaKeyTap/CMakeLists.txt" : {
      "ObjectId" : "ab274538df30e6c55c9220fe44602e1cf13c5577",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/kdsingleapplicationguard/CMakeLists.txt" : {
      "ObjectId" : "70b644b496fee94149342c4fa65097c27ccc388e",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/libportfwd/CMakeLists.txt" : {
      "ObjectId" : "131bdacc441e74258ac22e233b3730aad351e634",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SET(CMAKE_INSTALL_PREFIX \".\")\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the needed bits of miniupnpc (no python module, no tests, no cli)\n",
        "Line" : 24,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "#${MINIUPNP_DIR}/minixmlvalid.c - contains main() like upnp.c, so building a shared lib fails\n\n#${MINIUPNP_DIR}/upnpc.c\n",
        "Line" : 35,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Our wrapper:\n",
        "Line" : 41,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "#INSTALL(FILES include/portfwd/portfwddllmacro.h include/portfwd/portfwd.h DESTINATION include/portfwd)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#ADD_EXECUTABLE(portfwd-demo\n\n#               src/main.cpp\n\n#              )\n\n#TARGET_LINK_LIBRARIES(portfwd-demo portfwd)\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#INSTALL(TARGETS portfwd ARCHIVE DESTINATION lib${LIB_SUFFIX})\n\n#INSTALL(TARGETS portfwd-demo RUNTIME DESTINATION bin)\n\n#INSTALL(DIRECTORY include/portfwd DESTINATION include PATTERN \"*~\" EXCLUDE)\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "thirdparty/libportfwd/third-party/miniupnpc-1.6/CMakeLists.txt" : {
      "ObjectId" : "35606a310c69ecc38af2dfbd5d38d8b139b8c8c0",
      "LastModified" : "2018-10-30T19:15:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# XP or higher for getnameinfo and friends\n",
        "Line" : 34,
        "CharPositionInLine" : 42
      },
      "1" : {
        "Text" : "# Set compiler specific build flags\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set our own default flags at first run.\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# CMAKE_C_FLAGS gets appended to the other C flags\n",
        "Line" : 50,
        "CharPositionInLine" : 52
      },
      "4" : {
        "Text" : "#elseif (CMAKE_SYSTEM_NAME STREQUAL \"Solaris\")\n\n#  find_library (SOCKET_LIBRARY NAMES socket)\n\n#  find_library (NSL_LIBRARY NAMES nsl)\n\n#  find_library (RESOLV_LIBRARY NAMES resolv)\n\n#  set (LDLIBS ${SOCKET_LIBRARY} ${NSL_LIBRARY} ${RESOLV_LIBRARY} ${LDLIBS})\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# set (UPNPC_INSTALL_TARGETS ${UPNPC_INSTALL_TARGETS} testminixml minixmlvalid testupnpreplyparse testigddescparse testminiwget)\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# vim: ts=2:sw=2\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "thirdparty/libportfwd/third-party/miniupnpc-1.6/miniupnpcstrings.h.cmake" : {
      "ObjectId" : "a3726350ce791f0f4f4cdaf2bba4e05b0ae2a56b",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKESOURCE",
      "CommentCount" : 0
    },
    "thirdparty/qt-certificate-addon/CMakeLists.txt" : {
      "ObjectId" : "570319a3656c934bf9c7e2d9842b1248866951f6",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/qt-certificate-addon/doc/doc.pri" : {
      "ObjectId" : "34d1817be09299a75f8357a6038597dd1373ed34",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "thirdparty/qt-certificate-addon/examples/create_certificate/create_certificate.pro" : {
      "ObjectId" : "5eb8975d3fea30bfba3aab66b030091d8bb68c3a",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "thirdparty/qt-certificate-addon/examples/create_certificate_chain/create_certificate_chain.pro" : {
      "ObjectId" : "7a1f4f4a55186fcfd633acd05442328903d3926b",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "thirdparty/qt-certificate-addon/examples/create_signed_certificate/create_signed_certificate.pro" : {
      "ObjectId" : "20035377c463641c837e0fc35dd2f6c1fbe48d01",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "thirdparty/qt-certificate-addon/examples/examples.pro" : {
      "ObjectId" : "b38165e76382acfae03984b2f6fae0f0e5603328",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "thirdparty/qt-certificate-addon/qtcertificate.pro" : {
      "ObjectId" : "d0388da8dcb63e8d88455d7691646c70998b16de",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "thirdparty/qt-certificate-addon/src/CMakeLists.txt" : {
      "ObjectId" : "9ee83d88f81a229e02bd51d3c56f2c85131261c9",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/qt-certificate-addon/src/certificate/CMakeLists.txt" : {
      "ObjectId" : "d67583843a74674bc1c31e9ab4ba33ffe6cb9d36",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/qt-certificate-addon/src/certificate/certificate.pro" : {
      "ObjectId" : "21d449037c0cfab2937cf8e74355e4cd4e40a5bb",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Input\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "thirdparty/qt-certificate-addon/src/src.pro" : {
      "ObjectId" : "4258ed784b946c843140d0f6004b88c99d44747d",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "thirdparty/qt-certificate-addon/tests/auto/auto.pro" : {
      "ObjectId" : "3aa1984caeccac67d16241178cd528a2427c247e",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "thirdparty/qt-certificate-addon/tests/auto/certificaterequest/certificaterequest.pro" : {
      "ObjectId" : "103f7cfaccafa82089882ef90b538d9b02ac4bea",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "thirdparty/qt-certificate-addon/tests/auto/certificaterequestbuilder/certificaterequestbuilder.pro" : {
      "ObjectId" : "c593dd8d783f7933fa4ff640b2a32277aa097ea2",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "thirdparty/qt-certificate-addon/tests/auto/keybuilder/keybuilder.pro" : {
      "ObjectId" : "c5bc3d7e3e1c6826d19d403a3bf4b44136032c78",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "thirdparty/qt-certificate-addon/tests/tests.pro" : {
      "ObjectId" : "f9277000081169357778bc3edf1b077e9f4bfd70",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "thirdparty/qxt/CMakeLists.txt" : {
      "ObjectId" : "5d66e2101a8d9bcea2b3e274558e17161d776f46",
      "LastModified" : "2018-10-30T18:36:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "thirdparty/qxt/qxtweb-standalone/CMakeLists.txt" : {
      "ObjectId" : "d89b663427ca4f0652ae2a847416e06ff5db8857",
      "LastModified" : "2018-10-30T19:15:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# QxtWeb:\n",
        "Line" : 41,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# Ripped bits of QxtCore:\n",
        "Line" : 55,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# QxtNetwork\n",
        "Line" : 60,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# automoc hack\n",
        "Line" : 63,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 67,
    "CMAKESOURCE" : 1,
    "QMAKE" : 13
  },
  "ElapsedTime" : 5876
}