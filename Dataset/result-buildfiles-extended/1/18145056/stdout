{
  "Repository" : "18145056",
  "Revision" : "HEAD",
  "ObjectId" : "81577a95a0c940dd3143d8f44b8648ca984fd14e",
  "CommitTime" : "2019-04-12T19:52:13Z",
  "Files" : {
    "avr/bootloaders/optiboot/Makefile" : {
      "ObjectId" : "c23225a430dbbb0a9ae59de88ba0c55b06670b1d",
      "LastModified" : "2019-03-09T00:26:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for ATmegaBOOT\n\n# E.Lins, 18.7.2005\n\n# $Id$\n\n#\n\n# Instructions\n\n#\n\n# To make bootloader .hex file:\n\n# make diecimila\n\n# make lilypad\n\n# make ng\n\n# etc...\n\n#\n\n# To burn bootloader .hex file:\n\n# make diecimila_isp\n\n# make lilypad_isp\n\n# make ng_isp\n\n# etc...\n\n#\n\n# Edit History\n\n# 201406xx: WestfW: More Makefile restructuring.\n\n#                   Split off Makefile.1284, Makefile.extras, Makefile.custom\n\n#                   So that in theory, the main Makefile contains only the\n\n#                   official platforms, and does not need to be modified to\n\n#                   add \"less supported\" chips and boards.\n\n# 201303xx: WestfW: Major Makefile restructuring.\n\n#                   Allows options on Make command line \"make xx LED=B3\"\n\n#                   (see also pin_defs.h)\n\n#                   Divide into \"chip\" targets and \"board\" targets.\n\n#                   Most boards are (recursive) board targets with options.\n\n#                   Move isp target to separate makefile (fixes m8 EFUSE)\n\n#                   Some (many) targets will now be rebuilt when not\n\n#                     strictly necessary, so that options will be included.\n\n#                     (any \"make\" with options will always compile.)\n\n#                   Set many variables with ?= so they can be overridden\n\n#                   Use arduinoISP settings as default for ISP targets\n\n#\n\n#\n\n# * Copyright 2013-2015 by Bill Westfield.  Part of Optiboot.\n\n# * This software is licensed under version 2 of the Gnu Public Licence.\n\n# * See optiboot.c for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------\n\n#\n\n# program name should not be changed...\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The default behavior is to build using tools that are in the users\n\n# current path variables, but we can also build using an installed\n\n# Arduino user IDE setup, or the Arduino source tree.\n\n# Uncomment this next lines to build within the arduino environment,\n\n# using the arduino-included avrgcc toolset (mac and pc)\n\n# ENV ?= arduino\n\n# ENV ?= arduinodev\n\n# OS ?= macosx\n\n# OS ?= windows\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# export symbols to recursive makes (for ISP)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# defaults\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Build environments\n\n# Start of some ugly makefile-isms to allow optiboot to be built\n\n# in several different environments.  See the README.TXT file for\n\n# details.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# default\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# For Arduino, we assume that we're connected to the optiboot directory\n\n# included with the arduino distribution, which means that the full set\n\n# of avr-tools are \"right up there\" in standard places.\n\n# (except that in 1.5.x, there's an additional level of \"up\")\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Arduino 1.5.x tool location compared to optiboot dir\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Arduino 1.0 (and earlier) tool location\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# On windows, SOME of the tool paths will need to have backslashes instead\n\n# of forward slashes (because they use windows cmd.exe for execution instead\n\n# of a unix/mingw shell?)  We also have to ensure that a consistent shell\n\n# is used even if a unix shell is installed (ie as part of WINAVR)\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Arduino IDE source code environment.  Use the unpacked compilers created\n\n# by the build (you'll need to do \"ant build\" first.)\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12,
      "Errorlog" : "line 117:9 token recognition error at: '\"C:\\P'\nline 117:26 token recognition error at: '\\A'\nline 117:32 token recognition error at: '\\A'\nline 117:42 token recognition error at: '\\S'\nline 117:49 token recognition error at: '\\S'\nline 660:12 token recognition error at: '\" is dumb and objects to wildcards that don't exist\\nclean:\\n\\t@touch  __temp_.o __temp_.elf __temp_.lst __temp_.map\\n\\t@touch  __temp_.sym __temp_.lss __temp_.eep __temp_.srec\\n\\t@touch __temp_.bin __temp_.hex __temp_.tmp.sh\\n\\trm -rf *.o *.elf *.lst *.map *.sym *.lss *.eep *.srec *.bin *.hex *.tmp.sh\\n\\nclean_asm:\\n\\trm -rf *.lst\\n\\n%.lst: %.elf\\n\\t$(OBJDUMP) -h -S $< > $@\\n\\n%.hex: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -j .version --set-section-flags .version=alloc,load -O ihex $< $@\\n\\n%.srec: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -j .version --set-section-flags .version=alloc,load -O srec $< $@\\n\\n%.bin: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -j .version --set-section-flags .version=alloc,load -O binary $< $@\\n\\nhelp:\\n\\t@echo -e $(HELPTEXT)\\n\u0000'\n"
    },
    "avr/bootloaders/optiboot_unsupported/Makefile" : {
      "ObjectId" : "3b376189ba09d141746a60cc76d062f875eb232f",
      "LastModified" : "2019-03-09T00:26:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for ATmegaBOOT\n\n# E.Lins, 18.7.2005\n\n# $Id$\n\n#\n\n# Instructions\n\n#\n\n# To make bootloader .hex file:\n\n# make diecimila\n\n# make lilypad\n\n# make ng\n\n# etc...\n\n#\n\n# To burn bootloader .hex file:\n\n# make diecimila_isp\n\n# make lilypad_isp\n\n# make ng_isp\n\n# etc...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# program name should not be changed...\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The default behavior is to build using tools that are in the users\n\n# current path variables, but we can also build using an installed\n\n# Arduino user IDE setup, or the Arduino source tree.\n\n# Uncomment this next lines to build within the arduino environment,\n\n# using the arduino-included avrgcc toolset (mac and pc)\n\n# ENV ?= arduino\n\n# ENV ?= arduinodev\n\n# OS ?= macosx\n\n# OS ?= windows\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# enter the parameters for the avrdude isp tool\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Build environments\n\n# Start of some ugly makefile-isms to allow optiboot to be built\n\n# in several different environments.  See the README.TXT file for\n\n# details.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# default\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# For Arduino, we assume that we're connected to the optiboot directory\n\n# included with the arduino distribution, which means that the full set\n\n# of avr-tools are \"right up there\" in standard places.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# On windows, SOME of the tool paths will need to have backslashes instead\n\n# of forward slashes (because they use windows cmd.exe for execution instead\n\n# of a unix/mingw shell?)  We also have to ensure that a consistent shell\n\n# is used even if a unix shell is installed (ie as part of WINAVR)\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Arduino IDE source code environment.  Use the unpacked compilers created\n\n# by the build (you'll need to do \"ant build\" first.)\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# End of build environment code.\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# the efuse should really be 0xf8; since, however, only the lower\n\n# three bits of that byte are used on the atmega168, avrdude gets\n\n# confused if you specify 1's for the higher bits, see:\n\n# http://tinker.it/now/2007/02/24/the-tale-of-avrdude-atmega168-and-extended-bits-fuses/\n\n#\n\n# similarly, the lock bits should be 0xff instead of 0x3f (to\n\n# unlock the bootloader section) and 0xcf instead of 0x2f (to\n\n# lock it), but since the high two bits of the lock byte are\n\n# unused, avrdude would get confused.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11,
      "Errorlog" : "line 105:9 token recognition error at: '\"C:\\P'\nline 105:26 token recognition error at: '\\A'\nline 105:32 token recognition error at: '\\A'\nline 105:42 token recognition error at: '\\S'\nline 105:49 token recognition error at: '\\S'\nline 204:65 token recognition error at: '\" for\\n# backward compatibility of makefile\\n#\\natmega168: TARGET = atmega168\\natmega168: MCU_TARGET = atmega168\\natmega168: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\natmega168: AVR_FREQ = 16000000L\\natmega168: LDSECTIONS = --gc-sections -nostartfiles -nostdlib\\natmega168: $(PROGRAM)_atmega168.hex\\natmega168: $(PROGRAM)_atmega168.lst\\n\\natmega168_isp: atmega168\\natmega168_isp: TARGET = atmega168\\n# 2.7V brownout\\natmega168_isp: HFUSE = DD\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\natmega168_isp: LFUSE = FF\\n# 512 byte boot\\natmega168_isp: EFUSE = 04\\natmega168_isp: isp\\n\\natmega168_737: TARGET = atmega168\\natmega168_737: MCU_TARGET = atmega168\\natmega168_737: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=57600'\\natmega168_737: AVR_FREQ = 7372800L\\natmega168_737: LDSECTIONS = --gc-sections -nostartfiles -nostdlib\\natmega168_737: $(PROGRAM)_atmega168.hex\\natmega168_737: $(PROGRAM)_atmega168.lst\\n\\natmega168_737_isp: atmega168\\natmega168_737_isp: TARGET = atmega168\\n# 2.7V brownout\\natmega168_737_isp: HFUSE = DD\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\natmega168_737_isp: LFUSE = FD\\n# 512 byte boot\\natmega168_737_isp: EFUSE = 04\\natmega168_737_isp: isp\\n\\ndiecimila: TARGET = diecimila\\ndiecimila: MCU_TARGET = atmega168\\ndiecimila: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\ndiecimila: AVR_FREQ = 16000000L\\ndiecimila: LDSECTIONS = --gc-sections -nostartfiles -nostdlib\\ndiecimila: $(PROGRAM)_diecimila.hex\\ndiecimila: $(PROGRAM)_diecimila.lst\\n\\ndiecimila_isp: diecimila\\ndiecimila_isp: TARGET = diecimila\\n# 2.7V brownout\\ndiecimila_isp: HFUSE = DD\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\ndiecimila_isp: LFUSE = FF\\n# 512 byte boot\\ndiecimila_isp: EFUSE = 04\\ndiecimila_isp: isp\\n\\natmega328: TARGET = atmega328\\natmega328: MCU_TARGET = atmega328p\\natmega328: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\natmega328: AVR_FREQ = 16000000L\\natmega328: LDSECTIONS  = --gc-sections -nostartfiles -nostdlib -Wl,--section-start=.text=0x7e00 -Wl,--section-start=.version=0x7ffe\\natmega328: $(PROGRAM)_atmega328.hex\\natmega328: $(PROGRAM)_atmega328.lst\\n\\natmega328_isp: atmega328\\natmega328_isp: TARGET = atmega328\\natmega328_isp: MCU_TARGET = atmega328p\\n# 512 byte boot, SPIEN\\natmega328_isp: HFUSE = DE\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\natmega328_isp: LFUSE = FF\\n# 2.7V brownout\\natmega328_isp: EFUSE = 05\\natmega328_isp: isp\\n\\n# cchurch - added for nanoMoCo - notice slower baud rate\\nnanoMoCo: TARGET = nanoMoCo\\nnanoMoCo: MCU_TARGET = atmega328p\\nnanoMoCo: CFLAGS += '-DBAUD_RATE=115200' '-DRS485_SUPPORT'\\nnanoMoCo: AVR_FREQ = 16000000L\\nnanoMoCo: LDSECTIONS  = --gc-sections -nostartfiles -nostdlib -Wl,--section-start=.text=0x7e00 -Wl,--section-start=.version=0x7ffe\\nnanoMoCo: $(PROGRAM)_nanoMoCo.hex\\nnanoMoCo: $(PROGRAM)_nanoMoCo.lst\\n\\nnanoMoCo_isp: nanoMoCo\\nnanoMoCo_isp: TARGET = nanoMoCo\\nnanoMoCo_isp: MCU_TARGET = atmega328p\\n# 512 byte boot, SPIEN\\nnanoMoCo_isp: HFUSE = DE\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\nnanoMoCo_isp: LFUSE = FF\\n# 2.7V brownout\\nnanoMoCo_isp: EFUSE = 05\\nnanoMoCo_isp: isp\\n\\n# Sanguino has a minimum boot size of 1024 bytes, so enable extra functions\\n#\\nsanguino: TARGET = atmega644p\\nsanguino: MCU_TARGET = atmega644p\\nsanguino: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200' '-DBIGBOOT'\\nsanguino: AVR_FREQ = 16000000L\\nsanguino: LDSECTIONS  = --gc-sections -nostartfiles -nostdlib -Wl,--section-start=.text=0xfc00\\nsanguino: $(PROGRAM)_atmega644p.hex\\nsanguino: $(PROGRAM)_atmega644p.lst\\n\\nsanguino_isp: sanguino\\nsanguino_isp: TARGET = atmega644p\\nsanguino_isp: MCU_TARGET = atmega644p\\n# 1024 byte boot\\nsanguino_isp: HFUSE = DE\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\nsanguino_isp: LFUSE = FF\\n# 2.7V brownout\\nsanguino_isp: EFUSE = 05\\nsanguino_isp: isp\\n\\n# Mega has a minimum boot size of 1024 bytes, so enable extra functions\\n#mega: TARGET = atmega1280\\nmega: MCU_TARGET = atmega1280\\nmega: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200' '-DBIGBOOT'\\nmega: AVR_FREQ = 16000000L\\nmega: LDSECTIONS  = --gc-sections -nostartfiles -nostdlib -Wl,--section-start=.text=0x1fc00\\nmega: $(PROGRAM)_atmega1280.hex\\nmega: $(PROGRAM)_atmega1280.lst\\n\\nmega_isp: mega\\nmega_isp: TARGET = atmega1280\\nmega_isp: MCU_TARGET = atmega1280\\n# 1024 byte boot\\nmega_isp: HFUSE = DE\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\nmega_isp: LFUSE = FF\\n# 2.7V brownout\\nmega_isp: EFUSE = 05\\nmega_isp: isp\\n\\n# ATmega8\\n#\\natmega8: TARGET = atmega8\\natmega8: MCU_TARGET = atmega8\\natmega8: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\natmega8: AVR_FREQ = 16000000L\\natmega8: LDSECTIONS  = --gc-sections -nostartfiles -nostdlib -Wl,--section-start=.text=0x1e00 -Wl,--section-start=.version=0x1ffe\\natmega8: $(PROGRAM)_atmega8.hex\\natmega8: $(PROGRAM)_atmega8.lst\\n\\natmega8_isp: atmega8\\natmega8_isp: TARGET = atmega8\\natmega8_isp: MCU_TARGET = atmega8\\n# SPIEN, CKOPT, Bootsize=512B\\natmega8_isp: HFUSE = CC\\n# 2.7V brownout, Low power xtal (16MHz) 16KCK/14CK+65ms\\natmega8_isp: LFUSE = BF\\natmega8_isp: isp\\n\\n# ATmega88\\n#\\natmega88: TARGET = atmega88\\natmega88: MCU_TARGET = atmega88\\natmega88: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\natmega88: AVR_FREQ = 16000000L\\natmega88: LDSECTIONS  = --gc-sections -nostartfiles -nostdlib -Wl,--section-start=.text=0x1e00 -Wl,--section-start=.version=0x1ffe\\natmega88: $(PROGRAM)_atmega88.hex\\natmega88: $(PROGRAM)_atmega88.lst\\n\\natmega88_isp: atmega88\\natmega88_isp: TARGET = atmega88\\natmega88_isp: MCU_TARGET = atmega88\\n# 2.7V brownout\\natmega88_isp: HFUSE = DD\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\natemga88_isp: LFUSE = FF\\n# 512 byte boot\\natmega88_isp: EFUSE = 04\\natmega88_isp: isp\\n\\n\\n# 8MHz clocked platforms\\n#\\n# These are capable of 115200 baud\\n#\\n\\nlilypad: TARGET = lilypad\\nlilypad: MCU_TARGET = atmega168\\nlilypad: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\nlilypad: AVR_FREQ = 8000000L\\nlilypad: LDSECTIONS = --gc-sections -nostartfiles -nostdlib\\nlilypad: $(PROGRAM)_lilypad.hex\\nlilypad: $(PROGRAM)_lilypad.lst\\n\\nlilypad_isp: lilypad\\nlilypad_isp: TARGET = lilypad\\n# 2.7V brownout\\nlilypad_isp: HFUSE = DD\\n# Internal 8MHz osc (8MHz) Slow rising power\\nlilypad_isp: LFUSE = E2\\n# 512 byte boot\\nlilypad_isp: EFUSE = 04\\nlilypad_isp: isp\\n\\nlilypad_resonator: TARGET = lilypad_resonator\\nlilypad_resonator: MCU_TARGET = atmega168\\nlilypad_resonator: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\nlilypad_resonator: AVR_FREQ = 8000000L\\nlilypad_resonator: LDSECTIONS = --gc-sections -nostartfiles -nostdlib\\nlilypad_resonator: $(PROGRAM)_lilypad_resonator.hex\\nlilypad_resonator: $(PROGRAM)_lilypad_resonator.lst\\n\\nlilypad_resonator_isp: lilypad_resonator\\nlilypad_resonator_isp: TARGET = lilypad_resonator\\n# 2.7V brownout\\nlilypad_resonator_isp: HFUSE = DD\\n# Full swing xtal (20MHz) 258CK/14CK+4.1ms\\nlilypad_resonator_isp: LFUSE = C6\\n# 512 byte boot\\nlilypad_resonator_isp: EFUSE = 04\\nlilypad_resonator_isp: isp\\n\\npro8: TARGET = pro_8MHz\\npro8: MCU_TARGET = atmega168\\npro8: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\npro8: AVR_FREQ = 8000000L\\npro8: LDSECTIONS = --gc-sections -nostartfiles -nostdlib\\npro8: $(PROGRAM)_pro_8MHz.hex\\npro8: $(PROGRAM)_pro_8MHz.lst\\n\\npro8_isp: pro8\\npro8_isp: TARGET = pro_8MHz\\n# 2.7V brownout\\npro8_isp: HFUSE = DD\\n# Full swing xtal (20MHz) 258CK/14CK+4.1ms\\npro8_isp: LFUSE = C6\\n# 512 byte boot\\npro8_isp: EFUSE = 04\\npro8_isp: isp\\n\\natmega328_pro8: TARGET = atmega328_pro_8MHz\\natmega328_pro8: MCU_TARGET = atmega328p\\natmega328_pro8: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=115200'\\natmega328_pro8: AVR_FREQ = 8000000L\\natmega328_pro8: LDSECTIONS = --gc-sections -nostartfiles -nostdlib -Wl,--section-start=.text=0x7e00 -Wl,--section-start=.version=0x7ffe\\natmega328_pro8: $(PROGRAM)_atmega328_pro_8MHz.hex\\natmega328_pro8: $(PROGRAM)_atmega328_pro_8MHz.lst\\n\\natmega328_pro8_isp: atmega328_pro8\\natmega328_pro8_isp: TARGET = atmega328_pro_8MHz\\natmega328_pro8_isp: MCU_TARGET = atmega328p\\n# 512 byte boot, SPIEN\\natmega328_pro8_isp: HFUSE = DE\\n# Low power xtal (16MHz) 16KCK/14CK+65ms\\natmega328_pro8_isp: LFUSE = FF\\n# 2.7V brownout\\natmega328_pro8_isp: EFUSE = 05\\natmega328_pro8_isp: isp\\n\\n#Tiny Bootloaders (12MHz only)\\n\\nattiny84_12: TARGET = attiny84\\nattiny84_12: MCU_TARGET = attiny84\\nattiny84_12: CFLAGS += '-DLED_START_FLASHES=3' '-DSOFT_UART' '-DBAUD_RATE=19200' '-DLED_DATA_FLASH'\\nattiny84_12: CFLAGS += '-DVIRTUAL_BOOT_PARTITION'\\nattiny84_12: AVR_FREQ = 12000000L\\nattiny84_12: LDSECTIONS = --gc-sections -nostartfiles -nostdlib -Wl,--section-start=.text=0x1dc0 -Wl,--section-start=.version=0x1ffe\\nattiny84_12: $(PROGRAM)_attiny84_12.hex\\nattiny84_12: $(PROGRAM)_attiny84_12.lst\\nattiny84_12: $(PROGRAM)_attiny84_12.elf\\n\\nattiny84_12_isp: attiny84\\nattiny84_12_isp: TARGET = attiny84\\nattiny84_12_isp: MCU_TARGET = attiny84\\nattiny84_12_isp: HFUSE = E0\\nattiny84_12_isp: LFUSE = D7\\nattiny84_12_isp: EFUSE = FE\\nattiny84_12_isp: isp\\n\\n#Tiny Bootloaders (8MHz only)\\n\\nattiny24: TARGET = attiny24\\nattiny24: MCU_TARGET = attiny24\\nattiny24: CFLAGS += '-DLED_START_FLASHES=3' '-DSOFT_UART' '-DBAUD_RATE=19200' '-DLED_DATA_FLASH'\\nattiny24: CFLAGS += '-DVIRTUAL_BOOT_PARTITION'\\nattiny24: AVR_FREQ = 8000000L\\nattiny24: LDSECTIONS = --gc-sections -nostartfiles -nostdlib -Wl,--section-start=.text=0x05c0 -Wl,--section-start=.version=0x07fc\\nattiny24: $(PROGRAM)_attiny24.hex\\nattiny24: $(PROGRAM)_attiny24.lst\\nattiny24: $(PROGRAM)_attiny24.elf\\n\\nattiny84: TARGET = attiny84\\nattiny84: MCU_TARGET = attiny84\\nattiny84: CFLAGS += '-DLED_START_FLASHES=3' '-DSOFT_UART' '-DBAUD_RATE=19200' '-DLED_DATA_FLASH'\\nattiny84: CFLAGS += '-DVIRTUAL_BOOT_PARTITION'\\nattiny84: AVR_FREQ = 8000000L\\nattiny84: LDSECTIONS = --gc-sections -nostartfiles -nostdlib -Wl,--section-start=.text=0x1dc0 -Wl,--section-start=.version=0x1ffe\\nattiny84: $(PROGRAM)_attiny84.hex\\nattiny84: $(PROGRAM)_attiny84.lst\\nattiny84: $(PROGRAM)_attiny84.elf\\n\\nattiny84_isp: attiny84\\nattiny84_isp: TARGET = attiny84\\nattiny84_isp: MCU_TARGET = attiny84\\nattiny84_isp: HFUSE = E2\\nattiny84_isp: LFUSE = D7\\nattiny84_isp: EFUSE = FE\\nattiny84_isp: isp\\n\\nattiny85: TARGET = attiny85\\nattiny85: MCU_TARGET = attiny85\\nattiny85: CFLAGS += '-DLED_START_FLASHES=3' '-DSOFT_UART' '-DBAUD_RATE=19200' '-DLED_DATA_FLASH'\\nattiny85: CFLAGS += '-DVIRTUAL_BOOT_PARTITION'\\nattiny85: AVR_FREQ = 8000000L\\nattiny85: LDSECTIONS = --gc-sections -nostartfiles -nostdlib -Wl,--section-start=.text=0x1dc0 -Wl,--section-start=.version=0x1ffe\\nattiny85: $(PROGRAM)_attiny85.hex\\nattiny85: $(PROGRAM)_attiny85.lst\\nattiny85: $(PROGRAM)_attiny85.elf\\n\\nattiny85_isp: attiny85\\nattiny85_isp: TARGET = attiny85\\nattiny85_isp: MCU_TARGET = attiny85\\nattiny85_isp: HFUSE = E2\\nattiny85_isp: LFUSE = D7\\nattiny85_isp: EFUSE = FE\\nattiny85_isp: isp\\n\\nattiny24_tuned: TARGET = attiny24\\nattiny24_tuned: MCU_TARGET = attiny24\\nattiny24_tuned: CFLAGS += '-DLED_START_FLASHES=3' '-DSOFT_UART' '-DBAUD_RATE=19200' '-DUSE_TINY_TUNER'\\nattiny24_tuned: CFLAGS += '-DVIRTUAL_BOOT_PARTITION'\\nattiny24_tuned: AVR_FREQ = 8000000L\\nattiny24_tuned: LDSECTIONS = -Wl,--section-start=.text=0x0000 -Wl,--section-start=.bootloader.start=0x05c0 -Wl,--section-start=.bootloader=0x0774 -Wl,--section-start=.version=0x07fc\\nattiny24_tuned: $(PROGRAM)_attiny24.hex\\nattiny24_tuned: $(PROGRAM)_attiny24.lst\\nattiny24_tuned: $(PROGRAM)_attiny24.elf\\n\\nattiny24_tuned_isp: attiny24\\nattiny24_tuned_isp: TARGET = attiny24\\nattiny24_tuned_isp: MCU_TARGET = attiny24\\nattiny24_tuned_isp: HFUSE = E2\\nattiny24_tuned_isp: LFUSE = D7\\nattiny24_tuned_isp: EFUSE = FE\\nattiny24_tuned_isp: isp\\n\\nattiny84_alternate_tuned: TARGET = attiny84\\nattiny84_alternate_tuned: MCU_TARGET = attiny84\\nattiny84_alternate_tuned: CFLAGS += '-DLED_START_FLASHES=3' '-DSOFT_UART' '-DBAUD_RATE=19200' '-DLED_DATA_FLASH' '-DUSE_TINY_TUNER' '-DALTERNATE_LAYOUT'\\nattiny84_alternate_tuned: CFLAGS += '-DVIRTUAL_BOOT_PARTITION'\\nattiny84_alternate_tuned: AVR_FREQ = 8000000L\\nattiny84_alternate_tuned: LDSECTIONS = -Wl,--section-start=.text=0x0000 -Wl,--section-start=.bootloader.start=0x1dc0 -Wl,--section-start=.bootloader=0x1f74 -Wl,--section-start=.version=0x1ffc\\nattiny84_alternate_tuned: $(PROGRAM)_attiny84.hex\\nattiny84_alternate_tuned: $(PROGRAM)_attiny84.lst\\nattiny84_alternate_tuned: $(PROGRAM)_attiny84.elf\\n\\nattiny84_alternate_tuned_isp: attiny84\\nattiny84_alternate_tuned_isp: TARGET = attiny84\\nattiny84_alternate_tuned_isp: MCU_TARGET = attiny84\\nattiny84_alternate_tuned_isp: HFUSE = E2\\nattiny84_alternate_tuned_isp: LFUSE = D7\\nattiny84_alternate_tuned_isp: EFUSE = FE\\nattiny84_alternate_tuned_isp: isp\\n\\nattiny84_tuned: TARGET = attiny84\\nattiny84_tuned: MCU_TARGET = attiny84\\nattiny84_tuned: CFLAGS += '-DLED_START_FLASHES=3' '-DSOFT_UART' '-DBAUD_RATE=19200' '-DLED_DATA_FLASH' '-DUSE_TINY_TUNER'\\nattiny84_tuned: CFLAGS += '-DVIRTUAL_BOOT_PARTITION'\\nattiny84_tuned: AVR_FREQ = 8000000L\\nattiny84_tuned: LDSECTIONS = -Wl,--section-start=.text=0x0000 -Wl,--section-start=.bootloader.start=0x1dc0 -Wl,--section-start=.bootloader=0x1f74 -Wl,--section-start=.version=0x1ffc\\nattiny84_tuned: $(PROGRAM)_attiny84.hex\\nattiny84_tuned: $(PROGRAM)_attiny84.lst\\nattiny84_tuned: $(PROGRAM)_attiny84.elf\\n\\nattiny84_tuned_isp: attiny84\\nattiny84_tuned_isp: TARGET = attiny84\\nattiny84_tuned_isp: MCU_TARGET = attiny84\\nattiny84_tuned_isp: HFUSE = E2\\nattiny84_tuned_isp: LFUSE = D7\\nattiny84_tuned_isp: EFUSE = FE\\nattiny84_tuned_isp: isp\\n\\nattiny85_tuned: TARGET = attiny85\\nattiny85_tuned: MCU_TARGET = attiny85\\nattiny85_tuned: CFLAGS += '-DLED_START_FLASHES=3' '-DSOFT_UART' '-DBAUD_RATE=19200' '-DLED_DATA_FLASH' '-DUSE_TINY_TUNER'\\nattiny85_tuned: CFLAGS += '-DVIRTUAL_BOOT_PARTITION'\\nattiny85_tuned: AVR_FREQ = 8000000L\\nattiny85_tuned: LDSECTIONS = -Wl,--section-start=.text=0x0000 -Wl,--section-start=.bootloader.start=0x1dc0 -Wl,--section-start=.bootloader=0x1f74 -Wl,--section-start=.version=0x1ffc\\nattiny85_tuned: $(PROGRAM)_attiny85.hex\\nattiny85_tuned: $(PROGRAM)_attiny85.lst\\nattiny85_tuned: $(PROGRAM)_attiny85.elf\\n\\nattiny85_tuned_isp: attiny85\\nattiny85_tuned_isp: TARGET = attiny85\\nattiny85_tuned_isp: MCU_TARGET = attiny85\\nattiny85_tuned_isp: HFUSE = E2\\nattiny85_tuned_isp: LFUSE = D7\\nattiny85_tuned_isp: EFUSE = FE\\nattiny85_tuned_isp: isp\\n\\nattiny167_tuned: TARGET = attiny167\\nattiny167_tuned: MCU_TARGET = attiny167\\nattiny167_tuned: CFLAGS += '-DLED_START_FLASHES=3' '-DBAUD_RATE=19200' '-DLED_DATA_FLASH' '-DUSE_TINY_TUNER' '-DSOFT_UART'\\nattiny167_tuned: CFLAGS += '-DVIRTUAL_BOOT_PARTITION' '-DVIRTUAL_BOOT_PARTITION_START=0x3d50'\\nattiny167_tuned: AVR_FREQ = 8000000L\\nattiny167_tuned: LDSECTIONS = -Wl,--section-start=.text=0x3000 -Wl,--section-start=.bootloader.start=0x3d50 -Wl,--section-start=.bootloader=0x3f70 -Wl,--section-start=.version=0x3ffc\\nattiny167_tuned: $(PROGRAM)_attiny167.hex\\nattiny167_tuned: $(PROGRAM)_attiny167.lst\\nattiny167_tuned: $(PROGRAM)_attiny167.elf\\n\\nattiny167_tuned_isp: attiny167\\nattiny167_tuned_isp: TARGET = attiny167\\nattiny167_tuned_isp: MCU_TARGET = attiny167\\nattiny167_tuned_isp: HFUSE = DF\\nattiny167_tuned_isp: LFUSE = A0\\nattiny167_tuned_isp: EFUSE = FE\\nattiny167_tuned_isp: isp\\n\\n##3d80 without soft uart. There are no start flashes as there is no space for them.\\nattiny167: TARGET = attiny167\\nattiny167: MCU_TARGET = attiny167\\nattiny167: CFLAGS += '-DLED_START_FLASHES=0' '-DBAUD_RATE=57600' '-DLED_DATA_FLASH'\\nattiny167: CFLAGS += '-DVIRTUAL_BOOT_PARTITION' '-DVIRTUAL_BOOT_PARTITION_START=0x3d80'\\nattiny167: AVR_FREQ = 20000000L\\nattiny167: LDSECTIONS = --gc-sections -nostartfiles -nostdlib -Wl,--section-start=.text=0x3d80 -Wl,--section-start=.version=0x3ffe\\nattiny167: $(PROGRAM)_attiny167.hex\\nattiny167: $(PROGRAM)_attiny167.lst\\nattiny167: $(PROGRAM)_attiny167.elf\\n\\nattiny167_isp: attiny167\\nattiny167_isp: TARGET = attiny167\\nattiny167_isp: MCU_TARGET = attiny167\\nattiny167_isp: HFUSE = DF\\nattiny167_isp: LFUSE = A0\\nattiny167_isp: EFUSE = FE\\nattiny167_isp: isp\\n\\n#\\n# Generic build instructions\\n#\\n#\\n\\nisp: $(TARGET)\\n\\t$(ISPFUSES)\\n\\t$(ISPFLASH)\\n\\nisp-stk500: $(PROGRAM)_$(TARGET).hex\\n\\t$(STK500-1)\\n\\t$(STK500-2)\\n\\n%.elf: $(OBJ)\\n\\t$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS)\\n\\t$(SIZE) $@\\n\\nclean:\\n\\trm -rf *.o *.elf *.lst *.map *.sym *.lss *.eep *.srec *.bin *.hex\\n\\n%.lst: %.elf\\n\\t$(OBJDUMP) -h -S $< > $@\\n\\n%.hex: %.elf\\n\\t$(OBJCOPY) -j .text -j .bootloader.start -j .bootloader -j .data -j .version --set-section-flags .version=alloc,load -O ihex $< $@\\n\\n%.srec: %.elf\\n\\t$(OBJCOPY) -j .text -j .bootloader.start -j .bootloader -j .data -j .version --set-section-flags .version=alloc,load -O srec $< $@\\n\\n%.bin: %.elf\\n\\t$(OBJCOPY) -j .text -j .bootloader.start -j .bootloader -j .data -j .version --set-section-flags .version=alloc,load -O binary $< $@\\n\u0000'\n"
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 1243
}