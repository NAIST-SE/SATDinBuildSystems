{
  "Repository" : "6635811",
  "Revision" : "HEAD",
  "ObjectId" : "69b31a173256c5232ca1e2b90b634ef925b5a927",
  "CommitTime" : "2019-01-19T21:00:03Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "aeb5d32291228c3e75d577ce23e2582282ee9e85",
      "LastModified" : "2016-12-23T12:20:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Bug http://vtk.org/Bug/view.php?id=11020\n",
        "Line" : 5,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# This can be read from ${PROJECT_NAME} after project() is called\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Also remember to set PROTOCOL_VERSION in network/networkprotocol.h when releasing\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Change to false for releases\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Configuration options\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# win32 broken! http://forum.freeminer.org/threads/building-errors.182/#post-1852\n\n#if( ${CMAKE_SYSTEM_VERSION} VERSION_LESS 6.0 )\n\n#\tMESSAGE(FATAL_ERROR \"Building is not supported for Windows ${CMAKE_SYSTEM_VERSION}\")\n\n#endif()\n",
        "Line" : 46,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Included stuff\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This is done here so that relative search paths are more reasonable\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Installation\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Linux, BSD etc\n",
        "Line" : 94,
        "CharPositionInLine" : 13
      },
      "10" : {
        "Text" : "# Subdirectories\n\n# Be sure to add all relevant definitions above this\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# CPack\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# For some reason these aren't copied otherwise\n\n# NOTE: For some reason now it seems to work without these\n\n#if(BUILD_CLIENT)\n\n#\tinstall(FILES bin/freeminer.exe DESTINATION bin)\n\n#endif()\n\n#if(BUILD_SERVER)\n\n#\tinstall(FILES bin/freeminerserver.exe DESTINATION bin)\n\n#endif()\n",
        "Line" : 224,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# This might be needed for some installer\n\n#set(CPACK_PACKAGE_EXECUTABLES bin/freeminer.exe \"Freeminer\" bin/freeminerserver.exe \"Freeminer Server\")\n",
        "Line" : 252,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Add a target to generate API documentation with Doxygen\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "build/android/Makefile" : {
      "ObjectId" : "d261a0e957bb6fc68eb475b13107160353066051",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# build options\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# compile with GPROF\n\n# GPROF = 1\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# build for build platform\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#use interim target variable to switch leveldb on or off\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Note: Texturehack patch is required for gpu's not supporting color format\n\n#      correctly. Known bad GPU:\n\n#      -geforce on emulator\n\n#      -Vivante Corporation GC1000 core (e.g. Galaxy Tab 3)\n",
        "Line" : 500,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# These Intentionally doesn't depend on their respective build steps,\n\n# because it takes a while to verify that everything's up-to-date.\n",
        "Line" : 788,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6,
      "Errorlog" : "line 783:57 token recognition error at: '\\U'\n"
    },
    "build/android_fm/Makefile" : {
      "ObjectId" : "e220b8d076a0cd0dbe4b58b4f84ce8b653f00df4",
      "LastModified" : "2017-04-16T19:53:11Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# build options\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# compile with GPROF\n\n# GPROF = 1\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# build for build platform\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# paths used for timestaps, dependencys, tree config and libs\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#patch -p1 < ../../patches/openssl_arch.patch || true; \\\n\tfi\n",
        "Line" : 416,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#curl https://patch-diff.githubusercontent.com/raw/google/leveldb/pull/341.diff | patch -d ${LEVELDB_DIR} --forward -p1 || true; \\\n\t\t#cd ${LEVELDB_DIR} || exit 1;                                           \\\n\t\t#git checkout ${LEVELDB_COMMIT} || exit 1;                              \\\n\t\tmkdir -p ${LEVELDB_DIR}/out-shared/db; \\\n\tfi\n",
        "Line" : 471,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#Note: Texturehack patch is required for gpu's not supporting color format\n\n#      correctly. Known bad GPU:\n\n#      -geforce on emulator\n\n#      -Vivante Corporation GC1000 core (e.g. Galaxy Tab 3)\n",
        "Line" : 632,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#svn co ${IRRLICHT_URL_SVN} irrlicht || exit 1;                         \\\n\t\t${GIT_CLONE} --depth 200 --branch ${IRRLICHT_GIT_BRANCH} ${IRRLICHT_URL_GIT} irrlicht || exit 1; \\\n\t\tcd irrlicht;                                                           \\\n\t\tgit checkout ${IRRLICHT_GIT_COMMIT}; \\\n\t\tgit cherry-pick 47ccb75; \\\n\t\tmkdir -p lib/Android; \\\n\t\tpatch -p1 < ../../patches/irrlicht-crystax.patch; \\\n\t\tpatch -p1 < ../../patches/irrlicht-touchcount.patch || exit 1; \\\n\t\tpatch -p1 < ../../patches/irrlicht-back_button.patch || exit 1; \\\n\t\tpatch -p1 < ../../patches/irrlicht-texturehack.patch || exit 1; \\\n\tfi\n",
        "Line" : 642,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#cp ${ROOT}/../../doc/lgpl-2.1.txt ${ROOT}/assets/freeminer/LICENSE.txt;     \\\n\tmkdir ${ROOT}/assets/freeminer/fonts; \\\n\tcp -r ${ROOT}/../../fonts/*.ttf ${ROOT}/assets/freeminer/fonts/; \\\n\tmkdir ${ROOT}/assets/freeminer/games${GAMES_VERSION}; \\\n\tfor game in ${GAMES_TO_COPY};                                              \\\n\tdo                                                                         \\\n\t    cp -Lr ${ROOT}/../../games/$$game ${ROOT}/assets/freeminer/games${GAMES_VERSION}/; \\\n\tdone;                                                                      \\\n\tmkdir ${ROOT}/assets/freeminer/mods; \\\n\tfor mod in ${MODS_TO_COPY}; do                                             \\\n\t    cp -r ${ROOT}/../../mods/$$mod ${ROOT}/assets/freeminer/mods/; \\\n\tdone;                                                                      \\\n\tcp -r ${ROOT}/cmake/locale ${ROOT}/assets/freeminer; \\\n\tcp -r ${ROOT}/../../textures ${ROOT}/assets/freeminer; \\\n\tmkdir -p ${ROOT}/assets/freeminer/media; \\\n\tcp -r ${IRRLICHT_DIR}/media/Shaders ${ROOT}/assets/freeminer/media; \\\n\tcd ${ROOT}/assets ||  exit 1;                                              \\\n\tfind . -name \"timestamp\" -exec rm {} \\; ;                                  \\\n\tfind . \\( -name \"favoriteservers.json\" -o -name \"servers_public.json\" \\) -exec rm {} \\; ;                       \\\n\tfind . -name \"*.blend\" -exec rm {} \\; ;                                    \\\n\tfind . -name \"*.xcf\" -exec rm {} \\; ; \\\n\tfind . -name \"*~\" -exec rm {} \\; ;                                         \\\n\tfind . -type d -path \"*.git\" -exec rm -rf {} \\; ;                          \\\n\tfind . -type d -path \"*.svn\" -exec rm -rf {} \\; ;                          \\\n\tfind . -type f -path \"*.gitignore\" -exec rm -rf {} \\; ;                    \\\n\tfind . \\( -name \"lucida_sans_*\" -o -name \"mono_dejavu_sans_*\" -o -name \"README.txt\" -o -name \"*.md\"  -o -name \"game_api.txt\" -o -name \".git*\" \\) -exec rm {} \\; ; \\\n\tls -R | grep \":$$\" | sed -e 's/:$$//' -e 's/\\.//' -e 's/^\\///' > \"index.txt\"; \\\n\t#find freeminer >\"filelist.txt\"; \\\n\tfind freeminer ! -path '*/games/*' > filelist.txt; \\\n\tfind freeminer -path '*/games/*' >> filelist.txt; \\\n\tcp ${ROOT}/${ASSETS_TIMESTAMP} ${ROOT}/${ASSETS_TIMESTAMP}.old;            \\\n\telse                                                                       \\\n\t\techo \"nothing to be done for assets\";                                  \\\n\tfi\n",
        "Line" : 886,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "#=== freeminer libs:\n",
        "Line" : 925,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#MSGPACK_TARGET = $(MSGPACK_DIR)/include/msgpack.hpp\n",
        "Line" : 936,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#export PATH=$${PATH}:${SDKFOLDER}/platform-tools:${ANDROID_NDK};           \\\n\t#echo \"changed timestamp for gettext detected building...\";                   \\\n\tcd $(GETTEXT_DIR);                                                           \\\n\t#export CROSS_PREFIX=${CROSS_PREFIX};                                       \\\n\t#export TOOLCHAIN=/tmp/ndk-${TARGET_HOST}-gettext;                            \\\n\t#${ANDROID_NDK}/build/tools/make-standalone-toolchain.sh                    \\\n\t#--toolchain=${TARGET_TOOLCHAIN}${COMPILER_VERSION}                         \\\n\t#--stl=${APP_STL} \\\n\t#--platform=${APP_PLATFORM} \\\n\t#${STANDALONE_ADDON} \\\n\t#--install-dir=$${TOOLCHAIN};                                               \\\n\t#export PATH=\"$${TOOLCHAIN}/bin:$${PATH}\";                                  \\\n\t#export CXX=${CROSS_PREFIX}${CXX}; \\\n\t#export AR=${CROSS_PREFIX}ar;                                             \\\n\t#export TARGET_OS=OS_ANDROID_CROSSCOMPILE;                                  \\\n\t#export CPPFLAGS=\"$${CPPFLAGS} ${TARGET_CFLAGS_ADDON}\";                     \\\n\t#export CFLAGS=\"$${CFLAGS} ${TARGET_CFLAGS_ADDON}\";                         \\\n\t#export LDFLAGS=\"$${LDFLAGS} ${TARGET_LDFLAGS_ADDON}\";                      \\\n\ttouch ${GETTEXT_TIMESTAMP};                                                  \\\n\ttouch ${GETTEXT_TIMESTAMP_INT};                                              \\\n\telse                                                                       \\\n\t\techo \"nothing to be done for gettext\";                                   \\\n\tfi\n",
        "Line" : 1031,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "#LUAJIT_GIT_BRANCH = v2.1\n",
        "Line" : 1064,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\t-rm -fr deps\n",
        "Line" : 1132,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# here is bad place\n",
        "Line" : 1134,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#==== end of freeminer libs\n",
        "Line" : 1136,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# $(ICONV_LIB)\n",
        "Line" : 1139,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 17
    },
    "build/android_fm/build.xml" : {
      "ObjectId" : "6b256f10a250f4701d6ba89f9fb92ea2b51d5425",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "ANT",
      "CommentCount" : 0
    },
    "build/mingw/toolchain_mingw.cmake" : {
      "ObjectId" : "0eeefb84d347647c4da4e8a5541c99d1138593d9",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# here is the target environment located\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search\n\n# programs in the host environment\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/Modules/FindCURL.cmake" : {
      "ObjectId" : "65444bcc959b0139446c2d2879719279afe4ecc0",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindGMP.cmake" : {
      "ObjectId" : "bb48289c54854f94655cc247b5ff62545c92fe31",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindGettextLib.cmake" : {
      "ObjectId" : "4276a0eb879184ce75d0ad95eb389f0bfba09716",
      "LastModified" : "2018-09-24T13:19:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Modern Linux, as well as OSX, does not require special linking because\n\n# GetText is part of glibc.\n\n# TODO: check the requirements on other BSDs and older Linux\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BSD variants require special linkage as they don't use glibc\n",
        "Line" : 65,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#set(GETTEXT_LIBRARY \"intl\")\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindIconv.cmake" : {
      "ObjectId" : "a2fa9963b13b25f3495917a678a9a071db919650",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#include(FindPackageHandleStandardArgs)\n\n#find_package_handle_standard_args(iconv DEFAULT_MSG ICONV_INCLUDE_DIR)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindIrrlicht.cmake" : {
      "ObjectId" : "96abb50bd33091bc034653c800251279a798294a",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find include directory\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# On Windows, find the DLL for installation\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindJson.cmake" : {
      "ObjectId" : "3d70bed01f0897a97c17531fc93c491628504e73",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Look for JSONCPP if asked to.\n\n# We use a bundled version by default because some distros ship versions of\n\n# JSONCPP that cause segfaults and other memory errors when we link with them.\n\n# See https://github.com/minetest/minetest/issues/1793\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(JSON_INCLUDE_DIR ${PROJECT_SOURCE_DIR}/external/jsoncpp)\n\n#set(JSON_LIBRARY jsoncpp)\n\n#add_subdirectory(jsoncpp/json)\n",
        "Line" : 30,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindLuaJIT.cmake" : {
      "ObjectId" : "26a5b35938a6fb53544a43f47b7eeca6a8e6fbcd",
      "LastModified" : "2018-09-24T13:19:04Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate LuaJIT library\n\n# This module defines\n\n#  LUAJIT_FOUND, if false, do not try to link to Lua\n\n#  LUA_INCLUDE_DIR, where to find lua.h\n\n#  LUA_VERSION_STRING, the version of LuaJIT found (since CMake 2.8.8)\n\n#\n\n# This module is similar to FindLua51.cmake except that it finds LuaJit instead.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fink\n",
        "Line" : 16,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 17,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# Blastwave\n",
        "Line" : 18,
        "CharPositionInLine" : 10
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUAJIT_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindMandelbulber.cmake" : {
      "ObjectId" : "3da63eb52f67e5df20819331faa9d417d4ae7aa4",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# NOT USED\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# make new patch:\n\n# diff -EbBw --normal -u ../mandelbulber-read-only/src src/mandelbulber | grep -v \"Only in\" > util/mandelbulber.patch\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindMsgPack.cmake" : {
      "ObjectId" : "aac3de7b14156a5e13e9e653c4bcbed65204a953",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find MsgPack includes and library\n\n#\n\n# This module defines\n\n#  MSGPACK_INCLUDE_DIR\n\n#  MSGPACK_LIBRARY, the libraries to link against to use MSGPACK.\n\n#  MSGPACK_FOUND, If false, do not try to use MSGPACK\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Minimal supported version: 1.4.0\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# msgpack 1.2.0 recompiles all .h every cmake run - it cause recompile all freeminer src.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 35,
        "CharPositionInLine" : 35
      },
      "4" : {
        "Text" : "#include_directories(${PROJECT_SOURCE_DIR}/external/msgpack-c/include)\n",
        "Line" : 57,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# before 1.4.0 was msgpack-static\n",
        "Line" : 58,
        "CharPositionInLine" : 38
      },
      "CommentCount" : 6
    },
    "cmake/Modules/FindNcursesw.cmake" : {
      "ObjectId" : "e572c704af5ba649319f690bd8a1a5b4394320c5",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindNcursesw\n\n# ------------\n\n#\n\n# Find the ncursesw (wide ncurses) include file and library.\n\n#\n\n# Based on FindCurses.cmake which comes with CMake.\n\n#\n\n# Checks for ncursesw first. If not found, it then executes the\n\n# regular old FindCurses.cmake to look for for ncurses (or curses).\n\n#\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the following variables:\n\n#\n\n# ``CURSES_FOUND``\n\n#   True if curses is found.\n\n# ``NCURSESW_FOUND``\n\n#   True if ncursesw is found.\n\n# ``CURSES_INCLUDE_DIRS``\n\n#   The include directories needed to use Curses.\n\n# ``CURSES_LIBRARIES``\n\n#   The libraries needed to use Curses.\n\n# ``CURSES_HAVE_CURSES_H``\n\n#   True if curses.h is available.\n\n# ``CURSES_HAVE_NCURSES_H``\n\n#   True if ncurses.h is available.\n\n# ``CURSES_HAVE_NCURSES_NCURSES_H``\n\n#   True if ``ncurses/ncurses.h`` is available.\n\n# ``CURSES_HAVE_NCURSES_CURSES_H``\n\n#   True if ``ncurses/curses.h`` is available.\n\n# ``CURSES_HAVE_NCURSESW_NCURSES_H``\n\n#   True if ``ncursesw/ncurses.h`` is available.\n\n# ``CURSES_HAVE_NCURSESW_CURSES_H``\n\n#   True if ``ncursesw/curses.h`` is available.\n\n#\n\n# Set ``CURSES_NEED_NCURSES`` to ``TRUE`` before the\n\n# ``find_package(Ncursesw)`` call if NCurses functionality is required.\n\n#\n\n#=============================================================================\n\n# Copyright 2001-2014 Kitware, Inc.\n\n# modifications: Copyright 2015 kahrl <kahrl@gmx.net>\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright\n\n#   notice, this list of conditions and the following disclaimer.\n\n#\n\n# * Redistributions in binary form must reproduce the above copyright\n\n#   notice, this list of conditions and the following disclaimer in the\n\n#   documentation and/or other materials provided with the distribution.\n\n#\n\n# * Neither the names of Kitware, Inc., the Insight Software Consortium,\n\n#   nor the names of their contributors may be used to endorse or promote\n\n#   products derived from this software without specific prior written\n\n#   permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\n# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# ------------------------------------------------------------------------------\n\n#\n\n# The above copyright and license notice applies to distributions of\n\n# CMake in source and binary form.  Some source files contain additional\n\n# notices of original copyright by their contributors; see each source\n\n# for details.  Third-party software packages supplied with CMake under\n\n# compatible licenses provide their own copyright notices documented in\n\n# corresponding subdirectories.\n\n#\n\n# ------------------------------------------------------------------------------\n\n#\n\n# CMake was initially developed by Kitware with the following sponsorship:\n\n#\n\n#  * National Library of Medicine at the National Institutes of Health\n\n#    as part of the Insight Segmentation and Registration Toolkit (ITK).\n\n#\n\n#  * US National Labs (Los Alamos, Livermore, Sandia) ASC Parallel\n\n#    Visualization Initiative.\n\n#\n\n#  * National Alliance for Medical Image Computing (NAMIC) is funded by the\n\n#    National Institutes of Health through the NIH Roadmap for Medical Research,\n\n#    Grant U54 EB005149.\n\n#\n\n#  * Kitware, Inc.\n\n#=============================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Previous versions of FindCurses provided these values.\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Report whether each possible header name exists in the include directory.\n",
        "Line" : 135,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Need to provide the *_LIBRARIES\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Provide the *_INCLUDE_DIRS result.\n",
        "Line" : 181,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# compatibility\n",
        "Line" : 183,
        "CharPositionInLine" : 49
      },
      "6" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set CURSES_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cmake/Modules/FindOpenGLES2.cmake" : {
      "ObjectId" : "6ccd63605a770d2f7de288f5b66fdc16e08d6b0a",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is stolen from part of the CMake build system for OGRE (Object-oriented Graphics Rendering Engine) http://www.ogre3d.org/\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Try to find OpenGLES and EGL\n\n# Once done this will define\n\n#\n\n#  OPENGLES2_FOUND        - system has OpenGLES\n\n#  OPENGLES2_INCLUDE_DIR  - the GL include directory\n\n#  OPENGLES2_LIBRARIES    - Link these to use OpenGLES\n\n#\n\n#  EGL_FOUND        - system has EGL\n\n#  EGL_INCLUDE_DIR  - the EGL include directory\n\n#  EGL_LIBRARIES    - Link these to use EGL\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Win32, Apple, and Android are not tested!\n\n# Linux tested and works\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO\n\n# set(OPENGLES_LIBRARY ${SOURCE_DIR}/Dependencies/lib/release/libGLESv2.lib CACHE STRING \"OpenGL ES 2.x library for win32\"\n",
        "Line" : 30,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# On Unix OpenGL usually requires X11.\n\n# It doesn't require X11 on OSX.\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindSQLite3.cmake" : {
      "ObjectId" : "75c3b5b0f9f854baa5d5656f3a6ba1343b8f82aa",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindVorbis.cmake" : {
      "ObjectId" : "8f381369427ca3d7a211a9d7a525631eee3db76b",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find vorbis\n\n# Find the native vorbis includes and libraries\n\n#\n\n#  VORBIS_INCLUDE_DIR - where to find vorbis.h, etc.\n\n#  OGG_INCLUDE_DIR    - where to find ogg/ogg.h, etc.\n\n#  VORBIS_LIBRARIES   - List of libraries when using vorbis(file).\n\n#  VORBIS_FOUND       - True if vorbis found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 11,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# MSVC built ogg/vorbis may be named ogg_static and vorbis_static\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set VORBIS_FOUND\n\n# to TRUE if all listed variables are TRUE.\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/Modules/GenerateVersion.cmake" : {
      "ObjectId" : "ad0e38263be20c6b5d3dbdf5e8b70636834d6e00",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Always run during 'make'\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "c520c02dea7e1b21179cd2b0e72cc5e82099881d",
      "LastModified" : "2019-01-19T21:00:03Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# test compiler capabilities\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(STD_FLAGS \"-std=c++1y -stdlib=libstdc++ -lc++\")\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# http://forum.freeminer.org/threads/building-errors.182/#post-1855\n",
        "Line" : 39,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "#\n\n# Set some optimizations and tweaks\n\n#\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Visual Studio\n",
        "Line" : 123,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# EHa enables SEH exceptions (used for catching segfaults)\n",
        "Line" : 125,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#set(CMAKE_EXE_LINKER_FLAGS_RELEASE \"/LTCG /NODEFAULTLIB:\\\"libcmtd.lib\\\" /NODEFAULTLIB:\\\"libcmt.lib\\\"\")\n",
        "Line" : 127,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Debug build doesn't catch exceptions by itself\n\n# Add some optimizations because otherwise it's VERY slow\n",
        "Line" : 132,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Flags for C files (sqlite)\n\n# /MT = Link statically with standard library stuff\n",
        "Line" : 141,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# Probably GCC\n",
        "Line" : 145,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# clang does not understand __extern_always_inline but libc headers use it\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# avoid empty value in cmake_config.h\n",
        "Line" : 225,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Add custom SemiDebug build mode\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Set some random things default to not being visible in the GUI\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Sound libraries\n",
        "Line" : 329,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "#option(ENABLE_FREETYPE \"Enable FreeType2 (TrueType fonts and basic unicode support)\" TRUE)\n\n#mark_as_advanced(ENABLE_FREETYPE)\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "##\n\n## Note: FindFreetype.cmake seems to have been fixed in recent versions of\n\n## CMake. If issues persist, re-enable this workaround specificially for the\n\n## failing platforms.\n\n##\n\n#\tif(${CMAKE_SYSTEM} MATCHES \"FreeBSD\")\n\n#\t\t#PkgConfig not worked. result: /usr/bin/ld: cannot find -lfreetype\n\n#\telseif(UNIX)\n\n#\t\tinclude(FindPkgConfig)\n\n#\t\tif(PKG_CONFIG_FOUND)\n\n#\t\t\tpkg_check_modules(FREETYPE QUIET freetype2)\n\n#\t\t\tif(FREETYPE_FOUND)\n\n#\t\t\t\tSET(FREETYPE_PKGCONFIG_FOUND TRUE)\n\n#\t\t\t\tSET(FREETYPE_LIBRARY ${FREETYPE_LIBRARIES})\n\n#\t\t\t\t# Because CMake is idiotic\n\n#\t\t\t\tstring(REPLACE \";\" \" \" FREETYPE_CFLAGS_STR ${FREETYPE_CFLAGS})\n\n#\t\t\t\tstring(REPLACE \";\" \" \" FREETYPE_LDFLAGS_STR ${FREETYPE_LDFLAGS})\n\n#\t\t\tendif(FREETYPE_FOUND)\n\n#\t\tendif(PKG_CONFIG_FOUND)\n\n#\tendif()\n\n#\tif(NOT FREETYPE_FOUND)\n\n#\t\tfind_package(Freetype)\n\n#\tendif()\n",
        "Line" : 378,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# LuaJIT\n",
        "Line" : 414,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This variable is case sensitive for the cmake PostgreSQL module\n",
        "Line" : 461,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# This variable is case sensitive, don't try to change it to POSTGRESQL_INCLUDE_DIR\n",
        "Line" : 470,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Snappy have no cmake by default,\n\n# git clone --recursive --depth 1 https://github.com/google/snappy src/external/snappy\n\n# But we can collect something from pulls\n\n# wget -O src/external/snappy/CMakeLists.txt https://raw.githubusercontent.com/adasworks/snappy-cmake/master/CMakeLists.txt\n",
        "Line" : 492,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# bad try direct make build \n\n#find_path(LEVELDB_MAKEFILE_DIR Makefile ${PROJECT_SOURCE_DIR}/external/leveldb NO_DEFAULT_PATH)\n\n#if (LEVELDB_MAKEFILE_DIR)\n\n#\texecute_process(COMMAND \"make -f ${LEVELDB_MAKEFILE_DIR}/Makefile\" WORKING_DIRECTORY LEVELDB_MAKEFILE_DIR OUTPUT_VARIABLE LMKE ERROR_VARIABLE LMKE)\n\n#message(STATUS \"leveldb mk=${LMKE}\")\n\n#endif()\n\n#\n\n# good cmake try\n\n# Leveldb have no cmake by default,\n\n# git clone --recursive --depth 1 https://github.com/google/leveldb src/external/leveldb\n\n# But we can collect something from pulls\n\n# wget -O src/external/leveldb/CMakeLists.txt https://raw.githubusercontent.com/proller/leveldb/patch-2/CMakeLists.txt\n\n# wget -O src/external/leveldb/leveldbConfig.cmake.in https://raw.githubusercontent.com/tamaskenez/leveldb-cmake-win/native_windows_port_1_18/leveldbConfig.cmake.in\n",
        "Line" : 505,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# this is needed because VS builds install LevelDB via nuget\n",
        "Line" : 540,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#find_package(SQLite3 REQUIRED)\n",
        "Line" : 582,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#option(ENABLE_MANDELBULBER \"Use Mandelbulber source to generate more fractals in math mapgen\" OFF)\n",
        "Line" : 585,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#find_package(Mandelbulber)\n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Use cmake_config.h\n",
        "Line" : 616,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Windows\n",
        "Line" : 620,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# MSVC Specifics\n",
        "Line" : 621,
        "CharPositionInLine" : 10
      },
      "29" : {
        "Text" : "# Surpress some useless warnings\n",
        "Line" : 623,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Probably MinGW = GCC\n",
        "Line" : 625,
        "CharPositionInLine" : 8
      },
      "31" : {
        "Text" : "# vs2015\n",
        "Line" : 630,
        "CharPositionInLine" : 10
      },
      "32" : {
        "Text" : "# Zlib stuff\n",
        "Line" : 634,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "#set(MINGWM10_DLL \"\"\n\n#\t\tCACHE FILEPATH \"Path to mingwm10.dll (for installation)\")\n",
        "Line" : 652,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Unix probably\n",
        "Line" : 661,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# This way Xxf86vm is found on OpenBSD too\n",
        "Line" : 691,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# Prefer local iconv if installed\n",
        "Line" : 698,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# Add a target that always rebuilds cmake_config_githash.h\n",
        "Line" : 717,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#add_definitions(-DINET -DINET6)\n\n#add_definitions(-DSCTP_WITH_NO_CSUM)\n",
        "Line" : 745,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# from external/usrsctp/usrsctplib/CMakeLists.txt :\n",
        "Line" : 747,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#\tFMColoredString.cpp\n",
        "Line" : 798,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# This gives us the icon and file version information\n",
        "Line" : 892,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Probably MSVC\n",
        "Line" : 907,
        "CharPositionInLine" : 13
      },
      "43" : {
        "Text" : "#FMStaticText.cpp\n",
        "Line" : 916,
        "CharPositionInLine" : 1
      },
      "44" : {
        "Text" : "# Client sources\n",
        "Line" : 923,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Server sources\n",
        "Line" : 976,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "#freeminer includes:\n",
        "Line" : 999,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Blacklisted locales that don't work.\n\n# see issue #4638\n",
        "Line" : 1144,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Installation\n",
        "Line" : 1167,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#set(PO_FILE_PATH \"${GETTEXT_PO_PATH}/${LOCALE}/${PROJECT_NAME}.po\")\n",
        "Line" : 1255,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# Subdirectories\n",
        "Line" : 1279,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 51
    },
    "src/cguittfont/CMakeLists.txt" : {
      "ObjectId" : "6cd35f310fa36527b379c1863e12548adb8aada8",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CGUITTFont authors, y u no include headers you use?\n\n#   Do not add CGUITTFont.cpp to the line below.\n\n#   xCGUITTFont.cpp is a wrapper file that includes\n\n#   additional required headers.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# needed by freetype, repeated here for safety\n",
        "Line" : 28,
        "CharPositionInLine" : 20
      },
      "CommentCount" : 2
    },
    "src/client/CMakeLists.txt" : {
      "ObjectId" : "5faa186a723e908f950385a62de0c34f04f4fa0c",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/contrib/CMakeLists.txt" : {
      "ObjectId" : "15097832fb79ef33dea6230f393d3a900bd23a91",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/external/sqlite3/CMakeLists.txt" : {
      "ObjectId" : "d0004ba933937e50980098b4dab43ee79dbd87ef",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/gmp/CMakeLists.txt" : {
      "ObjectId" : "96ae8191d5b60787b5a7133fb4fcd3af6c3e6beb",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/irrlicht_changes/CMakeLists.txt" : {
      "ObjectId" : "3a265c99d0f8728d026cd95479ad3526607b1f77",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/lua/CMakeLists.txt" : {
      "ObjectId" : "a3cf5d611a241b099d01317abe394e1a9b4ebccf",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# use this on Mac OS X 10.3-\n",
        "Line" : 19,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# For \"Mac OS X 10.3-\"\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# COMMON_CFLAGS has no effect without this line\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Standard flags to use for each build type.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/lua/src/CMakeLists.txt" : {
      "ObjectId" : "8f6cc1213d6779c2b0dbcd7c09176b30b346a214",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Lua core source files.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Lua library.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/network/CMakeLists.txt" : {
      "ObjectId" : "bb99fdca36ffbc30c71dc72b2eb981f47785b1ce",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/script/CMakeLists.txt" : {
      "ObjectId" : "5ef672ca91a4e7820eb496a14c75bc3fabdd1d2f",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Used by server and client\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Used by client only\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/script/common/CMakeLists.txt" : {
      "ObjectId" : "4a8e6bab5d08ba2c425526b21ba43e438eda530f",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/script/cpp_api/CMakeLists.txt" : {
      "ObjectId" : "be4d0131e170089e95679259ed64438198339b3e",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/script/lua_api/CMakeLists.txt" : {
      "ObjectId" : "9aecaefd8aeb35b8a6c04eb8777d12a069dfcf67",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/threading/CMakeLists.txt" : {
      "ObjectId" : "4219da288dfe6d76ccc438da0a322e4572f4e346",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/unittest/CMakeLists.txt" : {
      "ObjectId" : "7ad38099cbee92f4f698a70ca1a035549d413185",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/util/CMakeLists.txt" : {
      "ObjectId" : "f571ab22ca75a2746ad8aea95bbdc36bf68dbe4d",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "util/buildbot/toolchain_mingw64.cmake" : {
      "ObjectId" : "9a7ed82d89fbd52fedd669289bb9b3f291ca92e8",
      "LastModified" : "2016-12-24T16:34:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# name of the target operating system\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# here is the target environment located\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search\n\n# programs in the host environment\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 34,
    "MAKEFILE" : 2,
    "ANT" : 1
  },
  "ElapsedTime" : 3044
}