{
  "Repository" : "126646",
  "Revision" : "HEAD",
  "ObjectId" : "d16f6b67b8462a06accbfb92f85eea23990d5f7a",
  "CommitTime" : "2019-01-31T07:44:08Z",
  "Files" : {
    "amibe/build.xml" : {
      "ObjectId" : "e6fe97a45c748ebf5a09529610e0acac6b6783f8",
      "LastModified" : "2011-01-31T16:12:54Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " Old tests, not yet converted to JUnit ",
        "Line" : 70,
        "CharPositionInLine" : 52
      },
      "1" : {
        "Text" : " Not JUnit tests, used by test-large ",
        "Line" : 75,
        "CharPositionInLine" : 50
      },
      "2" : {
        "Text" : " It seems that doc-files/* are not copied if sourcepath is not present ",
        "Line" : 157,
        "CharPositionInLine" : 81
      },
      "CommentCount" : 3
    },
    "amibe/doc/devel-manual/Makefile" : {
      "ObjectId" : "da700f0266bed1502df672c8e0652d5b058b5716",
      "LastModified" : "2005-12-06T20:49:19Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "jcae/amibe-occ/build.xml" : {
      "ObjectId" : "55548b9f580ba51c38b2d7317e8abc994212b8f7",
      "LastModified" : "2011-01-31T16:12:54Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See harness/README in the NetBeans platform ",
        "Line" : 2,
        "CharPositionInLine" : 84
      },
      "1" : {
        "Text" : " for some information on what you could do (e.g. targets to override). ",
        "Line" : 3,
        "CharPositionInLine" : 79
      },
      "2" : {
        "Text" : " If you delete this file and reopen the project it will be recreated. ",
        "Line" : 4,
        "CharPositionInLine" : 78
      },
      "3" : {
        "Text" : " from http://wiki.netbeans.org/DevFaqWrapperModules ",
        "Line" : 8,
        "CharPositionInLine" : 61
      },
      "CommentCount" : 4
    },
    "jcae/amibe/build.xml" : {
      "ObjectId" : "12c17288c08d3f4a1d46c32432b82df0cbc56c3a",
      "LastModified" : "2011-01-31T16:12:54Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See harness/README in the NetBeans platform ",
        "Line" : 2,
        "CharPositionInLine" : 84
      },
      "1" : {
        "Text" : " for some information on what you could do (e.g. targets to override). ",
        "Line" : 3,
        "CharPositionInLine" : 79
      },
      "2" : {
        "Text" : " If you delete this file and reopen the project it will be recreated. ",
        "Line" : 4,
        "CharPositionInLine" : 78
      },
      "3" : {
        "Text" : " from http://wiki.netbeans.org/DevFaqWrapperModules ",
        "Line" : 8,
        "CharPositionInLine" : 61
      },
      "CommentCount" : 4
    },
    "jcae/build.xml" : {
      "ObjectId" : "19eb2db823296c8de31955de15e2e2aff52a8d50",
      "LastModified" : "2013-12-06T16:33:47Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See harness/README in the NetBeans platform ",
        "Line" : 2,
        "CharPositionInLine" : 84
      },
      "1" : {
        "Text" : " for some information on what you could do (e.g. targets to override). ",
        "Line" : 3,
        "CharPositionInLine" : 79
      },
      "2" : {
        "Text" : " If you delete this file and reopen the project it will be recreated. ",
        "Line" : 4,
        "CharPositionInLine" : 78
      },
      "3" : {
        "Text" : " Patch launcher and/or configuration file ",
        "Line" : 8,
        "CharPositionInLine" : 51
      },
      "4" : {
        "Text" : " When we switch from win32 to linux, arch specific files will stay in\n\tin the cluster directory, so we need to clean it.\n\t",
        "Line" : 33,
        "CharPositionInLine" : 5
      },
      "5" : {
        "Text" : " From netbeans-6.7/harness/suite.xml ",
        "Line" : 38,
        "CharPositionInLine" : 46
      },
      "6" : {
        "Text" : " pathfileset does not support 'prefix' and 'filemode' parameters,\n             we have to copy them to temp location ",
        "Line" : 43,
        "CharPositionInLine" : 55
      },
      "7" : {
        "Text" : " Yes, the doubled app.name is a bit ugly, but better than the alternative; cf. #66441: ",
        "Line" : 58,
        "CharPositionInLine" : 107
      },
      "CommentCount" : 8
    },
    "jcae/core/build.xml" : {
      "ObjectId" : "db7635c701efdbf429ae61562dd3a0e98c94f314",
      "LastModified" : "2011-01-31T16:12:54Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See harness/README in the NetBeans platform ",
        "Line" : 2,
        "CharPositionInLine" : 84
      },
      "1" : {
        "Text" : " for some information on what you could do (e.g. targets to override). ",
        "Line" : 3,
        "CharPositionInLine" : 79
      },
      "2" : {
        "Text" : " If you delete this file and reopen the project it will be recreated. ",
        "Line" : 4,
        "CharPositionInLine" : 78
      },
      "CommentCount" : 3
    },
    "jcae/jython/build.xml" : {
      "ObjectId" : "df27a13fe633da73cff03b011423787afaab2cce",
      "LastModified" : "2013-12-06T16:33:47Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See harness/README in the NetBeans platform ",
        "Line" : 2,
        "CharPositionInLine" : 84
      },
      "1" : {
        "Text" : " for some information on what you could do (e.g. targets to override). ",
        "Line" : 3,
        "CharPositionInLine" : 79
      },
      "2" : {
        "Text" : " If you delete this file and reopen the project it will be recreated. ",
        "Line" : 4,
        "CharPositionInLine" : 78
      },
      "CommentCount" : 3
    },
    "jcae/mesh-algos/build.xml" : {
      "ObjectId" : "ffbd8a6cffb32d9f9c0af10104a992e7acb2189a",
      "LastModified" : "2011-01-31T16:12:54Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See harness/README in the NetBeans platform ",
        "Line" : 2,
        "CharPositionInLine" : 84
      },
      "1" : {
        "Text" : " for some information on what you could do (e.g. targets to override). ",
        "Line" : 3,
        "CharPositionInLine" : 79
      },
      "2" : {
        "Text" : " If you delete this file and reopen the project it will be recreated. ",
        "Line" : 4,
        "CharPositionInLine" : 78
      },
      "CommentCount" : 3
    },
    "jcae/occjava-nb/build.xml" : {
      "ObjectId" : "8034ceaa0eb5fb12e373199e7ec14783f085a0ec",
      "LastModified" : "2014-01-13T16:26:51Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See harness/README in the NetBeans platform ",
        "Line" : 2,
        "CharPositionInLine" : 84
      },
      "1" : {
        "Text" : " for some information on what you could do (e.g. targets to override). ",
        "Line" : 3,
        "CharPositionInLine" : 79
      },
      "2" : {
        "Text" : " If you delete this file and reopen the project it will be recreated. ",
        "Line" : 4,
        "CharPositionInLine" : 78
      },
      "3" : {
        "Text" : " from http://wiki.netbeans.org/DevFaqWrapperModules ",
        "Line" : 8,
        "CharPositionInLine" : 61
      },
      "4" : {
        "Text" : " Debian packaging ",
        "Line" : 14,
        "CharPositionInLine" : 28
      },
      "5" : {
        "Text" : " OCE packaging ",
        "Line" : 16,
        "CharPositionInLine" : 25
      },
      "6" : {
        "Text" : " OCE packaging with OCE_NO_LIBRARY_VERSION=ON ",
        "Line" : 18,
        "CharPositionInLine" : 56
      },
      "7" : {
        "Text" : " mingw build without hack to remove lib prefix ",
        "Line" : 23,
        "CharPositionInLine" : 60
      },
      "8" : {
        "Text" : " mingw build with hack to remove lib prefix ",
        "Line" : 25,
        "CharPositionInLine" : 54
      },
      "CommentCount" : 9
    },
    "jcae/occjava/build.xml" : {
      "ObjectId" : "1b11c479520fa70de6a486e47a68019668cf8c8c",
      "LastModified" : "2011-01-31T16:12:54Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"occjava-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 4
    },
    "jcae/trove/build.xml" : {
      "ObjectId" : "73672a33f43afc357ce9dabfbb365295ba442b13",
      "LastModified" : "2013-12-06T16:33:47Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See harness/README in the NetBeans platform ",
        "Line" : 2,
        "CharPositionInLine" : 84
      },
      "1" : {
        "Text" : " for some information on what you could do (e.g. targets to override). ",
        "Line" : 3,
        "CharPositionInLine" : 79
      },
      "2" : {
        "Text" : " If you delete this file and reopen the project it will be recreated. ",
        "Line" : 4,
        "CharPositionInLine" : 78
      },
      "3" : {
        "Text" : " from http://wiki.netbeans.org/DevFaqWrapperModules ",
        "Line" : 8,
        "CharPositionInLine" : 62
      },
      "CommentCount" : 4
    },
    "jcae/tweakui/build.xml" : {
      "ObjectId" : "bbdcd5233644ba71f24c35ea76df38490105ef68",
      "LastModified" : "2011-01-31T16:12:54Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See harness/README in the NetBeans platform ",
        "Line" : 2,
        "CharPositionInLine" : 84
      },
      "1" : {
        "Text" : " for some information on what you could do (e.g. targets to override). ",
        "Line" : 3,
        "CharPositionInLine" : 79
      },
      "2" : {
        "Text" : " If you delete this file and reopen the project it will be recreated. ",
        "Line" : 4,
        "CharPositionInLine" : 78
      },
      "3" : {
        "Text" : " OpenIDE-Module-Build-Version ",
        "Line" : 10,
        "CharPositionInLine" : 39
      },
      "CommentCount" : 4
    },
    "jcae/vecmath/build.xml" : {
      "ObjectId" : "4e8c80982caa0a19ddd2ec9078c9b412782a3c32",
      "LastModified" : "2011-01-31T16:12:54Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See harness/README in the NetBeans platform ",
        "Line" : 2,
        "CharPositionInLine" : 84
      },
      "1" : {
        "Text" : " for some information on what you could do (e.g. targets to override). ",
        "Line" : 3,
        "CharPositionInLine" : 79
      },
      "2" : {
        "Text" : " If you delete this file and reopen the project it will be recreated. ",
        "Line" : 4,
        "CharPositionInLine" : 78
      },
      "3" : {
        "Text" : " from http://wiki.netbeans.org/DevFaqWrapperModules ",
        "Line" : 8,
        "CharPositionInLine" : 61
      },
      "CommentCount" : 4
    },
    "jcae/viewer3d-amibe/build.xml" : {
      "ObjectId" : "b3d9661239d04d614fd9d9c4c1ae3725a48f711d",
      "LastModified" : "2011-01-31T16:12:54Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"viewer3d-amibe-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : " overide default implementation which is buggy ",
        "Line" : 69,
        "CharPositionInLine" : 56
      },
      "CommentCount" : 5
    },
    "jcae/viewer3d/build.xml" : {
      "ObjectId" : "17779a2b2f919a05734b9617c2a68b46cd37380b",
      "LastModified" : "2011-01-31T16:12:54Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"viewer3d-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : " overide default implementation which is buggy ",
        "Line" : 69,
        "CharPositionInLine" : 56
      },
      "CommentCount" : 5
    },
    "jcae/vtk-amibe/build.xml" : {
      "ObjectId" : "172bd07af8f2857c76c604f87c3722e85ed4666f",
      "LastModified" : "2011-01-31T16:12:54Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"vtk-amibe-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : " overide default implementation which is buggy ",
        "Line" : 69,
        "CharPositionInLine" : 56
      },
      "CommentCount" : 5
    },
    "jcae/vtk-util/build.xml" : {
      "ObjectId" : "22f595541791e0e26c37194b42c29ea8f3feb1de",
      "LastModified" : "2011-01-31T16:12:54Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See harness/README in the NetBeans platform ",
        "Line" : 2,
        "CharPositionInLine" : 84
      },
      "1" : {
        "Text" : " for some information on what you could do (e.g. targets to override). ",
        "Line" : 3,
        "CharPositionInLine" : 79
      },
      "2" : {
        "Text" : " If you delete this file and reopen the project it will be recreated. ",
        "Line" : 4,
        "CharPositionInLine" : 78
      },
      "3" : {
        "Text" : " from http://wiki.netbeans.org/DevFaqWrapperModules ",
        "Line" : 8,
        "CharPositionInLine" : 61
      },
      "CommentCount" : 4
    },
    "jcae/vtk/build.xml" : {
      "ObjectId" : "3e30342ec5f7a3f70387ce95c778f13f6f050739",
      "LastModified" : "2014-01-13T16:26:51Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See harness/README in the NetBeans platform ",
        "Line" : 2,
        "CharPositionInLine" : 84
      },
      "1" : {
        "Text" : " for some information on what you could do (e.g. targets to override). ",
        "Line" : 3,
        "CharPositionInLine" : 79
      },
      "2" : {
        "Text" : " If you delete this file and reopen the project it will be recreated. ",
        "Line" : 4,
        "CharPositionInLine" : 78
      },
      "3" : {
        "Text" : " from http://wiki.netbeans.org/DevFaqWrapperModules ",
        "Line" : 8,
        "CharPositionInLine" : 61
      },
      "4" : {
        "Text" : " mingw build without hack to remove lib prefix ",
        "Line" : 20,
        "CharPositionInLine" : 60
      },
      "5" : {
        "Text" : " mingw build with hack to remove lib prefix ",
        "Line" : 22,
        "CharPositionInLine" : 54
      },
      "6" : {
        "Text" : " not path.libstdc++.linux for backward compatiblity ",
        "Line" : 33,
        "CharPositionInLine" : 62
      },
      "7" : {
        "Text" : " use filelist instead of fileset or files to raise an error\n\t\t\ton missing files ",
        "Line" : 36,
        "CharPositionInLine" : 24
      },
      "8" : {
        "Text" : " use filelist instead of fileset or files to raise an error\n\t\t\ton missing files ",
        "Line" : 49,
        "CharPositionInLine" : 24
      },
      "CommentCount" : 9
    },
    "occjava/CMakeLists.txt" : {
      "ObjectId" : "1a55b55881240dd3c9bca8721320c4c5d0d325e3",
      "LastModified" : "2018-02-04T15:18:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#From oce/examples/find_package_components/CMakeLists.txt\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Include files reside in ${OCE_INCLUDE_DIRS};\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# We do not need library path, they will be automatically imported.\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# OCE not found; either it is not found and user\n\n# has to set OCE_DIR to the directory containing\n\n# OCEConfig.cmake, or OCE is not installed and we\n\n# try to find OpenCascade files.\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#We want OccJava.dll, not libOccJava.dll\n",
        "Line" : 64,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "#CMake won't create this directory it self. A bug ?\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "occjava/build.xml" : {
      "ObjectId" : "750f214f7043920d82c8ee9f37265bf7799253e0",
      "LastModified" : "2011-01-31T16:12:54Z",
      "FileType" : "ANT",
      "CommentCount" : 0
    },
    "occjava/src/Makefile.am" : {
      "ObjectId" : "e4e6869df9a54cdca320e314ed211fc2307b9fbe",
      "LastModified" : "2011-01-31T16:12:54Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "viewer3d-amibe/build.xml" : {
      "ObjectId" : "dcf9b1a55fb7bca1b2d3aafa6a5960fccb7fd284",
      "LastModified" : "2011-01-31T16:12:54Z",
      "FileType" : "ANT",
      "CommentCount" : 0
    },
    "viewer3d/build.xml" : {
      "ObjectId" : "29fc1b85cf4816d225a5b30a9f8653fff37e3f1d",
      "LastModified" : "2014-03-20T15:31:26Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar:                  JAR building\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"viewer3d-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 72,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "vtk-amibe-occ/build.xml" : {
      "ObjectId" : "bbbdf764a22c41360c387c3a4c60b96ca1cefec3",
      "LastModified" : "2011-01-31T16:12:54Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : " By default, only the Clean and Build commands use this build script. ",
        "Line" : 5,
        "CharPositionInLine" : 78
      },
      "4" : {
        "Text" : " Commands such as Run, Debug, and Test only use this build script if ",
        "Line" : 6,
        "CharPositionInLine" : 77
      },
      "5" : {
        "Text" : " the Compile on Save feature is turned off for the project. ",
        "Line" : 7,
        "CharPositionInLine" : 68
      },
      "6" : {
        "Text" : " You can turn off the Compile on Save (or Deploy on Save) setting ",
        "Line" : 8,
        "CharPositionInLine" : 74
      },
      "7" : {
        "Text" : " in the project's Project Properties dialog box.",
        "Line" : 9,
        "CharPositionInLine" : 56
      },
      "8" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"vtk-amibe-occ-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 9
    },
    "vtk-amibe/build.xml" : {
      "ObjectId" : "9ceb966bbf1c60395cea11d05034e998e8844881",
      "LastModified" : "2011-01-31T16:12:54Z",
      "FileType" : "ANT",
      "CommentCount" : 0
    },
    "vtk-util/build.xml" : {
      "ObjectId" : "a90acf4f36f69e37d83a926ae3720ddbd1183bf8",
      "LastModified" : "2014-03-20T15:31:26Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " You may freely edit this file. See commented blocks below for ",
        "Line" : 2,
        "CharPositionInLine" : 71
      },
      "1" : {
        "Text" : " some examples of how to customize the build. ",
        "Line" : 3,
        "CharPositionInLine" : 54
      },
      "2" : {
        "Text" : " (If you delete it and reopen the project it will be recreated.) ",
        "Line" : 4,
        "CharPositionInLine" : 73
      },
      "3" : {
        "Text" : "\n\n    There exist several targets which are by default empty and which can be \n    used for execution of your tasks. These targets are usually executed \n    before and after some main targets. They are: \n\n      -pre-init:                 called before initialization of project properties\n      -post-init:                called after initialization of project properties\n      -pre-compile:              called before javac compilation\n      -post-compile:             called after javac compilation\n      -pre-compile-single:       called before javac compilation of single file\n      -post-compile-single:      called after javac compilation of single file\n      -pre-compile-test:         called before javac compilation of JUnit tests\n      -post-compile-test:        called after javac compilation of JUnit tests\n      -pre-compile-test-single:  called before javac compilation of single JUnit test\n      -post-compile-test-single: called after javac compilation of single JUunit test\n      -pre-jar:                  called before JAR building\n      -post-jar:                 called after JAR building\n      -post-clean:               called after cleaning build products\n\n    (Targets beginning with '-' are not intended to be called on their own.)\n\n    Example of inserting an obfuscator after compilation could look like this:\n\n        <target name=\"-post-compile\">\n            <obfuscate>\n                <fileset dir=\"${build.classes.dir}\"/>\n            </obfuscate>\n        </target>\n\n    For list of available properties check the imported \n    nbproject/build-impl.xml file. \n\n\n    Another way to customize the build is by overriding existing main targets.\n    The targets of interest are: \n\n      -init-macrodef-javac:     defines macro for javac compilation\n      -init-macrodef-junit:     defines macro for junit execution\n      -init-macrodef-debug:     defines macro for class debugging\n      -init-macrodef-java:      defines macro for class execution\n      -do-jar-with-manifest:    JAR building (if you are using a manifest)\n      -do-jar-without-manifest: JAR building (if you are not using a manifest)\n      run:                      execution of project \n      -javadoc-build:           Javadoc generation\n      test-report:              JUnit report generation\n\n    An example of overriding the target for project execution could look like this:\n\n        <target name=\"run\" depends=\"TestVTK-impl.jar\">\n            <exec dir=\"bin\" executable=\"launcher.exe\">\n                <arg file=\"${dist.jar}\"/>\n            </exec>\n        </target>\n\n    Notice that the overridden target depends on the jar target and not only on \n    the compile target as the regular run target does. Again, for a list of available \n    properties which you can use, check the target you are overriding in the\n    nbproject/build-impl.xml file. \n\n    ",
        "Line" : 72,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : " Netbeans update the manifest in the init target so we must write it before ",
        "Line" : 74,
        "CharPositionInLine" : 85
      },
      "5" : {
        "Text" : " disabled as we are no longer using subversion. Kept in case we want to\n    do the same thing with git ",
        "Line" : 76,
        "CharPositionInLine" : 35
      },
      "6" : {
        "Text" : " default value if svnversion cannot be run ",
        "Line" : 85,
        "CharPositionInLine" : 53
      },
      "7" : {
        "Text" : " from http://ant.apache.org/manual/CoreTasks/manifest.html ",
        "Line" : 87,
        "CharPositionInLine" : 69
      },
      "CommentCount" : 8
    },
    "vtk-util/toolchain-i686-w64-mingw32.cmake" : {
      "ObjectId" : "432c32f545eab099986b56d8241131cc3e3b10b9",
      "LastModified" : "2018-07-25T17:26:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake toolchain for the 32bit compiler of the gcc-mingw-w64 Debian package\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# here is the target environment located\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search\n\n# programs in the host environment\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "vtk-util/toolchain-x86_64-w64-mingw32.cmake" : {
      "ObjectId" : "ebeedb0ee67b2f093a39502bd75b93861590d28d",
      "LastModified" : "2018-07-25T17:26:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake toolchain for the 64bit compiler of the gcc-mingw-w64 Debian package\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the name of the target operating system\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# which compilers to use for C and C++\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# here is the target environment located\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# adjust the default behaviour of the FIND_XXX() commands:\n\n# search headers and libraries in the target environment, search\n\n# programs in the host environment\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 3,
    "MAKEFILE" : 1,
    "AUTOMAKE" : 1,
    "ANT" : 23
  },
  "ElapsedTime" : 2405
}