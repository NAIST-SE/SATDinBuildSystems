{
  "Repository" : "30508819",
  "Revision" : "HEAD",
  "ObjectId" : "9189f451ddd972dc0a3e4f36d6a46d940c5d5803",
  "CommitTime" : "2019-03-19T17:48:05Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "0b72c6f619c1c18b38f602312e2d2df60b70eec5",
      "LastModified" : "2019-03-04T21:19:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# for ARM processors, there is no hope of having AVX support\n",
        "Line" : 25,
        "CharPositionInLine" : 28
      },
      "1" : {
        "Text" : "# ARM platforms may not like -march=native\n",
        "Line" : 26,
        "CharPositionInLine" : 31
      },
      "2" : {
        "Text" : "# for ARM processors, there is no hope of having AVX support\n",
        "Line" : 30,
        "CharPositionInLine" : 28
      },
      "3" : {
        "Text" : "# ARM platforms may not like -march=native\n",
        "Line" : 31,
        "CharPositionInLine" : 31
      },
      "4" : {
        "Text" : "# turning it on disables the production of a dynamic library\n",
        "Line" : 34,
        "CharPositionInLine" : 58
      },
      "5" : {
        "Text" : "## C header files get installed to /usr/local/include/roaring typically\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "####\n\n### Some users want the C++ header files to be installed as well.\n\n### C++ header files get installed to /usr/local/include/roaring typically\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# needs to be updated if we add more files\n",
        "Line" : 52,
        "CharPositionInLine" : 61
      },
      "8" : {
        "Text" : "##################################\n\n#### My understanding is that variable get passed down to subdirectories, so\n\n#### this needs to be done here.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#################################\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Being terse is good, but knowing how the build is configured is important\n\n# and should not be hard to figure out.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# this tends to be \"sticky\" so you can remain unknowingly in debug mode\n",
        "Line" : 78,
        "CharPositionInLine" : 59
      },
      "12" : {
        "Text" : "# options in cmake are \"sticky\" so old options can remain even if that is counterintuitive\n\n# options in cmake are \"sticky\" so old options can remain even if that is counterintuitive\n",
        "Line" : 79,
        "CharPositionInLine" : 65
      },
      "13" : {
        "Text" : "# important to know which compiler is used\n",
        "Line" : 88,
        "CharPositionInLine" : 59
      },
      "14" : {
        "Text" : "# important to know the flags\n",
        "Line" : 89,
        "CharPositionInLine" : 53
      },
      "CommentCount" : 15
    },
    "benchmarks/CMakeLists.txt" : {
      "ObjectId" : "a97beb48a065b8d5d3a3449bddb740e542f47333",
      "LastModified" : "2019-02-25T21:06:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# does this ever get used?\n",
        "Line" : 1,
        "CharPositionInLine" : 65
      },
      "1" : {
        "Text" : "# We exclude POSIX tests from Visual Studio default build\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "2f71f6999c5b22b8a7d9e4d82c2cfe00cb11497f",
      "LastModified" : "2019-03-04T21:19:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# icc / icpc\n",
        "Line" : 1,
        "CharPositionInLine" : 43
      },
      "1" : {
        "Text" : "# prevent shared libraries from depending on Intel provided libraries\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# we default on a shared library.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n#install(TARGETS ${ROARING_LIB_NAME} DESTINATION lib)\n\n#\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## We output the library at the root of the current directory where cmake is invoked\n\n## This is handy but Visual Studio will happily ignore us\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "f53a0a6f6eaee2cdfb914b4db86d6852aedc8ff4",
      "LastModified" : "2018-03-19T20:35:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### This code is buggy because it does not ensure that all variables have been defined :\n\n#set (TEST_DATA_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/testdata/\")\n\n#configure_file (\"${CMAKE_CURRENT_SOURCE_DIR}/config.h.in\"\n\n#                \"${CMAKE_CURRENT_SOURCE_DIR}/config.h\")\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We exclude POSIX tests from Visual Studio default build\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We used to exclude POSIX tests from Visual Studio default build the documented way but this leads to spurious test failures.\n\n# set_target_properties(realdata_unit PROPERTIES EXCLUDE_FROM_DEFAULT_BUILD 1)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Adds a post-build event\n",
        "Line" : 27,
        "CharPositionInLine" : 60
      },
      "4" : {
        "Text" : "# which executes \"cmake -E copy_if_different...\"\n",
        "Line" : 30,
        "CharPositionInLine" : 51
      },
      "5" : {
        "Text" : "# <--this is in-file\n",
        "Line" : 31,
        "CharPositionInLine" : 38
      },
      "6" : {
        "Text" : "# <--this is out-file path\n",
        "Line" : 32,
        "CharPositionInLine" : 60
      },
      "CommentCount" : 7
    },
    "tests/vendor/cmocka/CMakeLists.txt" : {
      "ObjectId" : "b7a33bd08182ab6593f490b48a75025946cc8200",
      "LastModified" : "2016-04-09T01:54:38Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/cmake/FindCTargets.cmake" : {
      "ObjectId" : "113b0f2f0496d1fd1fca8cc05a84a70df87e2791",
      "LastModified" : "2016-09-12T19:33:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tools/cmake/FindLTO.cmake" : {
      "ObjectId" : "f30fa89c8b9fed28ce3efe704506ca9a39d0399f",
      "LastModified" : "2016-09-12T19:33:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# gcc and clang require a special 'ar' and 'ranlib' to create a\n\n# static libX.a that allows for further inlining, but icc does not.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME: assumes C and C++ compiler change in sync\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# icc \n",
        "Line" : 10,
        "CharPositionInLine" : 48
      },
      "3" : {
        "Text" : "# Microsoft\n",
        "Line" : 13,
        "CharPositionInLine" : 50
      },
      "4" : {
        "Text" : "# TODO\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Clang or AppleClang\n",
        "Line" : 15,
        "CharPositionInLine" : 52
      },
      "6" : {
        "Text" : "# FIXME: determine version automatically\n",
        "Line" : 20,
        "CharPositionInLine" : 36
      },
      "7" : {
        "Text" : "# assume GCC compatible syntax if not matched\n",
        "Line" : 23,
        "CharPositionInLine" : 9
      },
      "CommentCount" : 8
    },
    "tools/cmake/FindOptions.cmake" : {
      "ObjectId" : "332bb182033f1f1164ffcb16b5e152eda4dd58c7",
      "LastModified" : "2019-02-25T21:06:55Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Ubuntu bug for GCC 5.0+ (safe for all versions)\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "## -march=native is not supported on some platforms\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# we can manually disable any optimization for x64\n",
        "Line" : 24,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# we can manually disable AVX by defining DISABLEAVX\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# some compilers like clang do not automagically define __AVX2__ and __BMI2__ even when the hardware supports it\n",
        "Line" : 35,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 8
  },
  "ElapsedTime" : 1389
}