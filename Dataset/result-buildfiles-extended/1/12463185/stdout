{
  "Repository" : "12463185",
  "Revision" : "HEAD",
  "ObjectId" : "059ebd170b28b00752007a284eb62a2156253fc3",
  "CommitTime" : "2019-04-06T02:04:07Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "75b3e6b690d1283cb8fe49218383e781959b29c7",
      "LastModified" : "2018-11-08T15:27:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add os macros\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# put all the libs and binaries in one place\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# require c++11 (Stolen from Ceph)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# check dependencies\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/modules/CodeCoverage.cmake" : {
      "ObjectId" : "a0b0ef5269ef3cba688e16b06e9dd167a6dcf1ed",
      "LastModified" : "2017-02-22T17:51:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2012 - 2015, Lars Bilke\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without modification,\n\n# are permitted provided that the following conditions are met:\n\n#\n\n# 1. Redistributions of source code must retain the above copyright notice, this\n\n#    list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n\n#    this list of conditions and the following disclaimer in the documentation\n\n#    and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its contributors\n\n#    may be used to endorse or promote products derived from this software without\n\n#    specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n#\n\n#\n\n# 2012-01-31, Lars Bilke\n\n# - Enable Code Coverage\n\n#\n\n# 2013-09-17, Joakim SÃ¶derberg\n\n# - Added support for Clang.\n\n# - Some additional usage instructions.\n\n#\n\n# USAGE:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 0. (Mac only) If you use Xcode 5.1 make sure to patch geninfo as described here:\n\n#      http://stackoverflow.com/a/22404544/80480\n\n#\n\n# 1. Copy this file into your cmake modules path.\n\n#\n\n# 2. Add the following line to your CMakeLists.txt:\n\n#      INCLUDE(CodeCoverage)\n\n#\n\n# 3. Set compiler flags to turn off optimization and enable coverage:\n\n#    SET(CMAKE_CXX_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\t SET(CMAKE_C_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\n\n# 3. Use the function SETUP_TARGET_FOR_COVERAGE to create a custom make target\n\n#    which runs your test executable and produces a lcov code coverage report:\n\n#    Example:\n\n#\t SETUP_TARGET_FOR_COVERAGE(\n\n#\t\t\t\tmy_coverage_target  # Name for custom target.\n\n#\t\t\t\ttest_driver         # Name of the test driver executable that runs the tests.\n\n#\t\t\t\t\t\t\t\t\t# NOTE! This should always have a ZERO as exit code\n\n#\t\t\t\t\t\t\t\t\t# otherwise the coverage generation will not complete.\n\n#\t\t\t\tcoverage            # Name of output directory.\n\n#\t\t\t\t)\n\n#\n\n# 4. Build a Debug build:\n\n#\t cmake -DCMAKE_BUILD_TYPE=Debug ..\n\n#\t make\n\n#\t make my_coverage_target\n\n#\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check prereqs\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOT GCOV_PATH\n",
        "Line" : 78,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# CHECK VALID COMPILER\n",
        "Line" : 86,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 112,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests.\n\n#\t\t\t\t\t\tMUST return ZERO always, even on errors.\n\n#\t\t\t\t\t\tIf not, no coverage report will be created!\n\n# Param _outputname     lcov output is generated as _outputname.info\n\n#                       HTML report is generated in _outputname/index.html\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# NOT LCOV_PATH\n",
        "Line" : 127,
        "CharPositionInLine" : 9
      },
      "8" : {
        "Text" : "# NOT GENHTML_PATH\n",
        "Line" : 131,
        "CharPositionInLine" : 9
      },
      "9" : {
        "Text" : "# Setup target\n",
        "Line" : 138,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Cleanup lcov\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Run tests\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Capturing lcov counters and generating report\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 157,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE\n",
        "Line" : 163,
        "CharPositionInLine" : 14
      },
      "15" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests\n\n# Param _outputname     cobertura output is generated as _outputname.xml\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# NOT PYTHON_EXECUTABLE\n",
        "Line" : 174,
        "CharPositionInLine" : 9
      },
      "17" : {
        "Text" : "# NOT GCOVR_PATH\n",
        "Line" : 178,
        "CharPositionInLine" : 9
      },
      "18" : {
        "Text" : "# Run tests\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Running gcovr\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 191,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE_COBERTURA\n",
        "Line" : 197,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 22
    },
    "cmake/modules/FindLMDB.cmake" : {
      "ObjectId" : "8928c7ebd167f87b7a9864b0f4e2f426365dec43",
      "LastModified" : "2017-06-05T19:02:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the LMBD libraries and headers\n\n#  LMDB_FOUND - system has LMDB lib\n\n#  LMDB_INCLUDE_DIR - the LMDB include directory\n\n#  LMDB_LIBRARIES - Libraries needed to use LMDB\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindCWD based on FindGMP by:\n\n# Copyright (c) 2006, Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Adapted from FindCWD by:\n\n# Copyright 2013 Conrad Steenberg <conrad.steenberg@gmail.com>\n\n# Aug 31, 2013\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# caffe_parse_header(${LMDB_INCLUDE_DIR}/lmdb.h\n\n#                    LMDB_VERSION_LINES MDB_VERSION_MAJOR MDB_VERSION_MINOR MDB_VERSION_PATCH)\n\n# set(LMDB_VERSION \"${MDB_VERSION_MAJOR}.${MDB_VERSION_MINOR}.${MDB_VERSION_PATCH}\")\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/modules/Findlibrados.cmake" : {
      "ObjectId" : "b2ff11444955610d49ee1f34f1f1d5767495e0f6",
      "LastModified" : "2017-06-05T19:02:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LIBRADOS_FOUND to TRUE if\n\n# all listed variables are TRUE.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "c8e97bd6908ff9cdbe5b1ce9d658f605b4e03efe",
      "LastModified" : "2019-04-05T04:53:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# fixup embedded library paths\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#add_subdirectory(libseq)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# add_executable(zlog-seqr seqr-server.cc)\n\n# target_link_libraries(zlog-seqr\n\n#     libzlog\n\n#     ${Boost_PROGRAM_OPTIONS_LIBRARY}\n\n#     ${Boost_SYSTEM_LIBRARY}\n\n# )\n\n# install(TARGETS zlog-seqr DESTINATION bin)\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/attic/bench/CMakeLists.txt" : {
      "ObjectId" : "8e03d80713591bcbef80ad36fe987786193376a6",
      "LastModified" : "2018-10-22T16:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    zlog_seqr\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/attic/bench/cache/CMakeLists.txt" : {
      "ObjectId" : "e7b2daa36f914ce0aae62b78061322a086e5597c",
      "LastModified" : "2018-10-22T16:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    zlog_seqr\n",
        "Line" : 6,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/attic/bench/rados-append/CMakeLists.txt" : {
      "ObjectId" : "515c4865b4473355cb3bcc19402b37fbf3413a04",
      "LastModified" : "2018-10-22T16:18:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/include/CMakeLists.txt" : {
      "ObjectId" : "1802ec1e46656602ef7e9ba659a24dcc8c292fda",
      "LastModified" : "2018-10-23T03:27:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/java/CMakeLists.txt" : {
      "ObjectId" : "c3a041a0ee8f7a91e07f4388207b07c8d93bfa3d",
      "LastModified" : "2018-10-22T16:18:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO:\n\n#   https://cmake.org/Wiki/CMake_FAQ#How_can_I_generate_a_source_file_during_the_build.3F\n\n#\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/java/native/CMakeLists.txt" : {
      "ObjectId" : "1e1ceab5add317f5e93e81e2e480bdd0aeaa9e89",
      "LastModified" : "2018-11-11T01:58:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libseq/CMakeLists.txt" : {
      "ObjectId" : "6e250027d98f783989f3ce84a4b37a6e851e7ccf",
      "LastModified" : "2018-10-22T16:18:56Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/libzlog/CMakeLists.txt" : {
      "ObjectId" : "4ae8d0a3db928bf088f5c3e9cca81442286fc801",
      "LastModified" : "2019-04-05T04:53:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/storage/CMakeLists.txt" : {
      "ObjectId" : "f0f4290ea8e00a9072d3ffb62ba16eac3728d3d1",
      "LastModified" : "2018-12-10T06:10:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/storage/bench/CMakeLists.txt" : {
      "ObjectId" : "b33f83f0be4d2f0e5188f83c9de56175463bd912",
      "LastModified" : "2018-12-10T06:10:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/storage/ceph/CMakeLists.txt" : {
      "ObjectId" : "6fdc76ec2103e409d3cc63deb883551d2466d991",
      "LastModified" : "2019-04-05T04:53:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/storage/lmdb/CMakeLists.txt" : {
      "ObjectId" : "0c42c95916c0824044713663f0c8d9ef6030694b",
      "LastModified" : "2018-12-10T06:10:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/storage/ram/CMakeLists.txt" : {
      "ObjectId" : "bc82433551abc5ecb455a182760d32adde53ceea",
      "LastModified" : "2018-12-10T06:10:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/test/CMakeLists.txt" : {
      "ObjectId" : "f6f1f07f7180fff96a863fb19d95fcbf15de77c9",
      "LastModified" : "2018-12-10T06:10:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 19
  },
  "ElapsedTime" : 1218
}