{
  "Repository" : "27778541",
  "Revision" : "HEAD",
  "ObjectId" : "a9645e9973e7650d177f8448b0ddfd0e25d53c2d",
  "CommitTime" : "2019-04-12T15:38:54Z",
  "Files" : {
    "pom.xml" : {
      "ObjectId" : "98a25653af02db3cd7d72bea9d8e8c321a2a54d2",
      "LastModified" : "2019-04-01T16:23:38Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Developer entries are provided for primary developers.\n   For other contributors, see https://github.com/conveyal/r5/graphs/contributors ",
        "Line" : 21,
        "CharPositionInLine" : 86
      },
      "1" : {
        "Text" : " Define where the source code for this project lives ",
        "Line" : 42,
        "CharPositionInLine" : 65
      },
      "2" : {
        "Text" : " Define some variables to be used elsewhere in the build. ",
        "Line" : 49,
        "CharPositionInLine" : 70
      },
      "3" : {
        "Text" : " Define where the artifacts produced by this build will be deployed ",
        "Line" : 55,
        "CharPositionInLine" : 80
      },
      "4" : {
        "Text" : " We are using Sonatype Nexus Staging instead of Maven Release plugin.\n             Only a snapshot repo should be configured. Releases are done from that snapshot staging repo. ",
        "Line" : 58,
        "CharPositionInLine" : 111
      },
      "5" : {
        "Text" : " Filtering means Maven will substitute some variables into files in the resources directory before\n                    including them in the JAR. This allows Maven to substitute build details and version number\n                    into a properties file, making them known to R5 at runtime. Some other files that server other\n                    purposes are also listed for inclusion in the JAR. ",
        "Line" : 72,
        "CharPositionInLine" : 75
      },
      "6" : {
        "Text" : " use Java 8 ",
        "Line" : 90,
        "CharPositionInLine" : 40
      },
      "7" : {
        "Text" : "\n                        semantic-release appears to create lightweight tags, therefore the tags property here\n                        must be set to true so that the latest lightweight tag is recognized.\n                        See https://github.com/ktoso/maven-git-commit-id-plugin#git-describe-and-a-small-gotcha-with-tags\n                        ",
        "Line" : 114,
        "CharPositionInLine" : 28
      },
      "8" : {
        "Text" : " Create a version of the JAR that includes all dependencies.\n                     We don't want this to be attached and deployed, but we'll have Travis upload it to S3. ",
        "Line" : 125,
        "CharPositionInLine" : 112
      },
      "9" : {
        "Text" : " Name the shaded JAR after the git describe string. This makes it uniquely identifiable so we can\n                                 run analysis workers with a specific commit or tag of R5. The shaded JAR is not \"attached\" to\n                                 deployments because this will cause it to be renamed to the standard timestamped name and sorted\n                                 into a Maven repo directory by version number. ",
        "Line" : 136,
        "CharPositionInLine" : 84
      },
      "10" : {
        "Text" : " The ImageIO lines allow some image reader plugins to work see https://stackoverflow.com/questions/7051603/jai-vendorname-null#18495658 ",
        "Line" : 143,
        "CharPositionInLine" : 184
      },
      "11" : {
        "Text" : " files overwrite each other and geotools does not function without this.\n                                     http://docs.geotools.org/latest/userguide/faq.html#how-do-i-create-an-executable-jar-for-my-geotools-app ",
        "Line" : 154,
        "CharPositionInLine" : 146
      },
      "12" : {
        "Text" : " signature files from included jars cause problems: http://stackoverflow.com/questions/999489 ",
        "Line" : 158,
        "CharPositionInLine" : 130
      },
      "13" : {
        "Text" : " Recommended way to deploy to OSSRH ",
        "Line" : 175,
        "CharPositionInLine" : 60
      },
      "14" : {
        "Text" : " Release versions will be synced to Maven Central automatically. ",
        "Line" : 183,
        "CharPositionInLine" : 93
      },
      "15" : {
        "Text" : " Allow attaching Javadoc during releases ",
        "Line" : 189,
        "CharPositionInLine" : 65
      },
      "16" : {
        "Text" : " Turn off Java 8 strict Javadoc checking ",
        "Line" : 194,
        "CharPositionInLine" : 69
      },
      "17" : {
        "Text" : " Compress Javadoc into JAR and include that JAR when deploying. ",
        "Line" : 210,
        "CharPositionInLine" : 92
      },
      "18" : {
        "Text" : " Include zipped source code in releases ",
        "Line" : 221,
        "CharPositionInLine" : 64
      },
      "19" : {
        "Text" : " We sign in the verify phase, which means it will happen before install and deploy (the last two phases)\n                             but not before earlier phases like test or package. ",
        "Line" : 242,
        "CharPositionInLine" : 85
      },
      "20" : {
        "Text" : " Hack to force maven to check central first. Maven central is inherited from the superpom,\n             but ends up at the end of the list. Though most of the time the artifact is in central,\n             Maven tries to download from every other repository and fails before checking central.\n             Do not change the id from central2 to central, otherwise the entry will be ignored. ",
        "Line" : 257,
        "CharPositionInLine" : 101
      },
      "21" : {
        "Text" : " Needed  for graphql-java",
        "Line" : 278,
        "CharPositionInLine" : 41
      },
      "22" : {
        "Text" : " Jackson provides fast streaming JSON (de)serialization of Java objects. ",
        "Line" : 290,
        "CharPositionInLine" : 89
      },
      "23" : {
        "Text" : " JTS does 2D geometry and topology. Recently moved from vividsolutions to locationtech.\n          We could update R5 to use the new locationtech class names and its built-in GeoJSON support.\n          However, Geotools still depends on vividsolution JTS so this might be complicated. ",
        "Line" : 298,
        "CharPositionInLine" : 97
      },
      "24" : {
        "Text" : " GeoTools is a free software GIS toolkit. ",
        "Line" : 314,
        "CharPositionInLine" : 58
      },
      "25" : {
        "Text" : " Caffeine is a Java 8 rewrite of the Guava cache with asynchronous LoadingCaches. We don't currently use\n             the async capabilities, but Caffeine's LoadingCache syntax is more modern idiomatic Java than Guava's. ",
        "Line" : 361,
        "CharPositionInLine" : 120
      },
      "26" : {
        "Text" : " Conveyal library for loading and storing GTFS transit data. ",
        "Line" : 367,
        "CharPositionInLine" : 77
      },
      "27" : {
        "Text" : " Conveyal library for loading and storing OSM road data. ",
        "Line" : 373,
        "CharPositionInLine" : 73
      },
      "28" : {
        "Text" : " Logging API. ",
        "Line" : 379,
        "CharPositionInLine" : 30
      },
      "29" : {
        "Text" : " Logging API implementation. ",
        "Line" : 385,
        "CharPositionInLine" : 45
      },
      "30" : {
        "Text" : " Junit is for unit testing. ",
        "Line" : 391,
        "CharPositionInLine" : 44
      },
      "31" : {
        "Text" : " Provides some shared serializers for Kryo. Introduces transitive dependencies on Guava, Trove, and Kryo. ",
        "Line" : 398,
        "CharPositionInLine" : 122
      },
      "32" : {
        "Text" : " Also provides classes for testing that a round trip through serialization reproduces the same network. ",
        "Line" : 399,
        "CharPositionInLine" : 120
      },
      "CommentCount" : 33
    }
  },
  "FileTypes" : {
    "MAVEN" : 1
  },
  "ElapsedTime" : 1047
}