{
  "Repository" : "15472417",
  "Revision" : "HEAD",
  "ObjectId" : "fee223ddba53c4ff05257732e54356a62eb6cad3",
  "CommitTime" : "2019-04-07T19:43:07Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "b1f147dd545462914bee0ac75e7093f92efc21c9",
      "LastModified" : "2019-01-12T19:23:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#enable to include built-in support for Pseudo-Boolean constraints (recommended)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set to compile Java JNI support into the shared library (requires a JDK)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set to install python support (requires python 3+)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set to install python using the cython bindings (only takes effect if PYTHON is set to ON)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set to OFF to disable linking GPL sources\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#set(CMAKE_ENABLE_COMPILE_COMMANDS ON) # set to enable clang tidy\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# compiler is gcc\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#  -DDEBUG_GRAPH -DDEBUG_BV -DDEBUG_THEORY -DDEBUG_DGL -DDEBUG_GRAPH -DDEBUG_CORE -DEBUG_GEOMETRY -DEBUG_FSM -DEBUG_PB\n",
        "Line" : 28,
        "CharPositionInLine" : 89
      },
      "8" : {
        "Text" : "#it is _critically_ important that release builds specify -DNDEBUG!\n",
        "Line" : 29,
        "CharPositionInLine" : 71
      },
      "9" : {
        "Text" : "#it is _critically_ important that release builds specify -DNDEBUG!\n",
        "Line" : 30,
        "CharPositionInLine" : 85
      },
      "10" : {
        "Text" : "#it is _critically_ important that release builds specify -DNDEBUG!\n",
        "Line" : 31,
        "CharPositionInLine" : 73
      },
      "11" : {
        "Text" : "#enable more flexible shared library path loading on OSX\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Set the possible values of build type for cmake-gui\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#GPL Licenced source files are only included if the MIT option is not set\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#set_source_files_properties(src/monosat/api/java/monosat_MonosatJNI.h OBJECT_DEPENDS ${CMAKE_CURRENT_BINARY_DIR}/__MonosatJNI.h)\n",
        "Line" : 295,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# generate MonosatJNI.h header\n\n# consider using 'create_javah' instead of custom command\n",
        "Line" : 297,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#OUTPUT ${CMAKE_SOURCE_DIR}/src/monosat/api/java/monosat_MonosatJNI.h\n",
        "Line" : 301,
        "CharPositionInLine" : 12
      },
      "17" : {
        "Text" : "# Using a fake file here that is never actually generated, to ensure that javac is always re-run\n",
        "Line" : 302,
        "CharPositionInLine" : 62
      },
      "18" : {
        "Text" : "#javah is deprecated, using javac -h instead\n\n# COMMAND ${Java_JAVAH_EXECUTABLE} -jni -verbose  monosat.MonosatJNI\n\n#COMMAND echo \"Running ${Java_JAVAC_EXECUTABLE} from ${CMAKE_SOURCE_DIR}/src/monosat/api/java/\"\n\n#COMMAND echo \"${Java_JAVAC_EXECUTABLE}\"\n\n#COMMAND ${Java_JAVAC_EXECUTABLE} -d ${CMAKE_CURRENT_BINARY_DIR}/src/monosat/api/java/monosat  monosat/MonosatJNI.java\n",
        "Line" : 303,
        "CharPositionInLine" : 12
      },
      "19" : {
        "Text" : "#only attempt to load the git version if the git repo is found in the source directory\n",
        "Line" : 337,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "#fake file to force that Version.cpp is always rebuilt\n",
        "Line" : 344,
        "CharPositionInLine" : 65
      },
      "21" : {
        "Text" : "#target_link_libraries(libmonosat_static m.a) # c++ doesn't require libm to be explicitly linked\n",
        "Line" : 357,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#librt is needed for clock_gettime, which is enabled for linux only\n\n#(clock_gettime is used for capturing detailed timing statistics only)\n",
        "Line" : 362,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "#add_executable(monosat_static ${SOURCE_FILES})\n",
        "Line" : 372,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#target_link_libraries(monosat_static m.a)  # c++ doesn't require libm to be explicitly linked\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#librt is needed for clock_gettime, which is enabled for linux only\n\n#(clock_gettime is used for capturing detailed timing statistics only)\n",
        "Line" : 388,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "#target_link_libraries(libmonosat m)  # c++ doesn't require libm to be explicitly linked\n",
        "Line" : 403,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "#librt is needed for clock_gettime, which is enabled for linux only\n\n#(clock_gettime is used for capturing detailed timing statistics only)\n",
        "Line" : 411,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "#By default, build the staticly linked version of monosat rather than this dynamically linked one.\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# target_link_libraries(monosat m) # c++ doesn't require libm to be explicitly linked\n",
        "Line" : 427,
        "CharPositionInLine" : 3
      },
      "30" : {
        "Text" : "#librt is needed for clock_gettime, which is enabled for linux only\n\n#(clock_gettime is used for capturing detailed timing statistics only)\n",
        "Line" : 433,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "#Not clear if this is required\n",
        "Line" : 443,
        "CharPositionInLine" : 55
      },
      "32" : {
        "Text" : "#message(STATUS \"Monosat javadoc will be compiled to ${CMAKE_BINARY_DIR}/javadoc, and ${CMAKE_BINARY_DIR}/monosat_javadoc.zip\")\n",
        "Line" : 453,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "#Appending  \"|| true\" to each of the commands below, to suppress non-zero exit codes in case of errors,\n\n#To ensure that these commands, if they fail, cannot prevent the libmonosat target as a whole from building.\n\n#Is there a better way to make custom commands non-failing/optional in cmake?\n\n#This will likely only work correctly for unix targets\n",
        "Line" : 457,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# do not quote RELATIVE_JAVA_PATHS, or else semicolons will be injected between items.\n",
        "Line" : 464,
        "CharPositionInLine" : 117
      },
      "35" : {
        "Text" : "#OUTPUT \"${CMAKE_BINARY_DIR}/monosat_src.zip\"\n",
        "Line" : 465,
        "CharPositionInLine" : 12
      },
      "36" : {
        "Text" : "#add_custom_command(TARGET libmonosat\n\n#        POST_BUILD\n\n#        COMMAND\n\n#        \"${Java_JAVADOC_EXECUTABLE}\" \"-d\" \"${CMAKE_CURRENT_BINARY_DIR}/javadoc\"  ${RELATIVE_JAVA_PATHS} \"||\" \"true\" # do not quote RELATIVE_JAVA_PATHS, or else semicolons will be injected between items.\n\n#        WORKING_DIRECTORY \"${CMAKE_BINARY_DIR}/src/monosat/api/java/\"\n\n#        #OUTPUT \"${CMAKE_BINARY_DIR}/javadoc\"\n\n#        )\n\n#add_custom_command(TARGET libmonosat\n\n#        POST_BUILD\n\n#        DEPENDS ${CMAKE_BINARY_DIR}/javadoc\n\n#        COMMAND\n\n#        \"${Java_JAR_EXECUTABLE}\" \"cfM\" \"monosat_javadoc.zip\" \"-C\" \"${CMAKE_CURRENT_BINARY_DIR}\" \"javadoc\"  \"||\" \"true\"\n\n#        #OUTPUT \"${CMAKE_BINARY_DIR}/monosat_javadoc.zip\"\n\n#        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n\n#        )\n\n#add_custom_command(TARGET libmonosat\n\n#        POST_BUILD\n\n#        DEPENDS ${CMAKE_BINARY_DIR}/javadoc\n\n#        COMMAND cmake -E remove_directory  \"${CMAKE_BINARY_DIR}/javadoc\" \"||\" \"true\"\n\n#        WORKING_DIRECTORY ${CMAKE_BINARY_DIR}\n\n#        )\n\n#ensure the source, doc archives are cleaned with make clean\n",
        "Line" : 469,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "#INCLUDES DESTINATION include/monosat\n",
        "Line" : 503,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "#exclude hidden files\n",
        "Line" : 511,
        "CharPositionInLine" : 31
      },
      "39" : {
        "Text" : "#exclude old build files, in case they are still in the source directory\n",
        "Line" : 514,
        "CharPositionInLine" : 8
      },
      "40" : {
        "Text" : "#set(JAVA_LIB_INSTALL_DIR /usr/${CMAKE_INSTALL_LIBDIR}/java)\n",
        "Line" : 536,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "#install_jni_symlink(monosat_jar . )\n",
        "Line" : 539,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "# following https://bloerg.net/2012/11/10/cmake-and-distutils.html\n",
        "Line" : 545,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 43
    }
  },
  "FileTypes" : {
    "CMAKE" : 1
  },
  "ElapsedTime" : 918
}