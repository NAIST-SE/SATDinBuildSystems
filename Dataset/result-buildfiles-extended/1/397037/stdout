{
  "Repository" : "397037",
  "Revision" : "HEAD",
  "ObjectId" : "47acdc8b73174a32ff64d8c227d1914bb8ed7612",
  "CommitTime" : "2019-04-18T05:11:15Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "2c6e4f823c2f5ecca9483e2dc3feabbb8064a187",
      "LastModified" : "2019-04-09T04:30:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable CTest\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# At build time put runtime binaries in the bin subdirectory\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Also place the python extension where the source tree would expect them\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-------\n\n# Config variables:\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# we need an integer version of the month later, so remove the zero padding\n\n# if there is any\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#include catch\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# used in rdkit-config.cmake, path prefix not needed.\n",
        "Line" : 119,
        "CharPositionInLine" : 27
      },
      "7" : {
        "Text" : "# use, i.e. don't skip the full RPATH for the build tree\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# when building, don't use the install RPATH already\n\n# (but later on when installing)\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# add the automatically determined parts of the RPATH\n\n# which point to directories outside the build tree to the install RPATH\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# the RPATH to be used when installing, but only if it's not a system\n\n# directory\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# defines macros: rdkit_python_extension, rdkit_test\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# create and install package configuration and version files\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# disable some warnings that we don't care about\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# These should occasionally be enabled to check what's going on\n\n# 4267 conversion with possible loss of data.\n\n# 4305 truncation from 'double' to 'const float'\n\n# 4244 conversion from 'uint64_t' to 'unsigned int', possible loss of data\n",
        "Line" : 198,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# extra boost versions\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# FIX: do we still need this?\n",
        "Line" : 209,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "#-------\n\n# pull in python:\n",
        "Line" : 219,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Find boost-python3 using name specified as command line option then fall back to commonly used names\n",
        "Line" : 236,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Boost 1.67+ uses a version suffix like \"python36\" or \"python27\"\n",
        "Line" : 241,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Try each potential boost-python name until one works\n",
        "Line" : 244,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Finally just try \"python\" and hope it is a compatible version\n",
        "Line" : 252,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Determine correct installation directory for Python bindings\n\n# From http://plplot.svn.sourceforge.net/viewvc/plplot/trunk/cmake/modules/python.cmake?revision=11014\n",
        "Line" : 262,
        "CharPositionInLine" : 6
      },
      "23" : {
        "Text" : "# determine linkage of python\n",
        "Line" : 295,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# See https://bugs.python.org/msg277944\n\n# The \"command to create shared modules\". Used as variable in the \"Makefile (and similar) templates to build python modules\"\n\n# for both in-python and third party modules. Initialized to hold the value which works for third party modules to link\n\n# against the _installed_ python.\n\n# We strip off the first word though (which will be the compiler name).\n",
        "Line" : 303,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Detect clang, which masquerades as gcc.  CMake 2.6 doesn't know how to\n\n# detect it.\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# set the boost include directories and linkage:\n",
        "Line" : 360,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# setup our compiler flags:\n",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# We don't on C_FLAGS warnings to keep Avalon compiling quiet\n",
        "Line" : 398,
        "CharPositionInLine" : 3
      },
      "29" : {
        "Text" : "# We don't on C_FLAGS warnings to keep Avalon compiling quiet\n",
        "Line" : 407,
        "CharPositionInLine" : 3
      },
      "30" : {
        "Text" : "# disable warnings:\n\n#  - 4267: conversion from 'size_t' to 'unsigned int', possible loss of data\n",
        "Line" : 476,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Memory testing setup\n",
        "Line" : 494,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Packaging\n",
        "Line" : 498,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "#IF(WIN32 AND NOT UNIX)\n\n#  # There is a bug in NSI that does not handle full unix paths properly. Make\n\n#  # sure there is at least one set of four (4) backlasshes.\n\n#  SET(CPACK_PACKAGE_ICON \"${CMake_SOURCE_DIR}/Utilities/Release\\\\\\\\InstallIcon.bmp\")\n\n#  SET(CPACK_NSIS_INSTALLED_ICON_NAME \"bin\\\\\\\\MyExecutable.exe\")\n\n#  SET(CPACK_NSIS_DISPLAY_NAME \"${CPACK_PACKAGE_INSTALL_DIRECTORY} My Famous Project\")\n\n#  SET(CPACK_NSIS_HELP_LINK \"http:\\\\\\\\\\\\\\\\www.my-project-home-page.org\")\n\n#  SET(CPACK_NSIS_URL_INFO_ABOUT \"http:\\\\\\\\\\\\\\\\www.my-personal-home-page.com\")\n\n#  SET(CPACK_NSIS_CONTACT \"me@my-personal-home-page.com\")\n\n#  SET(CPACK_NSIS_MODIFY_PATH ON)\n\n#ELSE(WIN32 AND NOT UNIX)\n\n#  SET(CPACK_STRIP_FILES \"bin/MyExecutable\")\n\n#  SET(CPACK_SOURCE_STRIP_FILES \"\")\n\n#ENDIF(WIN32 AND NOT UNIX)\n\n#SET(CPACK_PACKAGE_EXECUTABLES \"MyExecutable\" \"My Executable\")\n",
        "Line" : 522,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 34
    },
    "CTestConfig.cmake" : {
      "ObjectId" : "c406207bacf144c93b94ba585fcdaa14c0db32ec",
      "LastModified" : "2018-10-27T15:40:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For some reason, MEMORYCHECK_SUPPRESSIONS_FILE is not being caught, so I hardcoded it here\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Code/CMakeLists.txt" : {
      "ObjectId" : "7ea595acc40724ccb525a3a3b77472b149eb5eba",
      "LastModified" : "2019-03-18T04:32:42Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/Catalogs/CMakeLists.txt" : {
      "ObjectId" : "8de9d3f416fc2939749b2cb372c01d9fe2949fd2",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/ChemicalFeatures/CMakeLists.txt" : {
      "ObjectId" : "429d9c78778d8d4aa570272b5d9a593884543be9",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/ChemicalFeatures/Wrap/CMakeLists.txt" : {
      "ObjectId" : "25c8ff4333592ab2467c50901f327e2a0fa757bb",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/DataManip/CMakeLists.txt" : {
      "ObjectId" : "0ee24514d84f4cfa40b50bf618f2d1665e7041c1",
      "LastModified" : "2009-09-28T11:02:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/DataManip/MetricMatrixCalc/CMakeLists.txt" : {
      "ObjectId" : "4a0ad0116b0bf331ecb447fe6217cb35fa66bfe0",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### Template library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Code/DataManip/MetricMatrixCalc/Wrap/CMakeLists.txt" : {
      "ObjectId" : "c8c83bdbb6d9b44d83ff56de95221e13ea0793d8",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/DataStructs/CMakeLists.txt" : {
      "ObjectId" : "94d31de9f957b305ae7fbaa78bfa459bebecbf34",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/DataStructs/Wrap/CMakeLists.txt" : {
      "ObjectId" : "865333ac6cef0359e8b06526e503d7a20ed39d7f",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/Demos/RDKit/Basement/BinaryIO/Makefile" : {
      "ObjectId" : "63028e13945ef408d1f4247428fb6fad6806d777",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Code/Demos/RDKit/Basement/TemplEnum/Makefile" : {
      "ObjectId" : "af254683a5d5828b0dfe45056c653f7cd04d2b20",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Code/Demos/RDKit/Draw/Makefile" : {
      "ObjectId" : "a2f0567e7d3d636373914965fc214365dc92596b",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Code/Demos/RDKit/Draw/qtDemo/qtdraw_demo.pro" : {
      "ObjectId" : "d9e77392823d40596a2f237ffdafba1a5264fdf9",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "Code/Demos/RDKit/GettingStarted/CMakeLists.txt" : {
      "ObjectId" : "7baf7ef69c0230c0249bc15eb848ed21f1bbbeec",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/Demos/boost/any_container/Makefile" : {
      "ObjectId" : "0681bb10470155f2279b4634901626a1ecf36eb1",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Code/Demos/nacl/DataStructs/Makefile" : {
      "ObjectId" : "2c6013e2de7fe1c5430f6da69bcf4f1b6bc72c13",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Code/Demos/nacl/Geometry/Makefile" : {
      "ObjectId" : "fa0c8e4623d8dc3380317407134894cbc698f9f7",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Code/Demos/nacl/GraphMol/Depictor/Makefile" : {
      "ObjectId" : "92f968be7f6ebc17addfb109d9e9ef74438ca6af",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Code/Demos/nacl/GraphMol/Makefile" : {
      "ObjectId" : "e1cf0b25bf08c8def6a436086daa3e9562e761bc",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Code/Demos/nacl/GraphMol/SmilesParse/Makefile" : {
      "ObjectId" : "fb7730edb526e39a7bd22a2e2a741c3404b6ee1d",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Code/Demos/nacl/RDGeneral/Makefile" : {
      "ObjectId" : "5ba52a1f8393332f8d5b48a77799adfe3c60856b",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Code/DistGeom/CMakeLists.txt" : {
      "ObjectId" : "79511470982b63f89374c9930a50a98df85966e9",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "### ISSUE: This library was originally named DistGeom. I've renamed it here\n\n### to avoid a target name clash in ./Wrap\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Code/DistGeom/Wrap/CMakeLists.txt" : {
      "ObjectId" : "9c338b53267ffc8aba5f2eec400696a8ac2159b6",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/Features/CMakeLists.txt" : {
      "ObjectId" : "ded3726be9049564b513818e192abb9c82d008ad",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/ForceField/CMakeLists.txt" : {
      "ObjectId" : "a65e5ef4b3be8fe0eb5d173bdab78179fcc9cda3",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/ForceField/MMFF/CMakeLists.txt" : {
      "ObjectId" : "fbc0de218bbcbb09e83e684dff379679985429ef",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/ForceField/UFF/CMakeLists.txt" : {
      "ObjectId" : "2972c73e406e6a132f2cbbe2b1c5f293a0d14f8d",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/ForceField/Wrap/CMakeLists.txt" : {
      "ObjectId" : "3f2bfe2beda4bc76e8c9bc93b27db851b77225b1",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/Geometry/CMakeLists.txt" : {
      "ObjectId" : "ec509aa64339957bc01b136c9a95418e36338c3b",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/Geometry/Wrap/CMakeLists.txt" : {
      "ObjectId" : "6db5dd9cc305bc4044cec8a37006f86f1f30dde9",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/CMakeLists.txt" : {
      "ObjectId" : "f92c99cd48b7986f611a5cd580e0d1a825386cfc",
      "LastModified" : "2019-03-30T18:53:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/ChemReactions/CMakeLists.txt" : {
      "ObjectId" : "5fd8d224f21afc221e28fef0589bc3536c287c11",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/ChemReactions/Wrap/CMakeLists.txt" : {
      "ObjectId" : "0445404873b664d57a4db4d1ef366ca22dd4dbbb",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/ChemTransforms/CMakeLists.txt" : {
      "ObjectId" : "be3bc4903701256e6ebd976cf41c2445f00832a6",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# there's no Wrap subdirectory on the main trunk (but in \"minimal\" there is)..\n\n#add_subdirectory(Wrap)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#rdkit_test(testChemTransforms testChemTransforms.cpp \n\n#           LINK_LIBRARIES ChemTransforms FileParsers SmilesParse SubstructMatch GraphMol RDGeometryLib RDGeneral )\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Code/GraphMol/Depictor/CMakeLists.txt" : {
      "ObjectId" : "8d5f693b54ea7f72fb8b0c656d89bcbf1f13db4c",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/Depictor/Wrap/CMakeLists.txt" : {
      "ObjectId" : "289eb6efbc812e0152280adc75cad8c7da6c679d",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/Descriptors/CMakeLists.txt" : {
      "ObjectId" : "044dbd047a7e6aa0e409cdd1d9cdf6e165c181e2",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/Descriptors/Wrap/CMakeLists.txt" : {
      "ObjectId" : "56e249964e6ef00d7eccff4de641578327f8198b",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/DistGeomHelpers/CMakeLists.txt" : {
      "ObjectId" : "b0c62aa58ffc7bd86317a6f1454f7990cadfec09",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/DistGeomHelpers/Wrap/CMakeLists.txt" : {
      "ObjectId" : "efb4859a2794939f0c87fdba36f8159b2008351c",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/FMCS/CMakeLists.txt" : {
      "ObjectId" : "3f0e275b4967a871ef398422e725e0f13942b5ec",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/FMCS/Test/CMakeLists.txt" : {
      "ObjectId" : "e2eaedab971b1e1bb7f8d732bdd0a4b4bb6d716b",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/FMCS/Wrap/CMakeLists.txt" : {
      "ObjectId" : "aab78c66f55f084bf26eb1ac9485a799d201888d",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/FileParsers/CMakeLists.txt" : {
      "ObjectId" : "6bcfb0e3b637c7cca8527c80785a27964bab881f",
      "LastModified" : "2019-04-02T12:51:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/FilterCatalog/CMakeLists.txt" : {
      "ObjectId" : "83a7a2f9118a4ae06ca547ffce3fce367537ad89",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/FilterCatalog/Wrap/CMakeLists.txt" : {
      "ObjectId" : "fd9b4f717c1559c6b042bd1a87fa4105de28efd2",
      "LastModified" : "2018-05-16T06:42:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/Fingerprints/CMakeLists.txt" : {
      "ObjectId" : "942f27f590974f6efa8527e1ef11e42bdee56750",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/Fingerprints/Wrap/CMakeLists.txt" : {
      "ObjectId" : "63e66466a3dbeac0d2ffda38cf032d60f49ed8a7",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/ForceFieldHelpers/CMakeLists.txt" : {
      "ObjectId" : "17790923d2d1d738401b2fb11c8d8111c1e61742",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# moved back library build directives here\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Code/GraphMol/ForceFieldHelpers/CrystalFF/CMakeLists.txt" : {
      "ObjectId" : "e1690e2a1e15ee9d8b67bdf32e989beb59639f02",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/ForceFieldHelpers/MMFF/CMakeLists.txt" : {
      "ObjectId" : "1f1be719cc329d6ffe9cfb37a4cf658ead3f879a",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/ForceFieldHelpers/UFF/CMakeLists.txt" : {
      "ObjectId" : "cffcf2cc15eff3f13d4de19ab11ecdfa10019e49",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/ForceFieldHelpers/Wrap/CMakeLists.txt" : {
      "ObjectId" : "25625a9caf0b4bd1d8eb551108d41806738e6266",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/FragCatalog/CMakeLists.txt" : {
      "ObjectId" : "c4b7dbc2187ac27792a659b1ee9270740e88a0e5",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/FragCatalog/Wrap/CMakeLists.txt" : {
      "ObjectId" : "f9c7dd841fa08b01367c7f61cdc08f1bca694070",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/MMPA/CMakeLists.txt" : {
      "ObjectId" : "3a62ef9740c1ab3a6bcf14e405f928b2eb830a3c",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/MMPA/Wrap/CMakeLists.txt" : {
      "ObjectId" : "4ef517a97293423e07292d3eb964db34a7746498",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/MolAlign/CMakeLists.txt" : {
      "ObjectId" : "aae7e6816868a8271b8f3dc457c5355d2246024f",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/MolAlign/Wrap/CMakeLists.txt" : {
      "ObjectId" : "5791f06515fb673da6f02d1d80063b373f1c2109",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/MolCatalog/CMakeLists.txt" : {
      "ObjectId" : "387d436cc1c73097d41d88e9c32c7a60f01820a4",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/MolCatalog/Wrap/CMakeLists.txt" : {
      "ObjectId" : "a2ef1e840c90b7e5c22ba44358d1b318faf5ac4f",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/MolChemicalFeatures/CMakeLists.txt" : {
      "ObjectId" : "cc3697952a297a45d875c5f08746845253db53f0",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/MolChemicalFeatures/Wrap/CMakeLists.txt" : {
      "ObjectId" : "6ed0f523dc4a16c47adddac89e7d9a7122791bec",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/MolDraw2D/CMakeLists.txt" : {
      "ObjectId" : "2b8dab9bd9a652c71020f28f463444d916faf0d3",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/MolDraw2D/QTDemo/CMakeLists.txt" : {
      "ObjectId" : "e0ee4c480a78811d9e53d76ea9113c8c799fbc61",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Instruct CMake to run moc automatically when needed.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Code/GraphMol/MolDraw2D/Wrap/CMakeLists.txt" : {
      "ObjectId" : "d0b20eec88c34770b2812f85c442179fcea27a43",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/MolHash/CMakeLists.txt" : {
      "ObjectId" : "6211f4090aa89b313a4b7a3ec280c541c741a2af",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/MolHash/Wrap/CMakeLists.txt" : {
      "ObjectId" : "80c1a68ca45e168d2b2c1274eae62b1333581e4e",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/MolInterchange/CMakeLists.txt" : {
      "ObjectId" : "d892ba49506919c46be964bb4679a8c216a5aa25",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/MolInterchange/Wrap/CMakeLists.txt" : {
      "ObjectId" : "35d35013225a35978eba3f0caaae78c1fa8d8c4b",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/MolStandardize/CMakeLists.txt" : {
      "ObjectId" : "9d8185ab427ae6e2a3b400edd1dbde9268da525d",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#find_package(Boost 1.56.0 COMPONENTS system iostreams REQUIRED)\n\n#if (NOT Boost_USE_STATIC_LIBS)\n\n#  add_definitions(\"-DBOOST_IOSTREAMS_DYN_LINK\")\n\n#endif()\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# rdkit_test(compareMolVSTest testPCS.cpp LINK_LIBRARIES RDGeneral SmilesParse RDGeneral GraphMol MolStandardize  ${Boost_LIBRARIES})\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Code/GraphMol/MolStandardize/Wrap/CMakeLists.txt" : {
      "ObjectId" : "d9b12484e734ce59205a2753f7e6b3b6b9f7b0ff",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/MolTransforms/CMakeLists.txt" : {
      "ObjectId" : "dd12dc3738ac83e307380e69050fa49649700c75",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/MolTransforms/Wrap/CMakeLists.txt" : {
      "ObjectId" : "d7af0609a342654a929cc0b631e75b25d30b9f62",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/PartialCharges/CMakeLists.txt" : {
      "ObjectId" : "00c4eb16a880899823e23d0740e9666c05d2add4",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/PartialCharges/Wrap/CMakeLists.txt" : {
      "ObjectId" : "b3f89b3285b8f12e25a9e244c14f25e851535e27",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/RGroupDecomposition/CMakeLists.txt" : {
      "ObjectId" : "ed0a4c96e78f9cb97a94bedf4d6530d58812bd3f",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/RGroupDecomposition/Wrap/CMakeLists.txt" : {
      "ObjectId" : "c048cf422947cd5b69df2b217084df5471e51eda",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_pytest(pyRGroupDecomposition\n\n#         ${CMAKE_CURRENT_SOURCE_DIR}/testGroupDecomposition.py)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Code/GraphMol/ReducedGraphs/CMakeLists.txt" : {
      "ObjectId" : "18a45b53d6e734cbf5b133b14abf46c48ad14394",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/ReducedGraphs/Wrap/CMakeLists.txt" : {
      "ObjectId" : "cd9a322305d61cf986ecd45e98e6b3271800c0f3",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/SLNParse/CMakeLists.txt" : {
      "ObjectId" : "b53507f6089f8c5855ebf41647e42f2703e99d84",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/SLNParse/Wrap/CMakeLists.txt" : {
      "ObjectId" : "1e3755ae141cf025497d0d4dc999191769cbc519",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/SLNParse/lex.yysln.cpp.cmake" : {
      "ObjectId" : "cfa37b90d890aaf3b560abc48d1c3ba4e65b44cf",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* A lexical scanner generated by flex */",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* First, we deal with  platform-specific or compiler-specific issues. */",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* begin standard C headers. */",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* end standard C headers. */",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* flex integer type definitions */",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,\n * if you want the limit (max/min) macros for int types. \n */",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Limits of integral types. */",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* The \"const\" storage-class-modifier is valid. */",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* C99 requires __STDC__ to be defined as 1. */",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Returned upon end-of-file. */",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Promotes a possibly negative, possibly signed char to an unsigned\n * integer for use as an array index.  If the signed char is negative,\n * we want to instead treat it as an 8-bit unsigned char, hence the\n * double cast.\n */",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* An opaque pointer. */",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* For convenience, these vars (plus the bison vars far below)\n   are macros in the reentrant scanner. */",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Enter a start condition.  This macro really ought to take a parameter,\n * but we do it the disgusting crufty way forced on us by the ()-less\n * definition of BEGIN.\n */",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Translate the current start state into a value that can be later handed\n * to BEGIN to return to the state.  The YYSTATE alias is for lex\n * compatibility.\n */",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Action number for EOF rule of a given start state. */",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Special action meaning \"start processing a new file\". */",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Size of default input buffer. */",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* The state buf must be large enough to hold one state per character in the main buffer.\n */",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Return all but the first \"n\" matched characters back to the input stream. */",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* input buffer */",
        "Line" : 207,
        "CharPositionInLine" : 19
      },
      "22" : {
        "Text" : "/* current position in input buffer */",
        "Line" : 208,
        "CharPositionInLine" : 20
      },
      "23" : {
        "Text" : "/* Size of input buffer in bytes, not including room for EOB\n\t * characters.\n\t */",
        "Line" : 210,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "/* Number of characters read into yy_ch_buf, not including EOB\n\t * characters.\n\t */",
        "Line" : 215,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "/* Whether we \"own\" the buffer - i.e., we know we created it,\n\t * and can realloc() it to grow it, and should free() it to\n\t * delete it.\n\t */",
        "Line" : 220,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "/* Whether this is an \"interactive\" input source; if so, and\n\t * if we're using stdio for input, then we want to use getc()\n\t * instead of fread(), to make sure we stop fetching input after\n\t * each newline.\n\t */",
        "Line" : 226,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "/* Whether we're considered to be at the beginning of a line.\n\t * If so, '^' rules will be active on the next match, otherwise\n\t * not.\n\t */",
        "Line" : 233,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "/**< The line count. */\n/**< The column count. */",
        "Line" : 239,
        "CharPositionInLine" : 22
      },
      "29" : {
        "Text" : "/* Whether to try to fill the input buffer when we reach the\n\t * end of it.\n\t */",
        "Line" : 242,
        "CharPositionInLine" : 1
      },
      "30" : {
        "Text" : "/* When an EOF's been seen but there's still some text to process\n\t * then we mark the buffer as YY_EOF_PENDING, to indicate that we\n\t * shouldn't try reading from the input source any more.  We might\n\t * still have a bunch of tokens to match, though, because of\n\t * possible backing-up.\n\t *\n\t * When we actually see the EOF, we change the status to \"new\"\n\t * (via yysln_restart()), so that the user can continue scanning by\n\t * just pointing yyin at a new input file.\n\t */",
        "Line" : 251,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "/* We provide macros for accessing buffer states in case in the\n * future we want to put the buffer states in a more general\n * \"scanner state\".\n *\n * Returns the top of the stack, or NULL.\n */",
        "Line" : 266,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "/* Same as previous macro, but useful when we know that the buffer stack is not\n * NULL or when we need an lvalue. For internal use only.\n */",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "/* Begin user sect3 */",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "/* Done after the current pattern has been matched and before the\n * corresponding action - sets up yytext.\n */",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "/* This struct is not used in this scanner,\n   but its presence is necessary. */",
        "Line" : 355,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "/* The intent behind this definition is that it'll catch\n * any uses of REJECT which flex missed.\n */",
        "Line" : 679,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "// $Id$\n//\n//  Copyright (c) 2008, Novartis Institutes for BioMedical Research Inc.\n//  All rights reserved.\n// \n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met: \n//\n//     * Redistributions of source code must retain the above copyright \n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above\n//       copyright notice, this list of conditions and the following \n//       disclaimer in the documentation and/or other materials provided \n//       with the distribution.\n//     * Neither the name of Novartis Institutes for BioMedical Research Inc. \n//       nor the names of its contributors may be used to endorse or promote \n//       products derived from this software without specific prior\n//       written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Created by Greg Landrum, September 2006\n//",
        "Line" : 689,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "// -std=c++11 turns off recent posix features",
        "Line" : 725,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "/* Special case for \"unistd.h\", since it is non-ANSI. We include it way\n * down here because we want the user's section 1 to have been scanned first.\n * The user has a chance to override it with an option.\n */",
        "Line" : 772,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "/* Holds the entire state of the reentrant scanner. */",
        "Line" : 783,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "/* User-defined. Not touched by flex. */",
        "Line" : 787,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "/* The rest are the same as the globals declared in the non-reentrant scanner. */",
        "Line" : 790,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "/**< index of top of stack. */\n/**< capacity of stack. */",
        "Line" : 792,
        "CharPositionInLine" : 32
      },
      "44" : {
        "Text" : "/**< Stack as an array. */",
        "Line" : 794,
        "CharPositionInLine" : 39
      },
      "45" : {
        "Text" : "/* end struct yyguts_t */",
        "Line" : 817,
        "CharPositionInLine" : 7
      },
      "46" : {
        "Text" : "/* This must go here because YYSTYPE and YYLTYPE are included\n     * from bison output in section 1.*/",
        "Line" : 821,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "/* Accessor methods to globals.\n   These are made visible to non-reentrant scanners for convenience. */",
        "Line" : 829,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "/* Macros after this point can all be overridden by user definitions in\n * section 1.\n */",
        "Line" : 862,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "/* Amount of stuff to slurp up with each read. */",
        "Line" : 900,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "/* Copy whatever the last rule matched to the standard output. */",
        "Line" : 905,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "/* This used to be an fputs(), but since the string might contain NUL's,\n * we now use fwrite().\n */",
        "Line" : 907,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "/* Gets input and stuffs it into \"buf\".  number of characters read, or YY_NULL,\n * is returned in \"result\".\n */",
        "Line" : 913,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "/* No semi-colon after return; correct usage is to write \"yyterminate();\" -\n * we don't want an extra ';' after the \"return\" because that will cause\n * some compilers to complain about unreachable statements.\n */",
        "Line" : 949,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "/* Number of entries by which start-condition stack grows. */",
        "Line" : 957,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "/* Report a fatal error. */",
        "Line" : 962,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "/* end tables serialization structures and prototypes */",
        "Line" : 967,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "/* Default declaration of generated scanner - a define so the user can\n * easily add parameters.\n */",
        "Line" : 969,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "/* Code executed at the beginning of each rule, after yytext and yyleng\n * have been set up.\n */",
        "Line" : 982,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "/* Code executed at the end of each rule. */",
        "Line" : 989,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "/** The main scanner function which does all the work.\n */",
        "Line" : 997,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "/* first start state */",
        "Line" : 1022,
        "CharPositionInLine" : 22
      },
      "62" : {
        "Text" : "/* loops until end-of-file is reached */",
        "Line" : 1039,
        "CharPositionInLine" : 14
      },
      "63" : {
        "Text" : "/* Support of yytext. */",
        "Line" : 1043,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "/* yy_bp points to the position in yy_ch_buf of the start of\n\t\t * the current run.\n\t\t */",
        "Line" : 1046,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "/* have to back up */",
        "Line" : 1075,
        "CharPositionInLine" : 5
      },
      "66" : {
        "Text" : "/* This label is used only to access EOF actions. */",
        "Line" : 1083,
        "CharPositionInLine" : 11
      },
      "67" : {
        "Text" : "/* beginning of action switch */",
        "Line" : 1086,
        "CharPositionInLine" : 3
      },
      "68" : {
        "Text" : "/* must back up */",
        "Line" : 1087,
        "CharPositionInLine" : 11
      },
      "69" : {
        "Text" : "/* undo the effects of YY_DO_BEFORE_ACTION */",
        "Line" : 1088,
        "CharPositionInLine" : 3
      },
      "70" : {
        "Text" : "/* rule 1 can match eol */",
        "Line" : 1095,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "// SLN has no concept of implicit Hs... they're either in the SLN or they don't exist:        ",
        "Line" : 1338,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "// SLN has no concept of implicit Hs... they're either in the SLN or they don't exist:        ",
        "Line" : 1350,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "// FIX: are 2H or 3H heavy atoms or Hs?",
        "Line" : 1361,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "// SLN has no concept of implicit Hs... they're either in the SLN or they don't exist:        ",
        "Line" : 1364,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "// SLN has no concept of implicit Hs... they're either in the SLN or they don't exist:        ",
        "Line" : 1379,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "// SLN has no concept of implicit Hs... they're either in the SLN or they don't exist:        ",
        "Line" : 1393,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "// we're closing a recursive definition, which means we should also be\n//  closing a parameter block:",
        "Line" : 1633,
        "CharPositionInLine" : 1
      },
      "78" : {
        "Text" : "// if we're currently in an SLN property block (e.g. in []'s), we need\n// to pop both the prop_val state and the property block state:",
        "Line" : 1648,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "// if we're currently in a CTAB property block (e.g. in <>'s), we need\n// to pop both the prop_val state and the property block state:",
        "Line" : 1681,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "/* rule 168 can match eol */",
        "Line" : 1718,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "/* Amount of text matched not including the EOB char. */",
        "Line" : 1746,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "/* Undo the effects of YY_DO_BEFORE_ACTION. */",
        "Line" : 1749,
        "CharPositionInLine" : 2
      },
      "83" : {
        "Text" : "/* We're scanning a new file or input source.  It's\n\t\t\t * possible that this happened because the user\n\t\t\t * just pointed yyin at a new source and called\n\t\t\t * yysln_lex().  If so, then we have to assure\n\t\t\t * consistency between YY_CURRENT_BUFFER and our\n\t\t\t * globals.  Here is the right place to do so, because\n\t\t\t * this is the first action (other than possibly a\n\t\t\t * back-up) that will match for the new input source.\n\t\t\t */",
        "Line" : 1755,
        "CharPositionInLine" : 3
      },
      "84" : {
        "Text" : "/* Note that here we test for yy_c_buf_p \"<=\" to the position\n\t\t * of the first EOB in the buffer, since yy_c_buf_p will\n\t\t * already have been incremented past the NUL character\n\t\t * (since all states make transitions on EOB to the\n\t\t * end-of-buffer state).  Contrast this with the test\n\t\t * in input().\n\t\t */",
        "Line" : 1769,
        "CharPositionInLine" : 2
      },
      "85" : {
        "Text" : "/* This was really a NUL. */",
        "Line" : 1777,
        "CharPositionInLine" : 5
      },
      "86" : {
        "Text" : "/* Okay, we're now positioned to make the NUL\n\t\t\t * transition.  We couldn't have\n\t\t\t * yy_get_previous_state() go ahead and do it\n\t\t\t * for us because it doesn't know how to deal\n\t\t\t * with the possibility of jamming (and we don't\n\t\t\t * want to build jamming into it because then it\n\t\t\t * will run more slowly).\n\t\t\t */",
        "Line" : 1784,
        "CharPositionInLine" : 3
      },
      "87" : {
        "Text" : "/* Consume the NUL. */",
        "Line" : 1799,
        "CharPositionInLine" : 4
      },
      "88" : {
        "Text" : "/* Note: because we've taken care in\n\t\t\t\t\t * yy_get_next_buffer() to have set up\n\t\t\t\t\t * yytext, we can now set up\n\t\t\t\t\t * yy_c_buf_p so that if some total\n\t\t\t\t\t * hoser (like flex itself) wants to\n\t\t\t\t\t * call the scanner after we return the\n\t\t\t\t\t * YY_NULL, it'll still work - another\n\t\t\t\t\t * YY_NULL will get returned.\n\t\t\t\t\t */",
        "Line" : 1820,
        "CharPositionInLine" : 5
      },
      "89" : {
        "Text" : "/* end of action switch */",
        "Line" : 1869,
        "CharPositionInLine" : 3
      },
      "90" : {
        "Text" : "/* end of scanning one token */",
        "Line" : 1870,
        "CharPositionInLine" : 4
      },
      "91" : {
        "Text" : "/* end of yysln_lex */",
        "Line" : 1871,
        "CharPositionInLine" : 2
      },
      "92" : {
        "Text" : "/* yy_get_next_buffer - try to read in a new buffer\n *\n * Returns a code representing an action:\n *\tEOB_ACT_LAST_MATCH -\n *\tEOB_ACT_CONTINUE_SCAN - continue scanning from current position\n *\tEOB_ACT_END_OF_FILE - end of file\n */",
        "Line" : 1873,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "/* Don't try to fill the buffer, so this is an EOF. */",
        "Line" : 1893,
        "CharPositionInLine" : 4
      },
      "94" : {
        "Text" : "/* We matched a single character, the EOB, so\n\t\t\t * treat this as a final EOF.\n\t\t\t */",
        "Line" : 1896,
        "CharPositionInLine" : 3
      },
      "95" : {
        "Text" : "/* We matched some text prior to the EOB, first\n\t\t\t * process it.\n\t\t\t */",
        "Line" : 1904,
        "CharPositionInLine" : 3
      },
      "96" : {
        "Text" : "/* Try to read more data. */",
        "Line" : 1911,
        "CharPositionInLine" : 1
      },
      "97" : {
        "Text" : "/* First move last chars to start of buffer. */",
        "Line" : 1913,
        "CharPositionInLine" : 1
      },
      "98" : {
        "Text" : "/* don't do the read, it's not guaranteed to return an EOF,\n\t\t * just force an EOF\n\t\t */",
        "Line" : 1920,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "/* Not enough room in the buffer - grow it. */",
        "Line" : 1931,
        "CharPositionInLine" : 5
      },
      "100" : {
        "Text" : "/* just a shorter name for the current buffer */",
        "Line" : 1933,
        "CharPositionInLine" : 3
      },
      "101" : {
        "Text" : "/* Include room in for 2 EOB chars. */",
        "Line" : 1949,
        "CharPositionInLine" : 5
      },
      "102" : {
        "Text" : "/* Can't grow it, we don't own it. */",
        "Line" : 1953,
        "CharPositionInLine" : 4
      },
      "103" : {
        "Text" : "/* Read in more data. */",
        "Line" : 1970,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "/* Extend the array by 50%, plus the number we really need. */",
        "Line" : 1997,
        "CharPositionInLine" : 2
      },
      "105" : {
        "Text" : "/* yy_get_previous_state - get the state just before the EOB char was reached */",
        "Line" : 2013,
        "CharPositionInLine" : 0
      },
      "106" : {
        "Text" : "/* yy_try_NUL_trans - try to make a transition on the NUL character\n *\n * synopsis\n *\tnext_state = yy_try_NUL_trans( current_state );\n */",
        "Line" : 2043,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "/* This var may be unused depending upon options. */",
        "Line" : 2051,
        "CharPositionInLine" : 57
      },
      "108" : {
        "Text" : "/* undo effects of setting up yytext */",
        "Line" : 2079,
        "CharPositionInLine" : 1
      },
      "109" : {
        "Text" : "/* need to shift things up to make room */",
        "Line" : 2083,
        "CharPositionInLine" : 4
      },
      "110" : {
        "Text" : "/* +2 for EOB chars. */",
        "Line" : 2084,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "/* yy_c_buf_p now points to the character we want to return.\n\t\t * If this occurs *before* the EOB characters, then it's a\n\t\t * valid NUL; if not, then we've hit the end of the buffer.\n\t\t */",
        "Line" : 2125,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "/* This was really a NUL. */",
        "Line" : 2130,
        "CharPositionInLine" : 3
      },
      "113" : {
        "Text" : "/* need more input */",
        "Line" : 2134,
        "CharPositionInLine" : 5
      },
      "114" : {
        "Text" : "/* This happens because yy_g_n_b()\n\t\t\t\t\t * sees that we've accumulated a\n\t\t\t\t\t * token and flags that we need to\n\t\t\t\t\t * try matching the token before\n\t\t\t\t\t * proceeding.  But for input(),\n\t\t\t\t\t * there's no matching to consider.\n\t\t\t\t\t * So convert the EOB_ACT_LAST_MATCH\n\t\t\t\t\t * to EOB_ACT_END_OF_FILE.\n\t\t\t\t\t */",
        "Line" : 2141,
        "CharPositionInLine" : 5
      },
      "115" : {
        "Text" : "/* Reset buffer status. */",
        "Line" : 2151,
        "CharPositionInLine" : 5
      },
      "116" : {
        "Text" : "/*FALLTHROUGH*/",
        "Line" : 2154,
        "CharPositionInLine" : 5
      },
      "117" : {
        "Text" : "/* cast for 8-bit char's */",
        "Line" : 2177,
        "CharPositionInLine" : 41
      },
      "118" : {
        "Text" : "/* preserve yytext */",
        "Line" : 2178,
        "CharPositionInLine" : 26
      },
      "119" : {
        "Text" : "/** Immediately switch to a different input stream.\n * @param input_file A readable stream.\n * @param yyscanner The scanner object.\n * @note This function does not reset the start condition to @c INITIAL .\n */",
        "Line" : 2185,
        "CharPositionInLine" : 0
      },
      "120" : {
        "Text" : "/** Switch to a different input buffer.\n * @param new_buffer The new input buffer.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2204,
        "CharPositionInLine" : 0
      },
      "121" : {
        "Text" : "/* TODO. We should be able to replace this entire function body\n\t * with\n\t *\t\tyysln_pop_buffer_state();\n\t *\t\tyysln_push_buffer_state(new_buffer);\n     */",
        "Line" : 2212,
        "CharPositionInLine" : 1
      },
      "122" : {
        "Text" : "/* Flush out information for old buffer. */",
        "Line" : 2223,
        "CharPositionInLine" : 2
      },
      "123" : {
        "Text" : "/* We don't actually know whether we did this switch during\n\t * EOF (yysln_wrap()) processing, but the only time this flag\n\t * is looked at is after yysln_wrap() is called, so it's safe\n\t * to go ahead and always set it.\n\t */",
        "Line" : 2232,
        "CharPositionInLine" : 1
      },
      "124" : {
        "Text" : "/** Allocate and initialize an input buffer state.\n * @param file A readable stream.\n * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.\n * @param yyscanner The scanner object.\n * @return the allocated buffer state.\n */",
        "Line" : 2249,
        "CharPositionInLine" : 0
      },
      "125" : {
        "Text" : "/* yy_ch_buf has to be 2 characters longer than the size given because\n\t * we need to put in 2 end-of-buffer characters.\n\t */",
        "Line" : 2265,
        "CharPositionInLine" : 1
      },
      "126" : {
        "Text" : "/** Destroy the buffer.\n * @param b a buffer created with yysln__create_buffer()\n * @param yyscanner The scanner object.\n */",
        "Line" : 2279,
        "CharPositionInLine" : 0
      },
      "127" : {
        "Text" : "/* Not sure if we should pop here. */",
        "Line" : 2290,
        "CharPositionInLine" : 31
      },
      "128" : {
        "Text" : "/* Initializes or reinitializes a buffer.\n * This function is sometimes called more than once on the same buffer,\n * such as during a yysln_restart() or at EOF.\n */",
        "Line" : 2303,
        "CharPositionInLine" : 0
      },
      "129" : {
        "Text" : "/* If b is the current buffer, then yysln__init_buffer was _probably_\n     * called from yysln_restart() or through yy_get_next_buffer.\n     * In that case, we don't want to reset the lineno or column.\n     */",
        "Line" : 2318,
        "CharPositionInLine" : 4
      },
      "130" : {
        "Text" : "/** Discard all buffered characters. On the next scan, YY_INPUT will be called.\n * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2332,
        "CharPositionInLine" : 0
      },
      "131" : {
        "Text" : "/* We always need two end-of-buffer characters.  The first causes\n\t * a transition to the end-of-buffer state.  The second causes\n\t * a jam in that state.\n\t */",
        "Line" : 2344,
        "CharPositionInLine" : 1
      },
      "132" : {
        "Text" : "/** Pushes the new state onto the stack. The new state becomes\n *  the current state. This function will allocate the stack\n *  if necessary.\n *  @param new_buffer The new state.\n *  @param yyscanner The scanner object.\n */",
        "Line" : 2360,
        "CharPositionInLine" : 0
      },
      "133" : {
        "Text" : "/* This block is copied from yysln__switch_to_buffer. */",
        "Line" : 2374,
        "CharPositionInLine" : 1
      },
      "134" : {
        "Text" : "/* Flush out information for old buffer. */",
        "Line" : 2377,
        "CharPositionInLine" : 2
      },
      "135" : {
        "Text" : "/* Only push if top exists. Otherwise, replace top. */",
        "Line" : 2383,
        "CharPositionInLine" : 1
      },
      "136" : {
        "Text" : "/* copied from yysln__switch_to_buffer. */",
        "Line" : 2388,
        "CharPositionInLine" : 1
      },
      "137" : {
        "Text" : "/** Removes and deletes the top of the stack, if present.\n *  The next element becomes the new top.\n *  @param yyscanner The scanner object.\n */",
        "Line" : 2393,
        "CharPositionInLine" : 0
      },
      "138" : {
        "Text" : "/* Allocates the stack if it does not exist.\n *  Guarantees space for at least one push.\n */",
        "Line" : 2414,
        "CharPositionInLine" : 0
      },
      "139" : {
        "Text" : "/* First allocation is just for 2 elements, since we don't know if this\n\t\t * scanner will even need a stack. We use 2 instead of 1 to avoid an\n\t\t * immediate realloc on the next call.\n         */",
        "Line" : 2424,
        "CharPositionInLine" : 2
      },
      "140" : {
        "Text" : "/* Increase the buffer to prepare for a possible push. */",
        "Line" : 2444,
        "CharPositionInLine" : 2
      },
      "141" : {
        "Text" : "/* arbitrary grow size */",
        "Line" : 2445,
        "CharPositionInLine" : 20
      },
      "142" : {
        "Text" : "/* zero only the new slots.*/",
        "Line" : 2455,
        "CharPositionInLine" : 2
      },
      "143" : {
        "Text" : "/** Setup the input buffer state to scan directly from a user-specified character buffer.\n * @param base the character buffer\n * @param size the size in bytes of the character buffer\n * @param yyscanner The scanner object.\n * @return the newly allocated buffer state object. \n */",
        "Line" : 2461,
        "CharPositionInLine" : 0
      },
      "144" : {
        "Text" : "/* They forgot to leave room for the EOB's. */",
        "Line" : 2474,
        "CharPositionInLine" : 2
      },
      "145" : {
        "Text" : "/* \"- 2\" to take care of EOB's */",
        "Line" : 2481,
        "CharPositionInLine" : 28
      },
      "146" : {
        "Text" : "/** Setup the input buffer state to scan a string. The next call to yysln_lex() will\n * scan from a @e copy of @a str.\n * @param yystr a NUL-terminated string to scan\n * @param yyscanner The scanner object.\n * @return the newly allocated buffer state object.\n * @note If you want to scan bytes that may contain NUL values, then use\n *       yysln__scan_bytes() instead.\n */",
        "Line" : 2496,
        "CharPositionInLine" : 0
      },
      "147" : {
        "Text" : "/** Setup the input buffer state to scan the given bytes. The next call to yysln_lex() will\n * scan from a @e copy of @a bytes.\n * @param bytes the byte buffer to scan\n * @param len the number of bytes in the buffer pointed to by @a bytes.\n * @param yyscanner The scanner object.\n * @return the newly allocated buffer state object.\n */",
        "Line" : 2510,
        "CharPositionInLine" : 0
      },
      "148" : {
        "Text" : "/* Get memory for full buffer, including space for trailing EOB's. */",
        "Line" : 2523,
        "CharPositionInLine" : 1
      },
      "149" : {
        "Text" : "/* It's okay to grow etc. this buffer, and we should throw it\n\t * away when we're done.\n\t */",
        "Line" : 2538,
        "CharPositionInLine" : 1
      },
      "150" : {
        "Text" : "/* Redefine yyless() so it works in section 3 code. */",
        "Line" : 2597,
        "CharPositionInLine" : 0
      },
      "151" : {
        "Text" : "/* Accessor  methods (get/set functions) to struct members. */",
        "Line" : 2614,
        "CharPositionInLine" : 0
      },
      "152" : {
        "Text" : "/** Get the user-defined data for this scanner.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2616,
        "CharPositionInLine" : 0
      },
      "153" : {
        "Text" : "/** Get the current line number.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2625,
        "CharPositionInLine" : 0
      },
      "154" : {
        "Text" : "/** Get the current column number.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2638,
        "CharPositionInLine" : 0
      },
      "155" : {
        "Text" : "/** Get the input stream.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2651,
        "CharPositionInLine" : 0
      },
      "156" : {
        "Text" : "/** Get the output stream.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2660,
        "CharPositionInLine" : 0
      },
      "157" : {
        "Text" : "/** Get the length of the current token.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2669,
        "CharPositionInLine" : 0
      },
      "158" : {
        "Text" : "/** Get the current token.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2678,
        "CharPositionInLine" : 0
      },
      "159" : {
        "Text" : "/** Set the user-defined data. This data is never touched by the scanner.\n * @param user_defined The data to be associated with this scanner.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2688,
        "CharPositionInLine" : 0
      },
      "160" : {
        "Text" : "/** Set the current line number.\n * @param line_number\n * @param yyscanner The scanner object.\n */",
        "Line" : 2698,
        "CharPositionInLine" : 0
      },
      "161" : {
        "Text" : "/* lineno is only valid if an input buffer exists. */",
        "Line" : 2706,
        "CharPositionInLine" : 8
      },
      "162" : {
        "Text" : "/** Set the current column.\n * @param line_number\n * @param yyscanner The scanner object.\n */",
        "Line" : 2713,
        "CharPositionInLine" : 0
      },
      "163" : {
        "Text" : "/* column is only valid if an input buffer exists. */",
        "Line" : 2721,
        "CharPositionInLine" : 8
      },
      "164" : {
        "Text" : "/** Set the input stream. This does not discard the current\n * input buffer.\n * @param in_str A readable stream.\n * @param yyscanner The scanner object.\n * @see yysln__switch_to_buffer\n */",
        "Line" : 2728,
        "CharPositionInLine" : 0
      },
      "165" : {
        "Text" : "/* Accessor methods for yylval and yylloc */",
        "Line" : 2758,
        "CharPositionInLine" : 0
      },
      "166" : {
        "Text" : "/* User-visible API */",
        "Line" : 2772,
        "CharPositionInLine" : 0
      },
      "167" : {
        "Text" : "/* yysln_lex_init is special because it creates the scanner itself, so it is\n * the ONLY reentrant function that doesn't take the scanner as the last argument.\n * That's why we explicitly handle the declaration, instead of using our macros.\n */",
        "Line" : 2774,
        "CharPositionInLine" : 0
      },
      "168" : {
        "Text" : "/* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */",
        "Line" : 2794,
        "CharPositionInLine" : 4
      },
      "169" : {
        "Text" : "/* yysln_lex_init_extra has the same functionality as yysln_lex_init, but follows the\n * convention of taking the scanner as the last argument. Note however, that\n * this is a *pointer* to a scanner, as it will be allocated by this call (and\n * is the reason, too, why this function also must handle its own declaration).\n * The user defined value in the first argument will be available to yysln_alloc in\n * the yyextra field.\n */",
        "Line" : 2800,
        "CharPositionInLine" : 0
      },
      "170" : {
        "Text" : "/* By setting to 0xAA, we expose bugs in\n    yy_init_globals. Leave at 0x00 for releases. */",
        "Line" : 2827,
        "CharPositionInLine" : 4
      },
      "171" : {
        "Text" : "/* Initialization is the same as for the non-reentrant scanner.\n     * This function is called from yysln_lex_destroy(), so don't allocate here.\n     */",
        "Line" : 2839,
        "CharPositionInLine" : 4
      },
      "172" : {
        "Text" : "/* Defined in main.c */",
        "Line" : 2854,
        "CharPositionInLine" : 0
      },
      "173" : {
        "Text" : "/* For future reference: Set errno on error, since we are called by\n     * yysln_lex_init()\n     */",
        "Line" : 2863,
        "CharPositionInLine" : 4
      },
      "174" : {
        "Text" : "/* yysln_lex_destroy is for both reentrant and non-reentrant scanners. */",
        "Line" : 2869,
        "CharPositionInLine" : 0
      },
      "175" : {
        "Text" : "/* Pop the buffer stack, destroying each element. */",
        "Line" : 2874,
        "CharPositionInLine" : 4
      },
      "176" : {
        "Text" : "/* Destroy the stack itself. */",
        "Line" : 2881,
        "CharPositionInLine" : 1
      },
      "177" : {
        "Text" : "/* Destroy the start condition stack. */",
        "Line" : 2885,
        "CharPositionInLine" : 4
      },
      "178" : {
        "Text" : "/* Reset the globals. This is important in a non-reentrant scanner so the next time\n     * yysln_lex() is called, initialization will occur. */",
        "Line" : 2889,
        "CharPositionInLine" : 4
      },
      "179" : {
        "Text" : "/* Destroy the main struct (reentrant only). */",
        "Line" : 2893,
        "CharPositionInLine" : 4
      },
      "180" : {
        "Text" : "/*\n * Internal utility routines.\n */",
        "Line" : 2899,
        "CharPositionInLine" : 0
      },
      "181" : {
        "Text" : "/* The cast to (char *) in the following accommodates both\n\t * implementations that use char* generic pointers, and those\n\t * that use void* generic pointers.  It works with the latter\n\t * because both ANSI C and C++ allow castless assignment from\n\t * any pointer type to void*, and deal with argument conversions\n\t * as though doing an assignment.\n\t */",
        "Line" : 2931,
        "CharPositionInLine" : 1
      },
      "182" : {
        "Text" : "/* see yysln_realloc() for (char *) cast */",
        "Line" : 2945,
        "CharPositionInLine" : 23
      },
      "CommentCount" : 183
    },
    "Code/GraphMol/SLNParse/sln.tab.cpp.cmake" : {
      "ObjectId" : "ab637e7d30ffa977829bd4c3dc97eaabea8fe690",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* A Bison parser, made by GNU Bison 3.1.  */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Bison implementation for Yacc-like parsers in C\n\n   Copyright (C) 1984, 1989-1990, 2000-2015, 2018 Free Software Foundation, Inc.\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* As a special exception, you may create a larger work that contains\n   part or all of the Bison parser skeleton and distribute that work\n   under terms of your choice, so long as that work isn't itself a\n   parser generator using the skeleton or a modified version thereof\n   as a parser skeleton.  Alternatively, if you modify or redistribute\n   the parser skeleton itself, you may (at your option) remove this\n   special exception, which will cause the skeleton and the resulting\n   Bison output files to be licensed under the GNU General Public\n   License without this special exception.\n\n   This special exception was added by the Free Software Foundation in\n   version 2.2 of Bison.  */",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* C LALR(1) parser skeleton written by Richard Stallman, by\n   simplifying the original so-called \"semantic\" parser.  */",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* All symbols defined below should begin with yy or YY, to avoid\n   infringing on user name space.  This should be done even for local\n   variables, as they might otherwise be expanded by user macros.\n   There are some unavoidable exceptions within include files to\n   define necessary library symbols; they are noted \"INFRINGES ON\n   USER NAME SPACE\" below.  */",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Identify Bison output.  */",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Bison version.  */",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Skeleton name.  */",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* Pure parsers.  */",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* Push parsers.  */",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Pull parsers.  */",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Substitute the variable and function names.  */",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Copy the first part of user declarations.  */",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "// $Id$\n//\n//  Copyright (c) 2008, Novartis Institutes for BioMedical Research Inc.\n//  All rights reserved.\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above\n//       copyright notice, this list of conditions and the following\n//       disclaimer in the documentation and/or other materials provided\n//       with the distribution.\n//     * Neither the name of Novartis Institutes for BioMedical Research Inc.\n//       nor the names of its contributors may be used to endorse or promote\n//       products derived from this software without specific prior\n//       written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\n// Created by Greg Landrum, September 2006\n//",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "/* Enabling verbose error messages.  */",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* In a future release of Bison, this section will be replaced\n   by #include \"sln.tab.hpp\".  */",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Debug traces.  */",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Token type.  */",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Value type.  */",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Copy the second part of user declarations.  */",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Suppress unused-variable warnings by \"using\" E.  */",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Suppress an incorrect diagnostic about yylval being uninitialized.  */",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* The parser invokes alloca or malloc; define the necessary symbols.  */",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Use EXIT_SUCCESS as a witness for stdlib.h.  */",
        "Line" : 392,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "/* Pacify GCC's 'empty if-body' warning.  */",
        "Line" : 402,
        "CharPositionInLine" : 3
      },
      "25" : {
        "Text" : "/* The OS might guarantee only one guard page at the bottom of the stack,\n       and a page size can be as small as 4096 bytes.  So we cannot safely\n       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number\n       to allow for a few compiler-allocated temporary stack slots.  */",
        "Line" : 405,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "/* INFRINGES ON USER NAME SPACE */",
        "Line" : 428,
        "CharPositionInLine" : 25
      },
      "27" : {
        "Text" : "/* INFRINGES ON USER NAME SPACE */",
        "Line" : 434,
        "CharPositionInLine" : 20
      },
      "28" : {
        "Text" : "/* A type that is properly aligned for any stack member.  */",
        "Line" : 445,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "/* The size of the maximum gap between one aligned stack and the next.  */",
        "Line" : 452,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "/* The size of an array large to enough to hold all stacks, each with\n   N elements.  */",
        "Line" : 455,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "/* Relocate STACK from its old location to the new one.  The\n   local variables YYSIZE and YYSTACKSIZE give the old and new number of\n   elements in the stack, and YYPTR gives the new location of the\n   stack.  Advance YYPTR to a properly aligned location for the next\n   stack.  */",
        "Line" : 463,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "/* Copy COUNT objects from SRC to DST.  The source and destination do\n   not overlap.  */",
        "Line" : 482,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "/* YYFINAL -- State number of the termination state.  */",
        "Line" : 501,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "/* YYLAST -- Last index in YYTABLE.  */",
        "Line" : 503,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "/* YYNTOKENS -- Number of terminals.  */",
        "Line" : 506,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "/* YYNNTS -- Number of nonterminals.  */",
        "Line" : 508,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "/* YYNRULES -- Number of rules.  */",
        "Line" : 510,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "/* YYNSTATES -- Number of states.  */",
        "Line" : 512,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned\n   by yylex, with out-of-bounds checking.  */",
        "Line" : 515,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM\n   as returned by yylex, without out-of-bounds checking.  */",
        "Line" : 523,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */",
        "Line" : 560,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.\n   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */",
        "Line" : 575,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "/* YYTOKNUM[NUM] -- (External) token number corresponding to the\n   (internal) symbol number NUM (which must be that of a token).  */",
        "Line" : 595,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing\n     STATE-NUM.  */",
        "Line" : 616,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.\n     Performed when YYTABLE does not specify something else to do.  Zero\n     means the default is an error.  */",
        "Line" : 634,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "/* YYPGOTO[NTERM-NUM].  */",
        "Line" : 653,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "/* YYDEFGOTO[NTERM-NUM].  */",
        "Line" : 660,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If\n     positive, shift that token.  If negative, reduce the rule whose\n     number is the opposite.  If YYTABLE_NINF, syntax error.  */",
        "Line" : 667,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing\n     symbol of state STATE-NUM.  */",
        "Line" : 722,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */",
        "Line" : 740,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "/* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */",
        "Line" : 753,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "/* Error token number */",
        "Line" : 796,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "/* Enable debugging if requested.  */",
        "Line" : 802,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "/* This macro is provided for backward compatibility. */",
        "Line" : 816,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "/*----------------------------------------.\n| Print this symbol's value on YYOUTPUT.  |\n`----------------------------------------*/",
        "Line" : 834,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "/*--------------------------------.\n| Print this symbol on YYOUTPUT.  |\n`--------------------------------*/",
        "Line" : 857,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "/*------------------------------------------------------------------.\n| yy_stack_print -- Print the state stack from its BOTTOM up to its |\n| TOP (included).                                                   |\n`------------------------------------------------------------------*/",
        "Line" : 871,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "/*------------------------------------------------.\n| Report that the YYRULE is going to be reduced.  |\n`------------------------------------------------*/",
        "Line" : 895,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "/* The symbols being reduced.  */",
        "Line" : 907,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "/* Nonzero means print parse trace.  It is left uninitialized so that\n   multiple parsers can coexist.  */",
        "Line" : 925,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "/* YYINITDEPTH -- initial size of the parser's stacks.  */",
        "Line" : 936,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only\n   if the built-in stack extension method is used).\n\n   Do not make this value too large; the results are undefined if\n   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)\n   evaluated with infinite-precision integer arithmetic.  */",
        "Line" : 941,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "/* Return the length of YYSTR.  */",
        "Line" : 959,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "/* Copy YYSRC to YYDEST, returning the address of the terminating '\\0' in\n   YYDEST.  */",
        "Line" : 975,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "/* Copy to YYRES the contents of YYSTR after stripping away unnecessary\n   quotes and backslashes, so that it's suitable for yyerror.  The\n   heuristic is that double-quoting is unnecessary unless the string\n   contains an apostrophe, a comma, or backslash (other than\n   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is\n   null, do not copy; instead, return the length of what the result\n   would have been.  */",
        "Line" : 992,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "/* Fall through.  */",
        "Line" : 1017,
        "CharPositionInLine" : 12
      },
      "67" : {
        "Text" : "/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message\n   about the unexpected token YYTOKEN for the state stack whose top is\n   YYSSP.\n\n   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is\n   not large enough to hold the message.  In that case, also set\n   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the\n   required number of bytes is too large to store.  */",
        "Line" : 1039,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "/* Internationalized format string. */",
        "Line" : 1054,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "/* Arguments of yyformat. */",
        "Line" : 1056,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "/* Number of reported tokens (one for the \"unexpected\", one per\n     \"expected\"). */",
        "Line" : 1058,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "/* There are many possibilities here to consider:\n     - If this state is a consistent state with a default action, then\n       the only way this function was invoked is if the default action\n       is an error action.  In that case, don't check for expected\n       tokens because there are none.\n     - The only way there can be no lookahead present (in yychar) is if\n       this state is a consistent state with a default action.  Thus,\n       detecting the absence of a lookahead is sufficient to determine\n       that there is no unexpected or expected token to report.  In that\n       case, just report a simple \"syntax error\".\n     - Don't assume there isn't a lookahead just because this state is a\n       consistent state with a default action.  There might have been a\n       previous inconsistent state, consistent state with a non-default\n       action, or user semantic action that manipulated yychar.\n     - Of course, the expected token list depends on states to have\n       correct lookahead information, and it depends on the parser not\n       to perform extra reductions after fetching a lookahead from the\n       scanner and before detecting a syntax error.  Thus, state merging\n       (from LALR or IELR) and default reductions corrupt the expected\n       token list.  However, the list is correct for canonical LR with\n       one exception: it will still contain any token that will not be\n       accepted due to an error action in a later state.\n  */",
        "Line" : 1062,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "/* Start YYX at -YYN if negative to avoid negative indexes in\n             YYCHECK.  In other words, skip the first -YYN actions for\n             this state because they are default actions.  */",
        "Line" : 1091,
        "CharPositionInLine" : 10
      },
      "73" : {
        "Text" : "/* Stay within bounds of both yycheck and yytname.  */",
        "Line" : 1095,
        "CharPositionInLine" : 10
      },
      "74" : {
        "Text" : "/* Avoid compiler warnings. */",
        "Line" : 1128,
        "CharPositionInLine" : 13
      },
      "75" : {
        "Text" : "/* Avoid sprintf, as that infringes on the user's name space.\n     Don't have undefined behavior even if the translation\n     produced a string with the wrong number of \"%s\"s.  */",
        "Line" : 1154,
        "CharPositionInLine" : 2
      },
      "76" : {
        "Text" : "/*-----------------------------------------------.\n| Release the memory associated to this symbol.  |\n`-----------------------------------------------*/",
        "Line" : 1176,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "/* TEXT_BLOCK  */",
        "Line" : 1195,
        "CharPositionInLine" : 18
      },
      "78" : {
        "Text" : "/* ATOM_TOKEN  */",
        "Line" : 1201,
        "CharPositionInLine" : 13
      },
      "79" : {
        "Text" : "/* COMPARE_TOKEN  */",
        "Line" : 1207,
        "CharPositionInLine" : 13
      },
      "80" : {
        "Text" : "/* atom  */",
        "Line" : 1213,
        "CharPositionInLine" : 13
      },
      "81" : {
        "Text" : "/* hatom  */",
        "Line" : 1219,
        "CharPositionInLine" : 13
      },
      "82" : {
        "Text" : "/* primatom  */",
        "Line" : 1225,
        "CharPositionInLine" : 13
      },
      "83" : {
        "Text" : "/* bond  */",
        "Line" : 1231,
        "CharPositionInLine" : 13
      },
      "84" : {
        "Text" : "/* primbond  */",
        "Line" : 1237,
        "CharPositionInLine" : 13
      },
      "85" : {
        "Text" : "/* onebond  */",
        "Line" : 1243,
        "CharPositionInLine" : 13
      },
      "86" : {
        "Text" : "/* attriblist  */",
        "Line" : 1249,
        "CharPositionInLine" : 13
      },
      "87" : {
        "Text" : "/* ctabattriblist  */",
        "Line" : 1255,
        "CharPositionInLine" : 13
      },
      "88" : {
        "Text" : "/* attrib  */",
        "Line" : 1261,
        "CharPositionInLine" : 13
      },
      "89" : {
        "Text" : "/* recursivequery  */",
        "Line" : 1267,
        "CharPositionInLine" : 13
      },
      "90" : {
        "Text" : "/* ctabattrib  */",
        "Line" : 1273,
        "CharPositionInLine" : 13
      },
      "91" : {
        "Text" : "/*----------.\n| yyparse.  |\n`----------*/",
        "Line" : 1289,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "/* The lookahead symbol.  */",
        "Line" : 1296,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "/* The semantic value of the lookahead symbol.  */\n/* Default value used for initialization, for pacifying older GCCs\n   or non-GCC compilers.  */",
        "Line" : 1300,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "/* Number of syntax errors so far.  */",
        "Line" : 1306,
        "CharPositionInLine" : 4
      },
      "95" : {
        "Text" : "/* Number of tokens to shift before error messages enabled.  */",
        "Line" : 1310,
        "CharPositionInLine" : 4
      },
      "96" : {
        "Text" : "/* The stacks and their tools:\n       'yyss': related to states.\n       'yyvs': related to semantic values.\n\n       Refer to the stacks through separate pointers, to allow yyoverflow\n       to reallocate them elsewhere.  */",
        "Line" : 1313,
        "CharPositionInLine" : 4
      },
      "97" : {
        "Text" : "/* The state stack.  */",
        "Line" : 1320,
        "CharPositionInLine" : 4
      },
      "98" : {
        "Text" : "/* The semantic value stack.  */",
        "Line" : 1325,
        "CharPositionInLine" : 4
      },
      "99" : {
        "Text" : "/* Lookahead token as an internal (translated) token number.  */",
        "Line" : 1334,
        "CharPositionInLine" : 2
      },
      "100" : {
        "Text" : "/* The variables used to return semantic value and location from the\n     action routines.  */",
        "Line" : 1336,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "/* Buffer for error messages, and its allocated size.  */",
        "Line" : 1341,
        "CharPositionInLine" : 2
      },
      "102" : {
        "Text" : "/* The number of symbols on the RHS of the reduced rule.\n     Keep to zero when no symbol should be popped.  */",
        "Line" : 1349,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "/* Cause a token to be read.  */",
        "Line" : 1362,
        "CharPositionInLine" : 20
      },
      "104" : {
        "Text" : "/*------------------------------------------------------------.\n| yynewstate -- Push a new state, which is found in yystate.  |\n`------------------------------------------------------------*/",
        "Line" : 1365,
        "CharPositionInLine" : 0
      },
      "105" : {
        "Text" : "/* In all cases, when you get here, the value and location stacks\n     have just been pushed.  So pushing a state here evens the stacks.  */",
        "Line" : 1369,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "/* Get the current used size of the three stacks, in elements.  */",
        "Line" : 1378,
        "CharPositionInLine" : 6
      },
      "107" : {
        "Text" : "/* Give user a chance to reallocate the stack.  Use copies of\n           these so that the &'s don't force the real ones into\n           memory.  */",
        "Line" : 1383,
        "CharPositionInLine" : 8
      },
      "108" : {
        "Text" : "/* Each stack pointer address is followed by the size of the\n           data in use in that stack, in bytes.  This used to be a\n           conditional around just the two extra args, but that might\n           be undefined if yyoverflow is a macro.  */",
        "Line" : 1389,
        "CharPositionInLine" : 8
      },
      "109" : {
        "Text" : "/* Extend the stack our own way.  */",
        "Line" : 1405,
        "CharPositionInLine" : 6
      },
      "110" : {
        "Text" : "/*-----------.\n| yybackup.  |\n`-----------*/",
        "Line" : 1444,
        "CharPositionInLine" : 0
      },
      "111" : {
        "Text" : "/* Do appropriate processing given the current state.  Read a\n     lookahead token if we need one and don't already have one.  */",
        "Line" : 1449,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "/* First try to decide what to do without reference to lookahead token.  */",
        "Line" : 1452,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "/* Not known => get a lookahead token if don't already have one.  */",
        "Line" : 1457,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "/* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */",
        "Line" : 1459,
        "CharPositionInLine" : 2
      },
      "115" : {
        "Text" : "/* If the proper action on seeing token YYTOKEN is to reduce or to\n     detect an error, take that action.  */",
        "Line" : 1477,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "/* Count tokens shifted since error; after three, turn off error\n     status.  */",
        "Line" : 1491,
        "CharPositionInLine" : 2
      },
      "117" : {
        "Text" : "/* Shift the lookahead token.  */",
        "Line" : 1496,
        "CharPositionInLine" : 2
      },
      "118" : {
        "Text" : "/* Discard the shifted token.  */",
        "Line" : 1499,
        "CharPositionInLine" : 2
      },
      "119" : {
        "Text" : "/*-----------------------------------------------------------.\n| yydefault -- do the default action for the current state.  |\n`-----------------------------------------------------------*/",
        "Line" : 1510,
        "CharPositionInLine" : 0
      },
      "120" : {
        "Text" : "/*-----------------------------.\n| yyreduce -- Do a reduction.  |\n`-----------------------------*/",
        "Line" : 1520,
        "CharPositionInLine" : 0
      },
      "121" : {
        "Text" : "/* yyn is the number of a rule to reduce with.  */",
        "Line" : 1524,
        "CharPositionInLine" : 2
      },
      "122" : {
        "Text" : "/* If YYLEN is nonzero, implement the default value of the action:\n     '$$ = $1'.\n\n     Otherwise, the following line sets YYVAL to garbage.\n     This behavior is undocumented and Bison\n     users should not rely upon it.  Assigning to YYVAL\n     unconditionally makes the parser a bit smaller, and it avoids a\n     GCC warning that YYVAL may be used uninitialized.  */",
        "Line" : 1527,
        "CharPositionInLine" : 2
      },
      "123" : {
        "Text" : "// allowing mol<attrs><attrs> seems to be a NIBR thing, I don't\n// think it's standard SLN",
        "Line" : 1544,
        "CharPositionInLine" : 2
      },
      "124" : {
        "Text" : "// closeRingBond() takes ownership of the bond",
        "Line" : 1643,
        "CharPositionInLine" : 2
      },
      "125" : {
        "Text" : "// addBranchToMol() takes ownership of the bond and deletes the\n// branch, so no leaks here'",
        "Line" : 1662,
        "CharPositionInLine" : 2
      },
      "126" : {
        "Text" : "// closeRingBond() takes ownership of the bond",
        "Line" : 1724,
        "CharPositionInLine" : 2
      },
      "127" : {
        "Text" : "// addBranchToMol() takes ownership of the bond and deletes the\n// branch, so no leaks here'",
        "Line" : 1759,
        "CharPositionInLine" : 2
      },
      "128" : {
        "Text" : "/* User semantic actions sometimes alter yychar, and that requires\n     that yytoken be updated with the new translation.  We take the\n     approach of translating immediately before every use of yytoken.\n     One alternative is translating here after every semantic action,\n     but that translation would be missed if the semantic action invokes\n     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or\n     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an\n     incorrect destructor might then be invoked immediately.  In the\n     case of YYERROR or YYBACKUP, subsequent parser actions might lead\n     to an incorrect destructor call or verbose syntax error message\n     before the lookahead is translated.  */",
        "Line" : 2306,
        "CharPositionInLine" : 2
      },
      "129" : {
        "Text" : "/* Now 'shift' the result of the reduction.  Determine what state\n     that goes to, based on the state we popped back to and the rule\n     number reduced by.  */",
        "Line" : 2325,
        "CharPositionInLine" : 2
      },
      "130" : {
        "Text" : "/*--------------------------------------.\n| yyerrlab -- here on detecting error.  |\n`--------------------------------------*/",
        "Line" : 2340,
        "CharPositionInLine" : 0
      },
      "131" : {
        "Text" : "/* Make sure we have latest lookahead translation.  See comments at\n     user semantic actions for why this is necessary.  */",
        "Line" : 2344,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "/* If not already recovering from an error, report this error.  */",
        "Line" : 2348,
        "CharPositionInLine" : 2
      },
      "133" : {
        "Text" : "/* If just tried and failed to reuse lookahead token after an\n         error, discard it.  */",
        "Line" : 2392,
        "CharPositionInLine" : 6
      },
      "134" : {
        "Text" : "/* Return failure if at end of input.  */",
        "Line" : 2397,
        "CharPositionInLine" : 10
      },
      "135" : {
        "Text" : "/* Else will try to reuse lookahead token after shifting the error\n     token.  */",
        "Line" : 2409,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "/*---------------------------------------------------.\n| yyerrorlab -- error raised explicitly by YYERROR.  |\n`---------------------------------------------------*/",
        "Line" : 2414,
        "CharPositionInLine" : 0
      },
      "137" : {
        "Text" : "/* Pacify compilers like GCC when the user code never invokes\n     YYERROR and the label yyerrorlab therefore never appears in user\n     code.  */",
        "Line" : 2419,
        "CharPositionInLine" : 2
      },
      "138" : {
        "Text" : "/*CONSTCOND*/",
        "Line" : 2422,
        "CharPositionInLine" : 6
      },
      "139" : {
        "Text" : "/* Do not reclaim the symbols of the rule whose action triggered\n     this YYERROR.  */",
        "Line" : 2425,
        "CharPositionInLine" : 2
      },
      "140" : {
        "Text" : "/*-------------------------------------------------------------.\n| yyerrlab1 -- common code for both syntax error and YYERROR.  |\n`-------------------------------------------------------------*/",
        "Line" : 2434,
        "CharPositionInLine" : 0
      },
      "141" : {
        "Text" : "/* Each real token shifted decrements this.  */",
        "Line" : 2438,
        "CharPositionInLine" : 24
      },
      "142" : {
        "Text" : "/* Pop the current state because it cannot handle the error token.  */",
        "Line" : 2454,
        "CharPositionInLine" : 6
      },
      "143" : {
        "Text" : "/* Shift the error token.  */",
        "Line" : 2471,
        "CharPositionInLine" : 2
      },
      "144" : {
        "Text" : "/*-------------------------------------.\n| yyacceptlab -- YYACCEPT comes here.  |\n`-------------------------------------*/",
        "Line" : 2478,
        "CharPositionInLine" : 0
      },
      "145" : {
        "Text" : "/*-----------------------------------.\n| yyabortlab -- YYABORT comes here.  |\n`-----------------------------------*/",
        "Line" : 2485,
        "CharPositionInLine" : 0
      },
      "146" : {
        "Text" : "/*-------------------------------------------------.\n| yyexhaustedlab -- memory exhaustion comes here.  |\n`-------------------------------------------------*/",
        "Line" : 2493,
        "CharPositionInLine" : 0
      },
      "147" : {
        "Text" : "/* Fall through.  */",
        "Line" : 2499,
        "CharPositionInLine" : 2
      },
      "148" : {
        "Text" : "/* Make sure we have latest lookahead translation.  See comments at\n         user semantic actions for why this is necessary.  */",
        "Line" : 2505,
        "CharPositionInLine" : 6
      },
      "149" : {
        "Text" : "/* Do not reclaim the symbols of the rule whose action triggered\n     this YYABORT or YYACCEPT.  */",
        "Line" : 2511,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 150
    },
    "Code/GraphMol/SLNParse/sln.tab.hpp.cmake" : {
      "ObjectId" : "6b3bc171183f161d5c395bd80ea700533db3558c",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* A Bison parser, made by GNU Bison 3.1.  */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Bison interface for Yacc-like parsers in C\n\n   Copyright (C) 1984, 1989-1990, 2000-2015, 2018 Free Software Foundation, Inc.\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* As a special exception, you may create a larger work that contains\n   part or all of the Bison parser skeleton and distribute that work\n   under terms of your choice, so long as that work isn't itself a\n   parser generator using the skeleton or a modified version thereof\n   as a parser skeleton.  Alternatively, if you modify or redistribute\n   the parser skeleton itself, you may (at your option) remove this\n   special exception, which will cause the skeleton and the resulting\n   Bison output files to be licensed under the GNU General Public\n   License without this special exception.\n\n   This special exception was added by the Free Software Foundation in\n   version 2.2 of Bison.  */",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Debug traces.  */",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Token type.  */",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Value type.  */",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "Code/GraphMol/ShapeHelpers/CMakeLists.txt" : {
      "ObjectId" : "25e09db68fdece7aa2c9c095c00dc511650727c2",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/ShapeHelpers/Wrap/CMakeLists.txt" : {
      "ObjectId" : "786eb3774b49bc81a3756d44c72f92fd227c6cc0",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/SmilesParse/CMakeLists.txt" : {
      "ObjectId" : "7ba0ccfcaea3b735d8de2ea07c7cf31773633b32",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/SmilesParse/lex.yysmarts.cpp.cmake" : {
      "ObjectId" : "68858d25223abad6c317a542b70ad898216709ad",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* A lexical scanner generated by flex */",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* First, we deal with  platform-specific or compiler-specific issues. */",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* begin standard C headers. */",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* end standard C headers. */",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* flex integer type definitions */",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,\n * if you want the limit (max/min) macros for int types. \n */",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Limits of integral types. */",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* begin standard C++ headers. */",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* TODO: this is always defined, so inline it */",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Returned upon end-of-file. */",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Promotes a possibly negative, possibly signed char to an\n *   integer in range [0..255] for use as an array index.\n */",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* An opaque pointer. */",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* For convenience, these vars (plus the bison vars far below)\n   are macros in the reentrant scanner. */",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Enter a start condition.  This macro really ought to take a parameter,\n * but we do it the disgusting crufty way forced on us by the ()-less\n * definition of BEGIN.\n */",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Translate the current start state into a value that can be later handed\n * to BEGIN to return to the state.  The YYSTATE alias is for lex\n * compatibility.\n */",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Action number for EOF rule of a given start state. */",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Special action meaning \"start processing a new file\". */",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Size of default input buffer. */",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* On IA-64, the buffer size is 16k, not 8k.\n * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.\n * Ditto for the __ia64__ case accordingly.\n */",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* The state buf must be large enough to hold one state per character in the main buffer.\n */",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Return all but the first \"n\" matched characters back to the input stream. */",
        "Line" : 404,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* input buffer */",
        "Line" : 425,
        "CharPositionInLine" : 19
      },
      "23" : {
        "Text" : "/* current position in input buffer */",
        "Line" : 426,
        "CharPositionInLine" : 20
      },
      "24" : {
        "Text" : "/* Size of input buffer in bytes, not including room for EOB\n\t * characters.\n\t */",
        "Line" : 428,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "/* Number of characters read into yy_ch_buf, not including EOB\n\t * characters.\n\t */",
        "Line" : 433,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "/* Whether we \"own\" the buffer - i.e., we know we created it,\n\t * and can realloc() it to grow it, and should free() it to\n\t * delete it.\n\t */",
        "Line" : 438,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "/* Whether this is an \"interactive\" input source; if so, and\n\t * if we're using stdio for input, then we want to use getc()\n\t * instead of fread(), to make sure we stop fetching input after\n\t * each newline.\n\t */",
        "Line" : 444,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "/* Whether we're considered to be at the beginning of a line.\n\t * If so, '^' rules will be active on the next match, otherwise\n\t * not.\n\t */",
        "Line" : 451,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "/**< The line count. */\n/**< The column count. */",
        "Line" : 457,
        "CharPositionInLine" : 22
      },
      "30" : {
        "Text" : "/* Whether to try to fill the input buffer when we reach the\n\t * end of it.\n\t */",
        "Line" : 460,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "/* When an EOF's been seen but there's still some text to process\n\t * then we mark the buffer as YY_EOF_PENDING, to indicate that we\n\t * shouldn't try reading from the input source any more.  We might\n\t * still have a bunch of tokens to match, though, because of\n\t * possible backing-up.\n\t *\n\t * When we actually see the EOF, we change the status to \"new\"\n\t * (via yyrestart()), so that the user can continue scanning by\n\t * just pointing yyin at a new input file.\n\t */",
        "Line" : 469,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "/* We provide macros for accessing buffer states in case in the\n * future we want to put the buffer states in a more general\n * \"scanner state\".\n *\n * Returns the top of the stack, or NULL.\n */",
        "Line" : 484,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "/* Same as previous macro, but useful when we know that the buffer stack is not\n * NULL or when we need an lvalue. For internal use only.\n */",
        "Line" : 493,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "/* Begin user sect3 */",
        "Line" : 540,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "/* Done after the current pattern has been matched and before the\n * corresponding action - sets up yytext.\n */",
        "Line" : 555,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "/* This struct is not used in this scanner,\n   but its presence is necessary. */",
        "Line" : 566,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "/* The intent behind this definition is that it'll catch\n * any uses of REJECT which flex missed.\n */",
        "Line" : 792,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "//\n//  Copyright (C) 2003-2018 Greg Landrum and Rational Discovery LLC\n//\n//   @@ All Rights Reserved  @@\n//",
        "Line" : 802,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "// -std=c++11 turns off recent posix features",
        "Line" : 809,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "//static PeriodicTable * gl_ptab = PeriodicTable::getTable();",
        "Line" : 828,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "//  YY_BUFFER_STATE buff=yysmarts__scan_string(text.c_str()+pos,yyscanner);",
        "Line" : 838,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "// Faster implementation of yysmarts__scan_string that handles trimming",
        "Line" : 839,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "/* Get memory for full buffer, including space for trailing EOB's. */",
        "Line" : 844,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "// ltrim",
        "Line" : 850,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "/* It's okay to grow etc. this buffer, and we should throw it\n   * away when we're done.\n   */",
        "Line" : 870,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "/* Special case for \"unistd.h\", since it is non-ANSI. We include it way\n * down here because we want the user's section 1 to have been scanned first.\n * The user has a chance to override it with an option.\n */",
        "Line" : 891,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "/* Holds the entire state of the reentrant scanner. */",
        "Line" : 902,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "/* User-defined. Not touched by flex. */",
        "Line" : 906,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "/* The rest are the same as the globals declared in the non-reentrant scanner. */",
        "Line" : 909,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "/**< index of top of stack. */\n/**< capacity of stack. */",
        "Line" : 911,
        "CharPositionInLine" : 32
      },
      "51" : {
        "Text" : "/**< Stack as an array. */",
        "Line" : 913,
        "CharPositionInLine" : 39
      },
      "52" : {
        "Text" : "/* end struct yyguts_t */",
        "Line" : 936,
        "CharPositionInLine" : 7
      },
      "53" : {
        "Text" : "/* This must go here because YYSTYPE and YYLTYPE are included\n     * from bison output in section 1.*/",
        "Line" : 940,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "/* Accessor methods to globals.\n   These are made visible to non-reentrant scanners for convenience. */",
        "Line" : 948,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "/* Macros after this point can all be overridden by user definitions in\n * section 1.\n */",
        "Line" : 985,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "/* Amount of stuff to slurp up with each read. */",
        "Line" : 1026,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "/* On IA-64, the buffer size is 16k, not 8k */",
        "Line" : 1029,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "/* Copy whatever the last rule matched to the standard output. */",
        "Line" : 1036,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "/* This used to be an fputs(), but since the string might contain NUL's,\n * we now use fwrite().\n */",
        "Line" : 1038,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "/* Gets input and stuffs it into \"buf\".  number of characters read, or YY_NULL,\n * is returned in \"result\".\n */",
        "Line" : 1044,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "/* No semi-colon after return; correct usage is to write \"yyterminate();\" -\n * we don't want an extra ';' after the \"return\" because that will cause\n * some compilers to complain about unreachable statements.\n */",
        "Line" : 1080,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "/* Number of entries by which start-condition stack grows. */",
        "Line" : 1088,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "/* Report a fatal error. */",
        "Line" : 1093,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "/* end tables serialization structures and prototypes */",
        "Line" : 1098,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "/* Default declaration of generated scanner - a define so the user can\n * easily add parameters.\n */",
        "Line" : 1100,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "/* Code executed at the beginning of each rule, after yytext and yyleng\n * have been set up.\n */",
        "Line" : 1113,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "/* Code executed at the end of each rule. */",
        "Line" : 1120,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "/** The main scanner function which does all the work.\n */",
        "Line" : 1128,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "/* first start state */",
        "Line" : 1148,
        "CharPositionInLine" : 22
      },
      "70" : {
        "Text" : "/*CONSTCOND*/ /* loops until end-of-file is reached */",
        "Line" : 1181,
        "CharPositionInLine" : 9
      },
      "71" : {
        "Text" : "/* Support of yytext. */",
        "Line" : 1185,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "/* yy_bp points to the position in yy_ch_buf of the start of\n\t\t * the current run.\n\t\t */",
        "Line" : 1188,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "/* have to back up */",
        "Line" : 1217,
        "CharPositionInLine" : 5
      },
      "74" : {
        "Text" : "/* This label is used only to access EOF actions. */",
        "Line" : 1225,
        "CharPositionInLine" : 11
      },
      "75" : {
        "Text" : "/* beginning of action switch */",
        "Line" : 1228,
        "CharPositionInLine" : 3
      },
      "76" : {
        "Text" : "/* must back up */",
        "Line" : 1229,
        "CharPositionInLine" : 11
      },
      "77" : {
        "Text" : "/* undo the effects of YY_DO_BEFORE_ACTION */",
        "Line" : 1230,
        "CharPositionInLine" : 3
      },
      "78" : {
        "Text" : "/* FIX: ???\n                           This rule is here because otherwise recursive SMARTS queries like:\n\t                   [$(C(=O)[O,N])] lex improperly (no ATOM_CLOSE token is returned).\n \t\t\t   I am not 100% sure that the approach we're using here will work\n                           all the time, but I'm hoping that any problems caused here in\n                           the lexer will get caught in the parser.\n\t\t\t  */",
        "Line" : 1795,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "/* rule 179 can match eol */",
        "Line" : 1899,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "/* Amount of text matched not including the EOB char. */",
        "Line" : 1925,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "/* Undo the effects of YY_DO_BEFORE_ACTION. */",
        "Line" : 1928,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "/* We're scanning a new file or input source.  It's\n\t\t\t * possible that this happened because the user\n\t\t\t * just pointed yyin at a new source and called\n\t\t\t * yylex().  If so, then we have to assure\n\t\t\t * consistency between YY_CURRENT_BUFFER and our\n\t\t\t * globals.  Here is the right place to do so, because\n\t\t\t * this is the first action (other than possibly a\n\t\t\t * back-up) that will match for the new input source.\n\t\t\t */",
        "Line" : 1934,
        "CharPositionInLine" : 3
      },
      "83" : {
        "Text" : "/* Note that here we test for yy_c_buf_p \"<=\" to the position\n\t\t * of the first EOB in the buffer, since yy_c_buf_p will\n\t\t * already have been incremented past the NUL character\n\t\t * (since all states make transitions on EOB to the\n\t\t * end-of-buffer state).  Contrast this with the test\n\t\t * in input().\n\t\t */",
        "Line" : 1948,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "/* This was really a NUL. */",
        "Line" : 1956,
        "CharPositionInLine" : 5
      },
      "85" : {
        "Text" : "/* Okay, we're now positioned to make the NUL\n\t\t\t * transition.  We couldn't have\n\t\t\t * yy_get_previous_state() go ahead and do it\n\t\t\t * for us because it doesn't know how to deal\n\t\t\t * with the possibility of jamming (and we don't\n\t\t\t * want to build jamming into it because then it\n\t\t\t * will run more slowly).\n\t\t\t */",
        "Line" : 1963,
        "CharPositionInLine" : 3
      },
      "86" : {
        "Text" : "/* Consume the NUL. */",
        "Line" : 1978,
        "CharPositionInLine" : 4
      },
      "87" : {
        "Text" : "/* Note: because we've taken care in\n\t\t\t\t\t * yy_get_next_buffer() to have set up\n\t\t\t\t\t * yytext, we can now set up\n\t\t\t\t\t * yy_c_buf_p so that if some total\n\t\t\t\t\t * hoser (like flex itself) wants to\n\t\t\t\t\t * call the scanner after we return the\n\t\t\t\t\t * YY_NULL, it'll still work - another\n\t\t\t\t\t * YY_NULL will get returned.\n\t\t\t\t\t */",
        "Line" : 1999,
        "CharPositionInLine" : 5
      },
      "88" : {
        "Text" : "/* end of action switch */",
        "Line" : 2048,
        "CharPositionInLine" : 3
      },
      "89" : {
        "Text" : "/* end of scanning one token */",
        "Line" : 2049,
        "CharPositionInLine" : 4
      },
      "90" : {
        "Text" : "/* end of user's declarations */",
        "Line" : 2050,
        "CharPositionInLine" : 3
      },
      "91" : {
        "Text" : "/* end of yylex */",
        "Line" : 2051,
        "CharPositionInLine" : 2
      },
      "92" : {
        "Text" : "/* yy_get_next_buffer - try to read in a new buffer\n *\n * Returns a code representing an action:\n *\tEOB_ACT_LAST_MATCH -\n *\tEOB_ACT_CONTINUE_SCAN - continue scanning from current position\n *\tEOB_ACT_END_OF_FILE - end of file\n */",
        "Line" : 2053,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "/* Don't try to fill the buffer, so this is an EOF. */",
        "Line" : 2073,
        "CharPositionInLine" : 4
      },
      "94" : {
        "Text" : "/* We matched a single character, the EOB, so\n\t\t\t * treat this as a final EOF.\n\t\t\t */",
        "Line" : 2076,
        "CharPositionInLine" : 3
      },
      "95" : {
        "Text" : "/* We matched some text prior to the EOB, first\n\t\t\t * process it.\n\t\t\t */",
        "Line" : 2084,
        "CharPositionInLine" : 3
      },
      "96" : {
        "Text" : "/* Try to read more data. */",
        "Line" : 2091,
        "CharPositionInLine" : 1
      },
      "97" : {
        "Text" : "/* First move last chars to start of buffer. */",
        "Line" : 2093,
        "CharPositionInLine" : 1
      },
      "98" : {
        "Text" : "/* don't do the read, it's not guaranteed to return an EOF,\n\t\t * just force an EOF\n\t\t */",
        "Line" : 2100,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "/* Not enough room in the buffer - grow it. */",
        "Line" : 2111,
        "CharPositionInLine" : 5
      },
      "100" : {
        "Text" : "/* just a shorter name for the current buffer */",
        "Line" : 2113,
        "CharPositionInLine" : 3
      },
      "101" : {
        "Text" : "/* Include room in for 2 EOB chars. */",
        "Line" : 2129,
        "CharPositionInLine" : 5
      },
      "102" : {
        "Text" : "/* Can't grow it, we don't own it. */",
        "Line" : 2134,
        "CharPositionInLine" : 4
      },
      "103" : {
        "Text" : "/* Read in more data. */",
        "Line" : 2151,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "/* Extend the array by 50%, plus the number we really need. */",
        "Line" : 2178,
        "CharPositionInLine" : 2
      },
      "105" : {
        "Text" : "/* \"- 2\" to take care of EOB's */",
        "Line" : 2184,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "/* yy_get_previous_state - get the state just before the EOB char was reached */",
        "Line" : 2197,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "/* yy_try_NUL_trans - try to make a transition on the NUL character\n *\n * synopsis\n *\tnext_state = yy_try_NUL_trans( current_state );\n */",
        "Line" : 2227,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "/* This var may be unused depending upon options. */",
        "Line" : 2235,
        "CharPositionInLine" : 57
      },
      "109" : {
        "Text" : "/* undo effects of setting up yytext */",
        "Line" : 2266,
        "CharPositionInLine" : 1
      },
      "110" : {
        "Text" : "/* need to shift things up to make room */",
        "Line" : 2270,
        "CharPositionInLine" : 4
      },
      "111" : {
        "Text" : "/* +2 for EOB chars. */",
        "Line" : 2271,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "/* yy_c_buf_p now points to the character we want to return.\n\t\t * If this occurs *before* the EOB characters, then it's a\n\t\t * valid NUL; if not, then we've hit the end of the buffer.\n\t\t */",
        "Line" : 2314,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "/* This was really a NUL. */",
        "Line" : 2319,
        "CharPositionInLine" : 3
      },
      "114" : {
        "Text" : "/* need more input */",
        "Line" : 2323,
        "CharPositionInLine" : 5
      },
      "115" : {
        "Text" : "/* This happens because yy_g_n_b()\n\t\t\t\t\t * sees that we've accumulated a\n\t\t\t\t\t * token and flags that we need to\n\t\t\t\t\t * try matching the token before\n\t\t\t\t\t * proceeding.  But for input(),\n\t\t\t\t\t * there's no matching to consider.\n\t\t\t\t\t * So convert the EOB_ACT_LAST_MATCH\n\t\t\t\t\t * to EOB_ACT_END_OF_FILE.\n\t\t\t\t\t */",
        "Line" : 2330,
        "CharPositionInLine" : 5
      },
      "116" : {
        "Text" : "/* Reset buffer status. */",
        "Line" : 2340,
        "CharPositionInLine" : 5
      },
      "117" : {
        "Text" : "/*FALLTHROUGH*/",
        "Line" : 2343,
        "CharPositionInLine" : 5
      },
      "118" : {
        "Text" : "/* cast for 8-bit char's */",
        "Line" : 2366,
        "CharPositionInLine" : 41
      },
      "119" : {
        "Text" : "/* preserve yytext */",
        "Line" : 2367,
        "CharPositionInLine" : 26
      },
      "120" : {
        "Text" : "/** Immediately switch to a different input stream.\n * @param input_file A readable stream.\n * @param yyscanner The scanner object.\n * @note This function does not reset the start condition to @c INITIAL .\n */",
        "Line" : 2374,
        "CharPositionInLine" : 0
      },
      "121" : {
        "Text" : "/** Switch to a different input buffer.\n * @param new_buffer The new input buffer.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2393,
        "CharPositionInLine" : 0
      },
      "122" : {
        "Text" : "/* TODO. We should be able to replace this entire function body\n\t * with\n\t *\t\tyypop_buffer_state();\n\t *\t\tyypush_buffer_state(new_buffer);\n     */",
        "Line" : 2401,
        "CharPositionInLine" : 1
      },
      "123" : {
        "Text" : "/* Flush out information for old buffer. */",
        "Line" : 2412,
        "CharPositionInLine" : 2
      },
      "124" : {
        "Text" : "/* We don't actually know whether we did this switch during\n\t * EOF (yywrap()) processing, but the only time this flag\n\t * is looked at is after yywrap() is called, so it's safe\n\t * to go ahead and always set it.\n\t */",
        "Line" : 2421,
        "CharPositionInLine" : 1
      },
      "125" : {
        "Text" : "/** Allocate and initialize an input buffer state.\n * @param file A readable stream.\n * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.\n * @param yyscanner The scanner object.\n * @return the allocated buffer state.\n */",
        "Line" : 2438,
        "CharPositionInLine" : 0
      },
      "126" : {
        "Text" : "/* yy_ch_buf has to be 2 characters longer than the size given because\n\t * we need to put in 2 end-of-buffer characters.\n\t */",
        "Line" : 2454,
        "CharPositionInLine" : 1
      },
      "127" : {
        "Text" : "/** Destroy the buffer.\n * @param b a buffer created with yy_create_buffer()\n * @param yyscanner The scanner object.\n */",
        "Line" : 2468,
        "CharPositionInLine" : 0
      },
      "128" : {
        "Text" : "/* Not sure if we should pop here. */",
        "Line" : 2479,
        "CharPositionInLine" : 31
      },
      "129" : {
        "Text" : "/* Initializes or reinitializes a buffer.\n * This function is sometimes called more than once on the same buffer,\n * such as during a yyrestart() or at EOF.\n */",
        "Line" : 2488,
        "CharPositionInLine" : 0
      },
      "130" : {
        "Text" : "/* If b is the current buffer, then yy_init_buffer was _probably_\n     * called from yyrestart() or through yy_get_next_buffer.\n     * In that case, we don't want to reset the lineno or column.\n     */",
        "Line" : 2503,
        "CharPositionInLine" : 4
      },
      "131" : {
        "Text" : "/** Discard all buffered characters. On the next scan, YY_INPUT will be called.\n * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2517,
        "CharPositionInLine" : 0
      },
      "132" : {
        "Text" : "/* We always need two end-of-buffer characters.  The first causes\n\t * a transition to the end-of-buffer state.  The second causes\n\t * a jam in that state.\n\t */",
        "Line" : 2529,
        "CharPositionInLine" : 1
      },
      "133" : {
        "Text" : "/** Pushes the new state onto the stack. The new state becomes\n *  the current state. This function will allocate the stack\n *  if necessary.\n *  @param new_buffer The new state.\n *  @param yyscanner The scanner object.\n */",
        "Line" : 2545,
        "CharPositionInLine" : 0
      },
      "134" : {
        "Text" : "/* This block is copied from yy_switch_to_buffer. */",
        "Line" : 2559,
        "CharPositionInLine" : 1
      },
      "135" : {
        "Text" : "/* Flush out information for old buffer. */",
        "Line" : 2562,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "/* Only push if top exists. Otherwise, replace top. */",
        "Line" : 2568,
        "CharPositionInLine" : 1
      },
      "137" : {
        "Text" : "/* copied from yy_switch_to_buffer. */",
        "Line" : 2573,
        "CharPositionInLine" : 1
      },
      "138" : {
        "Text" : "/** Removes and deletes the top of the stack, if present.\n *  The next element becomes the new top.\n *  @param yyscanner The scanner object.\n */",
        "Line" : 2578,
        "CharPositionInLine" : 0
      },
      "139" : {
        "Text" : "/* Allocates the stack if it does not exist.\n *  Guarantees space for at least one push.\n */",
        "Line" : 2599,
        "CharPositionInLine" : 0
      },
      "140" : {
        "Text" : "/* First allocation is just for 2 elements, since we don't know if this\n\t\t * scanner will even need a stack. We use 2 instead of 1 to avoid an\n\t\t * immediate realloc on the next call.\n         */",
        "Line" : 2609,
        "CharPositionInLine" : 2
      },
      "141" : {
        "Text" : "/* After all that talk, this was set to 1 anyways... */",
        "Line" : 2613,
        "CharPositionInLine" : 24
      },
      "142" : {
        "Text" : "/* Increase the buffer to prepare for a possible push. */",
        "Line" : 2629,
        "CharPositionInLine" : 2
      },
      "143" : {
        "Text" : "/* arbitrary grow size */",
        "Line" : 2630,
        "CharPositionInLine" : 26
      },
      "144" : {
        "Text" : "/* zero only the new slots.*/",
        "Line" : 2640,
        "CharPositionInLine" : 2
      },
      "145" : {
        "Text" : "/** Setup the input buffer state to scan directly from a user-specified character buffer.\n * @param base the character buffer\n * @param size the size in bytes of the character buffer\n * @param yyscanner The scanner object.\n * @return the newly allocated buffer state object.\n */",
        "Line" : 2646,
        "CharPositionInLine" : 0
      },
      "146" : {
        "Text" : "/* They forgot to leave room for the EOB's. */",
        "Line" : 2659,
        "CharPositionInLine" : 2
      },
      "147" : {
        "Text" : "/* \"- 2\" to take care of EOB's */",
        "Line" : 2666,
        "CharPositionInLine" : 36
      },
      "148" : {
        "Text" : "/** Setup the input buffer state to scan a string. The next call to yylex() will\n * scan from a @e copy of @a str.\n * @param yystr a NUL-terminated string to scan\n * @param yyscanner The scanner object.\n * @return the newly allocated buffer state object.\n * @note If you want to scan bytes that may contain NUL values, then use\n *       yy_scan_bytes() instead.\n */",
        "Line" : 2681,
        "CharPositionInLine" : 0
      },
      "149" : {
        "Text" : "/** Setup the input buffer state to scan the given bytes. The next call to yylex() will\n * scan from a @e copy of @a bytes.\n * @param yybytes the byte buffer to scan\n * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.\n * @param yyscanner The scanner object.\n * @return the newly allocated buffer state object.\n */",
        "Line" : 2695,
        "CharPositionInLine" : 0
      },
      "150" : {
        "Text" : "/* Get memory for full buffer, including space for trailing EOB's. */",
        "Line" : 2709,
        "CharPositionInLine" : 1
      },
      "151" : {
        "Text" : "/* It's okay to grow etc. this buffer, and we should throw it\n\t * away when we're done.\n\t */",
        "Line" : 2724,
        "CharPositionInLine" : 1
      },
      "152" : {
        "Text" : "/* Redefine yyless() so it works in section 3 code. */",
        "Line" : 2785,
        "CharPositionInLine" : 0
      },
      "153" : {
        "Text" : "/* Accessor  methods (get/set functions) to struct members. */",
        "Line" : 2802,
        "CharPositionInLine" : 0
      },
      "154" : {
        "Text" : "/** Get the user-defined data for this scanner.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2804,
        "CharPositionInLine" : 0
      },
      "155" : {
        "Text" : "/** Get the current line number.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2813,
        "CharPositionInLine" : 0
      },
      "156" : {
        "Text" : "/** Get the current column number.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2826,
        "CharPositionInLine" : 0
      },
      "157" : {
        "Text" : "/** Get the input stream.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2839,
        "CharPositionInLine" : 0
      },
      "158" : {
        "Text" : "/** Get the output stream.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2848,
        "CharPositionInLine" : 0
      },
      "159" : {
        "Text" : "/** Get the length of the current token.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2857,
        "CharPositionInLine" : 0
      },
      "160" : {
        "Text" : "/** Get the current token.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2866,
        "CharPositionInLine" : 0
      },
      "161" : {
        "Text" : "/** Set the user-defined data. This data is never touched by the scanner.\n * @param user_defined The data to be associated with this scanner.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2876,
        "CharPositionInLine" : 0
      },
      "162" : {
        "Text" : "/** Set the current line number.\n * @param _line_number line number\n * @param yyscanner The scanner object.\n */",
        "Line" : 2886,
        "CharPositionInLine" : 0
      },
      "163" : {
        "Text" : "/* lineno is only valid if an input buffer exists. */",
        "Line" : 2894,
        "CharPositionInLine" : 8
      },
      "164" : {
        "Text" : "/** Set the current column.\n * @param _column_no column number\n * @param yyscanner The scanner object.\n */",
        "Line" : 2901,
        "CharPositionInLine" : 0
      },
      "165" : {
        "Text" : "/* column is only valid if an input buffer exists. */",
        "Line" : 2909,
        "CharPositionInLine" : 8
      },
      "166" : {
        "Text" : "/** Set the input stream. This does not discard the current\n * input buffer.\n * @param _in_str A readable stream.\n * @param yyscanner The scanner object.\n * @see yy_switch_to_buffer\n */",
        "Line" : 2916,
        "CharPositionInLine" : 0
      },
      "167" : {
        "Text" : "/* Accessor methods for yylval and yylloc */",
        "Line" : 2946,
        "CharPositionInLine" : 0
      },
      "168" : {
        "Text" : "/* User-visible API */",
        "Line" : 2960,
        "CharPositionInLine" : 0
      },
      "169" : {
        "Text" : "/* yylex_init is special because it creates the scanner itself, so it is\n * the ONLY reentrant function that doesn't take the scanner as the last argument.\n * That's why we explicitly handle the declaration, instead of using our macros.\n */",
        "Line" : 2962,
        "CharPositionInLine" : 0
      },
      "170" : {
        "Text" : "/* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */",
        "Line" : 2980,
        "CharPositionInLine" : 4
      },
      "171" : {
        "Text" : "/* yylex_init_extra has the same functionality as yylex_init, but follows the\n * convention of taking the scanner as the last argument. Note however, that\n * this is a *pointer* to a scanner, as it will be allocated by this call (and\n * is the reason, too, why this function also must handle its own declaration).\n * The user defined value in the first argument will be available to yyalloc in\n * the yyextra field.\n */",
        "Line" : 2986,
        "CharPositionInLine" : 0
      },
      "172" : {
        "Text" : "/* By setting to 0xAA, we expose bugs in\n    yy_init_globals. Leave at 0x00 for releases. */",
        "Line" : 3011,
        "CharPositionInLine" : 4
      },
      "173" : {
        "Text" : "/* Initialization is the same as for the non-reentrant scanner.\n     * This function is called from yylex_destroy(), so don't allocate here.\n     */",
        "Line" : 3023,
        "CharPositionInLine" : 4
      },
      "174" : {
        "Text" : "/* Defined in main.c */",
        "Line" : 3038,
        "CharPositionInLine" : 0
      },
      "175" : {
        "Text" : "/* For future reference: Set errno on error, since we are called by\n     * yylex_init()\n     */",
        "Line" : 3047,
        "CharPositionInLine" : 4
      },
      "176" : {
        "Text" : "/* yylex_destroy is for both reentrant and non-reentrant scanners. */",
        "Line" : 3053,
        "CharPositionInLine" : 0
      },
      "177" : {
        "Text" : "/* Pop the buffer stack, destroying each element. */",
        "Line" : 3058,
        "CharPositionInLine" : 4
      },
      "178" : {
        "Text" : "/* Destroy the stack itself. */",
        "Line" : 3065,
        "CharPositionInLine" : 1
      },
      "179" : {
        "Text" : "/* Destroy the start condition stack. */",
        "Line" : 3069,
        "CharPositionInLine" : 4
      },
      "180" : {
        "Text" : "/* Reset the globals. This is important in a non-reentrant scanner so the next time\n     * yylex() is called, initialization will occur. */",
        "Line" : 3073,
        "CharPositionInLine" : 4
      },
      "181" : {
        "Text" : "/* Destroy the main struct (reentrant only). */",
        "Line" : 3077,
        "CharPositionInLine" : 4
      },
      "182" : {
        "Text" : "/*\n * Internal utility routines.\n */",
        "Line" : 3083,
        "CharPositionInLine" : 0
      },
      "183" : {
        "Text" : "/* The cast to (char *) in the following accommodates both\n\t * implementations that use char* generic pointers, and those\n\t * that use void* generic pointers.  It works with the latter\n\t * because both ANSI C and C++ allow castless assignment from\n\t * any pointer type to void*, and deal with argument conversions\n\t * as though doing an assignment.\n\t */",
        "Line" : 3122,
        "CharPositionInLine" : 1
      },
      "184" : {
        "Text" : "/* see yyrealloc() for (char *) cast */",
        "Line" : 3136,
        "CharPositionInLine" : 23
      },
      "CommentCount" : 185
    },
    "Code/GraphMol/SmilesParse/lex.yysmiles.cpp.cmake" : {
      "ObjectId" : "81c41ec49fede9769fed0bfdab798f5053d142a9",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* A lexical scanner generated by flex */",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* First, we deal with  platform-specific or compiler-specific issues. */",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* begin standard C headers. */",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* end standard C headers. */",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* flex integer type definitions */",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,\n * if you want the limit (max/min) macros for int types. \n */",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Limits of integral types. */",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* begin standard C++ headers. */",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* TODO: this is always defined, so inline it */",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Returned upon end-of-file. */",
        "Line" : 328,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Promotes a possibly negative, possibly signed char to an\n *   integer in range [0..255] for use as an array index.\n */",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* An opaque pointer. */",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* For convenience, these vars (plus the bison vars far below)\n   are macros in the reentrant scanner. */",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Enter a start condition.  This macro really ought to take a parameter,\n * but we do it the disgusting crufty way forced on us by the ()-less\n * definition of BEGIN.\n */",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Translate the current start state into a value that can be later handed\n * to BEGIN to return to the state.  The YYSTATE alias is for lex\n * compatibility.\n */",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Action number for EOF rule of a given start state. */",
        "Line" : 364,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Special action meaning \"start processing a new file\". */",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Size of default input buffer. */",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* On IA-64, the buffer size is 16k, not 8k.\n * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.\n * Ditto for the __ia64__ case accordingly.\n */",
        "Line" : 373,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* The state buf must be large enough to hold one state per character in the main buffer.\n */",
        "Line" : 383,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Return all but the first \"n\" matched characters back to the input stream. */",
        "Line" : 404,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* input buffer */",
        "Line" : 425,
        "CharPositionInLine" : 19
      },
      "23" : {
        "Text" : "/* current position in input buffer */",
        "Line" : 426,
        "CharPositionInLine" : 20
      },
      "24" : {
        "Text" : "/* Size of input buffer in bytes, not including room for EOB\n\t * characters.\n\t */",
        "Line" : 428,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "/* Number of characters read into yy_ch_buf, not including EOB\n\t * characters.\n\t */",
        "Line" : 433,
        "CharPositionInLine" : 1
      },
      "26" : {
        "Text" : "/* Whether we \"own\" the buffer - i.e., we know we created it,\n\t * and can realloc() it to grow it, and should free() it to\n\t * delete it.\n\t */",
        "Line" : 438,
        "CharPositionInLine" : 1
      },
      "27" : {
        "Text" : "/* Whether this is an \"interactive\" input source; if so, and\n\t * if we're using stdio for input, then we want to use getc()\n\t * instead of fread(), to make sure we stop fetching input after\n\t * each newline.\n\t */",
        "Line" : 444,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "/* Whether we're considered to be at the beginning of a line.\n\t * If so, '^' rules will be active on the next match, otherwise\n\t * not.\n\t */",
        "Line" : 451,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "/**< The line count. */\n/**< The column count. */",
        "Line" : 457,
        "CharPositionInLine" : 22
      },
      "30" : {
        "Text" : "/* Whether to try to fill the input buffer when we reach the\n\t * end of it.\n\t */",
        "Line" : 460,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "/* When an EOF's been seen but there's still some text to process\n\t * then we mark the buffer as YY_EOF_PENDING, to indicate that we\n\t * shouldn't try reading from the input source any more.  We might\n\t * still have a bunch of tokens to match, though, because of\n\t * possible backing-up.\n\t *\n\t * When we actually see the EOF, we change the status to \"new\"\n\t * (via yyrestart()), so that the user can continue scanning by\n\t * just pointing yyin at a new input file.\n\t */",
        "Line" : 469,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "/* We provide macros for accessing buffer states in case in the\n * future we want to put the buffer states in a more general\n * \"scanner state\".\n *\n * Returns the top of the stack, or NULL.\n */",
        "Line" : 484,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "/* Same as previous macro, but useful when we know that the buffer stack is not\n * NULL or when we need an lvalue. For internal use only.\n */",
        "Line" : 493,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "/* Begin user sect3 */",
        "Line" : 540,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "/* Done after the current pattern has been matched and before the\n * corresponding action - sets up yytext.\n */",
        "Line" : 555,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "/* This struct is not used in this scanner,\n   but its presence is necessary. */",
        "Line" : 566,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "/* The intent behind this definition is that it'll catch\n * any uses of REJECT which flex missed.\n */",
        "Line" : 800,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "// $Id$\n//\n//  Copyright (C) 2001-2010 Randal Henne, Greg Landrum and Rational Discovery LLC\n//\n//   @@ All Rights Reserved  @@\n//",
        "Line" : 810,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "// -std=c++11 turns off recent posix features",
        "Line" : 818,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "//  YY_BUFFER_STATE buff=yysmiles__scan_string(text.c_str()+pos,yyscanner);",
        "Line" : 849,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "// Faster implementation of yysmiles__scan_string that handles trimming",
        "Line" : 850,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "/* Get memory for full buffer, including space for trailing EOB's. */",
        "Line" : 855,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "// ltrim",
        "Line" : 861,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "/* It's okay to grow etc. this buffer, and we should throw it\n   * away when we're done.\n   */",
        "Line" : 881,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "/* Special case for \"unistd.h\", since it is non-ANSI. We include it way\n * down here because we want the user's section 1 to have been scanned first.\n * The user has a chance to override it with an option.\n */",
        "Line" : 899,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "/* Holds the entire state of the reentrant scanner. */",
        "Line" : 910,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "/* User-defined. Not touched by flex. */",
        "Line" : 914,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "/* The rest are the same as the globals declared in the non-reentrant scanner. */",
        "Line" : 917,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "/**< index of top of stack. */\n/**< capacity of stack. */",
        "Line" : 919,
        "CharPositionInLine" : 32
      },
      "50" : {
        "Text" : "/**< Stack as an array. */",
        "Line" : 921,
        "CharPositionInLine" : 39
      },
      "51" : {
        "Text" : "/* end struct yyguts_t */",
        "Line" : 944,
        "CharPositionInLine" : 7
      },
      "52" : {
        "Text" : "/* This must go here because YYSTYPE and YYLTYPE are included\n     * from bison output in section 1.*/",
        "Line" : 948,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "/* Accessor methods to globals.\n   These are made visible to non-reentrant scanners for convenience. */",
        "Line" : 956,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "/* Macros after this point can all be overridden by user definitions in\n * section 1.\n */",
        "Line" : 993,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "/* Amount of stuff to slurp up with each read. */",
        "Line" : 1028,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "/* On IA-64, the buffer size is 16k, not 8k */",
        "Line" : 1031,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "/* Copy whatever the last rule matched to the standard output. */",
        "Line" : 1038,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "/* This used to be an fputs(), but since the string might contain NUL's,\n * we now use fwrite().\n */",
        "Line" : 1040,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "/* Gets input and stuffs it into \"buf\".  number of characters read, or YY_NULL,\n * is returned in \"result\".\n */",
        "Line" : 1046,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "/* No semi-colon after return; correct usage is to write \"yyterminate();\" -\n * we don't want an extra ';' after the \"return\" because that will cause\n * some compilers to complain about unreachable statements.\n */",
        "Line" : 1082,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "/* Number of entries by which start-condition stack grows. */",
        "Line" : 1090,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "/* Report a fatal error. */",
        "Line" : 1095,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "/* end tables serialization structures and prototypes */",
        "Line" : 1100,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "/* Default declaration of generated scanner - a define so the user can\n * easily add parameters.\n */",
        "Line" : 1102,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "/* Code executed at the beginning of each rule, after yytext and yyleng\n * have been set up.\n */",
        "Line" : 1115,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "/* Code executed at the end of each rule. */",
        "Line" : 1122,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "/** The main scanner function which does all the work.\n */",
        "Line" : 1130,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "/* first start state */",
        "Line" : 1150,
        "CharPositionInLine" : 22
      },
      "69" : {
        "Text" : "/*CONSTCOND*/ /* loops until end-of-file is reached */",
        "Line" : 1183,
        "CharPositionInLine" : 9
      },
      "70" : {
        "Text" : "/* Support of yytext. */",
        "Line" : 1187,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "/* yy_bp points to the position in yy_ch_buf of the start of\n\t\t * the current run.\n\t\t */",
        "Line" : 1190,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "/* have to back up */",
        "Line" : 1219,
        "CharPositionInLine" : 5
      },
      "73" : {
        "Text" : "/* This label is used only to access EOF actions. */",
        "Line" : 1227,
        "CharPositionInLine" : 11
      },
      "74" : {
        "Text" : "/* beginning of action switch */",
        "Line" : 1230,
        "CharPositionInLine" : 3
      },
      "75" : {
        "Text" : "/* must back up */",
        "Line" : 1231,
        "CharPositionInLine" : 11
      },
      "76" : {
        "Text" : "/* undo the effects of YY_DO_BEFORE_ACTION */",
        "Line" : 1232,
        "CharPositionInLine" : 3
      },
      "77" : {
        "Text" : "// must be ORGANIC_ATOM_TOKEN because\n// we aren't in square brackets:",
        "Line" : 1979,
        "CharPositionInLine" : 32
      },
      "78" : {
        "Text" : "// The next block is a workaround for a pathlogy in the SMILES produced\n// by some Biovia tools",
        "Line" : 1995,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "/* rule 180 can match eol */",
        "Line" : 2178,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "/* Amount of text matched not including the EOB char. */",
        "Line" : 2202,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "/* Undo the effects of YY_DO_BEFORE_ACTION. */",
        "Line" : 2205,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "/* We're scanning a new file or input source.  It's\n\t\t\t * possible that this happened because the user\n\t\t\t * just pointed yyin at a new source and called\n\t\t\t * yylex().  If so, then we have to assure\n\t\t\t * consistency between YY_CURRENT_BUFFER and our\n\t\t\t * globals.  Here is the right place to do so, because\n\t\t\t * this is the first action (other than possibly a\n\t\t\t * back-up) that will match for the new input source.\n\t\t\t */",
        "Line" : 2211,
        "CharPositionInLine" : 3
      },
      "83" : {
        "Text" : "/* Note that here we test for yy_c_buf_p \"<=\" to the position\n\t\t * of the first EOB in the buffer, since yy_c_buf_p will\n\t\t * already have been incremented past the NUL character\n\t\t * (since all states make transitions on EOB to the\n\t\t * end-of-buffer state).  Contrast this with the test\n\t\t * in input().\n\t\t */",
        "Line" : 2225,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "/* This was really a NUL. */",
        "Line" : 2233,
        "CharPositionInLine" : 5
      },
      "85" : {
        "Text" : "/* Okay, we're now positioned to make the NUL\n\t\t\t * transition.  We couldn't have\n\t\t\t * yy_get_previous_state() go ahead and do it\n\t\t\t * for us because it doesn't know how to deal\n\t\t\t * with the possibility of jamming (and we don't\n\t\t\t * want to build jamming into it because then it\n\t\t\t * will run more slowly).\n\t\t\t */",
        "Line" : 2240,
        "CharPositionInLine" : 3
      },
      "86" : {
        "Text" : "/* Consume the NUL. */",
        "Line" : 2255,
        "CharPositionInLine" : 4
      },
      "87" : {
        "Text" : "/* Note: because we've taken care in\n\t\t\t\t\t * yy_get_next_buffer() to have set up\n\t\t\t\t\t * yytext, we can now set up\n\t\t\t\t\t * yy_c_buf_p so that if some total\n\t\t\t\t\t * hoser (like flex itself) wants to\n\t\t\t\t\t * call the scanner after we return the\n\t\t\t\t\t * YY_NULL, it'll still work - another\n\t\t\t\t\t * YY_NULL will get returned.\n\t\t\t\t\t */",
        "Line" : 2276,
        "CharPositionInLine" : 5
      },
      "88" : {
        "Text" : "/* end of action switch */",
        "Line" : 2325,
        "CharPositionInLine" : 3
      },
      "89" : {
        "Text" : "/* end of scanning one token */",
        "Line" : 2326,
        "CharPositionInLine" : 4
      },
      "90" : {
        "Text" : "/* end of user's declarations */",
        "Line" : 2327,
        "CharPositionInLine" : 3
      },
      "91" : {
        "Text" : "/* end of yylex */",
        "Line" : 2328,
        "CharPositionInLine" : 2
      },
      "92" : {
        "Text" : "/* yy_get_next_buffer - try to read in a new buffer\n *\n * Returns a code representing an action:\n *\tEOB_ACT_LAST_MATCH -\n *\tEOB_ACT_CONTINUE_SCAN - continue scanning from current position\n *\tEOB_ACT_END_OF_FILE - end of file\n */",
        "Line" : 2330,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "/* Don't try to fill the buffer, so this is an EOF. */",
        "Line" : 2350,
        "CharPositionInLine" : 4
      },
      "94" : {
        "Text" : "/* We matched a single character, the EOB, so\n\t\t\t * treat this as a final EOF.\n\t\t\t */",
        "Line" : 2353,
        "CharPositionInLine" : 3
      },
      "95" : {
        "Text" : "/* We matched some text prior to the EOB, first\n\t\t\t * process it.\n\t\t\t */",
        "Line" : 2361,
        "CharPositionInLine" : 3
      },
      "96" : {
        "Text" : "/* Try to read more data. */",
        "Line" : 2368,
        "CharPositionInLine" : 1
      },
      "97" : {
        "Text" : "/* First move last chars to start of buffer. */",
        "Line" : 2370,
        "CharPositionInLine" : 1
      },
      "98" : {
        "Text" : "/* don't do the read, it's not guaranteed to return an EOF,\n\t\t * just force an EOF\n\t\t */",
        "Line" : 2377,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "/* Not enough room in the buffer - grow it. */",
        "Line" : 2388,
        "CharPositionInLine" : 5
      },
      "100" : {
        "Text" : "/* just a shorter name for the current buffer */",
        "Line" : 2390,
        "CharPositionInLine" : 3
      },
      "101" : {
        "Text" : "/* Include room in for 2 EOB chars. */",
        "Line" : 2406,
        "CharPositionInLine" : 5
      },
      "102" : {
        "Text" : "/* Can't grow it, we don't own it. */",
        "Line" : 2411,
        "CharPositionInLine" : 4
      },
      "103" : {
        "Text" : "/* Read in more data. */",
        "Line" : 2428,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "/* Extend the array by 50%, plus the number we really need. */",
        "Line" : 2455,
        "CharPositionInLine" : 2
      },
      "105" : {
        "Text" : "/* \"- 2\" to take care of EOB's */",
        "Line" : 2461,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "/* yy_get_previous_state - get the state just before the EOB char was reached */",
        "Line" : 2474,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "/* yy_try_NUL_trans - try to make a transition on the NUL character\n *\n * synopsis\n *\tnext_state = yy_try_NUL_trans( current_state );\n */",
        "Line" : 2504,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "/* This var may be unused depending upon options. */",
        "Line" : 2512,
        "CharPositionInLine" : 57
      },
      "109" : {
        "Text" : "/* undo effects of setting up yytext */",
        "Line" : 2543,
        "CharPositionInLine" : 1
      },
      "110" : {
        "Text" : "/* need to shift things up to make room */",
        "Line" : 2547,
        "CharPositionInLine" : 4
      },
      "111" : {
        "Text" : "/* +2 for EOB chars. */",
        "Line" : 2548,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "/* yy_c_buf_p now points to the character we want to return.\n\t\t * If this occurs *before* the EOB characters, then it's a\n\t\t * valid NUL; if not, then we've hit the end of the buffer.\n\t\t */",
        "Line" : 2591,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "/* This was really a NUL. */",
        "Line" : 2596,
        "CharPositionInLine" : 3
      },
      "114" : {
        "Text" : "/* need more input */",
        "Line" : 2600,
        "CharPositionInLine" : 5
      },
      "115" : {
        "Text" : "/* This happens because yy_g_n_b()\n\t\t\t\t\t * sees that we've accumulated a\n\t\t\t\t\t * token and flags that we need to\n\t\t\t\t\t * try matching the token before\n\t\t\t\t\t * proceeding.  But for input(),\n\t\t\t\t\t * there's no matching to consider.\n\t\t\t\t\t * So convert the EOB_ACT_LAST_MATCH\n\t\t\t\t\t * to EOB_ACT_END_OF_FILE.\n\t\t\t\t\t */",
        "Line" : 2607,
        "CharPositionInLine" : 5
      },
      "116" : {
        "Text" : "/* Reset buffer status. */",
        "Line" : 2617,
        "CharPositionInLine" : 5
      },
      "117" : {
        "Text" : "/*FALLTHROUGH*/",
        "Line" : 2620,
        "CharPositionInLine" : 5
      },
      "118" : {
        "Text" : "/* cast for 8-bit char's */",
        "Line" : 2643,
        "CharPositionInLine" : 41
      },
      "119" : {
        "Text" : "/* preserve yytext */",
        "Line" : 2644,
        "CharPositionInLine" : 26
      },
      "120" : {
        "Text" : "/** Immediately switch to a different input stream.\n * @param input_file A readable stream.\n * @param yyscanner The scanner object.\n * @note This function does not reset the start condition to @c INITIAL .\n */",
        "Line" : 2651,
        "CharPositionInLine" : 0
      },
      "121" : {
        "Text" : "/** Switch to a different input buffer.\n * @param new_buffer The new input buffer.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2670,
        "CharPositionInLine" : 0
      },
      "122" : {
        "Text" : "/* TODO. We should be able to replace this entire function body\n\t * with\n\t *\t\tyypop_buffer_state();\n\t *\t\tyypush_buffer_state(new_buffer);\n     */",
        "Line" : 2678,
        "CharPositionInLine" : 1
      },
      "123" : {
        "Text" : "/* Flush out information for old buffer. */",
        "Line" : 2689,
        "CharPositionInLine" : 2
      },
      "124" : {
        "Text" : "/* We don't actually know whether we did this switch during\n\t * EOF (yywrap()) processing, but the only time this flag\n\t * is looked at is after yywrap() is called, so it's safe\n\t * to go ahead and always set it.\n\t */",
        "Line" : 2698,
        "CharPositionInLine" : 1
      },
      "125" : {
        "Text" : "/** Allocate and initialize an input buffer state.\n * @param file A readable stream.\n * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.\n * @param yyscanner The scanner object.\n * @return the allocated buffer state.\n */",
        "Line" : 2715,
        "CharPositionInLine" : 0
      },
      "126" : {
        "Text" : "/* yy_ch_buf has to be 2 characters longer than the size given because\n\t * we need to put in 2 end-of-buffer characters.\n\t */",
        "Line" : 2731,
        "CharPositionInLine" : 1
      },
      "127" : {
        "Text" : "/** Destroy the buffer.\n * @param b a buffer created with yy_create_buffer()\n * @param yyscanner The scanner object.\n */",
        "Line" : 2745,
        "CharPositionInLine" : 0
      },
      "128" : {
        "Text" : "/* Not sure if we should pop here. */",
        "Line" : 2756,
        "CharPositionInLine" : 31
      },
      "129" : {
        "Text" : "/* Initializes or reinitializes a buffer.\n * This function is sometimes called more than once on the same buffer,\n * such as during a yyrestart() or at EOF.\n */",
        "Line" : 2765,
        "CharPositionInLine" : 0
      },
      "130" : {
        "Text" : "/* If b is the current buffer, then yy_init_buffer was _probably_\n     * called from yyrestart() or through yy_get_next_buffer.\n     * In that case, we don't want to reset the lineno or column.\n     */",
        "Line" : 2780,
        "CharPositionInLine" : 4
      },
      "131" : {
        "Text" : "/** Discard all buffered characters. On the next scan, YY_INPUT will be called.\n * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.\n * @param yyscanner The scanner object.\n */",
        "Line" : 2794,
        "CharPositionInLine" : 0
      },
      "132" : {
        "Text" : "/* We always need two end-of-buffer characters.  The first causes\n\t * a transition to the end-of-buffer state.  The second causes\n\t * a jam in that state.\n\t */",
        "Line" : 2806,
        "CharPositionInLine" : 1
      },
      "133" : {
        "Text" : "/** Pushes the new state onto the stack. The new state becomes\n *  the current state. This function will allocate the stack\n *  if necessary.\n *  @param new_buffer The new state.\n *  @param yyscanner The scanner object.\n */",
        "Line" : 2822,
        "CharPositionInLine" : 0
      },
      "134" : {
        "Text" : "/* This block is copied from yy_switch_to_buffer. */",
        "Line" : 2836,
        "CharPositionInLine" : 1
      },
      "135" : {
        "Text" : "/* Flush out information for old buffer. */",
        "Line" : 2839,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "/* Only push if top exists. Otherwise, replace top. */",
        "Line" : 2845,
        "CharPositionInLine" : 1
      },
      "137" : {
        "Text" : "/* copied from yy_switch_to_buffer. */",
        "Line" : 2850,
        "CharPositionInLine" : 1
      },
      "138" : {
        "Text" : "/** Removes and deletes the top of the stack, if present.\n *  The next element becomes the new top.\n *  @param yyscanner The scanner object.\n */",
        "Line" : 2855,
        "CharPositionInLine" : 0
      },
      "139" : {
        "Text" : "/* Allocates the stack if it does not exist.\n *  Guarantees space for at least one push.\n */",
        "Line" : 2876,
        "CharPositionInLine" : 0
      },
      "140" : {
        "Text" : "/* First allocation is just for 2 elements, since we don't know if this\n\t\t * scanner will even need a stack. We use 2 instead of 1 to avoid an\n\t\t * immediate realloc on the next call.\n         */",
        "Line" : 2886,
        "CharPositionInLine" : 2
      },
      "141" : {
        "Text" : "/* After all that talk, this was set to 1 anyways... */",
        "Line" : 2890,
        "CharPositionInLine" : 24
      },
      "142" : {
        "Text" : "/* Increase the buffer to prepare for a possible push. */",
        "Line" : 2906,
        "CharPositionInLine" : 2
      },
      "143" : {
        "Text" : "/* arbitrary grow size */",
        "Line" : 2907,
        "CharPositionInLine" : 26
      },
      "144" : {
        "Text" : "/* zero only the new slots.*/",
        "Line" : 2917,
        "CharPositionInLine" : 2
      },
      "145" : {
        "Text" : "/** Setup the input buffer state to scan directly from a user-specified character buffer.\n * @param base the character buffer\n * @param size the size in bytes of the character buffer\n * @param yyscanner The scanner object.\n * @return the newly allocated buffer state object.\n */",
        "Line" : 2923,
        "CharPositionInLine" : 0
      },
      "146" : {
        "Text" : "/* They forgot to leave room for the EOB's. */",
        "Line" : 2936,
        "CharPositionInLine" : 2
      },
      "147" : {
        "Text" : "/* \"- 2\" to take care of EOB's */",
        "Line" : 2943,
        "CharPositionInLine" : 36
      },
      "148" : {
        "Text" : "/** Setup the input buffer state to scan a string. The next call to yylex() will\n * scan from a @e copy of @a str.\n * @param yystr a NUL-terminated string to scan\n * @param yyscanner The scanner object.\n * @return the newly allocated buffer state object.\n * @note If you want to scan bytes that may contain NUL values, then use\n *       yy_scan_bytes() instead.\n */",
        "Line" : 2958,
        "CharPositionInLine" : 0
      },
      "149" : {
        "Text" : "/** Setup the input buffer state to scan the given bytes. The next call to yylex() will\n * scan from a @e copy of @a bytes.\n * @param yybytes the byte buffer to scan\n * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.\n * @param yyscanner The scanner object.\n * @return the newly allocated buffer state object.\n */",
        "Line" : 2972,
        "CharPositionInLine" : 0
      },
      "150" : {
        "Text" : "/* Get memory for full buffer, including space for trailing EOB's. */",
        "Line" : 2986,
        "CharPositionInLine" : 1
      },
      "151" : {
        "Text" : "/* It's okay to grow etc. this buffer, and we should throw it\n\t * away when we're done.\n\t */",
        "Line" : 3001,
        "CharPositionInLine" : 1
      },
      "152" : {
        "Text" : "/* Redefine yyless() so it works in section 3 code. */",
        "Line" : 3021,
        "CharPositionInLine" : 0
      },
      "153" : {
        "Text" : "/* Accessor  methods (get/set functions) to struct members. */",
        "Line" : 3038,
        "CharPositionInLine" : 0
      },
      "154" : {
        "Text" : "/** Get the user-defined data for this scanner.\n * @param yyscanner The scanner object.\n */",
        "Line" : 3040,
        "CharPositionInLine" : 0
      },
      "155" : {
        "Text" : "/** Get the current line number.\n * @param yyscanner The scanner object.\n */",
        "Line" : 3049,
        "CharPositionInLine" : 0
      },
      "156" : {
        "Text" : "/** Get the current column number.\n * @param yyscanner The scanner object.\n */",
        "Line" : 3062,
        "CharPositionInLine" : 0
      },
      "157" : {
        "Text" : "/** Get the input stream.\n * @param yyscanner The scanner object.\n */",
        "Line" : 3075,
        "CharPositionInLine" : 0
      },
      "158" : {
        "Text" : "/** Get the output stream.\n * @param yyscanner The scanner object.\n */",
        "Line" : 3084,
        "CharPositionInLine" : 0
      },
      "159" : {
        "Text" : "/** Get the length of the current token.\n * @param yyscanner The scanner object.\n */",
        "Line" : 3093,
        "CharPositionInLine" : 0
      },
      "160" : {
        "Text" : "/** Get the current token.\n * @param yyscanner The scanner object.\n */",
        "Line" : 3102,
        "CharPositionInLine" : 0
      },
      "161" : {
        "Text" : "/** Set the user-defined data. This data is never touched by the scanner.\n * @param user_defined The data to be associated with this scanner.\n * @param yyscanner The scanner object.\n */",
        "Line" : 3112,
        "CharPositionInLine" : 0
      },
      "162" : {
        "Text" : "/** Set the current line number.\n * @param _line_number line number\n * @param yyscanner The scanner object.\n */",
        "Line" : 3122,
        "CharPositionInLine" : 0
      },
      "163" : {
        "Text" : "/* lineno is only valid if an input buffer exists. */",
        "Line" : 3130,
        "CharPositionInLine" : 8
      },
      "164" : {
        "Text" : "/** Set the current column.\n * @param _column_no column number\n * @param yyscanner The scanner object.\n */",
        "Line" : 3137,
        "CharPositionInLine" : 0
      },
      "165" : {
        "Text" : "/* column is only valid if an input buffer exists. */",
        "Line" : 3145,
        "CharPositionInLine" : 8
      },
      "166" : {
        "Text" : "/** Set the input stream. This does not discard the current\n * input buffer.\n * @param _in_str A readable stream.\n * @param yyscanner The scanner object.\n * @see yy_switch_to_buffer\n */",
        "Line" : 3152,
        "CharPositionInLine" : 0
      },
      "167" : {
        "Text" : "/* Accessor methods for yylval and yylloc */",
        "Line" : 3182,
        "CharPositionInLine" : 0
      },
      "168" : {
        "Text" : "/* User-visible API */",
        "Line" : 3196,
        "CharPositionInLine" : 0
      },
      "169" : {
        "Text" : "/* yylex_init is special because it creates the scanner itself, so it is\n * the ONLY reentrant function that doesn't take the scanner as the last argument.\n * That's why we explicitly handle the declaration, instead of using our macros.\n */",
        "Line" : 3198,
        "CharPositionInLine" : 0
      },
      "170" : {
        "Text" : "/* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */",
        "Line" : 3216,
        "CharPositionInLine" : 4
      },
      "171" : {
        "Text" : "/* yylex_init_extra has the same functionality as yylex_init, but follows the\n * convention of taking the scanner as the last argument. Note however, that\n * this is a *pointer* to a scanner, as it will be allocated by this call (and\n * is the reason, too, why this function also must handle its own declaration).\n * The user defined value in the first argument will be available to yyalloc in\n * the yyextra field.\n */",
        "Line" : 3222,
        "CharPositionInLine" : 0
      },
      "172" : {
        "Text" : "/* By setting to 0xAA, we expose bugs in\n    yy_init_globals. Leave at 0x00 for releases. */",
        "Line" : 3247,
        "CharPositionInLine" : 4
      },
      "173" : {
        "Text" : "/* Initialization is the same as for the non-reentrant scanner.\n     * This function is called from yylex_destroy(), so don't allocate here.\n     */",
        "Line" : 3259,
        "CharPositionInLine" : 4
      },
      "174" : {
        "Text" : "/* Defined in main.c */",
        "Line" : 3274,
        "CharPositionInLine" : 0
      },
      "175" : {
        "Text" : "/* For future reference: Set errno on error, since we are called by\n     * yylex_init()\n     */",
        "Line" : 3283,
        "CharPositionInLine" : 4
      },
      "176" : {
        "Text" : "/* yylex_destroy is for both reentrant and non-reentrant scanners. */",
        "Line" : 3289,
        "CharPositionInLine" : 0
      },
      "177" : {
        "Text" : "/* Pop the buffer stack, destroying each element. */",
        "Line" : 3294,
        "CharPositionInLine" : 4
      },
      "178" : {
        "Text" : "/* Destroy the stack itself. */",
        "Line" : 3301,
        "CharPositionInLine" : 1
      },
      "179" : {
        "Text" : "/* Destroy the start condition stack. */",
        "Line" : 3305,
        "CharPositionInLine" : 4
      },
      "180" : {
        "Text" : "/* Reset the globals. This is important in a non-reentrant scanner so the next time\n     * yylex() is called, initialization will occur. */",
        "Line" : 3309,
        "CharPositionInLine" : 4
      },
      "181" : {
        "Text" : "/* Destroy the main struct (reentrant only). */",
        "Line" : 3313,
        "CharPositionInLine" : 4
      },
      "182" : {
        "Text" : "/*\n * Internal utility routines.\n */",
        "Line" : 3319,
        "CharPositionInLine" : 0
      },
      "183" : {
        "Text" : "/* The cast to (char *) in the following accommodates both\n\t * implementations that use char* generic pointers, and those\n\t * that use void* generic pointers.  It works with the latter\n\t * because both ANSI C and C++ allow castless assignment from\n\t * any pointer type to void*, and deal with argument conversions\n\t * as though doing an assignment.\n\t */",
        "Line" : 3358,
        "CharPositionInLine" : 1
      },
      "184" : {
        "Text" : "/* see yyrealloc() for (char *) cast */",
        "Line" : 3372,
        "CharPositionInLine" : 23
      },
      "CommentCount" : 185
    },
    "Code/GraphMol/SmilesParse/smarts.tab.cpp.cmake" : {
      "ObjectId" : "57da9cf5c468a5d0ebf25a61196ec8744e8357b9",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* A Bison parser, made by GNU Bison 3.1.  */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Bison implementation for Yacc-like parsers in C\n\n   Copyright (C) 1984, 1989-1990, 2000-2015, 2018 Free Software Foundation, Inc.\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* As a special exception, you may create a larger work that contains\n   part or all of the Bison parser skeleton and distribute that work\n   under terms of your choice, so long as that work isn't itself a\n   parser generator using the skeleton or a modified version thereof\n   as a parser skeleton.  Alternatively, if you modify or redistribute\n   the parser skeleton itself, you may (at your option) remove this\n   special exception, which will cause the skeleton and the resulting\n   Bison output files to be licensed under the GNU General Public\n   License without this special exception.\n\n   This special exception was added by the Free Software Foundation in\n   version 2.2 of Bison.  */",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* C LALR(1) parser skeleton written by Richard Stallman, by\n   simplifying the original so-called \"semantic\" parser.  */",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* All symbols defined below should begin with yy or YY, to avoid\n   infringing on user name space.  This should be done even for local\n   variables, as they might otherwise be expanded by user macros.\n   There are some unavoidable exceptions within include files to\n   define necessary library symbols; they are noted \"INFRINGES ON\n   USER NAME SPACE\" below.  */",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Identify Bison output.  */",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Bison version.  */",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Skeleton name.  */",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* Pure parsers.  */",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* Push parsers.  */",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Pull parsers.  */",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Substitute the variable and function names.  */",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Copy the first part of user declarations.  */",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "// $Id$\n//\n//  Copyright (C) 2003-2018 Greg Landrum and Rational Discovery LLC\n//\n//   @@ All Rights Reserved  @@\n//",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "/* Enabling verbose error messages.  */",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* In a future release of Bison, this section will be replaced\n   by #include \"smarts.tab.hpp\".  */",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Debug traces.  */",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Token type.  */",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Value type.  */",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* \"%code provides\" blocks.  */",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Copy the second part of user declarations.  */",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Suppress unused-variable warnings by \"using\" E.  */",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Suppress an incorrect diagnostic about yylval being uninitialized.  */",
        "Line" : 330,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* The parser invokes alloca or malloc; define the necessary symbols.  */",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "/* Use EXIT_SUCCESS as a witness for stdlib.h.  */",
        "Line" : 368,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "/* Pacify GCC's 'empty if-body' warning.  */",
        "Line" : 378,
        "CharPositionInLine" : 3
      },
      "26" : {
        "Text" : "/* The OS might guarantee only one guard page at the bottom of the stack,\n       and a page size can be as small as 4096 bytes.  So we cannot safely\n       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number\n       to allow for a few compiler-allocated temporary stack slots.  */",
        "Line" : 381,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "/* INFRINGES ON USER NAME SPACE */",
        "Line" : 404,
        "CharPositionInLine" : 25
      },
      "28" : {
        "Text" : "/* INFRINGES ON USER NAME SPACE */",
        "Line" : 410,
        "CharPositionInLine" : 20
      },
      "29" : {
        "Text" : "/* A type that is properly aligned for any stack member.  */",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "/* The size of the maximum gap between one aligned stack and the next.  */",
        "Line" : 428,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "/* The size of an array large to enough to hold all stacks, each with\n   N elements.  */",
        "Line" : 431,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "/* Relocate STACK from its old location to the new one.  The\n   local variables YYSIZE and YYSTACKSIZE give the old and new number of\n   elements in the stack, and YYPTR gives the new location of the\n   stack.  Advance YYPTR to a properly aligned location for the next\n   stack.  */",
        "Line" : 439,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "/* Copy COUNT objects from SRC to DST.  The source and destination do\n   not overlap.  */",
        "Line" : 458,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "/* YYFINAL -- State number of the termination state.  */",
        "Line" : 477,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "/* YYLAST -- Last index in YYTABLE.  */",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "/* YYNTOKENS -- Number of terminals.  */",
        "Line" : 482,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "/* YYNNTS -- Number of nonterminals.  */",
        "Line" : 484,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "/* YYNRULES -- Number of rules.  */",
        "Line" : 486,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "/* YYNSTATES -- Number of states.  */",
        "Line" : 488,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned\n   by yylex, with out-of-bounds checking.  */",
        "Line" : 491,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM\n   as returned by yylex, without out-of-bounds checking.  */",
        "Line" : 499,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */",
        "Line" : 537,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.\n   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */",
        "Line" : 556,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "/* YYTOKNUM[NUM] -- (External) token number corresponding to the\n   (internal) symbol number NUM (which must be that of a token).  */",
        "Line" : 582,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing\n     STATE-NUM.  */",
        "Line" : 604,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.\n     Performed when YYTABLE does not specify something else to do.  Zero\n     means the default is an error.  */",
        "Line" : 628,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "/* YYPGOTO[NTERM-NUM].  */",
        "Line" : 653,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "/* YYDEFGOTO[NTERM-NUM].  */",
        "Line" : 661,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If\n     positive, shift that token.  If negative, reduce the rule whose\n     number is the opposite.  If YYTABLE_NINF, syntax error.  */",
        "Line" : 669,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing\n     symbol of state STATE-NUM.  */",
        "Line" : 808,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */",
        "Line" : 832,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "/* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */",
        "Line" : 849,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "/* Error token number */",
        "Line" : 896,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "/* Enable debugging if requested.  */",
        "Line" : 902,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "/* This macro is provided for backward compatibility. */",
        "Line" : 916,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "/*----------------------------------------.\n| Print this symbol's value on YYOUTPUT.  |\n`----------------------------------------*/",
        "Line" : 934,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "/*--------------------------------.\n| Print this symbol on YYOUTPUT.  |\n`--------------------------------*/",
        "Line" : 959,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "/*------------------------------------------------------------------.\n| yy_stack_print -- Print the state stack from its BOTTOM up to its |\n| TOP (included).                                                   |\n`------------------------------------------------------------------*/",
        "Line" : 973,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "/*------------------------------------------------.\n| Report that the YYRULE is going to be reduced.  |\n`------------------------------------------------*/",
        "Line" : 997,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "/* The symbols being reduced.  */",
        "Line" : 1009,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "/* Nonzero means print parse trace.  It is left uninitialized so that\n   multiple parsers can coexist.  */",
        "Line" : 1027,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "/* YYINITDEPTH -- initial size of the parser's stacks.  */",
        "Line" : 1038,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only\n   if the built-in stack extension method is used).\n\n   Do not make this value too large; the results are undefined if\n   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)\n   evaluated with infinite-precision integer arithmetic.  */",
        "Line" : 1043,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "/* Return the length of YYSTR.  */",
        "Line" : 1061,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "/* Copy YYSRC to YYDEST, returning the address of the terminating '\\0' in\n   YYDEST.  */",
        "Line" : 1077,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "/* Copy to YYRES the contents of YYSTR after stripping away unnecessary\n   quotes and backslashes, so that it's suitable for yyerror.  The\n   heuristic is that double-quoting is unnecessary unless the string\n   contains an apostrophe, a comma, or backslash (other than\n   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is\n   null, do not copy; instead, return the length of what the result\n   would have been.  */",
        "Line" : 1094,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "/* Fall through.  */",
        "Line" : 1119,
        "CharPositionInLine" : 12
      },
      "68" : {
        "Text" : "/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message\n   about the unexpected token YYTOKEN for the state stack whose top is\n   YYSSP.\n\n   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is\n   not large enough to hold the message.  In that case, also set\n   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the\n   required number of bytes is too large to store.  */",
        "Line" : 1141,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "/* Internationalized format string. */",
        "Line" : 1156,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "/* Arguments of yyformat. */",
        "Line" : 1158,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "/* Number of reported tokens (one for the \"unexpected\", one per\n     \"expected\"). */",
        "Line" : 1160,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "/* There are many possibilities here to consider:\n     - If this state is a consistent state with a default action, then\n       the only way this function was invoked is if the default action\n       is an error action.  In that case, don't check for expected\n       tokens because there are none.\n     - The only way there can be no lookahead present (in yychar) is if\n       this state is a consistent state with a default action.  Thus,\n       detecting the absence of a lookahead is sufficient to determine\n       that there is no unexpected or expected token to report.  In that\n       case, just report a simple \"syntax error\".\n     - Don't assume there isn't a lookahead just because this state is a\n       consistent state with a default action.  There might have been a\n       previous inconsistent state, consistent state with a non-default\n       action, or user semantic action that manipulated yychar.\n     - Of course, the expected token list depends on states to have\n       correct lookahead information, and it depends on the parser not\n       to perform extra reductions after fetching a lookahead from the\n       scanner and before detecting a syntax error.  Thus, state merging\n       (from LALR or IELR) and default reductions corrupt the expected\n       token list.  However, the list is correct for canonical LR with\n       one exception: it will still contain any token that will not be\n       accepted due to an error action in a later state.\n  */",
        "Line" : 1164,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "/* Start YYX at -YYN if negative to avoid negative indexes in\n             YYCHECK.  In other words, skip the first -YYN actions for\n             this state because they are default actions.  */",
        "Line" : 1193,
        "CharPositionInLine" : 10
      },
      "74" : {
        "Text" : "/* Stay within bounds of both yycheck and yytname.  */",
        "Line" : 1197,
        "CharPositionInLine" : 10
      },
      "75" : {
        "Text" : "/* Avoid compiler warnings. */",
        "Line" : 1230,
        "CharPositionInLine" : 13
      },
      "76" : {
        "Text" : "/* Avoid sprintf, as that infringes on the user's name space.\n     Don't have undefined behavior even if the translation\n     produced a string with the wrong number of \"%s\"s.  */",
        "Line" : 1256,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "/*-----------------------------------------------.\n| Release the memory associated to this symbol.  |\n`-----------------------------------------------*/",
        "Line" : 1278,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "/* ATOM_TOKEN  */",
        "Line" : 1299,
        "CharPositionInLine" : 18
      },
      "79" : {
        "Text" : "/* SIMPLE_ATOM_QUERY_TOKEN  */",
        "Line" : 1305,
        "CharPositionInLine" : 12
      },
      "80" : {
        "Text" : "/* COMPLEX_ATOM_QUERY_TOKEN  */",
        "Line" : 1311,
        "CharPositionInLine" : 13
      },
      "81" : {
        "Text" : "/* RINGSIZE_ATOM_QUERY_TOKEN  */",
        "Line" : 1317,
        "CharPositionInLine" : 13
      },
      "82" : {
        "Text" : "/* RINGBOND_ATOM_QUERY_TOKEN  */",
        "Line" : 1323,
        "CharPositionInLine" : 13
      },
      "83" : {
        "Text" : "/* IMPLICIT_H_ATOM_QUERY_TOKEN  */",
        "Line" : 1329,
        "CharPositionInLine" : 13
      },
      "84" : {
        "Text" : "/* HYB_TOKEN  */",
        "Line" : 1335,
        "CharPositionInLine" : 13
      },
      "85" : {
        "Text" : "/* HETERONEIGHBOR_ATOM_QUERY_TOKEN  */",
        "Line" : 1341,
        "CharPositionInLine" : 13
      },
      "86" : {
        "Text" : "/* ALIPHATIC  */",
        "Line" : 1347,
        "CharPositionInLine" : 13
      },
      "87" : {
        "Text" : "/* ALIPHATICHETERONEIGHBOR_ATOM_QUERY_TOKEN  */",
        "Line" : 1353,
        "CharPositionInLine" : 13
      },
      "88" : {
        "Text" : "/* BOND_TOKEN  */",
        "Line" : 1359,
        "CharPositionInLine" : 13
      },
      "89" : {
        "Text" : "/* atomd  */",
        "Line" : 1365,
        "CharPositionInLine" : 13
      },
      "90" : {
        "Text" : "/* hydrogen_atom  */",
        "Line" : 1371,
        "CharPositionInLine" : 13
      },
      "91" : {
        "Text" : "/* atom_expr  */",
        "Line" : 1377,
        "CharPositionInLine" : 13
      },
      "92" : {
        "Text" : "/* point_query  */",
        "Line" : 1383,
        "CharPositionInLine" : 13
      },
      "93" : {
        "Text" : "/* recursive_query  */",
        "Line" : 1389,
        "CharPositionInLine" : 13
      },
      "94" : {
        "Text" : "/* atom_query  */",
        "Line" : 1395,
        "CharPositionInLine" : 13
      },
      "95" : {
        "Text" : "/* possible_range_query  */",
        "Line" : 1401,
        "CharPositionInLine" : 13
      },
      "96" : {
        "Text" : "/* simple_atom  */",
        "Line" : 1407,
        "CharPositionInLine" : 13
      },
      "97" : {
        "Text" : "/* bond_expr  */",
        "Line" : 1413,
        "CharPositionInLine" : 13
      },
      "98" : {
        "Text" : "/* bond_query  */",
        "Line" : 1419,
        "CharPositionInLine" : 13
      },
      "99" : {
        "Text" : "/* bondd  */",
        "Line" : 1425,
        "CharPositionInLine" : 13
      },
      "100" : {
        "Text" : "/*----------.\n| yyparse.  |\n`----------*/",
        "Line" : 1441,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "/* The lookahead symbol.  */",
        "Line" : 1448,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "/* The semantic value of the lookahead symbol.  */\n/* Default value used for initialization, for pacifying older GCCs\n   or non-GCC compilers.  */",
        "Line" : 1452,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "/* Number of syntax errors so far.  */",
        "Line" : 1458,
        "CharPositionInLine" : 4
      },
      "104" : {
        "Text" : "/* Number of tokens to shift before error messages enabled.  */",
        "Line" : 1462,
        "CharPositionInLine" : 4
      },
      "105" : {
        "Text" : "/* The stacks and their tools:\n       'yyss': related to states.\n       'yyvs': related to semantic values.\n\n       Refer to the stacks through separate pointers, to allow yyoverflow\n       to reallocate them elsewhere.  */",
        "Line" : 1465,
        "CharPositionInLine" : 4
      },
      "106" : {
        "Text" : "/* The state stack.  */",
        "Line" : 1472,
        "CharPositionInLine" : 4
      },
      "107" : {
        "Text" : "/* The semantic value stack.  */",
        "Line" : 1477,
        "CharPositionInLine" : 4
      },
      "108" : {
        "Text" : "/* Lookahead token as an internal (translated) token number.  */",
        "Line" : 1486,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "/* The variables used to return semantic value and location from the\n     action routines.  */",
        "Line" : 1488,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "/* Buffer for error messages, and its allocated size.  */",
        "Line" : 1493,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "/* The number of symbols on the RHS of the reduced rule.\n     Keep to zero when no symbol should be popped.  */",
        "Line" : 1501,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "/* Cause a token to be read.  */",
        "Line" : 1514,
        "CharPositionInLine" : 20
      },
      "113" : {
        "Text" : "/*------------------------------------------------------------.\n| yynewstate -- Push a new state, which is found in yystate.  |\n`------------------------------------------------------------*/",
        "Line" : 1517,
        "CharPositionInLine" : 0
      },
      "114" : {
        "Text" : "/* In all cases, when you get here, the value and location stacks\n     have just been pushed.  So pushing a state here evens the stacks.  */",
        "Line" : 1521,
        "CharPositionInLine" : 2
      },
      "115" : {
        "Text" : "/* Get the current used size of the three stacks, in elements.  */",
        "Line" : 1530,
        "CharPositionInLine" : 6
      },
      "116" : {
        "Text" : "/* Give user a chance to reallocate the stack.  Use copies of\n           these so that the &'s don't force the real ones into\n           memory.  */",
        "Line" : 1535,
        "CharPositionInLine" : 8
      },
      "117" : {
        "Text" : "/* Each stack pointer address is followed by the size of the\n           data in use in that stack, in bytes.  This used to be a\n           conditional around just the two extra args, but that might\n           be undefined if yyoverflow is a macro.  */",
        "Line" : 1541,
        "CharPositionInLine" : 8
      },
      "118" : {
        "Text" : "/* Extend the stack our own way.  */",
        "Line" : 1557,
        "CharPositionInLine" : 6
      },
      "119" : {
        "Text" : "/*-----------.\n| yybackup.  |\n`-----------*/",
        "Line" : 1596,
        "CharPositionInLine" : 0
      },
      "120" : {
        "Text" : "/* Do appropriate processing given the current state.  Read a\n     lookahead token if we need one and don't already have one.  */",
        "Line" : 1601,
        "CharPositionInLine" : 2
      },
      "121" : {
        "Text" : "/* First try to decide what to do without reference to lookahead token.  */",
        "Line" : 1604,
        "CharPositionInLine" : 2
      },
      "122" : {
        "Text" : "/* Not known => get a lookahead token if don't already have one.  */",
        "Line" : 1609,
        "CharPositionInLine" : 2
      },
      "123" : {
        "Text" : "/* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */",
        "Line" : 1611,
        "CharPositionInLine" : 2
      },
      "124" : {
        "Text" : "/* If the proper action on seeing token YYTOKEN is to reduce or to\n     detect an error, take that action.  */",
        "Line" : 1629,
        "CharPositionInLine" : 2
      },
      "125" : {
        "Text" : "/* Count tokens shifted since error; after three, turn off error\n     status.  */",
        "Line" : 1643,
        "CharPositionInLine" : 2
      },
      "126" : {
        "Text" : "/* Shift the lookahead token.  */",
        "Line" : 1648,
        "CharPositionInLine" : 2
      },
      "127" : {
        "Text" : "/* Discard the shifted token.  */",
        "Line" : 1651,
        "CharPositionInLine" : 2
      },
      "128" : {
        "Text" : "/*-----------------------------------------------------------.\n| yydefault -- do the default action for the current state.  |\n`-----------------------------------------------------------*/",
        "Line" : 1662,
        "CharPositionInLine" : 0
      },
      "129" : {
        "Text" : "/*-----------------------------.\n| yyreduce -- Do a reduction.  |\n`-----------------------------*/",
        "Line" : 1672,
        "CharPositionInLine" : 0
      },
      "130" : {
        "Text" : "/* yyn is the number of a rule to reduce with.  */",
        "Line" : 1676,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "/* If YYLEN is nonzero, implement the default value of the action:\n     '$$ = $1'.\n\n     Otherwise, the following line sets YYVAL to garbage.\n     This behavior is undocumented and Bison\n     users should not rely upon it.  Assigning to YYVAL\n     unconditionally makes the parser a bit smaller, and it avoids a\n     GCC warning that YYVAL may be used uninitialized.  */",
        "Line" : 1679,
        "CharPositionInLine" : 2
      },
      "132" : {
        "Text" : "// the molList has already been updated, no need to do anything",
        "Line" : 1696,
        "CharPositionInLine" : 0
      },
      "133" : {
        "Text" : "//delete $1;",
        "Line" : 1796,
        "CharPositionInLine" : 2
      },
      "134" : {
        "Text" : "// this is a bit of a hack to try and get nicer \"SMILES\" from\n// a SMARTS molecule:",
        "Line" : 1811,
        "CharPositionInLine" : 2
      },
      "135" : {
        "Text" : "//delete $2;",
        "Line" : 1826,
        "CharPositionInLine" : 2
      },
      "136" : {
        "Text" : "// this is a bit of a hack to try and get nicer \"SMILES\" from\n// a SMARTS molecule:",
        "Line" : 1870,
        "CharPositionInLine" : 2
      },
      "137" : {
        "Text" : "// FIX: handle generic bonds here",
        "Line" : 1927,
        "CharPositionInLine" : 2
      },
      "138" : {
        "Text" : "// FIX: this needs to handle arbitrary bond_exprs",
        "Line" : 1947,
        "CharPositionInLine" : 2
      },
      "139" : {
        "Text" : "// conflicting queries...",
        "Line" : 2111,
        "CharPositionInLine" : 6
      },
      "140" : {
        "Text" : "// conflicting queries...",
        "Line" : 2120,
        "CharPositionInLine" : 6
      },
      "141" : {
        "Text" : "// this is a recursive SMARTS expression",
        "Line" : 2143,
        "CharPositionInLine" : 2
      },
      "142" : {
        "Text" : "//  FIX: there's maybe a leak here",
        "Line" : 2145,
        "CharPositionInLine" : 2
      },
      "143" : {
        "Text" : "// close any rings in the molecule:",
        "Line" : 2147,
        "CharPositionInLine" : 2
      },
      "144" : {
        "Text" : "//molP->debugMol(std::cout);",
        "Line" : 2150,
        "CharPositionInLine" : 2
      },
      "145" : {
        "Text" : "//std::cout << \"qA: \" << qA << \" \" << qA->getQuery() << std::endl;",
        "Line" : 2152,
        "CharPositionInLine" : 2
      },
      "146" : {
        "Text" : "// UNDOCUMENTED EXTENSION:\n// this is a recursive SMARTS expression with a serial number\n// please don't write your own SMARTS that include this extension:\n// the RDKit smarts parsing code will automatically insert serial\n// numbers for recursive smarts patterns.",
        "Line" : 2165,
        "CharPositionInLine" : 2
      },
      "147" : {
        "Text" : "//  FIX: there's maybe a leak here",
        "Line" : 2171,
        "CharPositionInLine" : 2
      },
      "148" : {
        "Text" : "// close any rings in the molecule:",
        "Line" : 2173,
        "CharPositionInLine" : 2
      },
      "149" : {
        "Text" : "//molP->debugMol(std::cout);",
        "Line" : 2176,
        "CharPositionInLine" : 2
      },
      "150" : {
        "Text" : "//std::cout << \"qA: \" << qA << \" \" << qA->getQuery() << std::endl;",
        "Line" : 2178,
        "CharPositionInLine" : 2
      },
      "151" : {
        "Text" : "// this is going to be ignored anyway",
        "Line" : 2416,
        "CharPositionInLine" : 58
      },
      "152" : {
        "Text" : "//\n// This construction (and some others) may seem odd, but the\n// SMARTS definition requires that an atom which is aliphatic on\n// input (i.e. something in the \"organic subset\" that is given with\n// a capital letter) only match aliphatic atoms.\n//\n// The following rule applies a similar logic to aromatic atoms.\n//",
        "Line" : 2440,
        "CharPositionInLine" : 2
      },
      "153" : {
        "Text" : "/* User semantic actions sometimes alter yychar, and that requires\n     that yytoken be updated with the new translation.  We take the\n     approach of translating immediately before every use of yytoken.\n     One alternative is translating here after every semantic action,\n     but that translation would be missed if the semantic action invokes\n     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or\n     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an\n     incorrect destructor might then be invoked immediately.  In the\n     case of YYERROR or YYBACKUP, subsequent parser actions might lead\n     to an incorrect destructor call or verbose syntax error message\n     before the lookahead is translated.  */",
        "Line" : 2634,
        "CharPositionInLine" : 2
      },
      "154" : {
        "Text" : "/* Now 'shift' the result of the reduction.  Determine what state\n     that goes to, based on the state we popped back to and the rule\n     number reduced by.  */",
        "Line" : 2653,
        "CharPositionInLine" : 2
      },
      "155" : {
        "Text" : "/*--------------------------------------.\n| yyerrlab -- here on detecting error.  |\n`--------------------------------------*/",
        "Line" : 2668,
        "CharPositionInLine" : 0
      },
      "156" : {
        "Text" : "/* Make sure we have latest lookahead translation.  See comments at\n     user semantic actions for why this is necessary.  */",
        "Line" : 2672,
        "CharPositionInLine" : 2
      },
      "157" : {
        "Text" : "/* If not already recovering from an error, report this error.  */",
        "Line" : 2676,
        "CharPositionInLine" : 2
      },
      "158" : {
        "Text" : "/* If just tried and failed to reuse lookahead token after an\n         error, discard it.  */",
        "Line" : 2720,
        "CharPositionInLine" : 6
      },
      "159" : {
        "Text" : "/* Return failure if at end of input.  */",
        "Line" : 2725,
        "CharPositionInLine" : 10
      },
      "160" : {
        "Text" : "/* Else will try to reuse lookahead token after shifting the error\n     token.  */",
        "Line" : 2737,
        "CharPositionInLine" : 2
      },
      "161" : {
        "Text" : "/*---------------------------------------------------.\n| yyerrorlab -- error raised explicitly by YYERROR.  |\n`---------------------------------------------------*/",
        "Line" : 2742,
        "CharPositionInLine" : 0
      },
      "162" : {
        "Text" : "/* Pacify compilers like GCC when the user code never invokes\n     YYERROR and the label yyerrorlab therefore never appears in user\n     code.  */",
        "Line" : 2747,
        "CharPositionInLine" : 2
      },
      "163" : {
        "Text" : "/*CONSTCOND*/",
        "Line" : 2750,
        "CharPositionInLine" : 6
      },
      "164" : {
        "Text" : "/* Do not reclaim the symbols of the rule whose action triggered\n     this YYERROR.  */",
        "Line" : 2753,
        "CharPositionInLine" : 2
      },
      "165" : {
        "Text" : "/*-------------------------------------------------------------.\n| yyerrlab1 -- common code for both syntax error and YYERROR.  |\n`-------------------------------------------------------------*/",
        "Line" : 2762,
        "CharPositionInLine" : 0
      },
      "166" : {
        "Text" : "/* Each real token shifted decrements this.  */",
        "Line" : 2766,
        "CharPositionInLine" : 24
      },
      "167" : {
        "Text" : "/* Pop the current state because it cannot handle the error token.  */",
        "Line" : 2782,
        "CharPositionInLine" : 6
      },
      "168" : {
        "Text" : "/* Shift the error token.  */",
        "Line" : 2799,
        "CharPositionInLine" : 2
      },
      "169" : {
        "Text" : "/*-------------------------------------.\n| yyacceptlab -- YYACCEPT comes here.  |\n`-------------------------------------*/",
        "Line" : 2806,
        "CharPositionInLine" : 0
      },
      "170" : {
        "Text" : "/*-----------------------------------.\n| yyabortlab -- YYABORT comes here.  |\n`-----------------------------------*/",
        "Line" : 2813,
        "CharPositionInLine" : 0
      },
      "171" : {
        "Text" : "/*-------------------------------------------------.\n| yyexhaustedlab -- memory exhaustion comes here.  |\n`-------------------------------------------------*/",
        "Line" : 2821,
        "CharPositionInLine" : 0
      },
      "172" : {
        "Text" : "/* Fall through.  */",
        "Line" : 2827,
        "CharPositionInLine" : 2
      },
      "173" : {
        "Text" : "/* Make sure we have latest lookahead translation.  See comments at\n         user semantic actions for why this is necessary.  */",
        "Line" : 2833,
        "CharPositionInLine" : 6
      },
      "174" : {
        "Text" : "/* Do not reclaim the symbols of the rule whose action triggered\n     this YYABORT or YYACCEPT.  */",
        "Line" : 2839,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 175
    },
    "Code/GraphMol/SmilesParse/smarts.tab.hpp.cmake" : {
      "ObjectId" : "c1cef04b0653a7ae204ebc225b04f12381dc70cf",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* A Bison parser, made by GNU Bison 3.1.  */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Bison interface for Yacc-like parsers in C\n\n   Copyright (C) 1984, 1989-1990, 2000-2015, 2018 Free Software Foundation, Inc.\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* As a special exception, you may create a larger work that contains\n   part or all of the Bison parser skeleton and distribute that work\n   under terms of your choice, so long as that work isn't itself a\n   parser generator using the skeleton or a modified version thereof\n   as a parser skeleton.  Alternatively, if you modify or redistribute\n   the parser skeleton itself, you may (at your option) remove this\n   special exception, which will cause the skeleton and the resulting\n   Bison output files to be licensed under the GNU General Public\n   License without this special exception.\n\n   This special exception was added by the Free Software Foundation in\n   version 2.2 of Bison.  */",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Debug traces.  */",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Token type.  */",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Value type.  */",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* \"%code provides\" blocks.  */",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Code/GraphMol/SmilesParse/smiles.tab.cpp.cmake" : {
      "ObjectId" : "47f828fd903bf4d3703763662c1b4922d9552738",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* A Bison parser, made by GNU Bison 3.1.  */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Bison implementation for Yacc-like parsers in C\n\n   Copyright (C) 1984, 1989-1990, 2000-2015, 2018 Free Software Foundation, Inc.\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* As a special exception, you may create a larger work that contains\n   part or all of the Bison parser skeleton and distribute that work\n   under terms of your choice, so long as that work isn't itself a\n   parser generator using the skeleton or a modified version thereof\n   as a parser skeleton.  Alternatively, if you modify or redistribute\n   the parser skeleton itself, you may (at your option) remove this\n   special exception, which will cause the skeleton and the resulting\n   Bison output files to be licensed under the GNU General Public\n   License without this special exception.\n\n   This special exception was added by the Free Software Foundation in\n   version 2.2 of Bison.  */",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* C LALR(1) parser skeleton written by Richard Stallman, by\n   simplifying the original so-called \"semantic\" parser.  */",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* All symbols defined below should begin with yy or YY, to avoid\n   infringing on user name space.  This should be done even for local\n   variables, as they might otherwise be expanded by user macros.\n   There are some unavoidable exceptions within include files to\n   define necessary library symbols; they are noted \"INFRINGES ON\n   USER NAME SPACE\" below.  */",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Identify Bison output.  */",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Bison version.  */",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Skeleton name.  */",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* Pure parsers.  */",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* Push parsers.  */",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Pull parsers.  */",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Substitute the variable and function names.  */",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Copy the first part of user declarations.  */",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "// $Id$\n//\n//  Copyright (C) 2001-2016 Randal Henne, Greg Landrum and Rational Discovery LLC\n//\n//   @@ All Rights Reserved  @@\n//",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "/* Enabling verbose error messages.  */",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* In a future release of Bison, this section will be replaced\n   by #include \"smiles.tab.hpp\".  */",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Debug traces.  */",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Token type.  */",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Value type.  */",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* \"%code provides\" blocks.  */",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Copy the second part of user declarations.  */",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Suppress unused-variable warnings by \"using\" E.  */",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Suppress an incorrect diagnostic about yylval being uninitialized.  */",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* The parser invokes alloca or malloc; define the necessary symbols.  */",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "/* Use EXIT_SUCCESS as a witness for stdlib.h.  */",
        "Line" : 370,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "/* Pacify GCC's 'empty if-body' warning.  */",
        "Line" : 380,
        "CharPositionInLine" : 3
      },
      "26" : {
        "Text" : "/* The OS might guarantee only one guard page at the bottom of the stack,\n       and a page size can be as small as 4096 bytes.  So we cannot safely\n       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number\n       to allow for a few compiler-allocated temporary stack slots.  */",
        "Line" : 383,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "/* INFRINGES ON USER NAME SPACE */",
        "Line" : 406,
        "CharPositionInLine" : 25
      },
      "28" : {
        "Text" : "/* INFRINGES ON USER NAME SPACE */",
        "Line" : 412,
        "CharPositionInLine" : 20
      },
      "29" : {
        "Text" : "/* A type that is properly aligned for any stack member.  */",
        "Line" : 423,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "/* The size of the maximum gap between one aligned stack and the next.  */",
        "Line" : 430,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "/* The size of an array large to enough to hold all stacks, each with\n   N elements.  */",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "/* Relocate STACK from its old location to the new one.  The\n   local variables YYSIZE and YYSTACKSIZE give the old and new number of\n   elements in the stack, and YYPTR gives the new location of the\n   stack.  Advance YYPTR to a properly aligned location for the next\n   stack.  */",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "/* Copy COUNT objects from SRC to DST.  The source and destination do\n   not overlap.  */",
        "Line" : 460,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "/* YYFINAL -- State number of the termination state.  */",
        "Line" : 479,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "/* YYLAST -- Last index in YYTABLE.  */",
        "Line" : 481,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "/* YYNTOKENS -- Number of terminals.  */",
        "Line" : 484,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "/* YYNNTS -- Number of nonterminals.  */",
        "Line" : 486,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "/* YYNRULES -- Number of rules.  */",
        "Line" : 488,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "/* YYNSTATES -- Number of states.  */",
        "Line" : 490,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned\n   by yylex, with out-of-bounds checking.  */",
        "Line" : 493,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM\n   as returned by yylex, without out-of-bounds checking.  */",
        "Line" : 501,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "/* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */",
        "Line" : 537,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.\n   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */",
        "Line" : 552,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "/* YYTOKNUM[NUM] -- (External) token number corresponding to the\n   (internal) symbol number NUM (which must be that of a token).  */",
        "Line" : 571,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "/* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing\n     STATE-NUM.  */",
        "Line" : 591,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "/* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.\n     Performed when YYTABLE does not specify something else to do.  Zero\n     means the default is an error.  */",
        "Line" : 608,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "/* YYPGOTO[NTERM-NUM].  */",
        "Line" : 626,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "/* YYDEFGOTO[NTERM-NUM].  */",
        "Line" : 633,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "/* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If\n     positive, shift that token.  If negative, reduce the rule whose\n     number is the opposite.  If YYTABLE_NINF, syntax error.  */",
        "Line" : 640,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "/* YYSTOS[STATE-NUM] -- The (internal number of the) accessing\n     symbol of state STATE-NUM.  */",
        "Line" : 681,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */",
        "Line" : 698,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "/* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */",
        "Line" : 711,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "/* Error token number */",
        "Line" : 754,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "/* Enable debugging if requested.  */",
        "Line" : 760,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "/* This macro is provided for backward compatibility. */",
        "Line" : 774,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "/*----------------------------------------.\n| Print this symbol's value on YYOUTPUT.  |\n`----------------------------------------*/",
        "Line" : 792,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "/*--------------------------------.\n| Print this symbol on YYOUTPUT.  |\n`--------------------------------*/",
        "Line" : 818,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "/*------------------------------------------------------------------.\n| yy_stack_print -- Print the state stack from its BOTTOM up to its |\n| TOP (included).                                                   |\n`------------------------------------------------------------------*/",
        "Line" : 832,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "/*------------------------------------------------.\n| Report that the YYRULE is going to be reduced.  |\n`------------------------------------------------*/",
        "Line" : 856,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "/* The symbols being reduced.  */",
        "Line" : 868,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "/* Nonzero means print parse trace.  It is left uninitialized so that\n   multiple parsers can coexist.  */",
        "Line" : 886,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "/* YYINITDEPTH -- initial size of the parser's stacks.  */",
        "Line" : 897,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only\n   if the built-in stack extension method is used).\n\n   Do not make this value too large; the results are undefined if\n   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)\n   evaluated with infinite-precision integer arithmetic.  */",
        "Line" : 902,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "/* Return the length of YYSTR.  */",
        "Line" : 920,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "/* Copy YYSRC to YYDEST, returning the address of the terminating '\\0' in\n   YYDEST.  */",
        "Line" : 936,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "/* Copy to YYRES the contents of YYSTR after stripping away unnecessary\n   quotes and backslashes, so that it's suitable for yyerror.  The\n   heuristic is that double-quoting is unnecessary unless the string\n   contains an apostrophe, a comma, or backslash (other than\n   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is\n   null, do not copy; instead, return the length of what the result\n   would have been.  */",
        "Line" : 953,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "/* Fall through.  */",
        "Line" : 978,
        "CharPositionInLine" : 12
      },
      "68" : {
        "Text" : "/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message\n   about the unexpected token YYTOKEN for the state stack whose top is\n   YYSSP.\n\n   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is\n   not large enough to hold the message.  In that case, also set\n   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the\n   required number of bytes is too large to store.  */",
        "Line" : 1000,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "/* Internationalized format string. */",
        "Line" : 1015,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "/* Arguments of yyformat. */",
        "Line" : 1017,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "/* Number of reported tokens (one for the \"unexpected\", one per\n     \"expected\"). */",
        "Line" : 1019,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "/* There are many possibilities here to consider:\n     - If this state is a consistent state with a default action, then\n       the only way this function was invoked is if the default action\n       is an error action.  In that case, don't check for expected\n       tokens because there are none.\n     - The only way there can be no lookahead present (in yychar) is if\n       this state is a consistent state with a default action.  Thus,\n       detecting the absence of a lookahead is sufficient to determine\n       that there is no unexpected or expected token to report.  In that\n       case, just report a simple \"syntax error\".\n     - Don't assume there isn't a lookahead just because this state is a\n       consistent state with a default action.  There might have been a\n       previous inconsistent state, consistent state with a non-default\n       action, or user semantic action that manipulated yychar.\n     - Of course, the expected token list depends on states to have\n       correct lookahead information, and it depends on the parser not\n       to perform extra reductions after fetching a lookahead from the\n       scanner and before detecting a syntax error.  Thus, state merging\n       (from LALR or IELR) and default reductions corrupt the expected\n       token list.  However, the list is correct for canonical LR with\n       one exception: it will still contain any token that will not be\n       accepted due to an error action in a later state.\n  */",
        "Line" : 1023,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "/* Start YYX at -YYN if negative to avoid negative indexes in\n             YYCHECK.  In other words, skip the first -YYN actions for\n             this state because they are default actions.  */",
        "Line" : 1052,
        "CharPositionInLine" : 10
      },
      "74" : {
        "Text" : "/* Stay within bounds of both yycheck and yytname.  */",
        "Line" : 1056,
        "CharPositionInLine" : 10
      },
      "75" : {
        "Text" : "/* Avoid compiler warnings. */",
        "Line" : 1089,
        "CharPositionInLine" : 13
      },
      "76" : {
        "Text" : "/* Avoid sprintf, as that infringes on the user's name space.\n     Don't have undefined behavior even if the translation\n     produced a string with the wrong number of \"%s\"s.  */",
        "Line" : 1115,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "/*-----------------------------------------------.\n| Release the memory associated to this symbol.  |\n`-----------------------------------------------*/",
        "Line" : 1137,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "/* AROMATIC_ATOM_TOKEN  */",
        "Line" : 1159,
        "CharPositionInLine" : 18
      },
      "79" : {
        "Text" : "/* ATOM_TOKEN  */",
        "Line" : 1165,
        "CharPositionInLine" : 12
      },
      "80" : {
        "Text" : "/* ORGANIC_ATOM_TOKEN  */",
        "Line" : 1171,
        "CharPositionInLine" : 12
      },
      "81" : {
        "Text" : "/* BOND_TOKEN  */",
        "Line" : 1177,
        "CharPositionInLine" : 13
      },
      "82" : {
        "Text" : "/* bondd  */",
        "Line" : 1183,
        "CharPositionInLine" : 13
      },
      "83" : {
        "Text" : "/* atomd  */",
        "Line" : 1189,
        "CharPositionInLine" : 13
      },
      "84" : {
        "Text" : "/* charge_element  */",
        "Line" : 1195,
        "CharPositionInLine" : 13
      },
      "85" : {
        "Text" : "/* h_element  */",
        "Line" : 1201,
        "CharPositionInLine" : 13
      },
      "86" : {
        "Text" : "/* chiral_element  */",
        "Line" : 1207,
        "CharPositionInLine" : 13
      },
      "87" : {
        "Text" : "/* element  */",
        "Line" : 1213,
        "CharPositionInLine" : 13
      },
      "88" : {
        "Text" : "/* simple_atom  */",
        "Line" : 1219,
        "CharPositionInLine" : 13
      },
      "89" : {
        "Text" : "/*----------.\n| yyparse.  |\n`----------*/",
        "Line" : 1235,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "/* The lookahead symbol.  */",
        "Line" : 1242,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "/* The semantic value of the lookahead symbol.  */\n/* Default value used for initialization, for pacifying older GCCs\n   or non-GCC compilers.  */",
        "Line" : 1246,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "/* Number of syntax errors so far.  */",
        "Line" : 1252,
        "CharPositionInLine" : 4
      },
      "93" : {
        "Text" : "/* Number of tokens to shift before error messages enabled.  */",
        "Line" : 1256,
        "CharPositionInLine" : 4
      },
      "94" : {
        "Text" : "/* The stacks and their tools:\n       'yyss': related to states.\n       'yyvs': related to semantic values.\n\n       Refer to the stacks through separate pointers, to allow yyoverflow\n       to reallocate them elsewhere.  */",
        "Line" : 1259,
        "CharPositionInLine" : 4
      },
      "95" : {
        "Text" : "/* The state stack.  */",
        "Line" : 1266,
        "CharPositionInLine" : 4
      },
      "96" : {
        "Text" : "/* The semantic value stack.  */",
        "Line" : 1271,
        "CharPositionInLine" : 4
      },
      "97" : {
        "Text" : "/* Lookahead token as an internal (translated) token number.  */",
        "Line" : 1280,
        "CharPositionInLine" : 2
      },
      "98" : {
        "Text" : "/* The variables used to return semantic value and location from the\n     action routines.  */",
        "Line" : 1282,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "/* Buffer for error messages, and its allocated size.  */",
        "Line" : 1287,
        "CharPositionInLine" : 2
      },
      "100" : {
        "Text" : "/* The number of symbols on the RHS of the reduced rule.\n     Keep to zero when no symbol should be popped.  */",
        "Line" : 1295,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "/* Cause a token to be read.  */",
        "Line" : 1308,
        "CharPositionInLine" : 20
      },
      "102" : {
        "Text" : "/*------------------------------------------------------------.\n| yynewstate -- Push a new state, which is found in yystate.  |\n`------------------------------------------------------------*/",
        "Line" : 1311,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "/* In all cases, when you get here, the value and location stacks\n     have just been pushed.  So pushing a state here evens the stacks.  */",
        "Line" : 1315,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "/* Get the current used size of the three stacks, in elements.  */",
        "Line" : 1324,
        "CharPositionInLine" : 6
      },
      "105" : {
        "Text" : "/* Give user a chance to reallocate the stack.  Use copies of\n           these so that the &'s don't force the real ones into\n           memory.  */",
        "Line" : 1329,
        "CharPositionInLine" : 8
      },
      "106" : {
        "Text" : "/* Each stack pointer address is followed by the size of the\n           data in use in that stack, in bytes.  This used to be a\n           conditional around just the two extra args, but that might\n           be undefined if yyoverflow is a macro.  */",
        "Line" : 1335,
        "CharPositionInLine" : 8
      },
      "107" : {
        "Text" : "/* Extend the stack our own way.  */",
        "Line" : 1351,
        "CharPositionInLine" : 6
      },
      "108" : {
        "Text" : "/*-----------.\n| yybackup.  |\n`-----------*/",
        "Line" : 1390,
        "CharPositionInLine" : 0
      },
      "109" : {
        "Text" : "/* Do appropriate processing given the current state.  Read a\n     lookahead token if we need one and don't already have one.  */",
        "Line" : 1395,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "/* First try to decide what to do without reference to lookahead token.  */",
        "Line" : 1398,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "/* Not known => get a lookahead token if don't already have one.  */",
        "Line" : 1403,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "/* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */",
        "Line" : 1405,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "/* If the proper action on seeing token YYTOKEN is to reduce or to\n     detect an error, take that action.  */",
        "Line" : 1423,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "/* Count tokens shifted since error; after three, turn off error\n     status.  */",
        "Line" : 1437,
        "CharPositionInLine" : 2
      },
      "115" : {
        "Text" : "/* Shift the lookahead token.  */",
        "Line" : 1442,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "/* Discard the shifted token.  */",
        "Line" : 1445,
        "CharPositionInLine" : 2
      },
      "117" : {
        "Text" : "/*-----------------------------------------------------------.\n| yydefault -- do the default action for the current state.  |\n`-----------------------------------------------------------*/",
        "Line" : 1456,
        "CharPositionInLine" : 0
      },
      "118" : {
        "Text" : "/*-----------------------------.\n| yyreduce -- Do a reduction.  |\n`-----------------------------*/",
        "Line" : 1466,
        "CharPositionInLine" : 0
      },
      "119" : {
        "Text" : "/* yyn is the number of a rule to reduce with.  */",
        "Line" : 1470,
        "CharPositionInLine" : 2
      },
      "120" : {
        "Text" : "/* If YYLEN is nonzero, implement the default value of the action:\n     '$$ = $1'.\n\n     Otherwise, the following line sets YYVAL to garbage.\n     This behavior is undocumented and Bison\n     users should not rely upon it.  Assigning to YYVAL\n     unconditionally makes the parser a bit smaller, and it avoids a\n     GCC warning that YYVAL may be used uninitialized.  */",
        "Line" : 1473,
        "CharPositionInLine" : 2
      },
      "121" : {
        "Text" : "// the molList has already been updated, no need to do anything",
        "Line" : 1490,
        "CharPositionInLine" : 0
      },
      "122" : {
        "Text" : "//delete $1;",
        "Line" : 1584,
        "CharPositionInLine" : 2
      },
      "123" : {
        "Text" : "//delete $2;",
        "Line" : 1599,
        "CharPositionInLine" : 2
      },
      "124" : {
        "Text" : "//delete $3;",
        "Line" : 1623,
        "CharPositionInLine" : 2
      },
      "125" : {
        "Text" : "//delete $3;",
        "Line" : 1635,
        "CharPositionInLine" : 2
      },
      "126" : {
        "Text" : "//delete $3;",
        "Line" : 1726,
        "CharPositionInLine" : 2
      },
      "127" : {
        "Text" : "//delete $4;",
        "Line" : 1751,
        "CharPositionInLine" : 2
      },
      "128" : {
        "Text" : "//delete $4;",
        "Line" : 1764,
        "CharPositionInLine" : 2
      },
      "129" : {
        "Text" : "/* User semantic actions sometimes alter yychar, and that requires\n     that yytoken be updated with the new translation.  We take the\n     approach of translating immediately before every use of yytoken.\n     One alternative is translating here after every semantic action,\n     but that translation would be missed if the semantic action invokes\n     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or\n     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an\n     incorrect destructor might then be invoked immediately.  In the\n     case of YYERROR or YYBACKUP, subsequent parser actions might lead\n     to an incorrect destructor call or verbose syntax error message\n     before the lookahead is translated.  */",
        "Line" : 1974,
        "CharPositionInLine" : 2
      },
      "130" : {
        "Text" : "/* Now 'shift' the result of the reduction.  Determine what state\n     that goes to, based on the state we popped back to and the rule\n     number reduced by.  */",
        "Line" : 1993,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "/*--------------------------------------.\n| yyerrlab -- here on detecting error.  |\n`--------------------------------------*/",
        "Line" : 2008,
        "CharPositionInLine" : 0
      },
      "132" : {
        "Text" : "/* Make sure we have latest lookahead translation.  See comments at\n     user semantic actions for why this is necessary.  */",
        "Line" : 2012,
        "CharPositionInLine" : 2
      },
      "133" : {
        "Text" : "/* If not already recovering from an error, report this error.  */",
        "Line" : 2016,
        "CharPositionInLine" : 2
      },
      "134" : {
        "Text" : "/* If just tried and failed to reuse lookahead token after an\n         error, discard it.  */",
        "Line" : 2060,
        "CharPositionInLine" : 6
      },
      "135" : {
        "Text" : "/* Return failure if at end of input.  */",
        "Line" : 2065,
        "CharPositionInLine" : 10
      },
      "136" : {
        "Text" : "/* Else will try to reuse lookahead token after shifting the error\n     token.  */",
        "Line" : 2077,
        "CharPositionInLine" : 2
      },
      "137" : {
        "Text" : "/*---------------------------------------------------.\n| yyerrorlab -- error raised explicitly by YYERROR.  |\n`---------------------------------------------------*/",
        "Line" : 2082,
        "CharPositionInLine" : 0
      },
      "138" : {
        "Text" : "/* Pacify compilers like GCC when the user code never invokes\n     YYERROR and the label yyerrorlab therefore never appears in user\n     code.  */",
        "Line" : 2087,
        "CharPositionInLine" : 2
      },
      "139" : {
        "Text" : "/*CONSTCOND*/",
        "Line" : 2090,
        "CharPositionInLine" : 6
      },
      "140" : {
        "Text" : "/* Do not reclaim the symbols of the rule whose action triggered\n     this YYERROR.  */",
        "Line" : 2093,
        "CharPositionInLine" : 2
      },
      "141" : {
        "Text" : "/*-------------------------------------------------------------.\n| yyerrlab1 -- common code for both syntax error and YYERROR.  |\n`-------------------------------------------------------------*/",
        "Line" : 2102,
        "CharPositionInLine" : 0
      },
      "142" : {
        "Text" : "/* Each real token shifted decrements this.  */",
        "Line" : 2106,
        "CharPositionInLine" : 24
      },
      "143" : {
        "Text" : "/* Pop the current state because it cannot handle the error token.  */",
        "Line" : 2122,
        "CharPositionInLine" : 6
      },
      "144" : {
        "Text" : "/* Shift the error token.  */",
        "Line" : 2139,
        "CharPositionInLine" : 2
      },
      "145" : {
        "Text" : "/*-------------------------------------.\n| yyacceptlab -- YYACCEPT comes here.  |\n`-------------------------------------*/",
        "Line" : 2146,
        "CharPositionInLine" : 0
      },
      "146" : {
        "Text" : "/*-----------------------------------.\n| yyabortlab -- YYABORT comes here.  |\n`-----------------------------------*/",
        "Line" : 2153,
        "CharPositionInLine" : 0
      },
      "147" : {
        "Text" : "/*-------------------------------------------------.\n| yyexhaustedlab -- memory exhaustion comes here.  |\n`-------------------------------------------------*/",
        "Line" : 2161,
        "CharPositionInLine" : 0
      },
      "148" : {
        "Text" : "/* Fall through.  */",
        "Line" : 2167,
        "CharPositionInLine" : 2
      },
      "149" : {
        "Text" : "/* Make sure we have latest lookahead translation.  See comments at\n         user semantic actions for why this is necessary.  */",
        "Line" : 2173,
        "CharPositionInLine" : 6
      },
      "150" : {
        "Text" : "/* Do not reclaim the symbols of the rule whose action triggered\n     this YYABORT or YYACCEPT.  */",
        "Line" : 2179,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 151
    },
    "Code/GraphMol/SmilesParse/smiles.tab.hpp.cmake" : {
      "ObjectId" : "9746a465e81bfd2caf0fb4556e0da8b23674e722",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* A Bison parser, made by GNU Bison 3.1.  */",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Bison interface for Yacc-like parsers in C\n\n   Copyright (C) 1984, 1989-1990, 2000-2015, 2018 Free Software Foundation, Inc.\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation, either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* As a special exception, you may create a larger work that contains\n   part or all of the Bison parser skeleton and distribute that work\n   under terms of your choice, so long as that work isn't itself a\n   parser generator using the skeleton or a modified version thereof\n   as a parser skeleton.  Alternatively, if you modify or redistribute\n   the parser skeleton itself, you may (at your option) remove this\n   special exception, which will cause the skeleton and the resulting\n   Bison output files to be licensed under the GNU General Public\n   License without this special exception.\n\n   This special exception was added by the Free Software Foundation in\n   version 2.2 of Bison.  */",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Debug traces.  */",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Token type.  */",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Value type.  */",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* \"%code provides\" blocks.  */",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "Code/GraphMol/StructChecker/CMakeLists.txt" : {
      "ObjectId" : "8b4b0eeac058437859315f7c6968413d46893f71",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/StructChecker/Wrap/CMakeLists.txt" : {
      "ObjectId" : "b9416fd9ff40a5f5cd9c2c566752697c07592db5",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/Subgraphs/CMakeLists.txt" : {
      "ObjectId" : "0482d707b19cdf1621c6cd37c6b8358d0ef2d21a",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/Substruct/CMakeLists.txt" : {
      "ObjectId" : "92e2e94fd5fbede43eb2d8cf306725a1110b593a",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/SubstructLibrary/CMakeLists.txt" : {
      "ObjectId" : "ab38cf09ebdc04650c28e2b828d9c91edd648b93",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/SubstructLibrary/Wrap/CMakeLists.txt" : {
      "ObjectId" : "d0a67b40a6552a8addf4b918fa7f103891f2ceb5",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/Trajectory/CMakeLists.txt" : {
      "ObjectId" : "b5b37e5224f806b5bef80a615e5124b03d661b60",
      "LastModified" : "2019-04-07T09:38:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/GraphMol/Wrap/CMakeLists.txt" : {
      "ObjectId" : "e8487ad5d1365cefacb3184ca705050bca4f1419",
      "LastModified" : "2019-04-07T09:38:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/JavaWrappers/CMakeLists.txt" : {
      "ObjectId" : "cd2d60de22aabd10df8feb8b291a9c919cfe7419",
      "LastModified" : "2019-04-07T09:38:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#if(RDK_BUILD_COORDGEN_SUPPORT)\n\n#  set(swigRDKitLibList \"${swigRDKitLibList};${RDK_COORDGEN_LIBS}\")\n\n#endif(RDK_BUILD_COORDGEN_SUPPORT)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Code/JavaWrappers/csharp_wrapper/CMakeLists.txt" : {
      "ObjectId" : "aeb1b48a6a06da90fc524e35ee1851eabf2ac96a",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find the gmcs executables on non-windows systems:\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup a few variables for environment-specific things\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Coax SWIG into playing nicely with Apple environments\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# we added all source files, now remove the ones that we're not supporting in this build:\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# it doesnt seem like the threading libs should need to be here, but\n\n# as of Oct 2012 using boost 1.51 under at least ubuntu 12.04 we get a\n\n# link error if they aren't there.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# code adapted from the wrapper code for\n\n# GDCM: http://gdcm.svn.sf.net/viewvc/gdcm/trunk/Wrapping/Java/CMakeLists.txt?view=markup\n",
        "Line" : 77,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "## 1. run this custom command only after swig has been run.\n",
        "Line" : 84,
        "CharPositionInLine" : 5
      },
      "CommentCount" : 7
    },
    "Code/JavaWrappers/gmwrapper/CMakeLists.txt" : {
      "ObjectId" : "4f1faa58d8121a56cd6522c811a5546ce685484f",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure we can access the junit.jar -- needed for compiling/running tests\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Likewise for javadoc\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# java8 raises errors while creating the documentation\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Setup a few variables for environment-specific things\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Coax SWIG into playing nicely with Apple environments\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# enable this line to build the ErrorGenerator class for testing handling of C++ errors in the JNI layer\n\n#SET(CMAKE_SWIG_FLAGS ${CMAKE_SWIG_FLAGS} \"-D INCLUDE_ERROR_GENERATOR\" )\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# we added all source files, now remove the ones that we're not supporting in this build:\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# it doesnt seem like the threading libs should need to be here, but\n\n# as of Oct 2012 using boost 1.51 under at least ubuntu 12.04 we get a\n\n# link error if they aren't there.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# code adapted from the wrapper code for\n\n# GDCM: http://gdcm.svn.sf.net/viewvc/gdcm/trunk/Wrapping/Java/CMakeLists.txt?view=markup\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Add in our own Java sources\n\n# COMMAND ${COPY_CMD}\n\n## 1. run this custom command only after swig has been run.\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "## 2. now that the *.class have been generated construct the jar file.\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#DEPENDS GraphMolWrap\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "## Run Javadoc against newly created .java files to create docs\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "## Put the doc files into their own separate archive.\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#DEPENDS GraphMolWrap\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "## Tests -- note that building/rebuilding them keys on the file WrapperTests.class\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# we added all source files, now remove the ones that we're not supporting in this build:\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# need to add boost libs for testing\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#ADD_TEST(JavaMemoryTests\n\n#    java -Djava.library.path=${CMAKE_CURRENT_SOURCE_DIR}\n\n#\t-cp \"${JUNIT_JAR}${PATH_SEP}${CMAKE_JAVA_TEST_OUTDIR}${PATH_SEP}${CMAKE_CURRENT_SOURCE_DIR}/org.RDKit.jar\"\n\n#\torg.RDKit.MemoryTests)\n",
        "Line" : 306,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "Code/ML/CMakeLists.txt" : {
      "ObjectId" : "c792c2d9bd746158c41f3d5aa3bbe187b3782dda",
      "LastModified" : "2019-04-07T09:38:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/ML/Cluster/CMakeLists.txt" : {
      "ObjectId" : "d857c418a9e398d37f96455d48c16c9c107141a3",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/ML/Cluster/Murtagh/CMakeLists.txt" : {
      "ObjectId" : "b1e219d8fb630486e77bf6830cd54f8653124642",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/ML/Data/CMakeLists.txt" : {
      "ObjectId" : "a0fc569c8eeffa8497779ce780b8cf43c9a1efa7",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/ML/InfoTheory/CMakeLists.txt" : {
      "ObjectId" : "2743e1e371b7ab982c2e1ca0f021c6bb99f487e9",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/ML/InfoTheory/Wrap/CMakeLists.txt" : {
      "ObjectId" : "3f2ef64dd941cf05900c2a53456f8ffc6c8b39d4",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/Numerics/Alignment/CMakeLists.txt" : {
      "ObjectId" : "20de0fe516b23e697f27e7cefc729755278517c6",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/Numerics/Alignment/Wrap/CMakeLists.txt" : {
      "ObjectId" : "3e476cc28721b30d1d0775f6b32a6aed0a8aa116",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/Numerics/CMakeLists.txt" : {
      "ObjectId" : "b523b1a4bb2509928a94ca778bb9e5beb819303e",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/Numerics/EigenSolvers/CMakeLists.txt" : {
      "ObjectId" : "576a1aaade93e7c09ba75b70d0c09922c54f01fb",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/Numerics/Optimizer/CMakeLists.txt" : {
      "ObjectId" : "d35a59c3b3db0b95b47f1c8f251e35eee87df081",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/PgSQL/rdkit/CMakeLists.txt" : {
      "ObjectId" : "b0bd2f70ddf0f7a65cbcd23a78b1b49f501bcf2b",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/PgSQL/rdkit/Makefile" : {
      "ObjectId" : "c21ed33024117b8f467d3fe7d4583e2436b16d0b",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# -------------------------\n\n#     Variables used and default values:\n\n# USE_INCHI enables InChI functions; requires rdkit built with inchi support:\n\n#USE_INCHI=0\n\n# USE_AVALON enables the avalon fingerprint; requires rdkit built with avalon support:\n\n#USE_AVALON=0\n\n# USE_THREADS links against boost.system; required with non-ancient boost versions if inchi is enabled or the rdkit is built with threadsafe SSS:\n\n#USE_THREADS=0\n\n# STATIC_LINK links against the static RDKit libraries:\n\n#STATIC_LINK=1\n\n# -------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1,
      "Errorlog" : "line 59:127 token recognition error at: '\\1'\nline 65:59 token recognition error at: '\" && echo yes || echo no)\\n\\nall: $(EXTENSION)--$(EXTVERSION).sql\\n\\nifeq ($(PG95),yes)\\n$(EXTENSION)--$(EXTVERSION).sql: $(EXTENSION).sql.in\\n\\tsed -e's/@RDKIT_PG_BFP_GIST_FETCH@/FUNCTION    9   gbfp_fetch (internal),/;' \\\\n-e's/@RDKIT_GIN_BFP_TRICONSISTENT@/FUNCTION    6   gin_bfp_triconsistent(internal, int2, bfp, int4, internal, internal, internal),/' \\\\n $< > $@\\n\\tcp $< $@\\nelse\\nifeq ($(PG92),no)\\n$(EXTENSION)--$(EXTVERSION).sql: $(EXTENSION).sql.in\\n\\tsed -e's/@RDKIT_PG_BFP_GIST_FETCH@//;' \\\\n-e's/@RDKIT_GIN_BFP_TRICONSISTENT@/FUNCTION    6   gin_bfp_triconsistent(internal, int2, bfp, int4, internal, internal, internal),/' \\\\n$< > $@\\nelse\\n$(EXTENSION)--$(EXTVERSION).sql: $(EXTENSION).sql.in\\n\\tsed -e's/@RDKIT_PG_BFP_GIST_FETCH@//;' \\\\n-e's/@RDKIT_GIN_BFP_TRICONSISTENT@//;' \\\\n$< > $@\\nendif\\nendif\\n\\nREGRESS    = rdkit-91 props btree molgist bfpgist-91 bfpgin sfpgist slfpgist fps reaction ${INCHIREGRESS} ${AVALONREGRESS}\\nDATA = $(EXTENSION)--$(EXTVERSION).sql\\nEXTRA_CLEAN = $(EXTENSION)--$(EXTVERSION).sql\\ninclude $(PGXS)\\n\\n# save our current CC value:\\nOCC := $(CC)\\n# and then change the defn of CC so that we'll link with g++\\nCC = $(CXX)\\n# we build .c files using this original defn:\\n%.o : %.c\\n\\t$(OCC) $(CFLAGS) $(CPPFLAGS) -fPIC -c -o $@ $<\\n\\n%.o : %.cpp\\n\\t$(CXX) $(CPLUSPLUSFLAGS) $(CPPFLAGS) -fPIC -c -o $@ $<\\n\u0000'\n"
    },
    "Code/Query/CMakeLists.txt" : {
      "ObjectId" : "f4e5001550329af7031d6d2c8a539511a1fa940a",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/RDBoost/CMakeLists.txt" : {
      "ObjectId" : "d240e961304b72cb6b53042becceaa9276396ae7",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# fixes an apple issue\n",
        "Line" : 13,
        "CharPositionInLine" : 7
      },
      "1" : {
        "Text" : "# this is a particularly nasty little bit of hackery.\n\n# cmake (as of 2.8) ignores the ADDITIONAL_MAKE_CLEAN_FILES argument\n\n# unless it's in a directory that actualy has a target. So in order to\n\n# cleanup files created by the python tests we have to put something\n\n# here with the ugly relative path\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "Code/RDBoost/Wrap/CMakeLists.txt" : {
      "ObjectId" : "1b7b59a28205f1f6389e85f0b08b18a3b23d655d",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/RDGeneral/CMakeLists.txt" : {
      "ObjectId" : "10d22f7a51eab1adedb742ea620d2426f3d2f0f0",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/RDGeneral/RDConfig.h.cmake" : {
      "ObjectId" : "d230d2bb9a234f90194b09246149d007690d0a44",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "//\n// Copyright (c) 2018 greg Landrum\n//\n//   @@ All Rights Reserved  @@\n//  This file is part of the RDKit.\n//  The contents are covered by the terms of the BSD license\n//  which is included in the file license.txt, found at the root\n//  of the RDKit source tree.\n//",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "// RDKit configuration options",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Code/RDGeneral/versions.cpp.cmake" : {
      "ObjectId" : "4674583c7fa8dd83a4a1203709ccd6277e0f5240",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "// The Boost version as detected at build time.\n// CMake's Boost_LIB_VERSION is defined by the FindBoost.cmake module\n// to be the same as the value from <boost/version.hpp>",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "// The system/compiler on which RDKit was built as detected at build time.",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Code/RDGeneral/versions.h.cmake" : {
      "ObjectId" : "ad0599909d12101aa09c59f5dc0b6291944f918f",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "//\n// Copyright (c) 2010-2018 greg Landrum\n//\n//   @@ All Rights Reserved  @@\n//  This file is part of the RDKit.\n//  The contents are covered by the terms of the BSD license\n//  which is included in the file license.txt, found at the root\n//  of the RDKit source tree.\n//",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "// inspired by: https://github.com/openbabel/openbabel/blob/master/src/config.h.cmake",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Version check macro\n   Can be used like #if (RDKIT_VERSION >= RDKIT_VERSION_CHECK(2018, 3, 1)) */",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* RDKIT_VERSION is (year*1000) + (month*10) + (rev) */",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "Code/RDStreams/CMakeLists.txt" : {
      "ObjectId" : "2706c03f7e97ad30111c57a420b585caec132da9",
      "LastModified" : "2019-04-07T09:38:26Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/SimDivPickers/CMakeLists.txt" : {
      "ObjectId" : "94cbc767840853fc605f51393c4405cd9aeb8a25",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/SimDivPickers/Wrap/CMakeLists.txt" : {
      "ObjectId" : "c46bd31fb978e8c95f095a5b39913d8eba4ca039",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Code/cmake/Modules/BoostUtils.cmake" : {
      "ObjectId" : "77b17f783d56ed60af141305a922024b95a5b5c6",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##########################################################################\n\n# Boost Utilities                                                        #\n\n##########################################################################\n\n# Copyright (C) 2007 Douglas Gregor <doug.gregor@gmail.com>              #\n\n# Copyright (C) 2007 Troy Straszheim                                     #\n\n#                                                                        #\n\n# Distributed under the Boost Software License, Version 1.0.             #\n\n# See accompanying file LICENSE_1_0.txt or copy at                       #\n\n#   http://www.boost.org/LICENSE_1_0.txt                                 #\n\n##########################################################################\n\n# Macros in this module:                                                 #\n\n#                                                                        #\n\n#   list_contains: Determine whether a string value is in a list.        #\n\n#                                                                        #\n\n#   car: Return the first element in a list                              #\n\n#                                                                        #\n\n#   cdr: Return all but the first element in a list                      #\n\n#                                                                        #\n\n#   parse_arguments: Parse keyword arguments for use in other macros.    #\n\n##########################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This utility macro determines whether a particular string value\n\n# occurs within a list of strings:\n\n#\n\n#  list_contains(result string_to_find arg1 arg2 arg3 ... argn)\n\n# \n\n# This macro sets the variable named by result equal to TRUE if\n\n# string_to_find is found anywhere in the following arguments.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This utility macro extracts the first argument from the list of\n\n# arguments given, and places it into the variable named var.\n\n#\n\n#   car(var arg1 arg2 ...)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This utility macro extracts all of the arguments given except the\n\n# first, and places them into the variable named var.\n\n#\n\n#   car(var arg1 arg2 ...)\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# The PARSE_ARGUMENTS macro will take the arguments of another macro and\n\n# define several variables. The first argument to PARSE_ARGUMENTS is a\n\n# prefix to put on all variables it creates. The second argument is a\n\n# list of names, and the third argument is a list of options. Both of\n\n# these lists should be quoted. The rest of PARSE_ARGUMENTS are\n\n# arguments from another macro to be parsed.\n\n# \n\n#     PARSE_ARGUMENTS(prefix arg_names options arg1 arg2...) \n\n# \n\n# For each item in options, PARSE_ARGUMENTS will create a variable with\n\n# that name, prefixed with prefix_. So, for example, if prefix is\n\n# MY_MACRO and options is OPTION1;OPTION2, then PARSE_ARGUMENTS will\n\n# create the variables MY_MACRO_OPTION1 and MY_MACRO_OPTION2. These\n\n# variables will be set to true if the option exists in the command line\n\n# or false otherwise.\n\n# \n\n# For each item in arg_names, PARSE_ARGUMENTS will create a variable\n\n# with that name, prefixed with prefix_. Each variable will be filled\n\n# with the arguments that occur after the given arg_name is encountered\n\n# up to the next arg_name or the end of the arguments. All options are\n\n# removed from these lists. PARSE_ARGUMENTS also creates a\n\n# prefix_DEFAULT_ARGS variable containing the list of all arguments up\n\n# to the first arg_name encountered.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Perform a reverse topological sort on the given LIST. \n\n#   \n\n#   topological_sort(my_list \"MY_\" \"_EDGES\")\n\n#\n\n# LIST is the name of a variable containing a list of elements to be\n\n# sorted in reverse topological order. Each element in the list has a\n\n# set of outgoing edges (for example, those other list elements that\n\n# it depends on). In the resulting reverse topological ordering\n\n# (written back into the variable named LIST), an element will come\n\n# later in the list than any of the elements that can be reached by\n\n# following its outgoing edges and the outgoing edges of any vertices\n\n# they target, recursively. Thus, if the edges represent dependencies\n\n# on build targets, for example, the reverse topological ordering is\n\n# the order in which one would build those targets.\n\n#\n\n# For each element E in this list, the edges for E are contained in\n\n# the variable named ${PREFIX}${E}${SUFFIX}, where E is the\n\n# upper-cased version of the element in the list. If no such variable\n\n# exists, then it is assumed that there are no edges. For example, if\n\n# my_list contains a, b, and c, one could provide a dependency graph\n\n# using the following variables:\n\n#\n\n#     MY_A_EDGES     b\n\n#     MY_B_EDGES     \n\n#     MY_C_EDGES     a b\n\n#\n\n#  With the involcation of topological_sort shown above and these\n\n#  variables, the resulting reverse topological ordering will be b, a,\n\n#  c.\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Clear the stack and output variable\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Loop over all of the vertices, starting the topological sort from\n\n# each one.\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# If we haven't already processed this vertex, start a depth-first\n\n# search from where.\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Push this vertex onto the stack with all of its outgoing edges\n",
        "Line" : 149,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# We've now seen this vertex\n",
        "Line" : 154,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# While the depth-first search stack is not empty\n",
        "Line" : 157,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Remove the vertex and its remaining out-edges from the top\n\n# of the stack\n",
        "Line" : 160,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Get the source vertex and the list of out-edges\n",
        "Line" : 165,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "# While there are still out-edges remaining\n",
        "Line" : 170,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Pull off the first outgoing edge\n",
        "Line" : 173,
        "CharPositionInLine" : 10
      },
      "16" : {
        "Text" : "# We have not seen the target before, so we will traverse\n\n# its outgoing edges before coming back to our\n\n# source. This is the key to the depth-first traversal.\n",
        "Line" : 179,
        "CharPositionInLine" : 12
      },
      "17" : {
        "Text" : "# We've now seen this vertex\n",
        "Line" : 183,
        "CharPositionInLine" : 12
      },
      "18" : {
        "Text" : "# Push the remaining edges for the current vertex onto the\n\n# stack\n",
        "Line" : 186,
        "CharPositionInLine" : 12
      },
      "19" : {
        "Text" : "# Setup the new source and outgoing edges\n",
        "Line" : 192,
        "CharPositionInLine" : 12
      },
      "20" : {
        "Text" : "# We have finished all of the outgoing edges for\n\n# SOURCE; add it to the resulting list.\n",
        "Line" : 202,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# Check the length of the stack\n",
        "Line" : 206,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 22
    },
    "Code/cmake/Modules/CodeCoverage.cmake" : {
      "ObjectId" : "9feb281c36a5a69a1944f23d49a8d15c13a2172c",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# 2012-01-31, Lars Bilke\n\n# - Enable Code Coverage\n\n#\n\n# 2013-09-17, Joakim Söderberg\n\n# - Added support for Clang.\n\n# - Some additional usage instructions.\n\n#\n\n# 2015-01-14, Brian Kelley\n\n# - Fix FLEX and BISON coverage (ignore certain files)\n\n#\n\n# USAGE:\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# 0. (Mac only) If you use Xcode 5.1 make sure to patch geninfo as described here:\n\n#      http://stackoverflow.com/a/22404544/80480\n\n#\n\n# 1. Copy this file into your cmake modules path.\n\n#\n\n# 2. Add the following line to your CMakeLists.txt:\n\n#      INCLUDE(CodeCoverage)\n\n#\n\n# 3. Set compiler flags to turn off optimization and enable coverage: \n\n#    SET(CMAKE_CXX_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#\t SET(CMAKE_C_FLAGS \"-g -O0 -fprofile-arcs -ftest-coverage\")\n\n#  \n\n# 3. Use the function SETUP_TARGET_FOR_COVERAGE to create a custom make target\n\n#    which runs your test executable and produces a lcov code coverage report:\n\n#    Example:\n\n#\t SETUP_TARGET_FOR_COVERAGE(\n\n#\t\t\t\tmy_coverage_target  # Name for custom target.\n\n#\t\t\t\ttest_driver         # Name of the test driver executable that runs the tests.\n\n#\t\t\t\t\t\t\t\t\t# NOTE! This should always have a ZERO as exit code\n\n#\t\t\t\t\t\t\t\t\t# otherwise the coverage generation will not complete.\n\n#\t\t\t\tcoverage            # Name of output directory.\n\n#\t\t\t\t)\n\n#\n\n# 4. Build a Debug build:\n\n#\t cmake -DCMAKE_BUILD_TYPE=Debug ..\n\n#\t make\n\n#\t make my_coverage_target\n\n#\n\n#\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check prereqs\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOT GCOV_PATH\n",
        "Line" : 52,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# Clang version 3.0.0 and greater now supports gcov as well.\n",
        "Line" : 55,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# NOT CMAKE_COMPILER_IS_GNUCXX\n",
        "Line" : 61,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# NOT CMAKE_BUILD_TYPE STREQUAL \"Debug\"\n",
        "Line" : 87,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests.\n\n#\t\t\t\t\t\tMUST return ZERO always, even on errors. \n\n#\t\t\t\t\t\tIf not, no coverage report will be created!\n\n# Param _outputname     lcov output is generated as _outputname.info\n\n#                       HTML report is generated in _outputname/index.html\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# NOT LCOV_PATH\n",
        "Line" : 102,
        "CharPositionInLine" : 9
      },
      "9" : {
        "Text" : "# NOT GENHTML_PATH\n",
        "Line" : 106,
        "CharPositionInLine" : 9
      },
      "10" : {
        "Text" : "# Setup target\n",
        "Line" : 110,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Cleanup lcov\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Run tests\n",
        "Line" : 116,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Capturing lcov counters and generating report\n",
        "Line" : 118,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 130,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE\n",
        "Line" : 136,
        "CharPositionInLine" : 14
      },
      "16" : {
        "Text" : "# Param _targetname     The name of new the custom make target\n\n# Param _testrunner     The name of the target which runs the tests\n\n# Param _outputname     cobertura output is generated as _outputname.xml\n\n# Optional fourth parameter is passed as arguments to _testrunner\n\n#   Pass them in list form, e.g.: \"-j;2\" for -j 2\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# NOT PYTHON_EXECUTABLE\n",
        "Line" : 147,
        "CharPositionInLine" : 9
      },
      "18" : {
        "Text" : "# NOT GCOVR_PATH\n",
        "Line" : 151,
        "CharPositionInLine" : 9
      },
      "19" : {
        "Text" : "# Run tests\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Running gcovr\n",
        "Line" : 158,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Show info where to find the report\n",
        "Line" : 164,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# SETUP_TARGET_FOR_COVERAGE_COBERTURA",
        "Line" : 170,
        "CharPositionInLine" : 14
      },
      "CommentCount" : 23
    },
    "Code/cmake/Modules/FindBISON.cmake" : {
      "ObjectId" : "01fafcf6f2d756fd9a401e555b015c342855a386",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find bison executable and provides macros to generate custom build rules\r\n\n# The module defines the following variables:\r\n\n#\r\n\n#  BISON_EXECUTABLE - path to the bison program\r\n\n#  BISON_VERSION - version of bison\r\n\n#  BISON_FOUND - true if the program was found\r\n\n#\r\n\n# If bison is found, the module defines the macros:\r\n\n#  BISON_TARGET(<Name> <YaccInput> <CodeOutput> [VERBOSE <file>]\r\n\n#              [COMPILE_FLAGS <string>])\r\n\n# which will create  a custom rule to generate  a parser. <YaccInput> is\r\n\n# the path to  a yacc file. <CodeOutput> is the name  of the source file\r\n\n# generated by bison.  A header file is also  be generated, and contains\r\n\n# the  token  list.  If  COMPILE_FLAGS  option is  specified,  the  next\r\n\n# parameter is  added in the bison  command line.  if  VERBOSE option is\r\n\n# specified, <file> is created  and contains verbose descriptions of the\r\n\n# grammar and parser. The macro defines a set of variables:\r\n\n#  BISON_${Name}_DEFINED - true is the macro ran successfully\r\n\n#  BISON_${Name}_INPUT - The input source file, an alias for <YaccInput>\r\n\n#  BISON_${Name}_OUTPUT_SOURCE - The source file generated by bison\r\n\n#  BISON_${Name}_OUTPUT_HEADER - The header file generated by bison\r\n\n#  BISON_${Name}_OUTPUTS - The sources files generated by bison\r\n\n#  BISON_${Name}_COMPILE_FLAGS - Options used in the bison command line\r\n\n#\r\n\n#====================================================================\r\n\n# Example:\r\n\n#\r\n\n# find_package(BISON)\r\n\n# BISON_TARGET(MyParser parser.y ${CMAKE_CURRENT_BINARY_DIR}/parser.cpp)\r\n\n# add_executable(Foo main.cpp ${BISON_MyParser_OUTPUTS})\r\n\n#====================================================================\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Tristan Carel\r\n\n# All rights reserved.\r\n\n# Redistribution and use in source and binary forms, with or without\r\n\n# modification, are permitted provided that the following conditions are met:\r\n\n#\r\n\n#     * Redistributions of source code must retain the above copyright\r\n\n#       notice, this list of conditions and the following disclaimer.\r\n\n#     * Redistributions in binary form must reproduce the above copyright\r\n\n#       notice, this list of conditions and the following disclaimer in the\r\n\n#       documentation and/or other materials provided with the distribution.\r\n\n#     * Neither the name of the University of California, Berkeley nor the\r\n\n#       names of its contributors may be used to endorse or promote products\r\n\n#       derived from this software without specific prior written permission.\r\n\n#\r\n\n# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY\r\n\n# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\r\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\r\n\n# DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY\r\n\n# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: FindBISON.cmake,v 1.1 2009/08/13 04:11:23 lowman Exp $\r\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# internal macro\r\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# internal macro\r\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#============================================================\r\n\n# BISON_TARGET (public macro)\r\n\n#============================================================\r\n\n#\r\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Parsing parameters\r\n",
        "Line" : 114,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Header's name generated by bison (see option -d)\r\n",
        "Line" : 134,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# define target variables\r\n",
        "Line" : 150,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "#\r\n\n#============================================================\r\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# FindBISON.cmake ends here\r\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "Code/cmake/Modules/FindCairo.cmake" : {
      "ObjectId" : "85d612028909e95e6bbd53ae1b2323e85edb608e",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Grabbed from here:\n\n# https://github.com/avaucher/cmake-find-module-imported-target/blob/master/cmake/FindCairo.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Try to find Cairo\n\n# Once done, this will define\n\n#\n\n#  CAIRO_FOUND - system has Cairo\n\n#  CAIRO_INCLUDE_DIRS - the Cairo include directories\n\n#  CAIRO_LIBRARIES - link these to use Cairo\n\n#\n\n# and the following imported targets::\n\n#\n\n#  Cairo::Cairo - The Cairo library\n\n#\n\n#\n\n# Original work Copyright (C) 2012 Raphael Kubo da Costa <rakuco@webkit.org>\n\n# Modified work Copyright (C) 2017 Alain Vaucher\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n# 1.  Redistributions of source code must retain the above copyright\n\n#     notice, this list of conditions and the following disclaimer.\n\n# 2.  Redistributions in binary form must reproduce the above copyright\n\n#     notice, this list of conditions and the following disclaimer in the\n\n#     documentation and/or other materials provided with the distribution.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDER AND ITS CONTRIBUTORS ``AS\n\n# IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,\n\n# THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n\n# PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR ITS\n\n# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n\n# EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n\n# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n\n# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n\n# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR\n\n# OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\n\n# ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# FIXME: After we require CMake 2.8.2 we can pass QUIET to this call.\n",
        "Line" : 41,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# FIXME: Should not be needed anymore once we start depending on CMake 2.8.3\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# FIXME: Use IF (NOT ...) with CMake 2.8.2+ to get rid of the ELSE block\n",
        "Line" : 78,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 5
    },
    "Code/cmake/Modules/FindEigen3.cmake" : {
      "ObjectId" : "bfb332baf7e2edc08c7797c269831b94b1120311",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Grabbed from here:\n\n# https://github.com/avaucher/cmake-find-module-imported-target/blob/master/cmake/FindEigen3.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n\n#\n\n# and the following imported target:\n\n#\n\n#  Eigen3::Eigen - The header-only Eigen library\n\n#\n\n# This module reads hints about search locations from \n\n# the following enviroment variables:\n\n#\n\n# EIGEN3_ROOT\n\n# EIGEN3_ROOT_DIR\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# in cache already\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# search first if an Eigen3Config.cmake is available in the system,\n\n# if successful this would set EIGEN3_INCLUDE_DIR and the rest of\n\n# the script will work as usual\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "Code/cmake/Modules/FindFLEX.cmake" : {
      "ObjectId" : "cfe8f6bb8239632df047369458fcaeee0a91c5e0",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find flex executable and provides a macro to generate custom build rules\n\n#\n\n# The module defines the following variables:\n\n#  FLEX_FOUND - true is flex executable is found\n\n#  FLEX_EXECUTABLE - the path to the flex executable\n\n#  FLEX_VERSION - the version of flex\n\n#  FLEX_LIBRARIES - The flex libraries\n\n#\n\n# If flex is found on the system, the module provides the macro:\n\n#  FLEX_TARGET(Name FlexInput FlexOutput [COMPILE_FLAGS <string>])\n\n# which creates a custom command  to generate the <FlexOutput> file from\n\n# the <FlexInput> file.  If  COMPILE_FLAGS option is specified, the next\n\n# parameter is added to the flex  command line. Name is an alias used to\n\n# get  details of  this custom  command.  Indeed the  macro defines  the\n\n# following variables:\n\n#  FLEX_${Name}_DEFINED - true is the macro ran successfully\n\n#  FLEX_${Name}_OUTPUTS - the source file generated by the custom rule, an\n\n#  alias for FlexOutput\n\n#  FLEX_${Name}_INPUT - the flex source file, an alias for ${FlexInput}\n\n#\n\n# Flex scanners oftenly use tokens  defined by Bison: the code generated\n\n# by Flex  depends of the header  generated by Bison.   This module also\n\n# defines a macro:\n\n#  ADD_FLEX_BISON_DEPENDENCY(FlexTarget BisonTarget)\n\n# which  adds the  required dependency  between a  scanner and  a parser\n\n# where  <FlexTarget>  and <BisonTarget>  are  the  first parameters  of\n\n# respectively FLEX_TARGET and BISON_TARGET macros.\n\n#\n\n#====================================================================\n\n# Example:\n\n#\n\n#  find_package(BISON)\n\n#  find_package(FLEX)\n\n#\n\n#  BISON_TARGET(MyParser parser.y ${CMAKE_CURRENT_BINARY_DIR}/parser.cpp\n\n#  FLEX_TARGET(MyScanner lexer.l  ${CMAKE_CURRENT_BIANRY_DIR}/lexer.cpp)\n\n#  ADD_FLEX_BISON_DEPENDENCY(MyScanner MyParser)\n\n#\n\n#  include_directories(${CMAKE_CURRENT_BINARY_DIR})\n\n#  add_executable(Foo\n\n#     Foo.cc\n\n#     ${BISON_MyParser_OUTPUTS}\n\n#     ${FLEX_MyScanner_OUTPUTS}\n\n#  )\n\n#====================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, Tristan Carel\n\n# All rights reserved.\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n#     * Redistributions of source code must retain the above copyright\n\n#       notice, this list of conditions and the following disclaimer.\n\n#     * Redistributions in binary form must reproduce the above copyright\n\n#       notice, this list of conditions and the following disclaimer in the\n\n#       documentation and/or other materials provided with the distribution.\n\n#     * Neither the name of the University of California, Berkeley nor the\n\n#       names of its contributors may be used to endorse or promote products\n\n#       derived from this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE REGENTS AND CONTRIBUTORS ``AS IS'' AND ANY\n\n# EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE REGENTS AND CONTRIBUTORS BE LIABLE FOR ANY\n\n# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# $Id: FindFLEX.cmake,v 1.1 2009/08/13 04:11:23 lowman Exp $\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#============================================================\n\n# FLEX_TARGET (public macro)\n\n#============================================================\n\n#\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#============================================================\n",
        "Line" : 127,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#============================================================\n\n# ADD_FLEX_BISON_DEPENDENCY (public macro)\n\n#============================================================\n\n#\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#============================================================\n",
        "Line" : 147,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# FindFLEX.cmake ends here\n",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "Code/cmake/Modules/FindInchi.cmake" : {
      "ObjectId" : "a91740d44ae01264b070dfd9e2f2d53a89d4b896",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Inchi lib\n\n# Once done this will define\n\n#\n\n#  INCHI_FOUND - system has inchi lib\n\n#  INCHI_INCLUDE_DIR - the inchi include directory\n\n#  INCHI_LIBRARIES - the inchi library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Taken from the open babel distribution\n\n#  https://openbabel.svn.sourceforge.net/svnroot/openbabel/openbabel/trunk/cmake/modules/FindInchi.cmake\n\n# Copyright (c) 2010 Marcus D. Hanwell, <marcus@cryos.org>\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# check whether we have custom InChI source\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# system InChI is missing, download it\n",
        "Line" : 40,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "Code/cmake/Modules/FindNumPy.cmake" : {
      "ObjectId" : "a4e43b3f5b2b21d72d3243c3e524ac8cfa8139f7",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# adapted from http://voxel.jouy.inra.fr/darcs/contrib-itk/WrapITK/ExternalProjects/PyBuffer/FindNUMARRAY.cmake\n\n# Try to find numarray python package\n\n# Once done this will define\n\n#\n\n# PYTHON_NUMPY_FOUND        - system has numarray development package and it should be used\n\n# PYTHON_NUMPY_INCLUDE_PATH  - directory where the arrayobject.h header file can be found\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Code/cmake/Modules/Findcoordgen.cmake" : {
      "ObjectId" : "83cee97497eeb8dc16e10d91285fefd65e958db4",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find Schrodinger's CoorgGen libraries.\n\n#\n\n# Different version handling is not yet supported\n\n#\n\n# Once found, this will find and define the following variables:\n\n#\n\n# coordgen_INCLUDE_DIRS   - CoordGen's includes directory\n\n# coordgen_LIBRARIES      - CoordGen's shared libraries\n\n# coordgen_TEMPLATE_FILE  - CoordGen templates file\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Just in case, add parent directory above libraries to templates search hints\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Code/cmake/Modules/Findmaeparser.cmake" : {
      "ObjectId" : "55268f3fb53c49c1180bd106387542ba5f59cbb5",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find Schrodinger's MAEParser libraries.\n\n#\n\n# Different version handling is not yet supported\n\n#\n\n# Once found, this will find and define the following variables:\n\n#\n\n# maeparser_INCLUDE_DIRS  - maeparser's includes directory\n\n# maeparser_LIBRARIES     - maeparser's shared libraries\n\n#\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Code/cmake/Modules/RDKitUtils.cmake" : {
      "ObjectId" : "97925982b49cb074def4edbd79e0bc6b715c0f5f",
      "LastModified" : "2019-04-07T09:38:26Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Mac OS X specific code\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# we're going to always build in shared mode since we\n\n# need exceptions to be (correctly) catchable across\n\n# boundaries. As of now (June 2010), this doesn't work\n\n# with g++ unless libraries are shared.\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# RDKHDR_DEFAULT_ARGS -> RDKHDR_DEST\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#ParseAndAddCatchTests(${RDKTEST_NAME})\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# CMake < 2.8.10 does not seem to support HTTPS out of the box\n\n# and since SourceForge redirects to HTTPS, the CMake download fails\n\n# so we try to use Powershell (Windows) or system curl (Unix, OS X) if available\n",
        "Line" : 202,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "Contrib/CMakeLists.txt" : {
      "ObjectId" : "6b340d69f5c20fae6ce865662116aa8edf111a78",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Contrib/ConformerParser/CMakeLists.txt" : {
      "ObjectId" : "d7adb14391e7f2e4fe811e437ead9173a8438de6",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Contrib/ConformerParser/Wrap/CMakeLists.txt" : {
      "ObjectId" : "e1847c6d92a0daf92c1969d77736cc07db6aed52",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Contrib/PBF/Makefile" : {
      "ObjectId" : "4d13ab35d78502d0a330b92edab955a2f462bf5e",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "Docs/Book/C++Examples/CMakeLists.txt" : {
      "ObjectId" : "a0de956c87488fea306626a58afec383c1b14990",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add_executable( test_example test_example.cpp )\n\n# target_link_libraries( test_example ${LIBS} )\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "Docs/Book/C++Examples/FindMyRDKit.cmake" : {
      "ObjectId" : "d06e2d23768ad288525707a5118059943fe2bce2",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Attempts to find RDKit libraries using the current value of $RDBASE\n\n# or, failing that, a version in my home directory\n\n# It returns the static (.a) libraries not the .so ones because that's\n\n# easiest for shipping (on Unix anyway. This may have to change once I start\n\n# dealing with Windows as well.)\n\n#\n\n# It will define\n\n# RDKIT_FOUND as MyRDKit_FOUND if it finds everything it needs\n\n# RDKIT_INCLUDE_DIR\n\n# RDKIT_LIBRARIES as requested\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# libraries, as specified in the COMPONENTS\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Docs/Book/Makefile" : {
      "ObjectId" : "d837081001064948e21936be66c3fbdce694e06a",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Created by running doxygen in the $RDBASE/Code directory as follows:\n\n#  doxygen doxygen.config\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#RSTS_FROM_MD = Overview.rst Cartridge.rst Cookbook.rst Install.rst\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#$(RSTS_FROM_MD): %.rst: %.md\n\n#\tpandoc -t rst -f markdown_github -o $@ $<\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "Docs/Book_jp/Makefile" : {
      "ObjectId" : "d837081001064948e21936be66c3fbdce694e06a",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Created by running doxygen in the $RDBASE/Code directory as follows:\n\n#  doxygen doxygen.config\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#RSTS_FROM_MD = Overview.rst Cartridge.rst Cookbook.rst Install.rst\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#$(RSTS_FROM_MD): %.rst: %.md\n\n#\tpandoc -t rst -f markdown_github -o $@ $<\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "External/AvalonTools/CMakeLists.txt" : {
      "ObjectId" : "f48caed427e73ccd73032c1be58a7cdc136e2b51",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# apply patch to AvalonTools\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# we need this to ensure that builds continue\n\n# to work on linux systems with older versions\n\n# of glibc when we're building with gcc-4.1.\n\n# Without this flag, we'll endup requiring\n\n# glibc 2.7.\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "External/AvalonTools/Wrap/CMakeLists.txt" : {
      "ObjectId" : "00c9fe7484fcce7c870be74d0677ed92fcf8ea6f",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "External/CMakeLists.txt" : {
      "ObjectId" : "62c2524c1447cb75e1a6a6f431c5b7ef067950c2",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "External/CoordGen/CMakeLists.txt" : {
      "ObjectId" : "687a1e76015083551818bc29f856717c0c8957d5",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# when we're doing static linkage of boost, at least on windows, we need\n\n# to also link against zlib (due to iostreams)\n",
        "Line" : 75,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "External/CoordGen/Wrap/CMakeLists.txt" : {
      "ObjectId" : "9b5a2e8115e964aa901fd1f4a3e2e2c0670bb127",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "External/FreeSASA/CMakeLists.txt" : {
      "ObjectId" : "c04a4a5edc494516ff5888694bf024bb03f9bd56",
      "LastModified" : "2019-04-15T12:25:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# don't actually use the md5 here\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "External/FreeSASA/Wrap/CMakeLists.txt" : {
      "ObjectId" : "bfe32cd67aa17979b8d7d19cf4c0331ab8a055ab",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "External/INCHI-API/CMakeLists.txt" : {
      "ObjectId" : "cca6a03c0445e228e35861adcf51bed8cfb90c34",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# we need an inchi.py... copy in the appropriate one\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "External/INCHI-API/Wrap/CMakeLists.txt" : {
      "ObjectId" : "65a4e898425181221739ebd058206abc856f7c85",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "External/YAeHMOP/CMakeLists.txt" : {
      "ObjectId" : "035039ffbc358f55ff8c8c54241f0a07c60e1ccb",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "External/YAeHMOP/Wrap/CMakeLists.txt" : {
      "ObjectId" : "fd5954fad702aa4aaad285a6f6ee7ad35f808f9d",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "External/catch/CMakeLists.txt" : {
      "ObjectId" : "a223955690dd5c46959b2e33d9760a9faf0fd864",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Projects/CMakeLists.txt" : {
      "ObjectId" : "0af94d693aec02ed4507639cd764da7e9841fa65",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rdkit/CMakeLists.txt" : {
      "ObjectId" : "2fd19db95fe1a89ea240586bdd903654dd7641bd",
      "LastModified" : "2019-03-28T16:21:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 136,
    "CMAKESOURCE" : 12,
    "QMAKE" : 1,
    "MAKEFILE" : 14
  },
  "ElapsedTime" : 6677
}