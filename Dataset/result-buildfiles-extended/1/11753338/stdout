{
  "Repository" : "11753338",
  "Revision" : "HEAD",
  "ObjectId" : "3aa304c155ac6b601688c6ad721e51c2dad7b443",
  "CommitTime" : "2019-04-12T21:36:45Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "90564bae035476a8638f79f302e013e24905c4d4",
      "LastModified" : "2017-04-04T17:14:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Objective-C support\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# JNI support\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do not use the host's jni.h on Android as it is provided automatically by the NDK\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Store path to the \"run\" executable so it can be passed as argument to add_custom_command() scripts\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "Makefile" : {
      "ObjectId" : "8f0773f6f0d54a11b15caece5032446503f572d7",
      "LastModified" : "2019-04-09T01:44:09Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Environment variables for overriding default behavior.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Global targets.\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# rule to lazily clone gyp\n\n# freeze gyp at the last version with android support\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# we specify a root target for android to prevent all of the targets from spidering out\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# we specify a root target for android to prevent all of the targets from spidering out\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# this target implicitly depends on GypAndroid.mk since gradle will try to make it\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/ios.toolchain.cmake" : {
      "ObjectId" : "7a3a855f4058d5b97c2e876909b497623b0a6423",
      "LastModified" : "2019-04-09T01:44:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of the ios-cmake project. It was retrieved from\n\n# https://github.com/cristeab/ios-cmake.git, which is a fork of\n\n# https://code.google.com/p/ios-cmake/. Which in turn is based off of\n\n# the Platform/Darwin.cmake and Platform/UnixPaths.cmake files which\n\n# are included with CMake 2.8.4\n\n#\n\n# The ios-cmake project is licensed under the new BSD license.\n\n#\n\n# Copyright (c) 2014, Bogdan Cristea and LTE Engineering Software,\n\n# Kitware, Inc., Insight Software Consortium.  All rights reserved.\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n# 1. Redistributions of source code must retain the above copyright\n\n# notice, this list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright\n\n# notice, this list of conditions and the following disclaimer in the\n\n# documentation and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its\n\n# contributors may be used to endorse or promote products derived from\n\n# this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n\n# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n\n# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n\n# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# This file is based off of the Platform/Darwin.cmake and\n\n# Platform/UnixPaths.cmake files which are included with CMake 2.8.4\n\n# It has been altered for iOS development.\n\n#\n\n# Updated by Alex Stewart (alexs.mac@gmail.com).\n\n# The following variables control the behaviour of this toolchain:\n\n#\n\n# IOS_PLATFORM: OS (default) or SIMULATOR or SIMULATOR64 or TVOS or SIMULATOR_TVOS\n\n#    OS = Build for iPhoneOS.\n\n#    SIMULATOR = Build for x86 i386 iPhone Simulator.\n\n#    SIMULATOR64 = Build for x86 x86_64 iPhone Simulator.\n\n#    TVOS = Build for AppleTVOS.\n\n#    SIMULATOR_TVOS = Build for x86_64 AppleTV Simulator.\n\n# CMAKE_OSX_SYSROOT: Path to the iOS SDK to use.  By default this is\n\n#    automatically determined from IOS_PLATFORM and xcodebuild, but\n\n#    can also be manually specified (although this should not be required).\n\n# CMAKE_IOS_DEVELOPER_ROOT: Path to the Developer directory for the iOS platform\n\n#    being compiled for.  By default this is automatically determined from\n\n#    CMAKE_OSX_SYSROOT, but can also be manually specified (although this should\n\n#    not be required).\n\n# ENABLE_BITCODE: (true|false) Enables or disables bitcode support. Default true\n\n#\n\n# This toolchain defines the following variables for use externally:\n\n#\n\n# XCODE_VERSION: Version number (not including Build version) of Xcode detected.\n\n# IOS_SDK_VERSION: Version of iOS SDK being used.\n\n# CMAKE_OSX_ARCHITECTURES: Architectures being compiled for (generated from\n\n#    IOS_PLATFORM).\n\n#\n\n# This toolchain defines the following macros for use externally:\n\n#\n\n# set_xcode_property (TARGET XCODE_PROPERTY XCODE_VALUE XCODE_VARIANT)\n\n#   A convenience macro for setting xcode specific properties on targets.\n\n#   Available variants are: All, Release, RelWithDebInfo, Debug, MinSizeRel\n\n#   example: set_xcode_property (myioslib IPHONEOS_DEPLOYMENT_TARGET \"3.1\" \"all\").\n\n#\n\n# find_host_package (PROGRAM ARGS)\n\n#   A macro used to find executable programs on the host system, not within the\n\n#   iOS environment.  Thanks to the android-cmake project for providing the\n\n#   command.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fix for PThread library not in path\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Get the Xcode version being used.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Default to building for iPhoneOS if not specified otherwise, and we cannot\n\n# determine the platform from the CMAKE_OSX_ARCHITECTURES variable.  The use\n\n# of CMAKE_OSX_ARCHITECTURES is such that try_compile() projects can correctly\n\n# determine the value of IOS_PLATFORM from the root project, as\n\n# CMAKE_OSX_ARCHITECTURES is propagated to them by CMake.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Determine the platform name and architectures for use in xcodebuild commands\n\n# from the specified IOS_PLATFORM name.\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If user did not specify the SDK root to use, then query xcodebuild for it.\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Specify minimum version of deployment target.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Unless specified, SDK version 8.0 is used by default as minimum target version.\n",
        "Line" : 150,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Use bitcode or not\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Unless specified, enable bitcode support by default\n",
        "Line" : 157,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Get the SDK version information.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Find the Developer root for the specific iOS platform being compiled for\n\n# from CMAKE_OSX_SYSROOT.  Should be ../../ from SDK specified in\n\n# CMAKE_OSX_SYSROOT.  There does not appear to be a direct way to obtain\n\n# this information from xcrun or xcodebuild.\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Find the C & C++ compilers for the specified SDK.\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Find (Apple's) libtool.\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Configure libtool to be used instead of ar + ranlib to build static libraries.\n\n# This is required on Xcode 7+, but should also work on previous versions of\n\n# Xcode.\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Get the version of Darwin (OS X) of the host.\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Standard settings.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Force unset of OS X-specific deployment target (otherwise autopopulated),\n\n# required as of cmake 2.8.10.\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Set the architectures for which to build.\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Skip the platform compiler checks for cross compiling.\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# All iOS/Darwin specific settings - some may be redundant.\n",
        "Line" : 230,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Note that only Xcode 7+ supports the newer more specific:\n\n# -m${XCODE_IOS_PLATFORM}-version-min flags, older versions of Xcode use:\n\n# -m(ios/ios-simulator)-version-min instead.\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Xcode 7.0+ uses flags we can build directly from XCODE_IOS_PLATFORM.\n",
        "Line" : 251,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# SIMULATOR or SIMULATOR64 both use -mios-simulator-version-min.\n",
        "Line" : 262,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Hidden visibilty is required for C++ on iOS.\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# In order to ensure that the updated compiler flags are used in try_compile()\n\n# tests, we have to forcibly set them in the CMake cache, not merely set them\n\n# in the local scope.\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old\n\n# build tree (where install_name_tool was hardcoded) and where\n\n# CMAKE_INSTALL_NAME_TOOL isn't in the cache and still cmake didn't fail in\n\n# CMakeFindBinUtils.cmake (because it isn't rerun) hardcode\n\n# CMAKE_INSTALL_NAME_TOOL here to install_name_tool, so it behaves as it did\n\n# before, Alex.\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Set the find root to the iOS developer roots and to user defined paths.\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Default to searching for frameworks first.\n",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Set up the default search directories for frameworks.\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Only search the specified iOS SDK, not the remainder of the host filesystem.\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# This little macro lets you set any XCode specific property.\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# This macro lets you find executable programs on the host system.\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "example/Makefile" : {
      "ObjectId" : "93ff801b60847ed60394ec0301fa51e1a9d0b679",
      "LastModified" : "2019-04-09T01:44:09Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "example/android/app/proguard-rules.pro" : {
      "ObjectId" : "bb65c6fe8879e5240c9b472d0e4826fdfc9e0b7c",
      "LastModified" : "2019-04-09T01:44:09Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Add project specific ProGuard rules here.\n\n# By default, the flags in this file are appended to flags specified\n\n# in /Applications/Android Studio.app/sdk/tools/proguard/proguard-android.txt\n\n# You can edit the include path and order by changing the proguardFiles\n\n# directive in build.gradle.\n\n#\n\n# For more details, see\n\n#   http://developer.android.com/guide/developing/tools/proguard.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add any project specific keep options here:\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If your project uses WebView with JS, uncomment the following\n\n# and specify the fully qualified class name to the JavaScript interface\n\n# class:\n\n#-keepclassmembers class fqcn.of.javascript.interface.for.webview {\n\n#   public *;\n\n#}\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "example/localhost/CMakeLists.txt" : {
      "ObjectId" : "64b8434b0c7e521016ae4fd8aee86b4ee0b569ab",
      "LastModified" : "2019-04-09T01:44:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n## Options\n\n##\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##\n\n## Global Dependencies\n\n##\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##\n\n## Shared Library\n\n##\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "example/localhost/build.xml" : {
      "ObjectId" : "594f4a3b47b747fbb8a2a4dab405fc51dfd363f9",
      "LastModified" : "2019-04-09T01:44:09Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " Verbose helps make debugging compiler issues easier ",
        "Line" : 7,
        "CharPositionInLine" : 67
      },
      "1" : {
        "Text" : " Make CMake configure Makefile install target to install locall\n           (to ./build/local) to make the shared library easier to reference\n           in java ",
        "Line" : 11,
        "CharPositionInLine" : 23
      },
      "2" : {
        "Text" : " Copy the native lib(s) to the canonical jar path resources/djinni_native_libs\n\t       so that com.dropbox.djinni.NativeLibLoader will find them on startup ",
        "Line" : 32,
        "CharPositionInLine" : 81
      },
      "CommentCount" : 3
    },
    "test-suite/Makefile" : {
      "ObjectId" : "c06a16c46caba0ff3a7a052df0849d4068aa09d2",
      "LastModified" : "2019-04-10T22:01:50Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "test-suite/java/CMakeLists.txt" : {
      "ObjectId" : "4466cd21e2be1339f7744bd5b3132f58d23aa44e",
      "LastModified" : "2019-04-09T01:44:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n## Options\n\n##\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##\n\n## Global Dependencies\n\n##\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##\n\n## Test Suite Shared Library\n\n##\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "test-suite/java/build.xml" : {
      "ObjectId" : "4e67b15e0fba0793b8f62325a68e04f432bc3115",
      "LastModified" : "2019-04-09T01:44:09Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " Veteran djinni users might not have cmake.  Given them some advice. ",
        "Line" : 7,
        "CharPositionInLine" : 80
      },
      "1" : {
        "Text" : " Verbose helps make debugging compiler issues easier ",
        "Line" : 23,
        "CharPositionInLine" : 67
      },
      "2" : {
        "Text" : " Make CMake configure Makefile install target to install locall\n\t       (to ./build/local) to make the shared library easier to reference\n\t\t   in java ",
        "Line" : 27,
        "CharPositionInLine" : 17
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 4,
    "QMAKE" : 1,
    "MAKEFILE" : 3,
    "ANT" : 2
  },
  "ElapsedTime" : 1322
}