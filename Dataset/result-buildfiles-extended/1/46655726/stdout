{
  "Repository" : "46655726",
  "Revision" : "HEAD",
  "ObjectId" : "d56806e5335baf0f12fec2278f9526d77ec0bb1e",
  "CommitTime" : "2019-02-27T03:57:32Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "c5f1ee0cb3d1c887835b40e7b0cce6f723b0ca78",
      "LastModified" : "2018-07-26T18:32:05Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Clean from within the docker container to avoid issues with file permissions:\n",
        "Line" : 22,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 1
    },
    "mesos_module/CMakeLists.txt" : {
      "ObjectId" : "7acc535a8197bfac197ae6825fe33d4dc104f28c",
      "LastModified" : "2016-10-12T21:03:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#cmake -DCMAKE_BUILD_TYPE=Release -Dboost_system_LIBRARY=/home/nick/code/boost_1_53_0/stage/lib/libboost_system.so.1.53.0 -DUSE_LOCAL_AVRO=False -Davro_LIBRARY=/usr/local/lib/libavrocpp.so.1.8.0.0 -DTARGET_DCOS=1.8 ..\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "#cmake -DCMAKE_BUILD_TYPE=Release -Dboost_system_LIBRARY=/home/nick/code/boost_1_53_0/stage/lib/libboost_system.so.1.53.0 -DUSE_LOCAL_AVRO=False -Davro_LIBRARY=/usr/local/lib/libavrocpp.so.1.8.0.0 -DTARGET_DCOS=1.7 ..\n",
        "Line" : 19,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Search for mesos includes (contains mesos/mesos.hpp) and mesos protobufs (contains mesos/mesos.pb.h).\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use mesos_VERSION to find a directory named \"mesos-VERSION\" which was created via get-mesos.sh helper script.\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Use mesos_INCLUDE_DIR for manually pointing to a copy of mesos which was built without get-mesos.sh.\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Set mesos_PROTOBUF_INCLUDE_DIR to match mesos_INCLUDE_DIR by default.\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Fall back to using whatever's on the system\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Search for libmesos.so\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Use lib which was created via get-mesos.sh helper script.\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Use whatever's installed on system\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Search for libprocess and stout, hopefully within Mesos includes but with fallback to system.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# >= 1.0\n",
        "Line" : 103,
        "CharPositionInLine" : 49
      },
      "12" : {
        "Text" : "# <= 0.28\n",
        "Line" : 104,
        "CharPositionInLine" : 51
      },
      "13" : {
        "Text" : "# We don't use this, but it's dragged in via stout's includes, so we're forced to find it so that stout doesn't break the build:\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Mesos may have linked against the system protobuf, or against its own copy.\n\n# Make sure our includes match Mesos or else linking will fail later.\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# internally required by stout\n",
        "Line" : 205,
        "CharPositionInLine" : 26
      },
      "16" : {
        "Text" : "# otherwise we get \"undefined symbol: _ZNK8picojson5value2isIlEEbv\"\n",
        "Line" : 211,
        "CharPositionInLine" : 38
      },
      "17" : {
        "Text" : "# for metrics schema\n",
        "Line" : 216,
        "CharPositionInLine" : 41
      },
      "18" : {
        "Text" : "# for library headers, hide any warnings:\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# ensure any header dependencies are unpacked before we start building\n",
        "Line" : 222,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# generate avro schema structs:\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# generate avro schema json:\n",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "mesos_module/InstallAvro.cmake" : {
      "ObjectId" : "bf9faf6ddd76817bf8a3f4e016c084d029ed66ed",
      "LastModified" : "2016-10-12T21:03:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Download/build avro library and avrogencpp schema generator\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ensure we trigger 'install', headers are moved around:\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "mesos_module/InstallMesosPicojsonIncludes.cmake" : {
      "ObjectId" : "73504917c5db2f691751a367c577a1474697fe24",
      "LastModified" : "2016-10-12T21:03:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# not found locally, fall back to web\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Download/build picojson (FIXME reuse mesos' build if present?)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "mesos_module/InstallMesosProtobufIncludes.cmake" : {
      "ObjectId" : "821403cb43c331bf51a6dbc58ed7492d997c6dab",
      "LastModified" : "2016-10-12T21:03:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# not found locally, fall back to web\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Download/build protobuf (FIXME reuse mesos' build if present?)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "mesos_module/tests/CMakeLists.txt" : {
      "ObjectId" : "eb78b277b2cde1cab823a47dd4d71cca1891350d",
      "LastModified" : "2016-10-12T21:03:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines ${GTEST_INCLUDE_DIR}/${GMOCK_INCLUDE_DIR} and \"gtest\"/\"gmock\" libs\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# for metrics schema\n",
        "Line" : 8,
        "CharPositionInLine" : 61
      },
      "2" : {
        "Text" : "# for library headers, hide any warnings:\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# not a unit test\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# disabled by default\n\n#add_test(statsd_output_writer_fuzz statsd_output_writer_fuzz)\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "mesos_module/tests/InstallGTestGMock.cmake" : {
      "ObjectId" : "334acc095dd618f5dbabdafcaac8637d3b9bfc78",
      "LastModified" : "2016-10-12T21:03:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Download/build gtest + gmock\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# libgtest.a is in googlemock/gtest/ for some reason:\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "vendor/github.com/Shopify/sarama/Makefile" : {
      "ObjectId" : "626b09a54512868c7461d7232a125782634aec7d",
      "LastModified" : "2016-10-12T21:03:13Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "vendor/github.com/dcos/dcos-go/Makefile" : {
      "ObjectId" : "a9f3d201f48cc068b01b921501004ef10eb38e39",
      "LastModified" : "2019-01-31T01:52:20Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "vendor/github.com/golang/protobuf/proto/Makefile" : {
      "ObjectId" : "e2e0651a934d3ab8fe6393dfd2556bbc4bd0792e",
      "LastModified" : "2019-01-31T01:52:20Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Go support for Protocol Buffers - Google's data interchange format\n\n#\n\n# Copyright 2010 The Go Authors.  All rights reserved.\n\n# https://github.com/golang/protobuf\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are\n\n# met:\n\n#\n\n#     * Redistributions of source code must retain the above copyright\n\n# notice, this list of conditions and the following disclaimer.\n\n#     * Redistributions in binary form must reproduce the above\n\n# copyright notice, this list of conditions and the following disclaimer\n\n# in the documentation and/or other materials provided with the\n\n# distribution.\n\n#     * Neither the name of Google Inc. nor the names of its\n\n# contributors may be used to endorse or promote products derived from\n\n# this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\n# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "vendor/github.com/matttproud/golang_protobuf_extensions/pbutil/Makefile" : {
      "ObjectId" : "81be214370d433d0aef7881d46c0264b5880fa60",
      "LastModified" : "2019-01-31T01:52:20Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "vendor/github.com/prometheus/procfs/Makefile" : {
      "ObjectId" : "dd48afdcd4570255c3043d5d8c14cfd3e1497e8f",
      "LastModified" : "2019-01-31T01:52:20Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "vendor/github.com/shirou/gopsutil/Makefile" : {
      "ObjectId" : "ec936f3ea80946074f0b0d254668e3c76df66d47",
      "LastModified" : "2019-01-31T01:52:20Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "## Show help\n",
        "Line" : 6,
        "CharPositionInLine" : 7
      },
      "CommentCount" : 1,
      "Errorlog" : "line 7:99 token recognition error at: '\"\\0'\nline 7:113 token recognition error at: '\\0'\nline 13:67 token recognition error at: '\" && exit 1 || exit 0\\nbuild_test:  ## test only buildable\\n\\t# Supported operating systems\\n\\tGOOS=linux go test ./... | $(BUILD_FAIL_PATTERN)\\n\\tGOOS=freebsd go test ./... | $(BUILD_FAIL_PATTERN)\\n\\tCGO_ENABLED=0 GOOS=darwin go test ./... | $(BUILD_FAIL_PATTERN)\\n\\tCGO_ENABLED=1 GOOS=darwin go test ./... | $(BUILD_FAIL_PATTERN)\\n\\tGOOS=windows go test ./... | $(BUILD_FAIL_PATTERN)\\n\\t# Operating systems supported for building only (not implemented error if used)\\n\\tGOOS=dragonfly go test ./... | $(BUILD_FAIL_PATTERN)\\n\\tGOOS=netbsd go test ./... | $(BUILD_FAIL_PATTERN)\\n\\tGOOS=openbsd go test ./... | $(BUILD_FAIL_PATTERN)\\n\\tGOOS=solaris go test ./... | $(BUILD_FAIL_PATTERN)\\n\\t@echo 'Successfully built on all known operating systems'\\n\u0000'\n"
    }
  },
  "FileTypes" : {
    "CMAKE" : 6,
    "MAKEFILE" : 7
  },
  "ElapsedTime" : 1297
}