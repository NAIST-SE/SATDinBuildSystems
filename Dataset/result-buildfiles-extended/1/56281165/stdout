{
  "Repository" : "56281165",
  "Revision" : "HEAD",
  "ObjectId" : "b45060d5835292a74661678872427e3eb5a89d0c",
  "CommitTime" : "2019-03-10T20:39:20Z",
  "Files" : {
    "BUILD" : {
      "ObjectId" : "8465ae822c3a9f03c40f74f92012b058e2cfb1d3",
      "LastModified" : "2018-12-11T11:45:12Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# Uses of Bazel build rules for FFIG.",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CMakeLists.txt" : {
      "ObjectId" : "7378b667ff8e557c75f5ccd86981b24b348ee1c8",
      "LastModified" : "2018-12-11T11:45:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME: Work out which CMake version we actually need.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME: Use FFIG to get this path.\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Detect Python if it's not user-specified.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Robustly detect Python version\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check that the found version of Python==3 on Windows.\n\n# FIXME: Get to the bottom of the libclang/ctypes issues with Python2 on Windows.\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# FFIG won't work without Python and a C++ compiler so we can assume\n\n# support for Python and C++ must exist.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Look for Go\n\n# FIXME: Make this less hacky, ideally using a real CMake module\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Look for Swift\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Look for Ruby\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Look for Java\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Look for Lua\n\n# FIXME: Make this less hacky, ideally using a real CMake module\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# FIXME: Get Lua bindings working well enough to work with Shape classes and\n\n# add LUA to all_ffig_bindings.\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Look for Julia\n\n# FIXME: Make this less hacky, ideally using a real CMake module\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Look for C#\n\n# FIXME: Make this less hacky, ideally using a real CMake module\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Look for Boost Python - needs Python libs and Boost.\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Set FFIG_SOURCE so that FFIG-targets are sensitive to changes in FFIG code and templates.\n\n# The variable FFIG_SOURCE is used by ffig.cmake and is only needed when developing FFIG.\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Add FFIG c-library build targets\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Add FFIG c++-library build targets\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Add FFIG c++-mocks build targets\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Add FFIG python-library build targets\n",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# FIXME: Run custom clang tests until clang 5 is commonly available.\n\n# clang 5 has our changes to cindex.py that enable Python3 support.\n",
        "Line" : 284,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# list(APPEND JAVA_JARS\n\n#      ${JNA_JAR}\n\n#      ${JUNIT_JAR}\n\n#      ${HAMCREST_JAR}\n\n#      ${CMAKE_CURRENT_BINARY_DIR}/generated/Asset.jar\n\n#      ${CMAKE_CURRENT_BINARY_DIR}/generated/Number.jar\n\n#      ${CMAKE_CURRENT_BINARY_DIR}/generated/Shape.jar\n\n#      ${CMAKE_CURRENT_BINARY_DIR}/generated/Tree.jar)\n",
        "Line" : 550,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#FIXME: Use JOIN when CMake 3.12 is available.\n",
        "Line" : 559,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "#list(JOIN ${JAVA_JARS} ; JAVA_CLASSPATH)\n",
        "Line" : 561,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "#list(JOIN ${JAVA_JARS} : JAVA_CLASSPATH)\n",
        "Line" : 564,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Unconditionally generate d bindings as nothing is (currently) built, just generated.\n",
        "Line" : 605,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Unconditionally generate Rust bindings as nothing is (currently) built, just generated.\n",
        "Line" : 615,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 27
    },
    "cmake/dotnet.cmake" : {
      "ObjectId" : "e408c5f82637b6f07273eb2153776ed22787702d",
      "LastModified" : "2018-05-02T21:10:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/ffig.cmake" : {
      "ObjectId" : "42bba5728cfa7a4cfd25c2b13a03ab118c7909f6",
      "LastModified" : "2019-03-07T22:06:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ffig_add_X_library\n\n# ------------------\n\n#\n\n# This module defines functions that allow the user to add build targets that\n\n# create language bindings for a C++ library.\n\n#\n\n# All the bindings depend on a MODULE_NAME_c target produced by `ffig_add_c_library`.\n\n#\n\n# Usage:\n\n#\n\n# ffig_add_c_library(NAME myModuleName INPUTS myHeader.h)\n\n# ffig_add_python_library(NAME myModuleName INPUTS myHeader.h)\n\n#\n\n# This will create a build target called myModuleName_c which creates a shared library:\n\n# * libmyModuleName.so on Linux\n\n# * libmyModuleName.dylib on macOS\n\n# * myModuleName.dll on Windows\n\n#\n\n# And a Python2/Python3 shared library `myModuleName` that can be imported from Python.\n\n#\n\n# Currently the generated bindings and libraries go into ${ffig_output_dir}.\n\n# FIXME: Make output directory user-configurable.\n\n#\n\n# NAME is required,\n\n# INPUTS currently supports only a single header file (which must have only standard library includes).\n\n# FIXME: relax constraints on INPUTS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The shared library is copied next to the generated bindings.\n\n# Needed for Windows where library goes into a Debug/Release subdirectory.\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# FIXME: Do not check dotnet_FOUND.\n\n# Requesting dotnet bindings with no dotnet is user-error.\n",
        "Line" : 202,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Invoke dotnet directly as add_dotnet_project contains a copy which does not get ordered correctly.\n\n# FIXME: Work out why the copy performed by add_dotnet_project is incorrectly ordered on Windows.\n",
        "Line" : 217,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Compilation of boost::python module needs C-header to be copied\n",
        "Line" : 232,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Run FFIG to generate Python bindings,\n\n# Run pycodestyle on generated Python. Ignore line-length errors,\n\n# as with generated code we have no control over the length of\n\n# type or function names supplied as input.\n",
        "Line" : 245,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Invoke dotnet directly as add_dotnet_project contains a copy which does not get ordered correctly.\n\n# FIXME: Work out why the copy performed by add_dotnet_project is incorrectly ordered on Windows.\n",
        "Line" : 407,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cmake/utils.cmake" : {
      "ObjectId" : "35868459b1dcd122773cf57b438d5d4970196a5e",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Utility functions for CMake used by FFIG.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set the shared library path for test execution.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "ffig.bzl" : {
      "ObjectId" : "39a3c1ebb2b71859655eabf62a8c7c3aced7361b",
      "LastModified" : "2019-03-07T22:06:31Z",
      "FileType" : "BAZEL",
      "0" : {
        "Text" : "# Generate source with FFIG.\n# $(@D) is the output directory for the target package.",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Generate source with FFIG.",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Build a C DSO for FFIG's generated C-API.",
        "Line" : 56,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Package the DSO and generated header into a cc_library.",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "tests/go/CMakeLists.txt" : {
      "ObjectId" : "5610040d156cf3c0bd244db114cf88d852a6de51",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "tests/src/CMakeLists.txt" : {
      "ObjectId" : "8d91dd4b5647dfd2bae852e3d0271b2b0c3ea1d7",
      "LastModified" : "2018-07-09T09:48:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 6,
    "BAZEL" : 2
  },
  "ElapsedTime" : 1033
}