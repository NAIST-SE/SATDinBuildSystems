{
  "Repository" : "674999",
  "Revision" : "HEAD",
  "ObjectId" : "28b72453b01489daf98c0ca751f986dff73959a1",
  "CommitTime" : "2018-05-27T08:01:32Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "dab185d476f3447c248e37f0499adc05e6c0ee20",
      "LastModified" : "2017-09-12T09:19:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# Copyright (c) 2017 Nicola Bonelli <nicola@pfq.io>\n\n#\n\n# This program is free software; you can redistribute it and/or modify\n\n# it under the terms of the GNU General Public License as published by\n\n# the Free Software Foundation; either version 2 of the License, or\n\n# (at your option) any later version.\n\n#\n\n# This program is distributed in the hope that it will be useful,\n\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n# GNU General Public License for more details.\n\n#\n\n# You should have received a copy of the GNU General Public License\n\n# along with this program; if not, write to the Free Software\n\n# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# https://stackoverflow.com/questions/5303553/gnu-make-extracting-argument-to-j-within-makefile\n\n#\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2,
      "Errorlog" : "line 23:61 token recognition error at: '\"^\\s'\nline 403:33 token recognition error at: '\"\\npfq_stress_conf: hlib_install\\n\\t\\t@cd $(PFQ_STRESS_PATH)\\n\\t\\t$(haskell-configure)\\n\\npfq_stress: pfq_affinity_install pfq_load_install pfq_stress_conf\\n\\t\\t@cd $(PFQ_STRESS_PATH)\\n\\t\\t$(haskell-build)\\n\\npfq_stress_install: pfq_stress\\n\\t\\t@cd $(PFQ_STRESS_PATH)\\n\\t\\t$(haskell-install)\\n\\npfq_stress_clean:\\n\\t\\t@cd $(PFQ_STRESS_PATH)\\n\\t\\t$(haskell-clean)\\n\\npfq_stress_distclean:\\n\\t\\t@cd $(PFQ_STRESS_PATH)\\n\\t\\t$(haskell-distclean)\\n\\n\u0000'\n"
    },
    "kernel/Makefile" : {
      "ObjectId" : "7662d7edd013c0e68782516e953803aa521fadb4",
      "LastModified" : "2017-05-01T13:12:34Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# (C) 2011-16 Nicola Bonelli <nicola@pfq.io>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#EXTRA_CFLAGS += -DPFQ_DEBUG\n\n#EXTRA_CFLAGS += -DDEBUG\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "kernel/module/RTP/Makefile" : {
      "ObjectId" : "55b89ca2fe207f39cbdc2444e68bdaec61626d32",
      "LastModified" : "2017-05-27T07:59:54Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# (C) 2011-16 Nicola Bonelli <nicola@pfq.io>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "kernel/module/dummy/Makefile" : {
      "ObjectId" : "411c14e81c8aa80531b6764d6df58651e17bb642",
      "LastModified" : "2016-06-16T08:43:54Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# (C) 2011-16 Nicola Bonelli <nicola@pfq.io>\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "misc/maybe/CMakeLists.txt" : {
      "ObjectId" : "9f1685c2e3cf253da659443de1e8e5e11e235c69",
      "LastModified" : "2015-08-27T07:49:57Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "misc/signature/CMakeLists.txt" : {
      "ObjectId" : "8a75df4ca8b80adf5e9ee8bb4672d0759a5e5ea5",
      "LastModified" : "2016-06-16T08:43:54Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "user/lib/C++/pfq/Makefile" : {
      "ObjectId" : "d6d321b2e876311ba65e096e7b80ec4bfede31fb",
      "LastModified" : "2017-09-11T13:31:59Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "user/lib/C/CMakeLists.txt" : {
      "ObjectId" : "fcf29cbd91f30f902402e2b6f9f65c3704a709e1",
      "LastModified" : "2017-09-11T13:31:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "user/lib/common/CMakeLists.txt" : {
      "ObjectId" : "983aa3a990f8fd08cf3940d4972385144af4abdc",
      "LastModified" : "2017-09-11T13:31:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# CMakeLists base config\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set the project name\n\n#\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gcc compiler-specific options\n\n#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# clang++ -dumpversion is currently broken...\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# C++ compiler-specific options\n\n#\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# C compiler-specific options\n\n#\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "user/lib/libpcap-1.8.1-fanout/CMakeLists.txt" : {
      "ObjectId" : "cda8f10b96f5f2638e7bca1738e72baf313b5d28",
      "LastModified" : "2017-09-11T13:31:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Apple doesn't build with an install_name starting with @rpath, and\n\n# neither do we with autotools; don't do so with CMake, either, and\n\n# suppress warnings about that.\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Call the library \"wpcap\" on Windows, for backwards compatibility.\n\n#\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###################################################################\n\n#   Parameters\n\n###################################################################\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# Default to having remote capture support on Windows and, for now, to\n\n# not having it on UN*X.\n\n#\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "######################################\n\n# Project settings\n\n######################################\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###################################################################\n\n#   Detect available platform features\n\n###################################################################\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\n\n# Header files.\n\n#\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n\n# Functions.\n\n#\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# Check for Windows-only functions, such as packet.dll functions.\n\n#\n",
        "Line" : 142,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#\n\n# Data types.\n\n#\n\n# XXX - there's no check_struct() macro that's like check_struct_has_member()\n\n# except that it only checks for the existence of the structure type,\n\n# so we use check_struct_has_member() and look for ss_family.\n\n#\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n# Structure fields.\n\n#\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "######################################\n\n# External dependencies\n\n######################################\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "######################################\n\n# Input files\n\n######################################\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\n\n# Determine the main pcap-XXX.c file to use.\n\n#\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#\n\n# WinPcap.\n\n#\n",
        "Line" : 218,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#\n\n# UN*X - figure out what type of packet capture mechanism we\n\n# have.\n\n#\n",
        "Line" : 223,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "#\n\n# Cloning BPF device.\n\n#\n",
        "Line" : 228,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "#\n\n# XXX - many more BPF checks.\n\n#\n",
        "Line" : 236,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "#\n\n# DEC OSF/1, Digital UNIX, Tru64 UNIX\n\n#\n",
        "Line" : 240,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "#\n\n# Do we have the wireless extensions?\n\n#\n",
        "Line" : 253,
        "CharPositionInLine" : 1
      },
      "20" : {
        "Text" : "#\n\n# XXX - many more Linux checks.\n",
        "Line" : 258,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "#\n",
        "Line" : 260,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "#\n\n# On AIX, the BPF devices might not yet be present - they're\n\n# created the first time libpcap runs after booting.\n\n# We check for odmi.h instead.\n\n#\n",
        "Line" : 264,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "#\n\n# XXX - many more DLPI checks.\n\n#\n",
        "Line" : 273,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "#\n\n# Now figure out how we get a list of interfaces and addresses,\n\n# if we support capturing.  Don't bother if we don't support\n\n# capturing.\n\n#\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#\n\n# UN*X - figure out what type of interface list mechanism we\n\n# have.\n\n#\n",
        "Line" : 289,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "#\n\n# We can't capture, so we can't open any capture\n\n# devices, so we won't return any interfaces.\n\n#\n",
        "Line" : 294,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "#\n\n# We have \"getifaddrs()\"; make sure we have <ifaddrs.h>\n\n# as well, just in case some platform is really weird.\n\n#\n",
        "Line" : 302,
        "CharPositionInLine" : 12
      },
      "28" : {
        "Text" : "#\n\n# We have the header, so we use \"getifaddrs()\" to\n\n# get the list of interfaces.\n\n#\n",
        "Line" : 308,
        "CharPositionInLine" : 16
      },
      "29" : {
        "Text" : "#\n\n# We don't have the header - give up.\n\n# XXX - we could also fall back on some other\n\n# mechanism, but, for now, this'll catch this\n\n# problem so that we can at least try to figure\n\n# out something to do on systems with \"getifaddrs()\"\n\n# but without \"ifaddrs.h\", if there is something\n\n# we can do on those systems.\n\n#\n",
        "Line" : 314,
        "CharPositionInLine" : 16
      },
      "30" : {
        "Text" : "#\n\n# Well, we don't have \"getifaddrs()\", so we have to use\n\n# some other mechanism; determine what that mechanism is.\n\n#\n\n# The first thing we use is the type of capture mechanism,\n\n# which is somewhat of a proxy for the OS we're using.\n\n#\n",
        "Line" : 326,
        "CharPositionInLine" : 12
      },
      "31" : {
        "Text" : "#\n\n# This might be Solaris 8 or later, with\n\n# SIOCGLIFCONF, or it might be some other OS\n\n# or some older version of Solaris, with\n\n# just SIOCGIFCONF.\n\n#\n",
        "Line" : 334,
        "CharPositionInLine" : 16
      },
      "32" : {
        "Text" : "#\n\n# Assume we just have SIOCGIFCONF.\n\n# (XXX - on at least later Linux kernels, there's\n\n# another mechanism, and we should be using that\n\n# instead.)\n\n#\n",
        "Line" : 348,
        "CharPositionInLine" : 16
      },
      "33" : {
        "Text" : "#\n\n# {Flex} and YACC/Berkeley YACC/Bison.\n\n# From a mail message to the CMake mailing list by Andy Cedilnik of\n\n# Kitware.\n\n#\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#\n\n# Try to find Flex, a Windows version of Flex, or Lex.\n\n#\n",
        "Line" : 381,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#\n\n# Since scanner.c does not exist yet when cmake is run, mark\n\n# it as generated.\n\n#\n\n# Since scanner.c includes grammar.h, mark that as a dependency.\n\n#\n",
        "Line" : 397,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "#\n\n# Add scanner.c to the list of sources.\n\n#\n\n#set(PROJECT_SOURCE_LIST_C ${PROJECT_SOURCE_LIST_C} ${CMAKE_CURRENT_BINARY_DIR}/scanner.c)\n",
        "Line" : 408,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "#\n\n# Try to find YACC or Bison.\n\n#\n",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#\n\n# Create custom command for the scanner.\n\n# Find out whether it's Bison or notby looking at the last component\n\n# of the path (without a .exe extension, if this is Windows).\n\n#\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#\n\n# Since grammar.c does not exists yet when cmake is run, mark\n\n# it as generated.\n\n#\n",
        "Line" : 438,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#\n\n# Add grammar.c to the list of sources.\n\n#\n\n#set(PROJECT_SOURCE_LIST_C ${PROJECT_SOURCE_LIST_C} ${CMAKE_CURRENT_BINARY_DIR}/grammar.c)\n",
        "Line" : 446,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#\n\n# CMake does not love Windows.\n\n#\n",
        "Line" : 452,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "#\n\n# Since version.c does not exists yet when cmake is run, mark\n\n# it as generated.\n\n#\n",
        "Line" : 479,
        "CharPositionInLine" : 4
      },
      "43" : {
        "Text" : "#\n\n# Add version.c to the list of sources.\n\n#\n",
        "Line" : 487,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "#\n\n# Since pcap_version.h does not exists yet when cmake is run, mark\n\n# it as generated.\n\n#\n",
        "Line" : 493,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#\n\n# Add pcap_version.h to the list of headers.\n\n#\n",
        "Line" : 501,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "######################################\n\n# Register targets\n\n######################################\n",
        "Line" : 509,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "######################################\n\n# Write out the config.h file\n\n######################################\n",
        "Line" : 527,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 48
    },
    "user/lib/libpcap-1.8.1-fanout/cmake/preconfigure.cmake" : {
      "ObjectId" : "c8c92a48edd707c7da7de2a7bf1398af796237e9",
      "LastModified" : "2017-09-11T13:31:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###################################################################\n\n#   Parameters\n\n###################################################################\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "######################################\n\n# Project setings\n\n######################################\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "user/lib/libpcap-1.8.1-fanout/tests/CMakeLists.txt" : {
      "ObjectId" : "fc7919ed38083e1d6a81670758d3d048171f0a38",
      "LastModified" : "2017-09-11T13:31:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "######################################\n\n# Register targets\n\n######################################\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#ADD_EXECUTABLE (pcap_compile_test pcap_compile_test.c ${PROJECT_SOURCE_LIST_WIN32_C} )\n\n#target_link_libraries ( pcap_compile_test pcap )\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "user/pfq-regression/C/CMakeLists.txt" : {
      "ObjectId" : "462f0a0d8712318b31977697f1a28ec9cf42a216",
      "LastModified" : "2017-09-11T13:31:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# C++11 tests\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# C++14 tests\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# C tests\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "user/pfq-tools/CMakeLists.txt" : {
      "ObjectId" : "3e721c930ba60465748e3a00dcec5e12c4df9fd2",
      "LastModified" : "2017-09-11T13:31:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 9,
    "MAKEFILE" : 5
  },
  "ElapsedTime" : 2062
}