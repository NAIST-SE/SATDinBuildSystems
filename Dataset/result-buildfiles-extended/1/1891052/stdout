{
  "Repository" : "1891052",
  "Revision" : "HEAD",
  "ObjectId" : "5d5a4963e909615092701e1392d7880be67335e0",
  "CommitTime" : "2018-01-16T23:42:18Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "f106480e5e60bf5de1fa9ffa200b13f359eb31a2",
      "LastModified" : "2018-01-15T10:55:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unused\n",
        "Line" : 13,
        "CharPositionInLine" : 28
      },
      "1" : {
        "Text" : "# Default is debug build\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# I'm not sure we should block these warnings or not:\n\n# C4800 Conversion from int to bool performance warning (we should probably be using bool in most of these places though).\n\n# C4127 Conditional expression is constant: Most of these uses are intentional (debugging code etc.)\n\n# C4267 size_t to int conversion. Most of these are indices, but many places can be replaced by a for-each loop as well.\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#######################################################################\n\n######################## Custom paths #################################\n\n#######################################################################\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set (PETSC_DIR CACHE PATH \"Manual PETSc directory\")\n\n#set (PETSC_ARCH CACHE STRING \"Manual PETSc arch name (e.g. linux-gnu-cxx-opt)\")\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#intel mkl pardiso\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#pardiso-project.org\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#set (BOOST_DIR CACHE PATH \"Manual Boost directory\")\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#######################################################################\n\n######################## Options ######################################\n\n#######################################################################\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Parallel stuff\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Solvers and such\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# No reason to use this\n",
        "Line" : 79,
        "CharPositionInLine" : 41
      },
      "12" : {
        "Text" : "# or this\n",
        "Line" : 80,
        "CharPositionInLine" : 44
      },
      "13" : {
        "Text" : "# or this\n",
        "Line" : 81,
        "CharPositionInLine" : 49
      },
      "14" : {
        "Text" : "# Other external libraries\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#option (USE_CGAL \"CGAL\" OFF)\n\n# Internal modules\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#option (USE_BOOST \"Enable Boost\" OFF)\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Enable coverage testing\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#######################################################################\n\n######################## Internal libraries ###########################\n\n#######################################################################\n\n# I believe the subdirs should be used when including instead.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Is there really any reason not to compile all of them? Some has cross dependencies.\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#     if (MINGW)\n\n#         find_library (DL_LIB ltdl HINTS \"C:/MinGW/lib/\" ) \n\n#         list (APPEND EXT_LIBS ${DL_LIB})\n\n#     endif ()\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Necessary X11 stuff;\n",
        "Line" : 189,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Krysls libraries:\n",
        "Line" : 199,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "#######################################################################\n\n######################## External libraries ###########################\n\n#######################################################################\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#if (USE_BOOST) \n\n#    set (CMAKE_LIBRARY_DIR ${BOOST_DIR})\n\n#    find_package (BOOST REQUIRED)\n\n#    list (APPEND EXT_LIBS ${BOOST_LIBRARIES})\n\n#    if (BOOST_DIR)\n\n#    \tinclude_directories (\"${BOOST_DIR}\")\n\n#    \tlist (APPEND MODULE_LIST \"BOOST\")\n\n#     endif ()\n\n# \n\n#    add_definitions (-D__BOOST_MODULE)\n\n#endif ()\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## There is a conflict on set.h as defined by libstdc and superlu_mt 3.1\n\n## Therefore it is assumed that superlu include files\n\n## are included using #include \"SUPERLU_MT/include\"\n\n## The ${SUPERLU_MT_DIR} is added into compiler include path\n\n## Therefore SUPERLU_MT/include has to be manually added pointing to\n\n## ${SUPERLU_MT__DIR}/src directory\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#find_package (SuperLU REQUIRED)\n",
        "Line" : 249,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "#set (CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} ${BLAS_LINKER_FLAGS}\")\n",
        "Line" : 253,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Sets necessary includes_directories\n",
        "Line" : 269,
        "CharPositionInLine" : 30
      },
      "29" : {
        "Text" : "# Find the actual libraries:\n",
        "Line" : 321,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "#list (APPEND EXT_LIBS ${MKLPARDISO_LIB})\n",
        "Line" : 336,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# setting defaults for typical linux environments:\n\n#file (GLOB paths \"/usr/lib/petscdir/*.*.*\")\n\n#list (GET paths 0 PETSC_DIR)\n\n#message (\"***************** PETSC_DIR: ${PETSC_DIR}\")\n",
        "Line" : 358,
        "CharPositionInLine" : 8
      },
      "32" : {
        "Text" : "#file (GLOB children RELATIVE ${PETSC_DIR} \"${PETSC_DIR}/*\")\n\n#list (GET children 0 PETSC_ARCH)\n\n#message (\"***************** PETSC_ARCH: ${PETSC_ARCH}\")\n",
        "Line" : 364,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# Compile and link flags?\n",
        "Line" : 395,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# We need the interpreter for the test suite.\n",
        "Line" : 464,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# PythonLibs in cmake is bugged, have to try and rely on PythonInterp to get the suitable major and minor versions.\n",
        "Line" : 468,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "#if (USE_PYTHON_BINDINGS)\n\n# require boost_python also for python stuff by itself\n",
        "Line" : 477,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "#endif ()\n",
        "Line" : 483,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "#######################################################################\n\n######################## Configuration ################################\n\n#######################################################################\n",
        "Line" : 487,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# This should be renamed TARGET_TYPE.\n",
        "Line" : 491,
        "CharPositionInLine" : 65
      },
      "40" : {
        "Text" : "# For consistant library on linux and windows platforms.\n\n#add_compiler_export_flags (LIBOOFEM_EXPORT_CFLAGS)\n",
        "Line" : 499,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "#######################################################################\n\n######################## Targets ######################################\n\n#######################################################################\n\n# Subtargets\n",
        "Line" : 509,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Main targets\n",
        "Line" : 532,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# This should be set automatically, but I think TARGET:objs confuses cmake:\n",
        "Line" : 546,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# OOFEM target\n",
        "Line" : 572,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Prefer dynamic lib if available.\n",
        "Line" : 573,
        "CharPositionInLine" : 20
      },
      "46" : {
        "Text" : "#  OOFEG target:\n",
        "Line" : 584,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# Example of using liboofem with dynamic input record:\n",
        "Line" : 595,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# CppCheck target (not built by default)\n",
        "Line" : 608,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#######################################################################\n\n######################## Documentation ################################\n\n#######################################################################\n",
        "Line" : 630,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# TODO: Manuals not done yet\n",
        "Line" : 659,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "#COMMAND tex4ht elementlibmanual --output=${oofem_BINARY_DIR}/doc/\n",
        "Line" : 664,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "#######################################################################\n\n######################## Tests ########################################\n\n#######################################################################\n",
        "Line" : 668,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "#set (CTEST_MEMORYCHECK_SUPPRESSIONS_FILE ${oofem_TEST_DIR}/tests/valgrind.supp)\n",
        "Line" : 676,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# partest_brazil_2d_nl7 requires more time on testing server than default 1500\n",
        "Line" : 686,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# Sequential test cases\n",
        "Line" : 690,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "######################## Benchmarks ########################################\n",
        "Line" : 741,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Custom targets for test and benchmarks (which can conveniently be accessed from IDEs)\n",
        "Line" : 780,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "#######################################################################\n\n######################## Packing ######################################\n\n#######################################################################\n\n### versions\n",
        "Line" : 798,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "### general settings\n",
        "Line" : 807,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "#set (CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_SOURCE_DIR}/README\")\n",
        "Line" : 811,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "### default generators\n",
        "Line" : 818,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "### source package (type \"make source_package\" to produce a zip)\n",
        "Line" : 825,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Note: All hidden files are ignored\n",
        "Line" : 828,
        "CharPositionInLine" : 139
      },
      "64" : {
        "Text" : "### deb package options\n",
        "Line" : 830,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# autogenerate dependency information\n",
        "Line" : 833,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 66
    },
    "cmake/Modules/CorrectWindowsPaths.cmake" : {
      "ObjectId" : "09bcdd67dcd04fd001d2b7acbd904b5014ebe42b",
      "LastModified" : "2017-10-05T18:42:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CorrectWindowsPaths - this module defines one macro\n\n#\n\n# CONVERT_CYGWIN_PATH( PATH )\n\n#  This uses the command cygpath (provided by cygwin) to convert\n\n#  unix-style paths into paths useable by cmake on windows\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindPETSc.cmake" : {
      "ObjectId" : "dc94a13fbe95ed6ae0b147859c9290aa66f7594a",
      "LastModified" : "2018-01-15T10:55:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find PETSc\n\n# Once done this will define\n\n#\n\n#  PETSC_FOUND        - system has PETSc\n\n#  PETSC_INCLUDES     - the PETSc include directories\n\n#  PETSC_LIBRARIES    - Link these to use PETSc\n\n#  PETSC_COMPILER     - Compiler used by PETSc, helpful to find a compatible MPI\n\n#  PETSC_DEFINITIONS  - Compiler switches for using PETSc\n\n#  PETSC_MPIEXEC      - Executable for running MPI programs\n\n#  PETSC_VERSION      - Version string (MAJOR.MINOR.SUBMINOR)\n\n#\n\n#  Usage:\n\n#  find_package(PETSc COMPONENTS CXX)  - required if build --with-clanguage=C++ --with-c-support=0\n\n#  find_package(PETSc COMPONENTS C)    - standard behavior of checking build using a C compiler\n\n#  find_package(PETSc)                 - same as above\n\n#\n\n# Setting these changes the behavior of the search\n\n#  PETSC_DIR - directory in which PETSc resides\n\n#  PETSC_ARCH - build architecture\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Right now, this is designed for compatability with the --with-clanguage option, so\n\n# only allow one item in the components list.\n",
        "Line" : 32,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# This is a stub for allowing multiple components should that time ever come. Perhaps\n\n# to also test Fortran bindings?\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# break line into three fields (the first is always \"#define\")\n",
        "Line" : 54,
        "CharPositionInLine" : 53
      },
      "4" : {
        "Text" : "# Also in local scope so we have access below\n",
        "Line" : 58,
        "CharPositionInLine" : 34
      },
      "5" : {
        "Text" : "# make dev version compare higher than any patch level of a released version\n",
        "Line" : 63,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# Debian paths\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# MacPorts path\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# If set, use environment variable first\n\n# Debian defaults\n",
        "Line" : 90,
        "CharPositionInLine" : 39
      },
      "9" : {
        "Text" : "# Determine whether the PETSc layout is old-style (through 2.3.3) or\n\n# new-style (>= 3.0.0)\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# > 3.5\n",
        "Line" : 117,
        "CharPositionInLine" : 71
      },
      "11" : {
        "Text" : "# > 2.3.3\n",
        "Line" : 120,
        "CharPositionInLine" : 67
      },
      "12" : {
        "Text" : "# <= 2.3.3\n",
        "Line" : 123,
        "CharPositionInLine" : 63
      },
      "13" : {
        "Text" : "# Put variables into environment since they are needed to get\n\n# configuration (petscvariables) in the PETSc makefile\n",
        "Line" : 133,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# A temporary makefile to probe the PETSc configuration\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# We are done with the temporary Makefile, calling PETSC_GET_VARIABLE after this point is invalid!\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Extract include paths and libraries from compile command line\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "#on windows we need to make sure we're linking against the right\n\n#runtime library\n",
        "Line" : 170,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Clear any stale value, if we got here, we need to find it again\n",
        "Line" : 196,
        "CharPositionInLine" : 76
      },
      "19" : {
        "Text" : "#windows expects \"libfoo\", linux expects \"foo\"\n",
        "Line" : 198,
        "CharPositionInLine" : 31
      },
      "20" : {
        "Text" : "# Look for petscvec first, if it doesn't exist, we must be using single-library\n",
        "Line" : 207,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# libpetscsys is called libpetsc prior to 3.1 (when single-library was introduced)\n",
        "Line" : 210,
        "CharPositionInLine" : 47
      },
      "22" : {
        "Text" : "# There is no libpetscvec\n",
        "Line" : 227,
        "CharPositionInLine" : 70
      },
      "23" : {
        "Text" : "# Minimal includes fail, see if just adding full includes fixes it\n",
        "Line" : 290,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "# It does, we just need all the includes (\n",
        "Line" : 292,
        "CharPositionInLine" : 33
      },
      "25" : {
        "Text" : "# We are going to need to link the external libs explicitly\n",
        "Line" : 295,
        "CharPositionInLine" : 35
      },
      "26" : {
        "Text" : "# It looks like we really need everything, should have listened to Matt\n",
        "Line" : 305,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "# We fail anyways\n",
        "Line" : 308,
        "CharPositionInLine" : 29
      },
      "28" : {
        "Text" : "# We fail anyways\n",
        "Line" : 310,
        "CharPositionInLine" : 31
      },
      "29" : {
        "Text" : "# We do an out-of-source build so __FILE__ will be an absolute path, hence __INSDIR__ is superfluous\n",
        "Line" : 317,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Sometimes this can be used to assist FindMPI.cmake\n",
        "Line" : 323,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Note that we have forced values for all these choices.  If you\n\n# change these, you are telling the system to trust you that they\n\n# work.  It is likely that you will end up with a broken build.\n",
        "Line" : 328,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 32
    },
    "cmake/Modules/FindPackageMultipass.cmake" : {
      "ObjectId" : "fbf06a7f0fc3aa20a0387f091eac4f74e7ffdab2",
      "LastModified" : "2017-10-05T18:42:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# PackageMultipass - this module defines two macros\n\n#\n\n# FIND_PACKAGE_MULTIPASS (Name CURRENT\n\n#  STATES VAR0 VAR1 ...\n\n#  DEPENDENTS DEP0 DEP1 ...)\n\n#\n\n#  This function creates a cache entry <UPPERCASED-Name>_CURRENT which\n\n#  the user can set to \"NO\" to trigger a reconfiguration of the package.\n\n#  The first time this function is called, the values of\n\n#  <UPPERCASED-Name>_VAR0, ... are saved.  If <UPPERCASED-Name>_CURRENT\n\n#  is false or if any STATE has changed since the last time\n\n#  FIND_PACKAGE_MULTIPASS() was called, then CURRENT will be set to \"NO\",\n\n#  otherwise CURRENT will be \"YES\".  IF not CURRENT, then\n\n#  <UPPERCASED-Name>_DEP0, ... will be FORCED to NOTFOUND.\n\n#  Example:\n\n#    find_path (FOO_DIR include/foo.h)\n\n#    FIND_PACKAGE_MULTIPASS (Foo foo_current\n\n#      STATES DIR\n\n#      DEPENDENTS INCLUDES LIBRARIES)\n\n#    if (NOT foo_current)\n\n#      # Make temporary files, run programs, etc, to determine FOO_INCLUDES and FOO_LIBRARIES\n\n#    endif (NOT foo_current)\n\n#\n\n# MULTIPASS_SOURCE_RUNS (Name INCLUDES LIBRARIES SOURCE RUNS LANGUAGE)\n\n#  Always runs the given test, use this when you need to re-run tests\n\n#  because parent variables have made old cache entries stale. The LANGUAGE\n\n#  variable is either C or CXX indicating which compiler the test should\n\n#  use.\n\n# MULTIPASS_C_SOURCE_RUNS (Name INCLUDES LIBRARIES SOURCE RUNS)\n\n#  DEPRECATED! This is only included for backwards compatability. Use\n\n#  the more general MULTIPASS_SOURCE_RUNS instead.\n\n#  Always runs the given test, use this when you need to re-run tests\n\n#  because parent variables have made old cache entries stale.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The name of the stored value for the given state\n",
        "Line" : 46,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# Clear all the dependent variables so that the module can reset them\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# This is a ridiculous hack.  CHECK_${language}_SOURCE_* thinks that if the\n\n# *name* of the return variable doesn't change, then the test does\n\n# not need to be re-run.  We keep an internal count which we\n\n# increment to guarantee that every test name is unique.  If we've\n\n# gotten here, then the configuration has changed enough that the\n\n# test *needs* to be rerun.\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Why can't I add to a cache variable?\n",
        "Line" : 91,
        "CharPositionInLine" : 49
      },
      "CommentCount" : 5
    },
    "cmake/Modules/ResolveCompilerPaths.cmake" : {
      "ObjectId" : "54787fa38ffa50136414e6c788c50fb3c63746b8",
      "LastModified" : "2017-10-05T18:42:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ResolveCompilerPaths - this module defines two macros\n\n#\n\n# RESOLVE_LIBRARIES (XXX_LIBRARIES LINK_LINE)\n\n#  This macro is intended to be used by FindXXX.cmake modules.\n\n#  It parses a compiler link line and resolves all libraries\n\n#  (-lfoo) using the library path contexts (-L/path) in scope.\n\n#  The result in XXX_LIBRARIES is the list of fully resolved libs.\n\n#  Example:\n\n#\n\n#    RESOLVE_LIBRARIES (FOO_LIBRARIES \"-L/A -la -L/B -lb -lc -ld\")\n\n#\n\n#  will be resolved to\n\n#\n\n#    FOO_LIBRARIES:STRING=\"/A/liba.so;/B/libb.so;/A/libc.so;/usr/lib/libd.so\"\n\n#\n\n#  if the filesystem looks like\n\n#\n\n#    /A:       liba.so         libc.so\n\n#    /B:       liba.so libb.so\n\n#    /usr/lib: liba.so libb.so libc.so libd.so\n\n#\n\n#  and /usr/lib is a system directory.\n\n#\n\n#  Note: If RESOLVE_LIBRARIES() resolves a link line differently from\n\n#  the native linker, there is a bug in this macro (please report it).\n\n#\n\n# RESOLVE_INCLUDES (XXX_INCLUDES INCLUDE_LINE)\n\n#  This macro is intended to be used by FindXXX.cmake modules.\n\n#  It parses a compile line and resolves all includes\n\n#  (-I/path/to/include) to a list of directories.  Other flags are ignored.\n\n#  Example:\n\n#\n\n#    RESOLVE_INCLUDES (FOO_INCLUDES \"-I/A -DBAR='\\\"irrelevant -I/string here\\\"' -I/B\")\n\n#\n\n#  will be resolved to\n\n#\n\n#    FOO_INCLUDES:STRING=\"/A;/B\"\n\n#\n\n#  assuming both directories exist.\n\n#  Note: as currently implemented, the -I/string will be picked up mistakenly (cry, cry)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If it's a library path, add it to the list\n",
        "Line" : 49,
        "CharPositionInLine" : 6
      },
      "2" : {
        "Text" : "# It's a library, resolve the path by looking in the list and then (by default) in system directories\n",
        "Line" : 55,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "#windows expects \"libfoo\", linux expects \"foo\"\n",
        "Line" : 56,
        "CharPositionInLine" : 17
      },
      "4" : {
        "Text" : "# We have an absolute path\n",
        "Line" : 62,
        "CharPositionInLine" : 30
      },
      "5" : {
        "Text" : "#separate into a path and a library name:\n",
        "Line" : 63,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# only the LAST occurence of each library is required since there should be no circular dependencies\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "src/dss/CMakeLists.txt" : {
      "ObjectId" : "a763ccac77ff7fbe808e1361662488118976a352",
      "LastModified" : "2017-10-05T18:42:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# OOFEM binding:\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/fm/CMakeLists.txt" : {
      "ObjectId" : "41b665157900668fca3b246553b80abf9678549f",
      "LastModified" : "2018-01-15T10:55:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/oofemlib/CMakeLists.txt" : {
      "ObjectId" : "54e10ad7d3ec06c0265bc97b39170598d6143a5f",
      "LastModified" : "2017-10-05T18:42:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Much to organize\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Semi sorted:\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Deprecated?\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#\n",
        "Line" : 38,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#oofegutils\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/sm/CMakeLists.txt" : {
      "ObjectId" : "13ed29693f963cccc2bbdcbe8ec9dd8752898c9d",
      "LastModified" : "2017-10-05T18:42:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Elements/phasefieldelement.C\n\n#qplanstrssphf.C\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# Not included:\n\n#pnldeidynamiccomm\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/tm/CMakeLists.txt" : {
      "ObjectId" : "0cd5a75bd85e2069e96d080fc57d279acf2d5b32",
      "LastModified" : "2018-01-15T10:55:05Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 10
  },
  "ElapsedTime" : 6137
}