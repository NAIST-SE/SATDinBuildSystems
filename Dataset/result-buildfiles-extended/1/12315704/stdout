{
  "Repository" : "12315704",
  "Revision" : "HEAD",
  "ObjectId" : "bd08c290ff458932fe32f13ec6a5b468a18cb80d",
  "CommitTime" : "2016-10-14T19:21:39Z",
  "Files" : {
    "ArduinoAddons/Arduino_1.0.x/hardware/OMC_tkj/bootloaders/atmega644p/Makefile" : {
      "ObjectId" : "571439534479d51cd95b63f7ac5af15d4c7f14bb",
      "LastModified" : "2014-12-17T22:01:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for ATmegaBOOT\n\n# E.Lins, 18.7.2005\n\n# $Id$\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# program name should not be changed...\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# enter the target CPU frequency\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Override is only needed by avr-lib build system.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#override LDFLAGS       = -Wl,-Map,$(PROGRAM).map,$(LDSECTION)\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/bootloaders/atmega/Makefile" : {
      "ObjectId" : "3f2bb6156730d240ca78e75c05ec08258d03df0f",
      "LastModified" : "2014-12-17T22:01:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for ATmegaBOOT\n\n# E.Lins, 18.7.2005\n\n# $Id$\n\n#\n\n# Instructions\n\n#\n\n# To make bootloader .hex file:\n\n# make diecimila\n\n# make lilypad\n\n# make ng\n\n# etc...\n\n#\n\n# To burn bootloader .hex file:\n\n# make diecimila_isp\n\n# make lilypad_isp\n\n# make ng_isp\n\n# etc...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# program name should not be changed...\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# enter the parameters for the avrdude isp tool\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the efuse should really be 0xf8; since, however, only the lower\n\n# three bits of that byte are used on the atmega168, avrdude gets\n\n# confused if you specify 1's for the higher bits, see:\n\n# http://tinker.it/now/2007/02/24/the-tale-of-avrdude-atmega168-and-extended-bits-fuses/\n\n#\n\n# similarly, the lock bits should be 0xff instead of 0x3f (to\n\n# unlock the bootloader section) and 0xcf instead of 0x0f (to\n\n# lock it), but since the high two bits of the lock byte are\n\n# unused, avrdude would get confused.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4,
      "Errorlog" : "line 45:9 token recognition error at: '\"C:\\P'\nline 45:26 token recognition error at: '\\A'\nline 45:32 token recognition error at: '\\A'\nline 45:42 token recognition error at: '\\S'\nline 45:49 token recognition error at: '\\S'\nline 45:60 token recognition error at: '\"\\nSTK500-1 = $(STK500) -e -d$(MCU_TARGET) -pf -vf -if$(PROGRAM)_$(TARGET).hex \\\\n-lFF -LFF -f$(HFUSE)$(LFUSE) -EF8 -ms -q -cUSB -I200kHz -s -wt\\nSTK500-2 = $(STK500) -d$(MCU_TARGET) -ms -q -lCF -LCF -cUSB -I200kHz -s -wt\\n\\n\\nOBJ        = $(PROGRAM).o\\nOPTIMIZE   = -O2\\n\\nDEFS       = \\nLIBS       =\\n\\nCC         = avr-gcc\\n\\n# Override is only needed by avr-lib build system.\\n\\noverride CFLAGS        = -g -Wall $(OPTIMIZE) -mmcu=$(MCU_TARGET) -DF_CPU=$(AVR_FREQ) $(DEFS)\\noverride LDFLAGS       = -Wl,$(LDSECTION)\\n#override LDFLAGS       = -Wl,-Map,$(PROGRAM).map,$(LDSECTION)\\n\\nOBJCOPY        = avr-objcopy\\nOBJDUMP        = avr-objdump\\n\\nall:\\n\\nlilypad: TARGET = lilypad\\nlilypad: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>1' '-DNUM_LED_FLASHES=3'\\nlilypad: AVR_FREQ = 8000000L\\nlilypad: $(PROGRAM)_lilypad.hex\\n\\nlilypad_isp: lilypad\\nlilypad_isp: TARGET = lilypad\\nlilypad_isp: HFUSE = DD\\nlilypad_isp: LFUSE = E2\\nlilypad_isp: EFUSE = 00\\nlilypad_isp: isp\\n\\nlilypad_resonator: TARGET = lilypad_resonator\\nlilypad_resonator: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=3'\\nlilypad_resonator: AVR_FREQ = 8000000L\\nlilypad_resonator: $(PROGRAM)_lilypad_resonator.hex\\n\\nlilypad_resonator_isp: lilypad_resonator\\nlilypad_resonator_isp: TARGET = lilypad_resonator\\nlilypad_resonator_isp: HFUSE = DD\\nlilypad_resonator_isp: LFUSE = C6\\nlilypad_resonator_isp: EFUSE = 00\\nlilypad_resonator_isp: isp\\n\\npro8: TARGET = pro_8MHz\\npro8: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1' '-DWATCHDOG_MODS'\\npro8: AVR_FREQ = 8000000L\\npro8: $(PROGRAM)_pro_8MHz.hex\\n\\npro8_isp: pro8\\npro8_isp: TARGET = pro_8MHz\\npro8_isp: HFUSE = DD\\npro8_isp: LFUSE = C6\\npro8_isp: EFUSE = 00\\npro8_isp: isp\\n\\npro16: TARGET = pro_16MHz\\npro16: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1' '-DWATCHDOG_MODS'\\npro16: AVR_FREQ = 16000000L\\npro16: $(PROGRAM)_pro_16MHz.hex\\n\\npro16_isp: pro16\\npro16_isp: TARGET = pro_16MHz\\npro16_isp: HFUSE = DD\\npro16_isp: LFUSE = C6\\npro16_isp: EFUSE = 00\\npro16_isp: isp\\n\\npro20: TARGET = pro_20mhz\\npro20: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1' '-DWATCHDOG_MODS'\\npro20: AVR_FREQ = 20000000L\\npro20: $(PROGRAM)_pro_20mhz.hex\\n\\npro20_isp: pro20\\npro20_isp: TARGET = pro_20mhz\\npro20_isp: HFUSE = DD\\npro20_isp: LFUSE = C6\\npro20_isp: EFUSE = 00\\npro20_isp: isp\\n\\ndiecimila: TARGET = diecimila\\ndiecimila: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1'\\ndiecimila: AVR_FREQ = 16000000L \\ndiecimila: $(PROGRAM)_diecimila.hex\\n\\ndiecimila_isp: diecimila\\ndiecimila_isp: TARGET = diecimila\\ndiecimila_isp: HFUSE = DD\\ndiecimila_isp: LFUSE = FF\\ndiecimila_isp: EFUSE = 00\\ndiecimila_isp: isp\\n\\nng: TARGET = ng\\nng: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>1' '-DNUM_LED_FLASHES=3'\\nng: AVR_FREQ = 16000000L\\nng: $(PROGRAM)_ng.hex\\n\\nng_isp: ng\\nng_isp: TARGET = ng\\nng_isp: HFUSE = DD\\nng_isp: LFUSE = FF\\nng_isp: EFUSE = 00\\nng_isp: isp\\n\\natmega328: TARGET = atmega328\\natmega328: MCU_TARGET = atmega328p\\natmega328: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1' -DBAUD_RATE=57600\\natmega328: AVR_FREQ = 16000000L \\natmega328: LDSECTION  = --section-start=.text=0x7800\\natmega328: $(PROGRAM)_atmega328.hex\\n\\natmega328_isp: atmega328\\natmega328_isp: TARGET = atmega328\\natmega328_isp: MCU_TARGET = atmega328p\\natmega328_isp: HFUSE = DA\\natmega328_isp: LFUSE = FF\\natmega328_isp: EFUSE = 05\\natmega328_isp: isp\\n\\natmega328_pro8: TARGET = atmega328_pro_8MHz\\natmega328_pro8: MCU_TARGET = atmega328p\\natmega328_pro8: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1' -DBAUD_RATE=57600 -DDOUBLE_SPEED\\natmega328_pro8: AVR_FREQ = 8000000L \\natmega328_pro8: LDSECTION  = --section-start=.text=0x7800\\natmega328_pro8: $(PROGRAM)_atmega328_pro_8MHz.hex\\n\\natmega328_pro8_isp: atmega328_pro8\\natmega328_pro8_isp: TARGET = atmega328_pro_8MHz\\natmega328_pro8_isp: MCU_TARGET = atmega328p\\natmega328_pro8_isp: HFUSE = DA\\natmega328_pro8_isp: LFUSE = FF\\natmega328_pro8_isp: EFUSE = 05\\natmega328_pro8_isp: isp\\n\\nmega: TARGET = atmega1280\\nmega: MCU_TARGET = atmega1280\\nmega: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=0' -DBAUD_RATE=57600\\nmega: AVR_FREQ = 16000000L \\nmega: LDSECTION  = --section-start=.text=0x1F000\\nmega: $(PROGRAM)_atmega1280.hex\\n\\nmega_isp: mega\\nmega_isp: TARGET = atmega1280\\nmega_isp: MCU_TARGET = atmega1280\\nmega_isp: HFUSE = DA\\nmega_isp: LFUSE = FF\\nmega_isp: EFUSE = F5\\nmega_isp: isp\\n\\natmega1284p: TARGET = atmega1284p\\natmega1284p: MCU_TARGET = atmega1284p\\natmega1284p: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=0' '-DBAUD_RATE=57600'\\natmega1284p: AVR_FREQ = 16000000L \\natmega1284p: LDSECTION  = --section-start=.text=0x1F000\\natmega1284p: $(PROGRAM)_atmega1284p.hex\\n\\natmega1284p_8m: TARGET = atmega1284p\\natmega1284p_8m: MCU_TARGET = atmega1284p\\natmega1284p_8m: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=0' '-DBAUD_RATE=19200'\\natmega1284p_8m: AVR_FREQ = 8000000L\\natmega1284p_8m: LDSECTION  = --section-start=.text=0x1F000\\natmega1284p_8m: $(PROGRAM)_atmega1284p_8m.hex\\n\\natmega644p: TARGET = atmega644p\\natmega644p: MCU_TARGET = atmega644p\\natmega644p: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=0' '-DBAUD_RATE=57600'\\natmega644p: AVR_FREQ = 16000000L\\natmega644p: LDSECTION  = --section-start=.text=0xF800\\natmega644p: $(PROGRAM)_atmega644p.hex\\n\\n\\natmega1284p_isp: atmega1284p\\natmega1284p_isp: TARGET = atmega1284p\\natmega1284p_isp: MCU_TARGET = atmega1284p\\natmega1284p_isp: HFUSE = DC\\natmega1284p_isp: LFUSE = FF\\natmega1284p_isp: EFUSE = FD\\natmega1284p_isp: isp\\n\\nisp: $(TARGET)\\n\\t$(ISPFUSES)\\n\\t$(ISPFLASH)\\n\\nisp-stk500: $(PROGRAM)_$(TARGET).hex\\n\\t$(STK500-1)\\n\\t$(STK500-2)\\n\\n%.elf: $(OBJ)\\n\\t$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS)\\n\\nclean:\\n\\trm -rf *.o *.elf *.lst *.map *.sym *.lss *.eep *.srec *.bin *.hex\\n\\n%.lst: %.elf\\n\\t$(OBJDUMP) -h -S $< > $@\\n\\n%.hex: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -O ihex $< $@\\n\\n%.srec: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -O srec $< $@\\n\\n%.bin: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -O binary $< $@\\n\\t\\n\u0000'\n"
    },
    "ArduinoAddons/Arduino_1.0.x/hardware/Sanguino/bootloaders/atmega644p/Makefile" : {
      "ObjectId" : "2bb5e0e9cafac658880e5462187f5b0c52191051",
      "LastModified" : "2014-12-17T22:01:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#Makefile for ATmegaBOOT\n\n# E.Lins, 18.7.2005\n\n# $Id$\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# program name should not be changed...\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# enter the target CPU frequency\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Override is only needed by avr-lib build system.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#override LDFLAGS       = -Wl,-Map,$(PROGRAM).map,$(LDSECTION)\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "ArduinoAddons/Arduino_1.5.x/hardware/marlin/avr/bootloaders/atmega/Makefile" : {
      "ObjectId" : "3f2bb6156730d240ca78e75c05ec08258d03df0f",
      "LastModified" : "2014-12-17T22:01:30Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for ATmegaBOOT\n\n# E.Lins, 18.7.2005\n\n# $Id$\n\n#\n\n# Instructions\n\n#\n\n# To make bootloader .hex file:\n\n# make diecimila\n\n# make lilypad\n\n# make ng\n\n# etc...\n\n#\n\n# To burn bootloader .hex file:\n\n# make diecimila_isp\n\n# make lilypad_isp\n\n# make ng_isp\n\n# etc...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# program name should not be changed...\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# enter the parameters for the avrdude isp tool\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the efuse should really be 0xf8; since, however, only the lower\n\n# three bits of that byte are used on the atmega168, avrdude gets\n\n# confused if you specify 1's for the higher bits, see:\n\n# http://tinker.it/now/2007/02/24/the-tale-of-avrdude-atmega168-and-extended-bits-fuses/\n\n#\n\n# similarly, the lock bits should be 0xff instead of 0x3f (to\n\n# unlock the bootloader section) and 0xcf instead of 0x0f (to\n\n# lock it), but since the high two bits of the lock byte are\n\n# unused, avrdude would get confused.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4,
      "Errorlog" : "line 45:9 token recognition error at: '\"C:\\P'\nline 45:26 token recognition error at: '\\A'\nline 45:32 token recognition error at: '\\A'\nline 45:42 token recognition error at: '\\S'\nline 45:49 token recognition error at: '\\S'\nline 45:60 token recognition error at: '\"\\nSTK500-1 = $(STK500) -e -d$(MCU_TARGET) -pf -vf -if$(PROGRAM)_$(TARGET).hex \\\\n-lFF -LFF -f$(HFUSE)$(LFUSE) -EF8 -ms -q -cUSB -I200kHz -s -wt\\nSTK500-2 = $(STK500) -d$(MCU_TARGET) -ms -q -lCF -LCF -cUSB -I200kHz -s -wt\\n\\n\\nOBJ        = $(PROGRAM).o\\nOPTIMIZE   = -O2\\n\\nDEFS       = \\nLIBS       =\\n\\nCC         = avr-gcc\\n\\n# Override is only needed by avr-lib build system.\\n\\noverride CFLAGS        = -g -Wall $(OPTIMIZE) -mmcu=$(MCU_TARGET) -DF_CPU=$(AVR_FREQ) $(DEFS)\\noverride LDFLAGS       = -Wl,$(LDSECTION)\\n#override LDFLAGS       = -Wl,-Map,$(PROGRAM).map,$(LDSECTION)\\n\\nOBJCOPY        = avr-objcopy\\nOBJDUMP        = avr-objdump\\n\\nall:\\n\\nlilypad: TARGET = lilypad\\nlilypad: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>1' '-DNUM_LED_FLASHES=3'\\nlilypad: AVR_FREQ = 8000000L\\nlilypad: $(PROGRAM)_lilypad.hex\\n\\nlilypad_isp: lilypad\\nlilypad_isp: TARGET = lilypad\\nlilypad_isp: HFUSE = DD\\nlilypad_isp: LFUSE = E2\\nlilypad_isp: EFUSE = 00\\nlilypad_isp: isp\\n\\nlilypad_resonator: TARGET = lilypad_resonator\\nlilypad_resonator: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=3'\\nlilypad_resonator: AVR_FREQ = 8000000L\\nlilypad_resonator: $(PROGRAM)_lilypad_resonator.hex\\n\\nlilypad_resonator_isp: lilypad_resonator\\nlilypad_resonator_isp: TARGET = lilypad_resonator\\nlilypad_resonator_isp: HFUSE = DD\\nlilypad_resonator_isp: LFUSE = C6\\nlilypad_resonator_isp: EFUSE = 00\\nlilypad_resonator_isp: isp\\n\\npro8: TARGET = pro_8MHz\\npro8: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1' '-DWATCHDOG_MODS'\\npro8: AVR_FREQ = 8000000L\\npro8: $(PROGRAM)_pro_8MHz.hex\\n\\npro8_isp: pro8\\npro8_isp: TARGET = pro_8MHz\\npro8_isp: HFUSE = DD\\npro8_isp: LFUSE = C6\\npro8_isp: EFUSE = 00\\npro8_isp: isp\\n\\npro16: TARGET = pro_16MHz\\npro16: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1' '-DWATCHDOG_MODS'\\npro16: AVR_FREQ = 16000000L\\npro16: $(PROGRAM)_pro_16MHz.hex\\n\\npro16_isp: pro16\\npro16_isp: TARGET = pro_16MHz\\npro16_isp: HFUSE = DD\\npro16_isp: LFUSE = C6\\npro16_isp: EFUSE = 00\\npro16_isp: isp\\n\\npro20: TARGET = pro_20mhz\\npro20: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1' '-DWATCHDOG_MODS'\\npro20: AVR_FREQ = 20000000L\\npro20: $(PROGRAM)_pro_20mhz.hex\\n\\npro20_isp: pro20\\npro20_isp: TARGET = pro_20mhz\\npro20_isp: HFUSE = DD\\npro20_isp: LFUSE = C6\\npro20_isp: EFUSE = 00\\npro20_isp: isp\\n\\ndiecimila: TARGET = diecimila\\ndiecimila: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1'\\ndiecimila: AVR_FREQ = 16000000L \\ndiecimila: $(PROGRAM)_diecimila.hex\\n\\ndiecimila_isp: diecimila\\ndiecimila_isp: TARGET = diecimila\\ndiecimila_isp: HFUSE = DD\\ndiecimila_isp: LFUSE = FF\\ndiecimila_isp: EFUSE = 00\\ndiecimila_isp: isp\\n\\nng: TARGET = ng\\nng: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>1' '-DNUM_LED_FLASHES=3'\\nng: AVR_FREQ = 16000000L\\nng: $(PROGRAM)_ng.hex\\n\\nng_isp: ng\\nng_isp: TARGET = ng\\nng_isp: HFUSE = DD\\nng_isp: LFUSE = FF\\nng_isp: EFUSE = 00\\nng_isp: isp\\n\\natmega328: TARGET = atmega328\\natmega328: MCU_TARGET = atmega328p\\natmega328: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1' -DBAUD_RATE=57600\\natmega328: AVR_FREQ = 16000000L \\natmega328: LDSECTION  = --section-start=.text=0x7800\\natmega328: $(PROGRAM)_atmega328.hex\\n\\natmega328_isp: atmega328\\natmega328_isp: TARGET = atmega328\\natmega328_isp: MCU_TARGET = atmega328p\\natmega328_isp: HFUSE = DA\\natmega328_isp: LFUSE = FF\\natmega328_isp: EFUSE = 05\\natmega328_isp: isp\\n\\natmega328_pro8: TARGET = atmega328_pro_8MHz\\natmega328_pro8: MCU_TARGET = atmega328p\\natmega328_pro8: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1' -DBAUD_RATE=57600 -DDOUBLE_SPEED\\natmega328_pro8: AVR_FREQ = 8000000L \\natmega328_pro8: LDSECTION  = --section-start=.text=0x7800\\natmega328_pro8: $(PROGRAM)_atmega328_pro_8MHz.hex\\n\\natmega328_pro8_isp: atmega328_pro8\\natmega328_pro8_isp: TARGET = atmega328_pro_8MHz\\natmega328_pro8_isp: MCU_TARGET = atmega328p\\natmega328_pro8_isp: HFUSE = DA\\natmega328_pro8_isp: LFUSE = FF\\natmega328_pro8_isp: EFUSE = 05\\natmega328_pro8_isp: isp\\n\\nmega: TARGET = atmega1280\\nmega: MCU_TARGET = atmega1280\\nmega: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=0' -DBAUD_RATE=57600\\nmega: AVR_FREQ = 16000000L \\nmega: LDSECTION  = --section-start=.text=0x1F000\\nmega: $(PROGRAM)_atmega1280.hex\\n\\nmega_isp: mega\\nmega_isp: TARGET = atmega1280\\nmega_isp: MCU_TARGET = atmega1280\\nmega_isp: HFUSE = DA\\nmega_isp: LFUSE = FF\\nmega_isp: EFUSE = F5\\nmega_isp: isp\\n\\natmega1284p: TARGET = atmega1284p\\natmega1284p: MCU_TARGET = atmega1284p\\natmega1284p: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=0' '-DBAUD_RATE=57600'\\natmega1284p: AVR_FREQ = 16000000L \\natmega1284p: LDSECTION  = --section-start=.text=0x1F000\\natmega1284p: $(PROGRAM)_atmega1284p.hex\\n\\natmega1284p_8m: TARGET = atmega1284p\\natmega1284p_8m: MCU_TARGET = atmega1284p\\natmega1284p_8m: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=0' '-DBAUD_RATE=19200'\\natmega1284p_8m: AVR_FREQ = 8000000L\\natmega1284p_8m: LDSECTION  = --section-start=.text=0x1F000\\natmega1284p_8m: $(PROGRAM)_atmega1284p_8m.hex\\n\\natmega644p: TARGET = atmega644p\\natmega644p: MCU_TARGET = atmega644p\\natmega644p: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=0' '-DBAUD_RATE=57600'\\natmega644p: AVR_FREQ = 16000000L\\natmega644p: LDSECTION  = --section-start=.text=0xF800\\natmega644p: $(PROGRAM)_atmega644p.hex\\n\\n\\natmega1284p_isp: atmega1284p\\natmega1284p_isp: TARGET = atmega1284p\\natmega1284p_isp: MCU_TARGET = atmega1284p\\natmega1284p_isp: HFUSE = DC\\natmega1284p_isp: LFUSE = FF\\natmega1284p_isp: EFUSE = FD\\natmega1284p_isp: isp\\n\\nisp: $(TARGET)\\n\\t$(ISPFUSES)\\n\\t$(ISPFLASH)\\n\\nisp-stk500: $(PROGRAM)_$(TARGET).hex\\n\\t$(STK500-1)\\n\\t$(STK500-2)\\n\\n%.elf: $(OBJ)\\n\\t$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS)\\n\\nclean:\\n\\trm -rf *.o *.elf *.lst *.map *.sym *.lss *.eep *.srec *.bin *.hex\\n\\n%.lst: %.elf\\n\\t$(OBJDUMP) -h -S $< > $@\\n\\n%.hex: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -O ihex $< $@\\n\\n%.srec: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -O srec $< $@\\n\\n%.bin: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -O binary $< $@\\n\\t\\n\u0000'\n"
    },
    "ArduinoAddons/Arduino_1.6.x/hardware/marlin/avr/bootloaders/atmega/Makefile" : {
      "ObjectId" : "3f2bb6156730d240ca78e75c05ec08258d03df0f",
      "LastModified" : "2015-06-27T20:49:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for ATmegaBOOT\n\n# E.Lins, 18.7.2005\n\n# $Id$\n\n#\n\n# Instructions\n\n#\n\n# To make bootloader .hex file:\n\n# make diecimila\n\n# make lilypad\n\n# make ng\n\n# etc...\n\n#\n\n# To burn bootloader .hex file:\n\n# make diecimila_isp\n\n# make lilypad_isp\n\n# make ng_isp\n\n# etc...\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# program name should not be changed...\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# enter the parameters for the avrdude isp tool\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# the efuse should really be 0xf8; since, however, only the lower\n\n# three bits of that byte are used on the atmega168, avrdude gets\n\n# confused if you specify 1's for the higher bits, see:\n\n# http://tinker.it/now/2007/02/24/the-tale-of-avrdude-atmega168-and-extended-bits-fuses/\n\n#\n\n# similarly, the lock bits should be 0xff instead of 0x3f (to\n\n# unlock the bootloader section) and 0xcf instead of 0x0f (to\n\n# lock it), but since the high two bits of the lock byte are\n\n# unused, avrdude would get confused.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4,
      "Errorlog" : "line 45:9 token recognition error at: '\"C:\\P'\nline 45:26 token recognition error at: '\\A'\nline 45:32 token recognition error at: '\\A'\nline 45:42 token recognition error at: '\\S'\nline 45:49 token recognition error at: '\\S'\nline 45:60 token recognition error at: '\"\\nSTK500-1 = $(STK500) -e -d$(MCU_TARGET) -pf -vf -if$(PROGRAM)_$(TARGET).hex \\\\n-lFF -LFF -f$(HFUSE)$(LFUSE) -EF8 -ms -q -cUSB -I200kHz -s -wt\\nSTK500-2 = $(STK500) -d$(MCU_TARGET) -ms -q -lCF -LCF -cUSB -I200kHz -s -wt\\n\\n\\nOBJ        = $(PROGRAM).o\\nOPTIMIZE   = -O2\\n\\nDEFS       = \\nLIBS       =\\n\\nCC         = avr-gcc\\n\\n# Override is only needed by avr-lib build system.\\n\\noverride CFLAGS        = -g -Wall $(OPTIMIZE) -mmcu=$(MCU_TARGET) -DF_CPU=$(AVR_FREQ) $(DEFS)\\noverride LDFLAGS       = -Wl,$(LDSECTION)\\n#override LDFLAGS       = -Wl,-Map,$(PROGRAM).map,$(LDSECTION)\\n\\nOBJCOPY        = avr-objcopy\\nOBJDUMP        = avr-objdump\\n\\nall:\\n\\nlilypad: TARGET = lilypad\\nlilypad: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>1' '-DNUM_LED_FLASHES=3'\\nlilypad: AVR_FREQ = 8000000L\\nlilypad: $(PROGRAM)_lilypad.hex\\n\\nlilypad_isp: lilypad\\nlilypad_isp: TARGET = lilypad\\nlilypad_isp: HFUSE = DD\\nlilypad_isp: LFUSE = E2\\nlilypad_isp: EFUSE = 00\\nlilypad_isp: isp\\n\\nlilypad_resonator: TARGET = lilypad_resonator\\nlilypad_resonator: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=3'\\nlilypad_resonator: AVR_FREQ = 8000000L\\nlilypad_resonator: $(PROGRAM)_lilypad_resonator.hex\\n\\nlilypad_resonator_isp: lilypad_resonator\\nlilypad_resonator_isp: TARGET = lilypad_resonator\\nlilypad_resonator_isp: HFUSE = DD\\nlilypad_resonator_isp: LFUSE = C6\\nlilypad_resonator_isp: EFUSE = 00\\nlilypad_resonator_isp: isp\\n\\npro8: TARGET = pro_8MHz\\npro8: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1' '-DWATCHDOG_MODS'\\npro8: AVR_FREQ = 8000000L\\npro8: $(PROGRAM)_pro_8MHz.hex\\n\\npro8_isp: pro8\\npro8_isp: TARGET = pro_8MHz\\npro8_isp: HFUSE = DD\\npro8_isp: LFUSE = C6\\npro8_isp: EFUSE = 00\\npro8_isp: isp\\n\\npro16: TARGET = pro_16MHz\\npro16: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1' '-DWATCHDOG_MODS'\\npro16: AVR_FREQ = 16000000L\\npro16: $(PROGRAM)_pro_16MHz.hex\\n\\npro16_isp: pro16\\npro16_isp: TARGET = pro_16MHz\\npro16_isp: HFUSE = DD\\npro16_isp: LFUSE = C6\\npro16_isp: EFUSE = 00\\npro16_isp: isp\\n\\npro20: TARGET = pro_20mhz\\npro20: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1' '-DWATCHDOG_MODS'\\npro20: AVR_FREQ = 20000000L\\npro20: $(PROGRAM)_pro_20mhz.hex\\n\\npro20_isp: pro20\\npro20_isp: TARGET = pro_20mhz\\npro20_isp: HFUSE = DD\\npro20_isp: LFUSE = C6\\npro20_isp: EFUSE = 00\\npro20_isp: isp\\n\\ndiecimila: TARGET = diecimila\\ndiecimila: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1'\\ndiecimila: AVR_FREQ = 16000000L \\ndiecimila: $(PROGRAM)_diecimila.hex\\n\\ndiecimila_isp: diecimila\\ndiecimila_isp: TARGET = diecimila\\ndiecimila_isp: HFUSE = DD\\ndiecimila_isp: LFUSE = FF\\ndiecimila_isp: EFUSE = 00\\ndiecimila_isp: isp\\n\\nng: TARGET = ng\\nng: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>1' '-DNUM_LED_FLASHES=3'\\nng: AVR_FREQ = 16000000L\\nng: $(PROGRAM)_ng.hex\\n\\nng_isp: ng\\nng_isp: TARGET = ng\\nng_isp: HFUSE = DD\\nng_isp: LFUSE = FF\\nng_isp: EFUSE = 00\\nng_isp: isp\\n\\natmega328: TARGET = atmega328\\natmega328: MCU_TARGET = atmega328p\\natmega328: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1' -DBAUD_RATE=57600\\natmega328: AVR_FREQ = 16000000L \\natmega328: LDSECTION  = --section-start=.text=0x7800\\natmega328: $(PROGRAM)_atmega328.hex\\n\\natmega328_isp: atmega328\\natmega328_isp: TARGET = atmega328\\natmega328_isp: MCU_TARGET = atmega328p\\natmega328_isp: HFUSE = DA\\natmega328_isp: LFUSE = FF\\natmega328_isp: EFUSE = 05\\natmega328_isp: isp\\n\\natmega328_pro8: TARGET = atmega328_pro_8MHz\\natmega328_pro8: MCU_TARGET = atmega328p\\natmega328_pro8: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=1' -DBAUD_RATE=57600 -DDOUBLE_SPEED\\natmega328_pro8: AVR_FREQ = 8000000L \\natmega328_pro8: LDSECTION  = --section-start=.text=0x7800\\natmega328_pro8: $(PROGRAM)_atmega328_pro_8MHz.hex\\n\\natmega328_pro8_isp: atmega328_pro8\\natmega328_pro8_isp: TARGET = atmega328_pro_8MHz\\natmega328_pro8_isp: MCU_TARGET = atmega328p\\natmega328_pro8_isp: HFUSE = DA\\natmega328_pro8_isp: LFUSE = FF\\natmega328_pro8_isp: EFUSE = 05\\natmega328_pro8_isp: isp\\n\\nmega: TARGET = atmega1280\\nmega: MCU_TARGET = atmega1280\\nmega: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=0' -DBAUD_RATE=57600\\nmega: AVR_FREQ = 16000000L \\nmega: LDSECTION  = --section-start=.text=0x1F000\\nmega: $(PROGRAM)_atmega1280.hex\\n\\nmega_isp: mega\\nmega_isp: TARGET = atmega1280\\nmega_isp: MCU_TARGET = atmega1280\\nmega_isp: HFUSE = DA\\nmega_isp: LFUSE = FF\\nmega_isp: EFUSE = F5\\nmega_isp: isp\\n\\natmega1284p: TARGET = atmega1284p\\natmega1284p: MCU_TARGET = atmega1284p\\natmega1284p: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=0' '-DBAUD_RATE=57600'\\natmega1284p: AVR_FREQ = 16000000L \\natmega1284p: LDSECTION  = --section-start=.text=0x1F000\\natmega1284p: $(PROGRAM)_atmega1284p.hex\\n\\natmega1284p_8m: TARGET = atmega1284p\\natmega1284p_8m: MCU_TARGET = atmega1284p\\natmega1284p_8m: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=0' '-DBAUD_RATE=19200'\\natmega1284p_8m: AVR_FREQ = 8000000L\\natmega1284p_8m: LDSECTION  = --section-start=.text=0x1F000\\natmega1284p_8m: $(PROGRAM)_atmega1284p_8m.hex\\n\\natmega644p: TARGET = atmega644p\\natmega644p: MCU_TARGET = atmega644p\\natmega644p: CFLAGS += '-DMAX_TIME_COUNT=F_CPU>>4' '-DNUM_LED_FLASHES=0' '-DBAUD_RATE=57600'\\natmega644p: AVR_FREQ = 16000000L\\natmega644p: LDSECTION  = --section-start=.text=0xF800\\natmega644p: $(PROGRAM)_atmega644p.hex\\n\\n\\natmega1284p_isp: atmega1284p\\natmega1284p_isp: TARGET = atmega1284p\\natmega1284p_isp: MCU_TARGET = atmega1284p\\natmega1284p_isp: HFUSE = DC\\natmega1284p_isp: LFUSE = FF\\natmega1284p_isp: EFUSE = FD\\natmega1284p_isp: isp\\n\\nisp: $(TARGET)\\n\\t$(ISPFUSES)\\n\\t$(ISPFLASH)\\n\\nisp-stk500: $(PROGRAM)_$(TARGET).hex\\n\\t$(STK500-1)\\n\\t$(STK500-2)\\n\\n%.elf: $(OBJ)\\n\\t$(CC) $(CFLAGS) $(LDFLAGS) -o $@ $^ $(LIBS)\\n\\nclean:\\n\\trm -rf *.o *.elf *.lst *.map *.sym *.lss *.eep *.srec *.bin *.hex\\n\\n%.lst: %.elf\\n\\t$(OBJDUMP) -h -S $< > $@\\n\\n%.hex: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -O ihex $< $@\\n\\n%.srec: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -O srec $< $@\\n\\n%.bin: %.elf\\n\\t$(OBJCOPY) -j .text -j .data -O binary $< $@\\n\\t\\n\u0000'\n"
    },
    "ArduinoAddons/Arduino_1.x.x/hardware/Melzi/bootloaders/atmega644p/Makefile" : {
      "ObjectId" : "b9ad6039b307980bc82b404c29882e3e85291c84",
      "LastModified" : "2015-06-27T20:49:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for ATmegaBOOT\n\n# E.Lins, 18.7.2005\n\n# $Id$\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# program name should not be changed...\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# enter the target CPU frequency\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Override is only needed by avr-lib build system.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#override LDFLAGS       = -Wl,-Map,$(PROGRAM).map,$(LDSECTION)\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "Marlin/Makefile" : {
      "ObjectId" : "37435cad17881c78db466a58bf1ad29557f3331c",
      "LastModified" : "2015-07-30T12:56:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Sprinter Arduino Project Makefile\n\n#\n\n# Makefile Based on:\n\n# Arduino 0011 Makefile\n\n# Arduino adaptation by mellis, eighthave, oli.keller\n\n# Marlin adaption by Daid\n\n#\n\n# This has been tested with Arduino 0022.\n\n#\n\n# This makefile allows you to build sketches from the command line\n\n# without the Arduino environment (or Java).\n\n#\n\n# Detailed instructions for using the makefile:\n\n#\n\n#  1. Modify the line containg \"ARDUINO_INSTALL_DIR\" to point to the directory that\n\n#     contains the Arduino installation (for example, under Mac OS X, this\n\n#     might be /Applications/Arduino.app/Contents/Resources/Java).\n\n#\n\n#  2. Modify the line containing \"UPLOAD_PORT\" to refer to the filename\n\n#     representing the USB or serial connection to your Arduino board\n\n#     (e.g. UPLOAD_PORT = /dev/tty.USB0).  If the exact name of this file\n\n#     changes, you can use * as a wildcard (e.g. UPLOAD_PORT = /dev/tty.usb*).\n\n#\n\n#  3. Set the line containing \"MCU\" to match your board's processor.\n\n#     Older one's are atmega8 based, newer ones like Arduino Mini, Bluetooth\n\n#     or Diecimila have the atmega168.  If you're using a LilyPad Arduino,\n\n#     change F_CPU to 8000000. If you are using Gen7 electronics, you\n\n#     probably need to use 20000000. Either way, you must regenerate\n\n#     the speed lookup table with create_speed_lookuptable.py.\n\n#\n\n#  4. Type \"make\" and press enter to compile/verify your program.\n\n#\n\n#  5. Type \"make upload\", reset your Arduino board, and press enter to\n\n#     upload your program to the Arduino board.\n\n#\n\n# Note that all settings are set with ?=, this means you can override them\n\n# from the commandline with \"make HARDWARE_MOTHERBOARD=71\" for example\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This defined the board you are compiling for (see boards.h for the options)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Arduino source install directory, and version number\n\n# On most linuxes this will be /usr/share/arduino\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# You can optionally set a path to the avr-gcc tools. Requires a trailing slash. (ex: /usr/local/avr-gcc/bin)\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Programmer configuration\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# on most linuxes this will be /dev/ttyACM0 or /dev/ttyACM1 \n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#Directory used to build files in, contains all the build files, from object files to the final hex file\n\n#on linux it is best to put an absolute path like /home/username/tmp .\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# This defines whether Liquid_TWI2 support will be built\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# this defines if Wire is needed\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "############################################################################\n\n# Below here nothing should be changed...\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Here the Arduino variant is selected by the board type\n\n# HARDWARE_VARIANT = \"arduino\", \"Sanguino\", \"Gen7\", ...\n\n# MCU = \"atmega1280\", \"Mega2560\", \"atmega2560\", \"atmega644p\", ...\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#Gen7\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#RAMPS\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#Gen6\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#Sanguinololu\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#Ultimaker\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#Teensylu\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#Gen3+\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#Gen3 Monolithic Electronics\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#Megatronics\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#Alpha OMCA board\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#Final OMCA board\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#Rambo\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Azteeg\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Be sure to regenerate speed_lookuptable.h with create_speed_lookuptable.py\n\n# if you are setting this to something other than 16MHz\n\n# Set to 16Mhz if not yet set.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Arduino containd the main source code for the Arduino\n\n# Libraries, the \"hardware variant\" are for boards\n\n# that derives from that, and their source are present in\n\n# the main Marlin source directory\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# VPATH tells make to look into these directory for source files,\n\n# there is no need to specify explicit pathnames as long as the\n\n# directory is added here\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#Check for Arduino 1.0.0 or higher and use the correct sourcefiles for that version\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Name of this Makefile (used for \"make depend\").\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Debugging format.\n\n# Native formats for AVR-GCC's -g are stabs [default], or dwarf-2.\n\n# AVR (extended) COFF requires stabs, plus an avr-objcopy run.\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Program settings\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Place -D or -U options here\n",
        "Line" : 312,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Add all the source directories as include directories too\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Compiler flag to set the C Standard level.\n\n# c89   - \"ANSI\" C\n\n# gnu89 - c89 plus GCC extensions\n\n# c99   - ISO C99 standard (not yet fully implemented)\n\n# gnu99 - c99 plus GCC extensions\n\n#CSTANDARD = -std=gnu99\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#CEXTRA = -Wa,-adhlns=$(<:.c=.lst)\n",
        "Line" : 340,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#ASFLAGS = -Wa,-adhlns=$(<:.S=.lst),-gstabs\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Programming support using avrdude. Settings and variables.\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Define all object files.\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Define all listing files.\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Combine all necessary flags and optional flags.\n\n# Add target processor to flags.\n",
        "Line" : 369,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# set V=1 (eg, \"make V=1\") to print the full commands etc.\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Default target.\n",
        "Line" : 384,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Creates the object directory\n",
        "Line" : 389,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Program the device.\n\n# Do not try to reset an arduino if it's not one\n",
        "Line" : 399,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Display size of file.\n",
        "Line" : 410,
        "CharPositionInLine" : 1
      },
      "45" : {
        "Text" : "# Convert ELF to COFF for use in debugging / simulating in AVR Studio or VMLAB.\n",
        "Line" : 421,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Create extended listing file from ELF output file.\n",
        "Line" : 448,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Create a symbol table from ELF output file.\n",
        "Line" : 452,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Link: create ELF output file from library.\n",
        "Line" : 456,
        "CharPositionInLine" : 1
      },
      "49" : {
        "Text" : "# Target: clean project.\n",
        "Line" : 474,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Automaticaly include the dependency files created by gcc\n",
        "Line" : 486,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 51
    },
    "tests/GTest/CMakeLists.txt" : {
      "ObjectId" : "1351deacfc9ae9056ca9e7dbfdeb27396f2345c4",
      "LastModified" : "2016-08-12T19:03:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##################################\n\n# Download and install GoogleTest\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Comment above line, and uncomment line below to use subversion.\n\n# SVN_REPOSITORY http://googletest.googlecode.com/svn/trunk/ \n\n# Uncomment line below to freeze a revision (here the one for 1.7.0)\n\n# SVN_REVISION -r700\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "################\n\n# Define a test\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "######################################\n\n# Configure the test to use GoogleTest\n\n#\n\n# If used often, could be made a macro.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#########################cartridge_test#########\n\n# Just make the test runnable with\n\n#   $ make test\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "tests/Makefile" : {
      "ObjectId" : "0f2ad309b9aea2129dfc5b798c38594ddcf08324",
      "LastModified" : "2016-08-12T19:03:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 1,
    "MAKEFILE" : 8
  },
  "ElapsedTime" : 3855
}