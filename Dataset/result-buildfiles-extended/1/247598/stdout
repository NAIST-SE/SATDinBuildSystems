{
  "Repository" : "247598",
  "Revision" : "HEAD",
  "ObjectId" : "ba48b446fa2281bfe3c222e815af1d144b1e1382",
  "CommitTime" : "2014-06-25T22:28:34Z",
  "Files" : {
    "src/CMakeLists.txt" : {
      "ObjectId" : "626622ea345a40b8a2dff1d775b4808e8b80b8e1",
      "LastModified" : "2014-06-02T16:12:40Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This defines the basic input (src) and output (lib & include) directories.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set(SRCINCLUDEROOT \"${CODEROOT}/include\")\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#     set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} /Ox /W3 /bigobj -D_SCL_SECURE_NO_WARNINGS\")\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#     set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pthread -std=c++11 -O3 -Wall -Woverloaded-virtual -Wold-style-cast -Wnon-virtual-dtor\")\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Git related macros and commands:\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Now set the global macros for setting up targets.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Doxygen related macros and commands:\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# These are the main sub-directories\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Add the sub-directories to cmake process.\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "src/CMakeMods/FindBGLExtra.cmake" : {
      "ObjectId" : "fcc8140a0182fbc7d7d29e20afa012e92fc2446c",
      "LastModified" : "2013-11-27T23:47:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find BGL-Extra\n\n# Once done this will define\n\n#\n\n#  BGLEXTRA_FOUND - system has BGL-Extra\n\n#  BGLEXTRA_INCLUDE_DIR - the BGL-Extra include directory\n\n#  BGLEXTRA_LIBRARIES - Link these to use BGL-Extra (empty)\n\n#  BGLEXTRA_VERSION_STRING - the version of BGL-Extra found (since CMake 2.8.8)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2013 Sven Mikael Persson <mikael.s.persson@gmail.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set(_BGLEXTRA_PATHS \n\n# PATHS\n\n#   \"\"\n\n# )\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is a header-only library:\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Currently, only a single version (pending proposal to Boost anyways):\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set BGLEXTRA_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# if (BGLEXTRA_FOUND)\n\n#    include(${CMAKE_CURRENT_LIST_DIR}/CheckLibraryExists.cmake)\n\n#    CHECK_LIBRARY_EXISTS(\"${BGLEXTRA_LIBRARIES}\" BZ2_bzCompressInit \"\" BZIP2_NEED_PREFIX)\n\n# endif ()\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/CMakeMods/FindOpenCV.cmake" : {
      "ObjectId" : "3f3b5ad23bd891bbe320e7dac32e85a9ea8bf486",
      "LastModified" : "2013-11-27T23:47:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###########################################################\n\n#                  Find OpenCV Library\n\n# See http://sourceforge.net/projects/opencvlibrary/\n\n#----------------------------------------------------------\n\n#\n\n## 1: Setup:\n\n# The following variables are optionally searched for defaults\n\n#  OpenCV_DIR:            Base directory of OpenCv tree to use.\n\n#\n\n## 2: Variable\n\n# The following are set after configuration is done: \n\n#  \n\n#  OpenCV_FOUND\n\n#  OpenCV_LIBS\n\n#  OpenCV_INCLUDE_DIR\n\n#  OpenCV_VERSION (OpenCV_VERSION_MAJOR, OpenCV_VERSION_MINOR, OpenCV_VERSION_PATCH)\n\n#\n\n#\n\n# Deprecated variable are used to maintain backward compatibility with\n\n# the script of Jan Woetzel (2006/09): www.mip.informatik.uni-kiel.de/~jw\n\n#  OpenCV_INCLUDE_DIRS\n\n#  OpenCV_LIBRARIES\n\n#  OpenCV_LINK_DIRECTORIES\n\n# \n\n## 3: Version\n\n#\n\n# 2013/07/05 Sven Mikael Persson, Added path-hints to find the OpenCVConfig.cmake file.\n\n# 2010/04/07 Benoit Rat, Correct a bug when OpenCVConfig.cmake is not found.\n\n# 2010/03/24 Benoit Rat, Add compatibility for when OpenCVConfig.cmake is not found.\n\n# 2010/03/22 Benoit Rat, Creation of the script.\n\n#\n\n#\n\n# tested with:\n\n# - OpenCV 2.4:  Linux (Ubuntu)\n\n# - OpenCV 2.1:  MinGW, MSVC2008\n\n# - OpenCV 2.0:  MinGW, MSVC2008, GCC4\n\n#\n\n#\n\n## 4: Licence:\n\n#\n\n# LGPL 2.1 : GNU Lesser General Public License Usage\n\n# Alternatively, this file may be used under the terms of the GNU Lesser\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# General Public License version 2.1 as published by the Free Software\n\n# Foundation and appearing in the file LICENSE.LGPL included in the\n\n# packaging of this file.  Please review the following information to\n\n# ensure the GNU Lesser General Public License version 2.1 requirements\n\n# will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.\n\n# \n\n#----------------------------------------------------------\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##====================================================\n\n## Find OpenCV libraries\n\n##----------------------------------------------------\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#When its possible to use the Config script use it.\n",
        "Line" : 76,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "## Include the standard CMake script\n",
        "Line" : 79,
        "CharPositionInLine" : 16
      },
      "5" : {
        "Text" : "## Search for a specific version\n",
        "Line" : 82,
        "CharPositionInLine" : 16
      },
      "6" : {
        "Text" : "#Otherwise it try to guess it.\n",
        "Line" : 85,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "#Find OpenCV version by looking at cvver.h\n",
        "Line" : 94,
        "CharPositionInLine" : 16
      },
      "8" : {
        "Text" : "## Initiate the variable before the loop\n",
        "Line" : 107,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "## Loop over each components\n",
        "Line" : 111,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "#Remove the cache value\n",
        "Line" : 117,
        "CharPositionInLine" : 16
      },
      "11" : {
        "Text" : "#both debug/release\n",
        "Line" : 120,
        "CharPositionInLine" : 16
      },
      "12" : {
        "Text" : "#only debug\n",
        "Line" : 123,
        "CharPositionInLine" : 16
      },
      "13" : {
        "Text" : "#only release\n",
        "Line" : 126,
        "CharPositionInLine" : 16
      },
      "14" : {
        "Text" : "#no library found\n",
        "Line" : 129,
        "CharPositionInLine" : 16
      },
      "15" : {
        "Text" : "#Add to the general list\n",
        "Line" : 134,
        "CharPositionInLine" : 16
      },
      "16" : {
        "Text" : "##====================================================\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "##====================================================\n\n## Print message\n\n##----------------------------------------------------\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# make FIND_PACKAGE friendly\n",
        "Line" : 155,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "##====================================================\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##====================================================\n\n## Backward compatibility\n\n##----------------------------------------------------\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "##====================================================\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "src/CMakeMods/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "25d8df39fe98e553ca2659e038d0f06281f5c9c2",
      "LastModified" : "2013-11-27T23:47:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> ... )\n\n#\n\n# This function is intended to be used in FindXXX.cmake modules files.\n\n# It handles the REQUIRED, QUIET and version-related arguments to find_package().\n\n# It also sets the <UPPERCASED_NAME>_FOUND variable.\n\n# The package is considered found if all variables <var1>... listed contain\n\n# valid results, e.g. valid filepaths.\n\n#\n\n# There are two modes of this function. The first argument in both modes is\n\n# the name of the Find-module where it is called (in original casing).\n\n#\n\n# The first simple mode looks like this:\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(<name> (DEFAULT_MSG|\"Custom failure message\") <var1>...<varN> )\n\n# If the variables <var1> to <varN> are all valid, then <UPPERCASED_NAME>_FOUND\n\n# will be set to TRUE.\n\n# If DEFAULT_MSG is given as second argument, then the function will generate\n\n# itself useful success and error messages. You can also supply a custom error message\n\n# for the failure case. This is not recommended.\n\n#\n\n# The second mode is more powerful and also supports version checking:\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(NAME [REQUIRED_VARS <var1>...<varN>]\n\n#                                           [VERSION_VAR   <versionvar>]\n\n#                                           [HANDLE_COMPONENTS]\n\n#                                           [CONFIG_MODE]\n\n#                                           [FAIL_MESSAGE \"Custom failure message\"] )\n\n#\n\n# As above, if <var1> through <varN> are all valid, <UPPERCASED_NAME>_FOUND\n\n# will be set to TRUE.\n\n# After REQUIRED_VARS the variables which are required for this package are listed.\n\n# Following VERSION_VAR the name of the variable can be specified which holds\n\n# the version of the package which has been found. If this is done, this version\n\n# will be checked against the (potentially) specified required version used\n\n# in the find_package() call. The EXACT keyword is also handled. The default\n\n# messages include information about the required version and the version\n\n# which has been actually found, both if the version is ok or not.\n\n# If the package supports components, use the HANDLE_COMPONENTS option to enable\n\n# handling them. In this case, find_package_handle_standard_args() will report\n\n# which components have been found and which are missing, and the <NAME>_FOUND\n\n# variable will be set to FALSE if any of the required components (i.e. not the\n\n# ones listed after OPTIONAL_COMPONENTS) are missing.\n\n# Use the option CONFIG_MODE if your FindXXX.cmake module is a wrapper for\n\n# a find_package(... NO_MODULE) call.  In this case VERSION_VAR will be set\n\n# to <NAME>_VERSION and the macro will automatically check whether the\n\n# Config module was found.\n\n# Via FAIL_MESSAGE a custom failure message can be specified, if this is not\n\n# used, the default message will be displayed.\n\n#\n\n# Example for mode 1:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(LibXml2  DEFAULT_MSG  LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)\n\n#\n\n# LibXml2 is considered to be found, if both LIBXML2_LIBRARY and\n\n# LIBXML2_INCLUDE_DIR are valid. Then also LIBXML2_FOUND is set to TRUE.\n\n# If it is not found and REQUIRED was used, it fails with FATAL_ERROR,\n\n# independent whether QUIET was used or not.\n\n# If it is found, success will be reported, including the content of <var1>.\n\n# On repeated Cmake runs, the same message won't be printed again.\n\n#\n\n# Example for mode 2:\n\n#\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(BISON  REQUIRED_VARS BISON_EXECUTABLE\n\n#                                             VERSION_VAR BISON_VERSION)\n\n# In this case, BISON is considered to be found if the variable(s) listed\n\n# after REQUIRED_VAR are all valid, i.e. BISON_EXECUTABLE in this case.\n\n# Also the version of BISON will be checked by using the version contained\n\n# in BISON_VERSION.\n\n# Since no FAIL_MESSAGE is given, the default messages will be printed.\n\n#\n\n# Another example for mode 2:\n\n#\n\n#    find_package(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\n\n#    FIND_PACKAGE_HANDLE_STANDARD_ARGS(Automoc4  CONFIG_MODE)\n\n# In this case, FindAutmoc4.cmake wraps a call to find_package(Automoc4 NO_MODULE)\n\n# and adds an additional search directory for automoc4.\n\n# The following FIND_PACKAGE_HANDLE_STANDARD_ARGS() call produces a proper\n\n# success/error message.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# internal helper macro\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# internal helper macro to generate the failure message when used in CONFIG_MODE:\n",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.\n\n# List them all in the error message:\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Simple case: No Config-file was found at all:\n",
        "Line" : 129,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# set up the arguments for CMAKE_PARSE_ARGUMENTS and check whether we are in\n\n# new extended or in the \"old\" mode:\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# now that we collected all arguments, process them\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()\n\n# when it successfully found the config-file, including version checking:\n",
        "Line" : 169,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# collect all variables which were not found, so they can be printed, so the\n\n# user knows better what went wrong (#6375)\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# check if all passed variables are valid\n",
        "Line" : 191,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# component handling\n",
        "Line" : 201,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# version handling:\n",
        "Line" : 232,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# exact version required\n",
        "Line" : 240,
        "CharPositionInLine" : 44
      },
      "15" : {
        "Text" : "# minimum version specified:\n",
        "Line" : 248,
        "CharPositionInLine" : 17
      },
      "16" : {
        "Text" : "# if the package was not found, but a version was given, add that to the output:\n",
        "Line" : 259,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# print the result:\n",
        "Line" : 280,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 18
    },
    "src/CMakeMods/FindQt4.cmake" : {
      "ObjectId" : "ee4d43f60cbd9e4c20deefc93d7676f614ffa33d",
      "LastModified" : "2013-11-27T23:47:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Qt 4\n\n# This module can be used to find Qt4.\n\n# The most important issue is that the Qt4 qmake is available via the system path.\n\n# This qmake is then used to detect basically everything else.\n\n# This module defines a number of key variables and macros.\n\n# The variable QT_USE_FILE is set which is the path to a CMake file that can be included\n\n# to compile Qt 4 applications and libraries.  It sets up the compilation\n\n# environment for include directories, preprocessor defines and populates a\n\n# QT_LIBRARIES variable.\n\n#\n\n# Typical usage could be something like:\n\n#   find_package(Qt4 4.4.3 REQUIRED QtCore QtGui QtXml)\n\n#   include(${QT_USE_FILE})\n\n#   add_executable(myexe main.cpp)\n\n#   target_link_libraries(myexe ${QT_LIBRARIES})\n\n#\n\n# The minimum required version can be specified using the standard find_package()-syntax\n\n# (see example above).\n\n# For compatibility with older versions of FindQt4.cmake it is also possible to\n\n# set the variable QT_MIN_VERSION to the minimum required version of Qt4 before the\n\n# find_package(Qt4) command.\n\n# If both are used, the version used in the find_package() command overrides the\n\n# one from QT_MIN_VERSION.\n\n#\n\n# When using the components argument, QT_USE_QT* variables are automatically set\n\n# for the QT_USE_FILE to pick up.  If one wishes to manually set them, the\n\n# available ones to set include:\n\n#                    QT_DONT_USE_QTCORE\n\n#                    QT_DONT_USE_QTGUI\n\n#                    QT_USE_QT3SUPPORT\n\n#                    QT_USE_QTASSISTANT\n\n#                    QT_USE_QAXCONTAINER\n\n#                    QT_USE_QAXSERVER\n\n#                    QT_USE_QTDESIGNER\n\n#                    QT_USE_QTMOTIF\n\n#                    QT_USE_QTMAIN\n\n#                    QT_USE_QTMULTIMEDIA\n\n#                    QT_USE_QTNETWORK\n\n#                    QT_USE_QTNSPLUGIN\n\n#                    QT_USE_QTOPENGL\n\n#                    QT_USE_QTSQL\n\n#                    QT_USE_QTXML\n\n#                    QT_USE_QTSVG\n\n#                    QT_USE_QTTEST\n\n#                    QT_USE_QTUITOOLS\n\n#                    QT_USE_QTDBUS\n\n#                    QT_USE_QTSCRIPT\n\n#                    QT_USE_QTASSISTANTCLIENT\n\n#                    QT_USE_QTHELP\n\n#                    QT_USE_QTWEBKIT\n\n#                    QT_USE_QTXMLPATTERNS\n\n#                    QT_USE_PHONON\n\n#                    QT_USE_QTSCRIPTTOOLS\n\n#                    QT_USE_QTDECLARATIVE\n\n#\n\n#  QT_USE_IMPORTED_TARGETS\n\n#        If this variable is set to TRUE, FindQt4.cmake will create imported\n\n#        library targets for the various Qt libraries and set the\n\n#        library variables like QT_QTCORE_LIBRARY to point at these imported\n\n#        targets instead of the library file on disk. This provides much better\n\n#        handling of the release and debug versions of the Qt libraries and is\n\n#       also always backwards compatible, except for the case that dependencies\n\n#       of libraries are exported, these will then also list the names of the\n\n#       imported targets as dependency and not the file location on disk. This\n\n#       is much more flexible, but requires that FindQt4.cmake is executed before\n\n#       such an exported dependency file is processed.\n\n#\n\n# There are also some files that need processing by some Qt tools such as moc\n\n# and uic.  Listed below are macros that may be used to process those files.\n\n#\n\n#  macro QT4_WRAP_CPP(outfiles inputfile ... OPTIONS ...)\n\n#        create moc code from a list of files containing Qt class with\n\n#        the Q_OBJECT declaration.  Per-directory preprocessor definitions\n\n#        are also added.  Options may be given to moc, such as those found\n\n#        when executing \"moc -help\".\n\n#\n\n#  macro QT4_WRAP_UI(outfiles inputfile ... OPTIONS ...)\n\n#        create code from a list of Qt designer ui files.\n\n#        Options may be given to uic, such as those found\n\n#        when executing \"uic -help\"\n\n#\n\n#  macro QT4_ADD_RESOURCES(outfiles inputfile ... OPTIONS ...)\n\n#        create code from a list of Qt resource files.\n\n#        Options may be given to rcc, such as those found\n\n#        when executing \"rcc -help\"\n\n#\n\n#  macro QT4_GENERATE_MOC(inputfile outputfile )\n\n#        creates a rule to run moc on infile and create outfile.\n\n#        Use this if for some reason QT4_WRAP_CPP() isn't appropriate, e.g.\n\n#        because you need a custom filename for the moc file or something similar.\n\n#\n\n#  macro QT4_AUTOMOC(sourcefile1 sourcefile2 ... )\n\n#        This macro is still experimental.\n\n#        It can be used to have moc automatically handled.\n\n#        So if you have the files foo.h and foo.cpp, and in foo.h a\n\n#        a class uses the Q_OBJECT macro, moc has to run on it. If you don't\n\n#        want to use QT4_WRAP_CPP() (which is reliable and mature), you can insert\n\n#        #include \"foo.moc\"\n\n#        in foo.cpp and then give foo.cpp as argument to QT4_AUTOMOC(). This will the\n\n#        scan all listed files at cmake-time for such included moc files and if it finds\n\n#        them cause a rule to be generated to run moc at build time on the\n\n#        accompanying header file foo.h.\n\n#        If a source file has the SKIP_AUTOMOC property set it will be ignored by this macro.\n\n#\n\n#        You should have a look on the AUTOMOC property for targets to achieve the same results.\n\n#\n\n#  macro QT4_ADD_DBUS_INTERFACE(outfiles interface basename)\n\n#        Create a the interface header and implementation files with the\n\n#        given basename from the given interface xml file and add it to\n\n#        the list of sources.\n\n#\n\n#        You can pass additional parameters to the qdbusxml2cpp call by setting\n\n#        properties on the input file:\n\n#\n\n#        INCLUDE the given file will be included in the generate interface header\n\n#\n\n#        CLASSNAME the generated class is named accordingly\n\n#\n\n#        NO_NAMESPACE the generated class is not wrapped in a namespace\n\n#\n\n#  macro QT4_ADD_DBUS_INTERFACES(outfiles inputfile ... )\n\n#        Create the interface header and implementation files\n\n#        for all listed interface xml files.\n\n#        The basename will be automatically determined from the name of the xml file.\n\n#\n\n#        The source file properties described for QT4_ADD_DBUS_INTERFACE also apply here.\n\n#\n\n#  macro QT4_ADD_DBUS_ADAPTOR(outfiles xmlfile parentheader parentclassname [basename] [classname])\n\n#        create a dbus adaptor (header and implementation file) from the xml file\n\n#        describing the interface, and add it to the list of sources. The adaptor\n\n#        forwards the calls to a parent class, defined in parentheader and named\n\n#        parentclassname. The name of the generated files will be\n\n#        <basename>adaptor.{cpp,h} where basename defaults to the basename of the xml file.\n\n#        If <classname> is provided, then it will be used as the classname of the\n\n#        adaptor itself.\n\n#\n\n#  macro QT4_GENERATE_DBUS_INTERFACE( header [interfacename] OPTIONS ...)\n\n#        generate the xml interface file from the given header.\n\n#        If the optional argument interfacename is omitted, the name of the\n\n#        interface file is constructed from the basename of the header with\n\n#        the suffix .xml appended.\n\n#        Options may be given to qdbuscpp2xml, such as those found when executing \"qdbuscpp2xml --help\"\n\n#\n\n#  macro QT4_CREATE_TRANSLATION( qm_files directories ... sources ...\n\n#                                ts_files ... OPTIONS ...)\n\n#        out: qm_files\n\n#        in:  directories sources ts_files\n\n#        options: flags to pass to lupdate, such as -extensions to specify\n\n#        extensions for a directory scan.\n\n#        generates commands to create .ts (vie lupdate) and .qm\n\n#        (via lrelease) - files from directories and/or sources. The ts files are\n\n#        created and/or updated in the source tree (unless given with full paths).\n\n#        The qm files are generated in the build tree.\n\n#        Updating the translations can be done by adding the qm_files\n\n#        to the source list of your library/executable, so they are\n\n#        always updated, or by adding a custom target to control when\n\n#        they get updated/generated.\n\n#\n\n#  macro QT4_ADD_TRANSLATION( qm_files ts_files ... )\n\n#        out: qm_files\n\n#        in:  ts_files\n\n#        generates commands to create .qm from .ts - files. The generated\n\n#        filenames can be found in qm_files. The ts_files\n\n#        must exists and are not updated in any way.\n\n#\n\n# function QT4_USE_MODULES( target [link_type] modules...)\n\n#        Make <target> use the <modules> from Qt. Using a Qt module means\n\n#        to link to the library, add the relevant include directories for the module,\n\n#        and add the relevant compiler defines for using the module.\n\n#        Modules are roughly equivalent to components of Qt4, so usage would be\n\n#        something like:\n\n#         qt4_use_modules(myexe Core Gui Declarative)\n\n#        to use QtCore, QtGui and QtDeclarative. The optional <link_type> argument can\n\n#        be specified as either LINK_PUBLIC or LINK_PRIVATE to specify the same argument\n\n#        to the target_link_libraries call.\n\n#\n\n#\n\n#  Below is a detailed list of variables that FindQt4.cmake sets.\n\n#  QT_FOUND         If false, don't try to use Qt.\n\n#  QT4_FOUND        If false, don't try to use Qt 4.\n\n#\n\n#  QT_VERSION_MAJOR The major version of Qt found.\n\n#  QT_VERSION_MINOR The minor version of Qt found.\n\n#  QT_VERSION_PATCH The patch version of Qt found.\n\n#\n\n#  QT_EDITION               Set to the edition of Qt (i.e. DesktopLight)\n\n#  QT_EDITION_DESKTOPLIGHT  True if QT_EDITION == DesktopLight\n\n#  QT_QTCORE_FOUND          True if QtCore was found.\n\n#  QT_QTGUI_FOUND           True if QtGui was found.\n\n#  QT_QT3SUPPORT_FOUND      True if Qt3Support was found.\n\n#  QT_QTASSISTANT_FOUND     True if QtAssistant was found.\n\n#  QT_QTASSISTANTCLIENT_FOUND  True if QtAssistantClient was found.\n\n#  QT_QAXCONTAINER_FOUND    True if QAxContainer was found (Windows only).\n\n#  QT_QAXSERVER_FOUND       True if QAxServer was found (Windows only).\n\n#  QT_QTDBUS_FOUND          True if QtDBus was found.\n\n#  QT_QTDESIGNER_FOUND      True if QtDesigner was found.\n\n#  QT_QTDESIGNERCOMPONENTS  True if QtDesignerComponents was found.\n\n#  QT_QTHELP_FOUND          True if QtHelp was found.\n\n#  QT_QTMOTIF_FOUND         True if QtMotif was found.\n\n#  QT_QTMULTIMEDIA_FOUND    True if QtMultimedia was found (since Qt 4.6.0).\n\n#  QT_QTNETWORK_FOUND       True if QtNetwork was found.\n\n#  QT_QTNSPLUGIN_FOUND      True if QtNsPlugin was found.\n\n#  QT_QTOPENGL_FOUND        True if QtOpenGL was found.\n\n#  QT_QTSQL_FOUND           True if QtSql was found.\n\n#  QT_QTSVG_FOUND           True if QtSvg was found.\n\n#  QT_QTSCRIPT_FOUND        True if QtScript was found.\n\n#  QT_QTSCRIPTTOOLS_FOUND   True if QtScriptTools was found.\n\n#  QT_QTTEST_FOUND          True if QtTest was found.\n\n#  QT_QTUITOOLS_FOUND       True if QtUiTools was found.\n\n#  QT_QTWEBKIT_FOUND        True if QtWebKit was found.\n\n#  QT_QTXML_FOUND           True if QtXml was found.\n\n#  QT_QTXMLPATTERNS_FOUND   True if QtXmlPatterns was found.\n\n#  QT_PHONON_FOUND          True if phonon was found.\n\n#  QT_QTDECLARATIVE_FOUND   True if QtDeclarative was found.\n\n#\n\n#  QT_MAC_USE_COCOA    For Mac OS X, its whether Cocoa or Carbon is used.\n\n#                      In general, this should not be used, but its useful\n\n#                      when having platform specific code.\n\n#\n\n#  QT_DEFINITIONS   Definitions to use when compiling code that uses Qt.\n\n#                   You do not need to use this if you include QT_USE_FILE.\n\n#                   The QT_USE_FILE will also define QT_DEBUG and QT_NO_DEBUG\n\n#                   to fit your current build type.  Those are not contained\n\n#                   in QT_DEFINITIONS.\n\n#\n\n#  QT_INCLUDES      List of paths to all include directories of\n\n#                   Qt4 QT_INCLUDE_DIR and QT_QTCORE_INCLUDE_DIR are\n\n#                   always in this variable even if NOTFOUND,\n\n#                   all other INCLUDE_DIRS are\n\n#                   only added if they are found.\n\n#                   You do not need to use this if you include QT_USE_FILE.\n\n#\n\n#\n\n#  Include directories for the Qt modules are listed here.\n\n#  You do not need to use these variables if you include QT_USE_FILE.\n\n#\n\n#  QT_INCLUDE_DIR              Path to \"include\" of Qt4\n\n#  QT_QT3SUPPORT_INCLUDE_DIR   Path to \"include/Qt3Support\"\n\n#  QT_QTASSISTANT_INCLUDE_DIR  Path to \"include/QtAssistant\"\n\n#  QT_QTASSISTANTCLIENT_INCLUDE_DIR       Path to \"include/QtAssistant\"\n\n#  QT_QAXCONTAINER_INCLUDE_DIR Path to \"include/ActiveQt\" (Windows only)\n\n#  QT_QAXSERVER_INCLUDE_DIR    Path to \"include/ActiveQt\" (Windows only)\n\n#  QT_QTCORE_INCLUDE_DIR       Path to \"include/QtCore\"\n\n#  QT_QTDBUS_INCLUDE_DIR       Path to \"include/QtDBus\"\n\n#  QT_QTDESIGNER_INCLUDE_DIR   Path to \"include/QtDesigner\"\n\n#  QT_QTDESIGNERCOMPONENTS_INCLUDE_DIR   Path to \"include/QtDesigner\"\n\n#  QT_QTGUI_INCLUDE_DIR        Path to \"include/QtGui\"\n\n#  QT_QTHELP_INCLUDE_DIR       Path to \"include/QtHelp\"\n\n#  QT_QTMOTIF_INCLUDE_DIR      Path to \"include/QtMotif\"\n\n#  QT_QTMULTIMEDIA_INCLUDE_DIR Path to \"include/QtMultimedia\"\n\n#  QT_QTNETWORK_INCLUDE_DIR    Path to \"include/QtNetwork\"\n\n#  QT_QTNSPLUGIN_INCLUDE_DIR   Path to \"include/QtNsPlugin\"\n\n#  QT_QTOPENGL_INCLUDE_DIR     Path to \"include/QtOpenGL\"\n\n#  QT_QTSCRIPT_INCLUDE_DIR     Path to \"include/QtScript\"\n\n#  QT_QTSQL_INCLUDE_DIR        Path to \"include/QtSql\"\n\n#  QT_QTSVG_INCLUDE_DIR        Path to \"include/QtSvg\"\n\n#  QT_QTTEST_INCLUDE_DIR       Path to \"include/QtTest\"\n\n#  QT_QTWEBKIT_INCLUDE_DIR     Path to \"include/QtWebKit\"\n\n#  QT_QTXML_INCLUDE_DIR        Path to \"include/QtXml\"\n\n#  QT_QTXMLPATTERNS_INCLUDE_DIR  Path to \"include/QtXmlPatterns\"\n\n#  QT_PHONON_INCLUDE_DIR       Path to \"include/phonon\"\n\n#  QT_QTSCRIPTTOOLS_INCLUDE_DIR       Path to \"include/QtScriptTools\"\n\n#  QT_QTDECLARATIVE_INCLUDE_DIR       Path to \"include/QtDeclarative\"\n\n#\n\n#  QT_BINARY_DIR               Path to \"bin\" of Qt4\n\n#  QT_LIBRARY_DIR              Path to \"lib\" of Qt4\n\n#  QT_PLUGINS_DIR              Path to \"plugins\" for Qt4\n\n#  QT_TRANSLATIONS_DIR         Path to \"translations\" of Qt4\n\n#  QT_IMPORTS_DIR              Path to \"imports\" of Qt4\n\n#  QT_DOC_DIR                  Path to \"doc\" of Qt4\n\n#  QT_MKSPECS_DIR              Path to \"mkspecs\" of Qt4\n\n#\n\n#\n\n# The Qt toolkit may contain both debug and release libraries.\n\n# In that case, the following library variables will contain both.\n\n# You do not need to use these variables if you include QT_USE_FILE,\n\n# and use QT_LIBRARIES.\n\n#\n\n#  QT_QT3SUPPORT_LIBRARY            The Qt3Support library\n\n#  QT_QTASSISTANT_LIBRARY           The QtAssistant library\n\n#  QT_QTASSISTANTCLIENT_LIBRARY     The QtAssistantClient library\n\n#  QT_QAXCONTAINER_LIBRARY           The QAxContainer library (Windows only)\n\n#  QT_QAXSERVER_LIBRARY                The QAxServer library (Windows only)\n\n#  QT_QTCORE_LIBRARY                The QtCore library\n\n#  QT_QTDBUS_LIBRARY                The QtDBus library\n\n#  QT_QTDESIGNER_LIBRARY            The QtDesigner library\n\n#  QT_QTDESIGNERCOMPONENTS_LIBRARY  The QtDesignerComponents library\n\n#  QT_QTGUI_LIBRARY                 The QtGui library\n\n#  QT_QTHELP_LIBRARY                The QtHelp library\n\n#  QT_QTMOTIF_LIBRARY               The QtMotif library\n\n#  QT_QTMULTIMEDIA_LIBRARY          The QtMultimedia library\n\n#  QT_QTNETWORK_LIBRARY             The QtNetwork library\n\n#  QT_QTNSPLUGIN_LIBRARY            The QtNsPLugin library\n\n#  QT_QTOPENGL_LIBRARY              The QtOpenGL library\n\n#  QT_QTSCRIPT_LIBRARY              The QtScript library\n\n#  QT_QTSQL_LIBRARY                 The QtSql library\n\n#  QT_QTSVG_LIBRARY                 The QtSvg library\n\n#  QT_QTTEST_LIBRARY                The QtTest library\n\n#  QT_QTUITOOLS_LIBRARY             The QtUiTools library\n\n#  QT_QTWEBKIT_LIBRARY              The QtWebKit library\n\n#  QT_QTXML_LIBRARY                 The QtXml library\n\n#  QT_QTXMLPATTERNS_LIBRARY         The QtXmlPatterns library\n\n#  QT_QTMAIN_LIBRARY                The qtmain library for Windows\n\n#  QT_PHONON_LIBRARY                The phonon library\n\n#  QT_QTSCRIPTTOOLS_LIBRARY         The QtScriptTools library\n\n#\n\n# The QtDeclarative library:             QT_QTDECLARATIVE_LIBRARY\n\n#\n\n# also defined, but NOT for general use are\n\n#  QT_MOC_EXECUTABLE                   Where to find the moc tool.\n\n#  QT_UIC_EXECUTABLE                   Where to find the uic tool.\n\n#  QT_UIC3_EXECUTABLE                  Where to find the uic3 tool.\n\n#  QT_RCC_EXECUTABLE                   Where to find the rcc tool\n\n#  QT_DBUSCPP2XML_EXECUTABLE           Where to find the qdbuscpp2xml tool.\n\n#  QT_DBUSXML2CPP_EXECUTABLE           Where to find the qdbusxml2cpp tool.\n\n#  QT_LUPDATE_EXECUTABLE               Where to find the lupdate tool.\n\n#  QT_LRELEASE_EXECUTABLE              Where to find the lrelease tool.\n\n#  QT_QCOLLECTIONGENERATOR_EXECUTABLE  Where to find the qcollectiongenerator tool.\n\n#  QT_DESIGNER_EXECUTABLE              Where to find the Qt designer tool.\n\n#  QT_LINGUIST_EXECUTABLE              Where to find the Qt linguist tool.\n\n#\n\n#\n\n# These are around for backwards compatibility\n\n# they will be set\n\n#  QT_WRAP_CPP  Set true if QT_MOC_EXECUTABLE is found\n\n#  QT_WRAP_UI   Set true if QT_UIC_EXECUTABLE is found\n\n#\n\n# These variables do _NOT_ have any effect anymore (compared to FindQt.cmake)\n\n#  QT_MT_REQUIRED         Qt4 is now always multithreaded\n\n#\n\n# These variables are set to \"\" Because Qt structure changed\n\n# (They make no sense in Qt4)\n\n#  QT_QT_LIBRARY        Qt-Library is now split\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use find_package( Qt4 COMPONENTS ... ) to enable modules\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# To make sure we don't use QtCore or QtGui when not in COMPONENTS\n",
        "Line" : 355,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# If Qt3 has already been found, fail.\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# convenience macro for dealing with debug/release library names\n",
        "Line" : 387,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# The name of the imported targets, i.e. the prefix \"Qt4::\" must not change,\n\n# since it is stored in EXPORT-files as name of a required library. If the name would change\n\n# here, this would lead to the imported Qt4-library targets not being resolved by cmake anymore.\n",
        "Line" : 392,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# If QT_USE_IMPORTED_TARGETS is enabled, the QT_QTFOO_LIBRARY variables are set to point at these\n\n# imported targets. This works better in general, and is also in almost all cases fully\n\n# backward compatible. The only issue is when a project A which had this enabled then exports its\n\n# libraries via export or export_library_dependencies(). In this case the libraries from project\n\n# A will depend on the imported Qt targets, and the names of these imported targets will be stored\n\n# in the dependency files on disk. This means when a project B then uses project A, these imported\n\n# targets must be created again, otherwise e.g. \"Qt4__QtCore\" will be interpreted as name of a\n\n# library file on disk, and not as a target, and linking will fail:\n",
        "Line" : 419,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# if the release- as well as the debug-version of the library have been found:\n",
        "Line" : 432,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# if the generator supports configuration types then set\n\n# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value\n",
        "Line" : 434,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# if there are no configuration types and CMAKE_BUILD_TYPE has no value\n\n# then just use the release libraries\n",
        "Line" : 439,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# if only the release version was found, set the debug variable also to the release version\n",
        "Line" : 446,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# if only the debug version was found, set the release variable also to the debug version\n",
        "Line" : 453,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# put the value in the cache:\n",
        "Line" : 460,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "#add the include directory to QT_INCLUDES\n",
        "Line" : 474,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Make variables changeble to the advanced user\n",
        "Line" : 478,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Restore possibly found qmake and it's version; these are used later\n\n# in error message if incorrect version is found\n",
        "Line" : 532,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# ask qmake for the mkspecs directory\n\n# we do this first because QT_LIBINFIX might be set\n",
        "Line" : 551,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# do not replace : on windows as it might be a drive letter\n\n# and windows should already use ; as a separator\n",
        "Line" : 555,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# ask qmake for the library dir as a hint, then search for QtCore library and use that as a reference for finding the\n\n# others and for setting QT_LIBRARY_DIR\n",
        "Line" : 582,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# try dropping a hint if trying to use Visual Studio with Qt built by mingw\n",
        "Line" : 610,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# set QT_LIBRARY_DIR based on location of QtCore found.\n",
        "Line" : 619,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# ask qmake for the binary dir\n",
        "Line" : 637,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# ask qmake for the include dir\n",
        "Line" : 654,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Set QT_HEADERS_DIR based on finding QtCore header\n",
        "Line" : 663,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# Set QT_INCLUDE_DIR based on QT_HEADERS_DIR\n",
        "Line" : 681,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Qt/Mac frameworks has two include dirs.\n\n# One is the framework include for which CMake will add a -F flag\n\n# and the other is an include dir for non-framework Qt modules\n",
        "Line" : 684,
        "CharPositionInLine" : 6
      },
      "27" : {
        "Text" : "# Set QT_INCLUDES\n",
        "Line" : 693,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# ask qmake for the documentation directory\n",
        "Line" : 697,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# ask qmake for the plugins directory\n",
        "Line" : 704,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# ask qmake for the translations directory\n",
        "Line" : 716,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# ask qmake for the imports directory\n",
        "Line" : 722,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Make variables changeble to the advanced user\n",
        "Line" : 739,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "#############################################\n\n#\n\n# Find out what window system we're using\n\n#\n\n#############################################\n\n# Save required variable\n",
        "Line" : 746,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Add QT_INCLUDE_DIR to CMAKE_REQUIRED_INCLUDES\n",
        "Line" : 754,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Check for Window system symbols (note: only one should end up being set)\n",
        "Line" : 756,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# Restore CMAKE_REQUIRED_INCLUDES and CMAKE_REQUIRED_FLAGS variables\n",
        "Line" : 775,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "#\n\n#############################################\n",
        "Line" : 778,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "########################################\n\n#\n\n#       Setting the INCLUDE-Variables\n\n#\n\n########################################\n",
        "Line" : 783,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# phonon doesn't seem consistent, let's try phonondefs.h for some\n\n# installations\n",
        "Line" : 836,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# Set QT_AXCONTAINER_INCLUDE_DIR and QT_AXSERVER_INCLUDE_DIR\n",
        "Line" : 850,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# Set QT_QTDESIGNERCOMPONENTS_INCLUDE_DIR\n",
        "Line" : 861,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Set QT_QTASSISTANT_INCLUDE_DIR\n",
        "Line" : 869,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# Set QT_QTASSISTANTCLIENT_INCLUDE_DIR\n",
        "Line" : 877,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "########################################\n\n#\n\n#       Setting the LIBRARY-Variables\n\n#\n\n########################################\n",
        "Line" : 885,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# find the libraries\n",
        "Line" : 891,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Release framework library file does not exist... Force to NOTFOUND:\n",
        "Line" : 904,
        "CharPositionInLine" : 8
      },
      "47" : {
        "Text" : "# Debug framework library file does not exist... Force to NOTFOUND:\n",
        "Line" : 910,
        "CharPositionInLine" : 8
      },
      "48" : {
        "Text" : "# QtUiTools is sometimes not in the same directory as the other found libraries\n\n# e.g. on Mac, its never a framework like the others are\n",
        "Line" : 916,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# Set QT_QTDESIGNERCOMPONENTS_LIBRARY\n",
        "Line" : 922,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# Set QT_QTMAIN_LIBRARY\n",
        "Line" : 926,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Set QT_QTASSISTANTCLIENT_LIBRARY\n",
        "Line" : 932,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Set QT_QTASSISTANT_LIBRARY\n",
        "Line" : 936,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Set QT_QTHELP_LIBRARY\n",
        "Line" : 940,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "############################################\n\n#\n\n# Check the existence of the libraries.\n\n#\n\n############################################\n",
        "Line" : 948,
        "CharPositionInLine" : 2
      },
      "55" : {
        "Text" : "# Set QT_xyz_LIBRARY variable and add\n\n# library include path to QT_INCLUDES\n",
        "Line" : 955,
        "CharPositionInLine" : 2
      },
      "56" : {
        "Text" : "# platform dependent libraries\n",
        "Line" : 968,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "#######################################\n\n#\n\n#       Check the executables of Qt\n\n#          ( moc, uic, rcc )\n\n#\n\n#######################################\n",
        "Line" : 976,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# get the directory of the current file, used later on in the file\n",
        "Line" : 1080,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "###############################################\n\n#\n\n#       configuration/system dependent settings\n\n#\n\n###############################################\n",
        "Line" : 1084,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "#######################################\n\n#\n\n#       Check the plugins of Qt\n\n#\n\n#######################################\n",
        "Line" : 1093,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# find_library works better than find_file but we need to set prefixes to only match plugins\n",
        "Line" : 1144,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# find_library works easier/better than find_file but we need to set suffixes to only match plugins\n",
        "Line" : 1161,
        "CharPositionInLine" : 8
      },
      "63" : {
        "Text" : "######################################\n\n#\n\n#       Macros for building Qt files\n\n#\n\n######################################\n",
        "Line" : 1179,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "#support old QT_MIN_VERSION if set, but not if version is supplied by find_package()\n",
        "Line" : 1191,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# if components specified in find_package(), make sure each of those pieces were found\n",
        "Line" : 1198,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "# if no components specified, we'll make a default set of required variables to say Qt is found\n",
        "Line" : 1217,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "#######################################\n\n#\n\n#       compatibility settings\n\n#\n\n#######################################\n\n# Backwards compatibility for CMake1.4 and 1.2\n",
        "Line" : 1240,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 68
    },
    "src/CMakeMods/Qt4ConfigDependentSettings.cmake" : {
      "ObjectId" : "6db5da18ac6c83ce0b00256352f4027a7f1e4344",
      "LastModified" : "2013-11-27T23:47:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is included by FindQt4.cmake, don't include it directly.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###############################################\n\n#\n\n#       configuration/system dependent settings\n\n#\n\n###############################################\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find dependencies for some Qt modules\n\n# when doing builds against a static Qt, they are required\n\n# when doing builds against a shared Qt, they are not required\n\n# if a user needs the dependencies, and they couldn't be found, they can set\n\n# the variables themselves.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# On Windows, qconfig.pri has \"shared\" for shared library builds\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# On other platforms, check file extension to know if its static\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# build using shared Qt needs -DQT_DLL on Windows\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# QtOpenGL dependencies\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## system png\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## system jpeg\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## system tiff\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## system mng\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# for X11, get X11 library directory\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## X11 SM\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Xi\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Xrender\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Xrandr\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Xcursor\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "## Xinerama\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## Xfixes\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## fontconfig\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## system-freetype\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## system-zlib\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "## openssl\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "## dbus\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## glib\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Qt 4.2.0+ uses glib-2.0\n",
        "Line" : 217,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Qt 4.5+ also links to gobject-2.0\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "## clock-monotonic, just see if we need to link with rt\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# X11 libraries Qt always depends on\n",
        "Line" : 260,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Qt 4.0, 4.1, 4.2 use QuickTime\n",
        "Line" : 283,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Qt 4.2+ use AppKit\n",
        "Line" : 288,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 32
    },
    "src/CMakeMods/Qt4Macros.cmake" : {
      "ObjectId" : "251d57c3d4a35f596813c727af1d3f5c7245f68f",
      "LastModified" : "2013-11-27T23:47:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is included by FindQt4.cmake, don't include it directly.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "######################################\n\n#\n\n#       Macros for building Qt files\n\n#\n\n######################################\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# macro used to create the names of output files preserving relative dirs\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# absolute path\n",
        "Line" : 57,
        "CharPositionInLine" : 41
      },
      "5" : {
        "Text" : "# helper macro to set up a moc rule\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# For Windows, create a parameters file to work around command line length limit\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Pass the parameters in a file.  Set the working directory to\n\n# be that containing the parameters file and reference it by\n\n# just the file name.  This is necessary because the moc tool on\n\n# MinGW builds does not seem to handle spaces in the path to the\n\n# file given with the @ syntax.\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# get include dirs and flags\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# dont run automoc on this file\n",
        "Line" : 135,
        "CharPositionInLine" : 73
      },
      "10" : {
        "Text" : "# QT4_WRAP_CPP(outfiles inputfile ... )\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# get include dirs\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# QT4_WRAP_UI(outfiles inputfile ... )\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# QT4_ADD_RESOURCES(outfiles inputfile ... )\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#  parse file for dependencies\n\n#  all files are absolute paths or relative to the location of the qrc file\n",
        "Line" : 188,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# Since this cmake macro is doing the dependency scanning for these files,\n\n# let's make a configured file and add it as a dependency so cmake is run\n\n# again when dependencies need to be recomputed.\n",
        "Line" : 201,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# The .qrc file does not exist (yet). Let's add a dependency and hope\n\n# that it will be generated later\n",
        "Line" : 207,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# get the part before the \".xml\" suffix\n",
        "Line" : 264,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# _customName OPTIONS -some -options )\n",
        "Line" : 272,
        "CharPositionInLine" : 43
      },
      "19" : {
        "Text" : "# _optionalBasename _optionalClassName)\n",
        "Line" : 299,
        "CharPositionInLine" : 69
      },
      "20" : {
        "Text" : "# if \"SKIP_AUTOMOC\" is set to true, we will not handle this file here.\n\n# This is required to make uic work correctly:\n\n# we need to add generated .cpp files to the sources (to compile them),\n\n# but we cannot let automoc handle them, as the .cpp files don't exist yet when\n\n# cmake is run for the very first time on them -> however the .cpp files might\n\n# exist at a later run. at that time we need to skip them, so that we don't add two\n\n# different rules for the same moc file\n",
        "Line" : 342,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# make a .pro file to call lupdate on, so we don't make our commands too\n\n# long for some systems\n",
        "Line" : 399,
        "CharPositionInLine" : 7
      },
      "CommentCount" : 22
    },
    "src/ReaK/CMakeLists.txt" : {
      "ObjectId" : "91e68200d8d780dceef65aceae4616179d216386",
      "LastModified" : "2014-06-02T22:47:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The following definition of RK_VERBOSITY determines the depth-level of the debug option of the programs (usually between 0 (no debug output) and 10 (full debug output)).\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(EXTRA_SYSTEM_LIBS)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# These are the main sub-directories\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if a custom path for boost is provided, than use that (and suppress system paths).\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# make sure that the *nix suffixes and prefixes are correct (some cmake installs of findBoost.cmake are wrong with this).\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#disable the libraries, since it uses automatic linking:\n",
        "Line" : 85,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Add the sub-directories to cmake process.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/ReaK/PyReaK.cmake" : {
      "ObjectId" : "6866ab6c93b2c5ab528d4e4e50782fba67cd0d07",
      "LastModified" : "2013-11-27T23:47:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ReaK/core/CMakeLists.txt" : {
      "ObjectId" : "ac8dc834b1522a835c81221a73b92172a5b98f3b",
      "LastModified" : "2013-11-27T23:47:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These are the main sub-directories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add the sub-directories to cmake process.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/ReaK/core/base/CMakeLists.txt" : {
      "ObjectId" : "eb0216b11605d30430d5558893f8a2dcc02546cf",
      "LastModified" : "2014-03-20T22:14:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(BASE_SOURCES \"\")\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_library(reak_base STATIC ${BASE_SOURCES})\n\n#setup_custom_target(reak_base \"${SRCROOT}${RKBASEDIR}\")\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/ReaK/core/integrators/CMakeLists.txt" : {
      "ObjectId" : "8c4b0e28b77ade060bab747e0fba8991bbad0b18",
      "LastModified" : "2013-11-27T23:47:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_library(reak_integrators STATIC ${INTEGRATORS_SOURCES})\n\n#setup_custom_target(reak_integrators \"${SRCROOT}${RKINTEGRATORSDIR}\")\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/ReaK/core/kinetostatics/CMakeLists.txt" : {
      "ObjectId" : "79fa325cb687e7a944f3826353d83561b59c2e04",
      "LastModified" : "2013-11-27T23:47:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ReaK/core/lin_alg/CMakeLists.txt" : {
      "ObjectId" : "306db3b8c1656a5845d5aad2873a4577ba0c5943",
      "LastModified" : "2013-11-27T23:47:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ReaK/core/optimization/CMakeLists.txt" : {
      "ObjectId" : "8c86b23ebbd2968bb7f0581b228d71ef8f7f6a4d",
      "LastModified" : "2013-11-27T23:47:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ReaK/core/recorders/CMakeLists.txt" : {
      "ObjectId" : "e174be47c3cdec2e83bfca5d9599166c5c5bfdb8",
      "LastModified" : "2014-06-23T17:05:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#   \"${SRCROOT}${RKRECORDERSDIR}/tcp_recorder.cpp\"\n\n#   \"${SRCROOT}${RKRECORDERSDIR}/udp_recorder.cpp\"\n\n#   \"${SRCROOT}${RKRECORDERSDIR}/raw_udp_recorder.cpp\"\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/ReaK/core/root_finders/CMakeLists.txt" : {
      "ObjectId" : "2d3ecee7ab62f32cef281560706243de79203583",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(ROOTFINDERS_SOURCES \"${SRCROOT}${RKROOTFINDERSDIR}/.cpp\")\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/ReaK/core/rtti/CMakeLists.txt" : {
      "ObjectId" : "2c3e7e49b21caf7e1caeb7d4380a2c82d4b4a517",
      "LastModified" : "2013-11-27T23:47:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ReaK/core/serialization/CMakeLists.txt" : {
      "ObjectId" : "1ae3c29f9ae55b78141b15032b28bd907c3a81a7",
      "LastModified" : "2013-11-27T23:47:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ReaK/core/sorting/CMakeLists.txt" : {
      "ObjectId" : "819b7a4297a66bf67b63a0589bbdb8bfd43654e2",
      "LastModified" : "2013-11-27T23:47:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(SORTING_SOURCES \"${SRCROOT}${RKROOTFINDERSDIR}/.cpp\")\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_library(reak_sorting STATIC ${SORTING_SOURCES})\n\n#setup_custom_target(reak_sorting \"${SRCROOT}${RKSORTINGDIR}\")\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/ReaK/core/tensors/CMakeLists.txt" : {
      "ObjectId" : "0e12575be9148d95ae1dc02ad6c6467c0d1197dc",
      "LastModified" : "2013-11-27T23:47:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set(TENSORS_SOURCES \"${SRCROOT}${RKTENSORSDIR}/.cpp\")\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/ReaK/ctrl/CMakeLists.txt" : {
      "ObjectId" : "5be9bce8fdc8868e3d5ea07ac783a6dff9462131",
      "LastModified" : "2014-03-20T22:14:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These are the main sub-directories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add the sub-directories to cmake process.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/ReaK/ctrl/ctrl_sys/CMakeLists.txt" : {
      "ObjectId" : "d0212fa5f5c480866efbeb7c18fbd3a213296eb5",
      "LastModified" : "2013-11-27T23:47:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_library(reak_path_planning STATIC ${PATH_PLANNING_SOURCES})\n\n#setup_custom_target(reak_path_planning \"${SRCROOT}${RKPATHPLANNINGDIR}\")\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/ReaK/ctrl/graph_alg/CMakeLists.txt" : {
      "ObjectId" : "672251ae0630a6a9fdf4143049fab71e7ee95616",
      "LastModified" : "2014-03-20T22:14:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_library(reak_graph_alg STATIC ${GRAPH_ALG_SOURCES})\n\n#setup_custom_target(reak_graph_alg \"${SRCROOT}${RKGRAPHALGDIR}\")\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/ReaK/ctrl/heuristics/CMakeLists.txt" : {
      "ObjectId" : "ba81b9e97d467806f86b268159ca7dac85424f7c",
      "LastModified" : "2013-11-27T23:47:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ReaK/ctrl/interpolation/CMakeLists.txt" : {
      "ObjectId" : "54299c486911c6d934b6ef92951e933c883dfd9c",
      "LastModified" : "2014-06-03T23:39:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ReaK/ctrl/kte_models/CMakeLists.txt" : {
      "ObjectId" : "34722633b04087a9df10154a2362860ce33c962a",
      "LastModified" : "2014-06-03T23:39:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ReaK/ctrl/mbd_kte/CMakeLists.txt" : {
      "ObjectId" : "914233c7d37bd5847418b1090426c703699c22bc",
      "LastModified" : "2013-11-27T23:47:24Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ReaK/ctrl/path_planning/CMakeLists.txt" : {
      "ObjectId" : "04e28669a026eab51764eeb8861e2391ee16952c",
      "LastModified" : "2014-06-03T23:39:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#   \"${SRCROOT}${RKPATHPLANNINGDIR}/extern_templates/rrt_manip_planners_dynamic.cpp\"\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# foreach(PLANNERS_DIM_COUNTER 0 1 2 3 4 5 6 7 8 9 10)\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#if(${QT_FOUND})\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/ReaK/ctrl/ss_systems/CMakeLists.txt" : {
      "ObjectId" : "85d0e374f9b89f25fa7fc57b2ea07faba0cbefe6",
      "LastModified" : "2014-06-03T23:39:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#   include( ${QT_USE_FILE} )\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#   add_executable(X8_test_scene \"${SRCROOT}${RKMISCEXAMPLESDIR}/X8_test_scene.cpp\")\n\n#   setup_custom_target(X8_test_scene \"${SRCROOT}${RKMISCEXAMPLESDIR}\")\n\n#   target_link_libraries(X8_test_scene reak_examples reak_topologies reak_mbd_coin reak_core)\n\n#   target_link_libraries(X8_test_scene ${SOQT4_LIBRARIES} ${QT_LIBRARIES})\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/ReaK/ctrl/sys_integrators/CMakeLists.txt" : {
      "ObjectId" : "a568395a0b0410943e3a9a4689e584df5e8a12df",
      "LastModified" : "2014-06-03T23:39:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ReaK/ctrl/topologies/CMakeLists.txt" : {
      "ObjectId" : "a3bbc5468ac3f5aa560c5119aa55520c9928fd26",
      "LastModified" : "2014-06-03T23:39:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#   \"${SRCROOT}${RKTOPOLOGIESDIR}/extern_templates/joint_space_topologies_ext1.cpp\"\n\n#   \"${SRCROOT}${RKTOPOLOGIESDIR}/extern_templates/joint_space_topologies_ext2.cpp\"\n\n#   \"${SRCROOT}${RKTOPOLOGIESDIR}/extern_templates/joint_space_topologies_ext3.cpp\"\n\n#   \"${SRCROOT}${RKTOPOLOGIESDIR}/extern_templates/joint_space_topologies_ext4.cpp\"\n\n#   \"${SRCROOT}${RKTOPOLOGIESDIR}/extern_templates/joint_space_topologies_ext5.cpp\"\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/ReaK/examples/CMakeLists.txt" : {
      "ObjectId" : "ca7e08f20117bbf36c7325fc6172f52f623ff154",
      "LastModified" : "2014-06-03T23:39:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These are the main sub-directories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add the sub-directories to cmake process.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/ReaK/examples/misc/CMakeLists.txt" : {
      "ObjectId" : "f100e38420d370a247963aa51cf47582ae06f73b",
      "LastModified" : "2014-06-03T23:39:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ReaK/examples/robot_airship/CMakeLists.txt" : {
      "ObjectId" : "6ce77c018268f39278051a6b4d546824cdb6bd6e",
      "LastModified" : "2014-06-03T23:39:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#   \"${SRCROOT}${RKROBOTAIRSHIPDIR}/satellite_invar_models.cpp\"\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#   \"${RKROBOTAIRSHIPDIR}/satellite_invar_models.hpp\"\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/ReaK/geometry/CMakeLists.txt" : {
      "ObjectId" : "2d70675f0544b18bb4bdb15ff09f3ab529023b6d",
      "LastModified" : "2014-06-03T23:39:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These are the main sub-directories\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add the sub-directories to cmake process.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/ReaK/geometry/proximity/CMakeLists.txt" : {
      "ObjectId" : "b58fb8ef2d49fb6261278d11765d0a5977285360",
      "LastModified" : "2014-06-03T23:39:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/ReaK/geometry/shapes/CMakeLists.txt" : {
      "ObjectId" : "119eb229db9888b14dd322c913ed573112491dd4",
      "LastModified" : "2014-06-03T23:39:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  target_link_libraries(test_coin3d reak_mbd reak_core)\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/ReaK/gui_qt/CMakeLists.txt" : {
      "ObjectId" : "aedee5a774b452eee7493d50e98201cda8a91d7f",
      "LastModified" : "2014-06-03T23:39:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#   add_library(reak_gui_qt STATIC ${RKGUIQT_SOURCES})\n\n#   setup_custom_target(reak_gui_qt \"${SRCROOT}${RKGUIQTDIR}\")\n\n#   setup_headers(\"${RKGUIQT_HEADERS}\" \"${RKGUIQTDIR}\")\n\n#   target_link_libraries(reak_gui_qt reak_topologies reak_mbd reak_core)\n\n#   target_link_libraries(reak_gui_qt ${QT_LIBRARIES})\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#   add_executable(test_CRS_planning \"${SRCROOT}${RKROBOTAIRSHIPDIR}/test_CRS_planning.cpp\")\n\n#   setup_custom_target(test_CRS_planning \"${SRCROOT}${RKROBOTAIRSHIPDIR}\")\n\n#   target_link_libraries(test_CRS_planning reak_topologies reak_robot_airship reak_mbd_coin reak_core)\n\n#   target_link_libraries(test_CRS_planning ${SOQT4_LIBRARIES} ${QT_LIBRARIES})\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#    \"${RKGUIQTDIR}/objtree_qtmodel.hpp\"\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 39
  },
  "ElapsedTime" : 1297
}