{
  "Repository" : "5565522",
  "Revision" : "HEAD",
  "ObjectId" : "a68aebd3725d339c4d57904be0ffcbad4f0b4ce5",
  "CommitTime" : "2019-03-17T03:20:57Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "3b7851fd97eaf01aaec4dcdf883fae2c8177d104",
      "LastModified" : "2019-02-19T02:06:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(VERSION_PATCH 0)\n\n#set(PROJECT_VERSION \"${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_PATCH}\")\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This is bad. To remove below defines, FeLib should switch to std::chrono and serialize time since common epoch.\n\n# 32 bit TIME_T has year 2038 problem. Moreover, serialized value is not portable for time_t in general.\n\n# Switching to std::chrono should not be hard, but it's not a topic for this pull request.\n",
        "Line" : 50,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "FeLib/CMakeLists.txt" : {
      "ObjectId" : "c28c447537d252b2a1481fd0e56e235762df3463",
      "LastModified" : "2018-06-10T23:39:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: Use __GNUC__ in the code instead.\n",
        "Line" : 4,
        "CharPositionInLine" : 25
      },
      "1" : {
        "Text" : "# Not very pretty solution. This finds SDL2.dll from SDL2.lib path, so that it can be installed where ivan.exe will end up.\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Not very pretty solution. This finds SDL2.dll from SDL2.lib path, so that it can be installed where ivan.exe will end up.\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Try finding libpng using pkg-config first, because find_package(PNG) finds a\n\n# mismatching header + library combination for me.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "Main/CMakeLists.txt" : {
      "ObjectId" : "2cdc5941acc6f67d39201d09380337f140f98862",
      "LastModified" : "2018-12-13T02:21:56Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The following files are #included from other .cpp files and so shouldn't be\n\n# compiled directly. Setting the HEADER_FILE_ONLY property to TRUE prevents it.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "audio/CMakeLists.txt" : {
      "ObjectId" : "1e62e31b97f37ed17fab3909164c274bbe348b01",
      "LastModified" : "2018-06-10T23:39:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add RtMidi dependencies on Windows\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add RtMidi dependencies on Linux\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add RtMidi dependencies on Mac\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindSDL2.cmake" : {
      "ObjectId" : "40f969e1218dfc35a255d819882d636bd599a40b",
      "LastModified" : "2019-03-11T16:46:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Caveat: If you want to find standard libraries or headers before frameworks,\n\n#         you must pass -DCMAKE_FIND_FRAMEWORK=LAST to cmake.\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# other paths like ~/Library/Frameworks and /usr/local\n\n# should be provided/prioritized by setting $ENV{SDL2DIR}\n",
        "Line" : 71,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# CPU architecture detection for MSVC\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Precedence (CMake 2.6+): HINTS > SYSTEM_PATHS > PATHS\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 125,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# MinGW needs an additional link flag, -mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -mwindows\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# For SDL2main\n",
        "Line" : 153,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 173,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# For MinGW library\n",
        "Line" : 180,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 185,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 187,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 15
    },
    "fantasyname/CMakeLists.txt" : {
      "ObjectId" : "dea020012c6248e9c3289da535a0ee68e154b8d6",
      "LastModified" : "2018-06-10T23:39:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "fantasyname/Makefile" : {
      "ObjectId" : "0bba830a7c609b187d78a677b48e5e978170402a",
      "LastModified" : "2018-06-10T23:39:10Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "igor/CMakeLists.txt" : {
      "ObjectId" : "b1c0b73bb27f231f48c606aa13f1fc3253e86ddd",
      "LastModified" : "2018-06-10T23:39:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "mihail/CMakeLists.txt" : {
      "ObjectId" : "e7c952b1ef0687929899b0eaafdcbdd3bdbea170",
      "LastModified" : "2018-06-10T23:39:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "xbrzscale/CMakeLists.txt" : {
      "ObjectId" : "3badd84e876f751e52230ea13aef91904740b10a",
      "LastModified" : "2018-06-10T23:39:10Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 9,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1725
}