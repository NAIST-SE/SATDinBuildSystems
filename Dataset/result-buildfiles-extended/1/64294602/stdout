{
  "Repository" : "64294602",
  "Revision" : "HEAD",
  "ObjectId" : "a49b51ac8ca5cf30727d6afb482a04f6a2f57228",
  "CommitTime" : "2019-04-18T23:06:23Z",
  "Files" : {
    "Analyzer/CMakeLists.txt" : {
      "ObjectId" : "3c5282a26b4e91c961c9b3831c96ca2d26e4e4af",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeLists.txt" : {
      "ObjectId" : "bb6625e69a89e20d3415ea004f2270a1f93a4889",
      "LastModified" : "2019-04-04T20:33:46Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# fixme: this should be 3.3, but that breaks static ncurses\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# force `Release` build type if left unspecified\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# fixme: hack works for Homebrew, might not work for Conda\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOTE: specify LLVM_BIN_DIR to use your local llvm\n",
        "Line" : 192,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# address and thread sanitizer\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Copy the config directory to the build dir for TSAN suppressions\n",
        "Line" : 211,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# required for older GCC, see https://gcc.gnu.org/bugzilla/show_bug.cgi?id=64354\n",
        "Line" : 215,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Code coverage\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# EGL\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Google Test and Google Mock\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Arrow\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# when we found libparquet it means we're using arrow 11+\n\n# and deps scripts must have built parquet as well as snappy\n",
        "Line" : 301,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# RapidJSON\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Linenoise\n",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# SQLite\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#rdkafka\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# aws-sdk\n",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# bcrypt\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# PicoSHA2\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# opensaml\n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# muparserx - currently render-only\n",
        "Line" : 390,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# required to force regen of MAPD_GIT_HASH.txt, MapDRelease.h\n",
        "Line" : 532,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# clang-tidy\n",
        "Line" : 555,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# doxygen\n",
        "Line" : 569,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Packaging\n",
        "Line" : 589,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Frontend\n",
        "Line" : 617,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Go web server\n",
        "Line" : 637,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# docs\n",
        "Line" : 656,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# systemd\n",
        "Line" : 677,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## mvn process for java code\n",
        "Line" : 693,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# does not account for cross-compiling or Windows\n",
        "Line" : 792,
        "CharPositionInLine" : 74
      },
      "CommentCount" : 31
    },
    "Calcite/CMakeLists.txt" : {
      "ObjectId" : "e41724f1175969d34876e798c7d6a3101ce2ca84",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Catalog/CMakeLists.txt" : {
      "ObjectId" : "d042beb3d991e3a77766c12d26a711739a0a3b77",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Chunk/CMakeLists.txt" : {
      "ObjectId" : "8f7fe31eff9e5736784f1a5cbeb71af234133c46",
      "LastModified" : "2017-01-29T09:22:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CudaMgr/CMakeLists.txt" : {
      "ObjectId" : "9f077665cc3ce96f29f1e9dce6f595f92208252d",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "DataMgr/CMakeLists.txt" : {
      "ObjectId" : "4e5a9130b42ba6cdd651560b7435e9ce1b5279cf",
      "LastModified" : "2019-04-04T20:04:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Distributed/CMakeLists.txt" : {
      "ObjectId" : "91d1d550b8868ff884619d4e9640e6a5ae761b5d",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Fragmenter/CMakeLists.txt" : {
      "ObjectId" : "41bf115914f609f854f4d6961b3c1adafd9e4903",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Import/CMakeLists.txt" : {
      "ObjectId" : "30c650833d08dd5cb4266d26eec51cb3de5202e7",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Parser/CMakeLists.txt" : {
      "ObjectId" : "5cfc873211ea69e0fac098e770a1d7725db4d22f",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Planner/CMakeLists.txt" : {
      "ObjectId" : "6c7bbf971dd486f9a4d32ed9dde780f5fd86a59a",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "QueryEngine/CMakeLists.txt" : {
      "ObjectId" : "cd546a9826e0bcad95f5136b94a533a3fae0ef6f",
      "LastModified" : "2019-04-11T18:10:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "QueryRunner/CMakeLists.txt" : {
      "ObjectId" : "033416a38241b919cb40e29a92f33892c3568701",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SQLFrontend/CMakeLists.txt" : {
      "ObjectId" : "d4c73ec713645d2abe4430169d75e562599aa64e",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SampleCode/CMakeLists.txt" : {
      "ObjectId" : "200ae4223b37ef418c86e324f0655f15f37d6541",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SampleCode/kafka-clickthrough/pom.xml" : {
      "ObjectId" : "1fbb7a173a7c25e09a88b563143b635759e36294",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "Shared/CMakeLists.txt" : {
      "ObjectId" : "7fd5b56b2df86904aac8b1b61b6e98967c5f4a2b",
      "LastModified" : "2019-04-04T20:33:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "SqliteConnector/CMakeLists.txt" : {
      "ObjectId" : "947b5bb34ebf440cc4be930f51cec5cb6ab3a28c",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "StringDictionary/CMakeLists.txt" : {
      "ObjectId" : "56f3eebf51c3ce643dbecf8d2509ea17442f4e00",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Tests/CMakeLists.txt" : {
      "ObjectId" : "ad4955159609e8391c95f58186b479cf6f81589f",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# parse s3 credentials\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ThirdParty/bcrypt/CMakeLists.txt" : {
      "ObjectId" : "ceaab793d727f9a83f0a44850e69729e92222250",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/cpr/cpr/CMakeLists.txt" : {
      "ObjectId" : "327d39fe1c9799f4dd92d895cf15fe3713d221cd",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Allow use of project folders for IDEs like Visual Studio, so we\n\n# could organize projects into relevant folders: \"cpr\", \"tests\" & \"external (libraries)\".\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    message(STATUS \"Checking compiler flags for C++11 support.\")\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set C++11 support flags for various compilers\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#        message(STATUS \"C++11 is supported.\")\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#        message(STATUS \"C++0x is supported.\")\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#        message(STATUS \"The compiler ${CMAKE_CXX_COMPILER} has no C++11 support. Please use a different C++ compiler.\")\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Allow setting the option through an environment variable\n",
        "Line" : 47,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "#    message(STATUS \"  ${OPTION_NAME}: ${${OPTION_NAME}}\")\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#message(STATUS \"C++ Requests CMake Options\")\n\n#message(STATUS \"=======================================================\")\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#message(STATUS \"=======================================================\")\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "ThirdParty/cpr/cpr/cpr-config.cmake" : {
      "ObjectId" : "58ab48320bb8f4d7c01a936b585a08327a13bbd6",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - C++ Requests, Curl for People\n\n# This module is a libcurl wrapper written in modern C++.\n\n# It provides an easy, intuitive, and efficient interface to\n\n# a host of networking methods.\n\n#\n\n# Finding this module will define the following variables:\n\n#  CPR_FOUND - True if the core library has been found\n\n#  CPR_LIBRARIES - Path to the core library archive\n\n#  CPR_INCLUDE_DIRS - Path to the include directories. Gives access\n\n#                     to cpr.h, which must be included in every\n\n#                     file that uses this interface\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ThirdParty/cpr/cpr/cpr/CMakeLists.txt" : {
      "ObjectId" : "287b737382210e3ea24f4643e017162407b29dd3",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#message(STATUS \"Using CURL_INCLUDE_DIRS: ${CURL_INCLUDE_DIRS}.\")\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Source files\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Header files (useful in IDEs)\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#message(STATUS \"Using CURL_LIBRARIES: ${CURL_LIBRARIES}.\")\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "ThirdParty/cpr/cpr/opt/CMakeLists.txt" : {
      "ObjectId" : "b7f8bed8903673e5784f45d490a39cc50d61f4b2",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    message(STATUS \"Set ${VAR_NAME} to ${${VAR_NAME}}.\")\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Code coverage\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#    message(STATUS \"Enabling gcov support\")\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Curl configuration\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#    message(STATUS \"Not using system Curl, using built-in curl project instead.\")\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Group under the \"external\" project folder in IDEs such as Visual Studio.\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# GTest configuration\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#        message(STATUS \"Not using system gtest, using built-in googletest project instead.\")\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# By default, GTest compiles on Windows in CRT static linkage mode. We use this\n\n# variable to force it into using the CRT in dynamic linkage (DLL), just as CPR\n\n# does.\n",
        "Line" : 73,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# Group under the \"tests/gtest\" project folder in IDEs such as Visual Studio.\n",
        "Line" : 85,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# Mongoose configuration\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#    message(STATUS \"Building mongoose project for test support.\")\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Group under the \"external\" project folder in IDEs such as Visual Studio.\n",
        "Line" : 111,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 13
    },
    "ThirdParty/generate_cert/CMakeLists.txt" : {
      "ObjectId" : "09262522f4232d7d3cb39027e18e0eec10717df6",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/googletest/CMakeLists.txt" : {
      "ObjectId" : "34bf4a45bc89d5d01b38c3642c3f79b92b05d003",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/librdkafka/CMakeLists.txt" : {
      "ObjectId" : "df7978652367227dc227bce48f13dba55c1ce376",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Options. No 'RDKAFKA_' prefix to match old C++ code. {\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This option doesn't affect build in fact, only C code\n\n# (see 'rd_kafka_version_str'). In CMake the build type feature usually used\n\n# (like Debug, Release, etc.).\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ZLIB {\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# }\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# OpenSSL {\n\n#if(WITH_BUNDLED_SSL) # option from 'h2o' parent project\n\n#  set(with_ssl_default ON)\n\n#else()\n\n#  find_package(OpenSSL QUIET)\n\n#  if(OpenSSL_FOUND)\n\n#    set(with_ssl_default ON)\n\n#  else()\n\n#    set(with_ssl_default OFF)\n\n#  endif()\n\n#endif()\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# }\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# SASL {\n\n#include(FindPkgConfig)\n\n#pkg_check_modules(SASL QUIET libsasl2)\n\n#if(SASL_FOUND)\n\n#  set(with_sasl_default ON)\n\n#else()\n\n#  set(with_sasl_default OFF)\n\n#endif()\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# }\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# }\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# In:\n\n# * TRYCOMPILE_SRC_DIR\n\n# Out:\n\n# * HAVE_ATOMICS_32\n\n# * HAVE_ATOMICS_32_SYNC\n\n# * HAVE_ATOMICS_64\n\n# * HAVE_ATOMICS_64_SYNC\n\n# * HAVE_REGEX\n\n# * HAVE_STRNDUP\n\n# * LINK_ATOMIC\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# In:\n\n# * WITHOUT_OPTIMIZATION\n\n# * ENABLE_DEVEL\n\n# * ENABLE_REFCNT_DEBUG\n\n# * ENABLE_SHAREDPTR_DEBUG\n\n# * HAVE_ATOMICS_32\n\n# * HAVE_ATOMICS_32_SYNC\n\n# * HAVE_ATOMICS_64\n\n# * HAVE_ATOMICS_64_SYNC\n\n# * WITH_ZLIB\n\n# * WITH_SSL\n\n# * WITH_SASL\n\n# * HAVE_REGEX\n\n# * HAVE_STRNDUP\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# # Installation (https://github.com/forexample/package-example) {\n\n#\n\n# include(GNUInstallDirs)\n\n#\n\n# set(config_install_dir \"lib/cmake/${PROJECT_NAME}\")\n\n#\n\n# set(generated_dir \"${CMAKE_CURRENT_BINARY_DIR}/generated\")\n\n#\n\n# set(project_config \"${generated_dir}/${PROJECT_NAME}Config.cmake\")\n\n# set(targets_export_name \"${PROJECT_NAME}Targets\")\n\n# set(namespace \"${PROJECT_NAME}::\")\n\n#\n\n# include(CMakePackageConfigHelpers)\n\n#\n\n# # In:\n\n# #   * targets_export_name\n\n# #   * PROJECT_NAME\n\n# configure_package_config_file(\n\n#     \"packaging/cmake/Config.cmake.in\"\n\n#     \"${project_config}\"\n\n#     INSTALL_DESTINATION \"${config_install_dir}\"\n\n# )\n\n#\n\n# install(\n\n#     FILES \"${project_config}\"\n\n#     DESTINATION \"${config_install_dir}\"\n\n# )\n\n#\n\n# install(\n\n#     EXPORT \"${targets_export_name}\"\n\n#     NAMESPACE \"${namespace}\"\n\n#     DESTINATION \"${config_install_dir}\"\n\n# )\n\n#\n\n# install(\n\n#     FILES LICENSES.txt\n\n#     DESTINATION \"share/licenses/librdkafka\"\n\n# )\n\n#\n\n# # }\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "ThirdParty/librdkafka/packaging/cmake/try_compile/rdkafka_setup.cmake" : {
      "ObjectId" : "b5a3535cf71d06055e816d632c86b73a057e423f",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Atomic 32 tests {\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# }\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Atomic 64 tests {\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# }\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "ThirdParty/librdkafka/packaging/rpm/Makefile" : {
      "ObjectId" : "a1c6eb8c16d89269df65e73d111d643ee0a76479",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Jenkins CI integration\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "ThirdParty/librdkafka/src-cpp/CMakeLists.txt" : {
      "ObjectId" : "cc4b4fa85715d97102abdb5cc571646f6b458cea",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Support '#include <rdkafcpp.h>'\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# install(\n\n#     TARGETS rdkafka++\n\n#     EXPORT \"${targets_export_name}\"\n\n#     LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n\n#     ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n\n#     RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n\n#     INCLUDES DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n\n# )\n\n#\n\n# install(\n\n#     FILES \"rdkafkacpp.h\"\n\n#     DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/librdkafka\"\n\n# )\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "ThirdParty/librdkafka/src/CMakeLists.txt" : {
      "ObjectId" : "edb570397d3251649e52f3318eef361b8005073c",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Support '#include <rdkafka.h>'\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We need 'dummy' directory to support `#include \"../config.h\"` path\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# option from 'h2o' parent project\n",
        "Line" : 82,
        "CharPositionInLine" : 23
      },
      "3" : {
        "Text" : "# install(\n\n#     TARGETS rdkafka\n\n#     EXPORT \"${targets_export_name}\"\n\n#     LIBRARY DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n\n#     ARCHIVE DESTINATION \"${CMAKE_INSTALL_LIBDIR}\"\n\n#     RUNTIME DESTINATION \"${CMAKE_INSTALL_BINDIR}\"\n\n#     INCLUDES DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}\"\n\n# )\n\n#\n\n# install(\n\n#     FILES \"rdkafka.h\"\n\n#     DESTINATION \"${CMAKE_INSTALL_INCLUDEDIR}/librdkafka\"\n\n# )\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "ThirdParty/linenoise/CMakeLists.txt" : {
      "ObjectId" : "ec84e4529b8a1735c9cd354c836bc918736e8915",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThirdParty/muparserx/CMakeLists.txt" : {
      "ObjectId" : "4d9e2b1202e24f03b5c63eff1ce9cc73407729bc",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# Extract version\n\n########################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "########################################################################\n\n# Compiler specific flags\n\n########################################################################\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#C++11 is a required language feature for this project\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#enable c++11 extensions for OSX\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#multi-core build\n",
        "Line" : 38,
        "CharPositionInLine" : 29
      },
      "5" : {
        "Text" : "########################################################################\n\n# Build library\n\n# Defaults to static, set BUILD_SHARED_LIBS=ON for shared\n\n########################################################################\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#link with lib math when found\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "########################################################################\n\n# Print summary\n\n########################################################################\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "ThirdParty/sqlite3/CMakeLists.txt" : {
      "ObjectId" : "4cdf280245cfeaf3c73ff99cb84efaf5fb2eec72",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "ThriftHandler/CMakeLists.txt" : {
      "ObjectId" : "4253f3a5e0f255b94cca58f25e780fe074a7184d",
      "LastModified" : "2019-04-04T20:33:46Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Utils/CMakeLists.txt" : {
      "ObjectId" : "6c95998b3d997fa32b3034edef117f7ec606110d",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindArrow.cmake" : {
      "ObjectId" : "23fb6aec7b7b28aab63a2d53deec6e60529b02b9",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindArrow.cmake\n\n# -------------\n\n#\n\n# Find a Arrow installation.\n\n#\n\n# This module finds if Arrow is installed and selects a default\n\n# configuration to use.\n\n#\n\n# find_package(Arrow ...)\n\n#\n\n#\n\n# The following variables control which libraries are found::\n\n#\n\n#   Arrow_USE_STATIC_LIBS  - Set to ON to force use of static libraries.\n\n#\n\n# The following are set after the configuration is done:\n\n#\n\n# ::\n\n#\n\n#   Arrow_FOUND            - Set to TRUE if Arrow was found.\n\n#   Arrow_LIBRARIES        - Path to the Arrow libraries.\n\n#   Arrow_LIBRARY_DIRS     - compile time link directories\n\n#   Arrow_INCLUDE_DIRS     - compile time include directories\n\n#\n\n#\n\n# Sample usage:\n\n#\n\n# ::\n\n#\n\n#    find_package(Arrow)\n\n#    if(Arrow_FOUND)\n\n#      target_link_libraries(<YourTarget> ${Arrow_LIBRARIES})\n\n#    endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set standard CMake FindPackage variables if found.\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindBLOSC.cmake" : {
      "ObjectId" : "aa2343d680747e29fb09aafaf216486f2a387976",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindBlosc\n\n# --------\n\n#\n\n# Find the blosc compression library\n\n#\n\n# IMPORTED Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the :prop_tgt:`IMPORTED` target ``BLOSC::BLOSC``,\n\n# if BLOSC has been found.\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the following variables:\n\n#\n\n# ::\n\n#\n\n#   BLOSC_INCLUDE_DIRS - include directories for BLOSC\n\n#   BLOSC_LIBRARIES - libraries to link against BLOSC\n\n#   BLOSC_FOUND - true if BLOSC has been found and can be used\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindBisonpp.cmake" : {
      "ObjectId" : "96b201ebf61c174dad747de572fda4e9b83669bb",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Look for GNU Bison++, the parser generator\n\n# Based off a news post from Andy Cedilnik at Kitware\n\n# Defines the following:\n\n#  BISONPP_EXECUTABLE - path to the bison executable\n\n#  BISONPP_FILE - parse a file with bison\n\n#  BISONPP_PREFIX_OUTPUTS - Set to true to make BISON_FILE produce prefixed\n\n#                         symbols in the generated output based on filename.\n\n#                         So for ${filename}.y, you'll get ${filename}parse(), etc.\n\n#                         instead of yyparse().\n\n#  BISONPP_GENERATE_DEFINES - Set to true to make BISON_FILE output the matching\n\n#                           .h file for a .c file. You want this if you're using\n\n#                           flex.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Modified by Markus for bison++\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindBoost.cmake" : {
      "ObjectId" : "f881646edac94d98ba1b73806d89cd5e2ce9f8ec",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Vendored from upstream commit a8b576244f729e543795750eb6c9e188c0e1fe66\n\n# URL: https://gitlab.kitware.com/cmake/cmake/blob/master/Modules/FindBoost.cmake\n\n# Changes:\n\n# - Hide `imported targets not available` warning, line 761/767.\n\n#   Irrelevant here since we don't use imported targets.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#.rst:\n\n# FindBoost\n\n# ---------\n\n#\n\n# Find Boost include dirs and libraries\n\n#\n\n# Use this module by invoking find_package with the form::\n\n#\n\n#   find_package(Boost\n\n#     [version] [EXACT]      # Minimum or EXACT version e.g. 1.36.0\n\n#     [REQUIRED]             # Fail with error if Boost is not found\n\n#     [COMPONENTS <libs>...] # Boost libraries by their canonical name\n\n#     )                      # e.g. \"date_time\" for \"libboost_date_time\"\n\n#\n\n# This module finds headers and requested component libraries OR a CMake\n\n# package configuration file provided by a \"Boost CMake\" build.  For the\n\n# latter case skip to the \"Boost CMake\" section below.  For the former\n\n# case results are reported in variables::\n\n#\n\n#   Boost_FOUND            - True if headers and requested libraries were found\n\n#   Boost_INCLUDE_DIRS     - Boost include directories\n\n#   Boost_LIBRARY_DIRS     - Link directories for Boost libraries\n\n#   Boost_LIBRARIES        - Boost component libraries to be linked\n\n#   Boost_<C>_FOUND        - True if component <C> was found (<C> is upper-case)\n\n#   Boost_<C>_LIBRARY      - Libraries to link for component <C> (may include\n\n#                            target_link_libraries debug/optimized keywords)\n\n#   Boost_VERSION          - BOOST_VERSION value from boost/version.hpp\n\n#   Boost_LIB_VERSION      - Version string appended to library filenames\n\n#   Boost_MAJOR_VERSION    - Boost major version number (X in X.y.z)\n\n#   Boost_MINOR_VERSION    - Boost minor version number (Y in x.Y.z)\n\n#   Boost_SUBMINOR_VERSION - Boost subminor version number (Z in x.y.Z)\n\n#   Boost_LIB_DIAGNOSTIC_DEFINITIONS (Windows)\n\n#                          - Pass to add_definitions() to have diagnostic\n\n#                            information about Boost's automatic linking\n\n#                            displayed during compilation\n\n#\n\n# This module reads hints about search locations from variables::\n\n#\n\n#   BOOST_ROOT             - Preferred installation prefix\n\n#    (or BOOSTROOT)\n\n#   BOOST_INCLUDEDIR       - Preferred include directory e.g. <prefix>/include\n\n#   BOOST_LIBRARYDIR       - Preferred library directory e.g. <prefix>/lib\n\n#   Boost_NO_SYSTEM_PATHS  - Set to ON to disable searching in locations not\n\n#                            specified by these hint variables. Default is OFF.\n\n#   Boost_ADDITIONAL_VERSIONS\n\n#                          - List of Boost versions not known to this module\n\n#                            (Boost install locations may contain the version)\n\n#\n\n# and saves search results persistently in CMake cache entries::\n\n#\n\n#   Boost_INCLUDE_DIR         - Directory containing Boost headers\n\n#   Boost_LIBRARY_DIR_RELEASE - Directory containing release Boost libraries\n\n#   Boost_LIBRARY_DIR_DEBUG   - Directory containing debug Boost libraries\n\n#   Boost_<C>_LIBRARY_DEBUG   - Component <C> library debug variant\n\n#   Boost_<C>_LIBRARY_RELEASE - Component <C> library release variant\n\n#\n\n# The following :prop_tgt:`IMPORTED` targets are also defined::\n\n#\n\n#   Boost::boost                  - Target for header-only dependencies\n\n#                                   (Boost include directory)\n\n#   Boost::<C>                    - Target for specific component dependency\n\n#                                   (shared or static library); <C> is lower-\n\n#                                   case\n\n#   Boost::diagnostic_definitions - interface target to enable diagnostic\n\n#                                   information about Boost's automatic linking\n\n#                                   during compilation (adds BOOST_LIB_DIAGNOSTIC)\n\n#   Boost::disable_autolinking    - interface target to disable automatic\n\n#                                   linking with MSVC (adds BOOST_ALL_NO_LIB)\n\n#   Boost::dynamic_linking        - interface target to enable dynamic linking\n\n#                                   linking with MSVC (adds BOOST_ALL_DYN_LINK)\n\n#\n\n# Implicit dependencies such as Boost::filesystem requiring\n\n# Boost::system will be automatically detected and satisfied, even\n\n# if system is not specified when using find_package and if\n\n# Boost::system is not added to target_link_libraries.  If using\n\n# Boost::thread, then Thread::Thread will also be added automatically.\n\n#\n\n# It is important to note that the imported targets behave differently\n\n# than variables created by this module: multiple calls to\n\n# find_package(Boost) in the same directory or sub-directories with\n\n# different options (e.g. static or shared) will not override the\n\n# values of the targets created by the first call.\n\n#\n\n# Users may set these hints or results as cache entries.  Projects\n\n# should not read these entries directly but instead use the above\n\n# result variables.  Note that some hint names start in upper-case\n\n# \"BOOST\".  One may specify these as environment variables if they are\n\n# not specified as CMake variables or cache entries.\n\n#\n\n# This module first searches for the Boost header files using the above\n\n# hint variables (excluding BOOST_LIBRARYDIR) and saves the result in\n\n# Boost_INCLUDE_DIR.  Then it searches for requested component libraries\n\n# using the above hints (excluding BOOST_INCLUDEDIR and\n\n# Boost_ADDITIONAL_VERSIONS), \"lib\" directories near Boost_INCLUDE_DIR,\n\n# and the library name configuration settings below.  It saves the\n\n# library directories in Boost_LIBRARY_DIR_DEBUG and\n\n# Boost_LIBRARY_DIR_RELEASE and individual library\n\n# locations in Boost_<C>_LIBRARY_DEBUG and Boost_<C>_LIBRARY_RELEASE.\n\n# When one changes settings used by previous searches in the same build\n\n# tree (excluding environment variables) this module discards previous\n\n# search results affected by the changes and searches again.\n\n#\n\n# Boost libraries come in many variants encoded in their file name.\n\n# Users or projects may tell this module which variant to find by\n\n# setting variables::\n\n#\n\n#   Boost_USE_MULTITHREADED  - Set to OFF to use the non-multithreaded\n\n#                              libraries ('mt' tag).  Default is ON.\n\n#   Boost_USE_STATIC_LIBS    - Set to ON to force the use of the static\n\n#                              libraries.  Default is OFF.\n\n#   Boost_USE_STATIC_RUNTIME - Set to ON or OFF to specify whether to use\n\n#                              libraries linked statically to the C++ runtime\n\n#                              ('s' tag).  Default is platform dependent.\n\n#   Boost_USE_DEBUG_RUNTIME  - Set to ON or OFF to specify whether to use\n\n#                              libraries linked to the MS debug C++ runtime\n\n#                              ('g' tag).  Default is ON.\n\n#   Boost_USE_DEBUG_PYTHON   - Set to ON to use libraries compiled with a\n\n#                              debug Python build ('y' tag). Default is OFF.\n\n#   Boost_USE_STLPORT        - Set to ON to use libraries compiled with\n\n#                              STLPort ('p' tag).  Default is OFF.\n\n#   Boost_USE_STLPORT_DEPRECATED_NATIVE_IOSTREAMS\n\n#                            - Set to ON to use libraries compiled with\n\n#                              STLPort deprecated \"native iostreams\"\n\n#                              ('n' tag).  Default is OFF.\n\n#   Boost_COMPILER           - Set to the compiler-specific library suffix\n\n#                              (e.g. \"-gcc43\").  Default is auto-computed\n\n#                              for the C++ compiler in use.\n\n#   Boost_THREADAPI          - Suffix for \"thread\" component library name,\n\n#                              such as \"pthread\" or \"win32\".  Names with\n\n#                              and without this suffix will both be tried.\n\n#   Boost_NAMESPACE          - Alternate namespace used to build boost with\n\n#                              e.g. if set to \"myboost\", will search for\n\n#                              myboost_thread instead of boost_thread.\n\n#\n\n# Other variables one may set to control this module are::\n\n#\n\n#   Boost_DEBUG              - Set to ON to enable debug output from FindBoost.\n\n#                              Please enable this before filing any bug report.\n\n#   Boost_DETAILED_FAILURE_MSG\n\n#                            - Set to ON to add detailed information to the\n\n#                              failure message even when the REQUIRED option\n\n#                              is not given to the find_package call.\n\n#   Boost_REALPATH           - Set to ON to resolve symlinks for discovered\n\n#                              libraries to assist with packaging.  For example,\n\n#                              the \"system\" component library may be resolved to\n\n#                              \"/usr/lib/libboost_system.so.1.42.0\" instead of\n\n#                              \"/usr/lib/libboost_system.so\".  This does not\n\n#                              affect linking and should not be enabled unless\n\n#                              the user needs this information.\n\n#   Boost_LIBRARY_DIR        - Default value for Boost_LIBRARY_DIR_RELEASE and\n\n#                              Boost_LIBRARY_DIR_DEBUG.\n\n#\n\n# On Visual Studio and Borland compilers Boost headers request automatic\n\n# linking to corresponding libraries.  This requires matching libraries\n\n# to be linked explicitly or available in the link library search path.\n\n# In this case setting Boost_USE_STATIC_LIBS to OFF may not achieve\n\n# dynamic linking.  Boost automatic linking typically requests static\n\n# libraries with a few exceptions (such as Boost.Python).  Use::\n\n#\n\n#   add_definitions(${Boost_LIB_DIAGNOSTIC_DEFINITIONS})\n\n#\n\n# to ask Boost to report information about automatic linking requests.\n\n#\n\n# Example to find Boost headers only::\n\n#\n\n#   find_package(Boost 1.36.0)\n\n#   if(Boost_FOUND)\n\n#     include_directories(${Boost_INCLUDE_DIRS})\n\n#     add_executable(foo foo.cc)\n\n#   endif()\n\n#\n\n# Example to find Boost libraries and use imported targets::\n\n#\n\n#   find_package(Boost 1.56 REQUIRED COMPONENTS\n\n#                date_time filesystem iostreams)\n\n#   add_executable(foo foo.cc)\n\n#   target_link_libraries(foo Boost::date_time Boost::filesystem\n\n#                             Boost::iostreams)\n\n#\n\n# Example to find Boost headers and some *static* libraries::\n\n#\n\n#   set(Boost_USE_STATIC_LIBS        ON) # only find static libs\n\n#   set(Boost_USE_MULTITHREADED      ON)\n\n#   set(Boost_USE_STATIC_RUNTIME    OFF)\n\n#   find_package(Boost 1.36.0 COMPONENTS date_time filesystem system ...)\n\n#   if(Boost_FOUND)\n\n#     include_directories(${Boost_INCLUDE_DIRS})\n\n#     add_executable(foo foo.cc)\n\n#     target_link_libraries(foo ${Boost_LIBRARIES})\n\n#   endif()\n\n#\n\n# Boost CMake\n\n# ^^^^^^^^^^^\n\n#\n\n# If Boost was built using the boost-cmake project it provides a package\n\n# configuration file for use with find_package's Config mode.  This\n\n# module looks for the package configuration file called\n\n# BoostConfig.cmake or boost-config.cmake and stores the result in cache\n\n# entry \"Boost_DIR\".  If found, the package configuration file is loaded\n\n# and this module returns with no further action.  See documentation of\n\n# the Boost CMake package configuration for details on what it provides.\n\n#\n\n# Set Boost_NO_BOOST_CMAKE to ON to disable the search for boost-cmake.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Before we go searching, check whether boost-cmake is available, unless the\n\n# user specifically asked NOT to search for boost-cmake.\n\n#\n\n# If Boost_DIR is set, this behaves as any find_package call would. If not,\n\n# it looks at BOOST_ROOT and BOOSTROOT to find Boost.\n\n#\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If Boost_DIR is not set, look for BOOSTROOT and BOOST_ROOT as alternatives,\n\n# since these are more conventional for Boost.\n",
        "Line" : 222,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Do the same find_package call but look specifically for the CMake version.\n\n# Note that args are passed in the Boost_FIND_xxxxx variables, so there is no\n\n# need to delegate them to this find_package call.\n",
        "Line" : 232,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# If we found boost-cmake, then we're done.  Print out what we found.\n\n# Otherwise let the rest of the module try to find it.\n",
        "Line" : 238,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n#  FindBoost functions & macros\n\n#\n",
        "Line" : 251,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "############################################\n\n#\n\n# Check the existence of the libraries.\n\n#\n\n############################################\n\n# This macro was taken directly from the FindQt4.cmake file that is included\n\n# with the CMake distribution. This is NOT my work. All work was done by the\n\n# original authors of the FindQt4.cmake file. Only minor modifications were\n\n# made to remove references to Qt and make this file more generally applicable\n\n# And ELSE/ENDIF pairs were removed for readability.\n\n#########################################################################\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# if the generator supports configuration types then set\n\n# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value\n",
        "Line" : 270,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# if there are no configuration types and CMAKE_BUILD_TYPE has no value\n\n# then just use the release libraries\n",
        "Line" : 275,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# FIXME: This probably should be set for both cases\n",
        "Line" : 279,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# if only the release version was found, set the debug variable also to the release version\n",
        "Line" : 283,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# if only the debug version was found, set the release variable also to the debug version\n",
        "Line" : 290,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# If the debug & release library ends up being the same, omit the keywords\n",
        "Line" : 297,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Make variables changeable to the advanced user\n",
        "Line" : 308,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Detect changes in used variables.\n\n# Compares the current variable value with the last one.\n\n# In short form:\n\n# v != v_LAST                      -> CHANGED = 1\n\n# v is defined, v_LAST not         -> CHANGED = 1\n\n# v is not defined, but v_LAST is  -> CHANGED = 1\n\n# otherwise                        -> CHANGED = 0\n\n# CHANGED is returned in variable named ${changed_var}\n",
        "Line" : 315,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#\n\n# Find the given library (var).\n\n# Use 'build_type' to support different lib paths for RELEASE or DEBUG builds\n\n#\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# If this is the first library found then save Boost_LIBRARY_DIR_[RELEASE,DEBUG].\n",
        "Line" : 354,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Try component-specific hints but do not save Boost_LIBRARY_DIR_[RELEASE,DEBUG].\n",
        "Line" : 360,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# If Boost_LIBRARY_DIR_[RELEASE,DEBUG] is known then search only there.\n",
        "Line" : 364,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\n\n# Runs compiler with \"-dumpversion\" and parses major/minor\n\n# version with a regex.\n\n#\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "#\n\n# Take a list of libraries with \"thread\" in it\n\n# and prepend duplicates with \"thread_${Boost_THREADAPI}\"\n\n# at the front of the list\n\n#\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "#\n\n# If a library is found, replace its cache entry with its REALPATH\n\n#\n",
        "Line" : 404,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Guesses Boost's compiler prefix used in built library names\n\n# Returns the guess by setting the variable pointed to by _ret\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Good luck!\n",
        "Line" : 452,
        "CharPositionInLine" : 59
      },
      "27" : {
        "Text" : "# yes, this is correct\n",
        "Line" : 453,
        "CharPositionInLine" : 34
      },
      "28" : {
        "Text" : "# MSVC60 Good luck!\n",
        "Line" : 454,
        "CharPositionInLine" : 11
      },
      "29" : {
        "Text" : "# yes, this is correct\n",
        "Line" : 455,
        "CharPositionInLine" : 34
      },
      "30" : {
        "Text" : "# no GCC version encoding prior to 1.34\n",
        "Line" : 465,
        "CharPositionInLine" : 36
      },
      "31" : {
        "Text" : "# no GCC version encoding prior to 1.34\n",
        "Line" : 473,
        "CharPositionInLine" : 36
      },
      "32" : {
        "Text" : "# Determine which version of GCC we have.\n",
        "Line" : 476,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# In Boost 1.36.0 and newer, the mangled compiler name used\n\n# on Mac OS X/Darwin is \"xgcc\".\n",
        "Line" : 480,
        "CharPositionInLine" : 14
      },
      "34" : {
        "Text" : "# In Boost <= 1.35.0, there is no mangled compiler name for\n\n# the Mac OS X/Darwin version of GCC.\n",
        "Line" : 484,
        "CharPositionInLine" : 14
      },
      "35" : {
        "Text" : "# We don't know the Boost version, so assume it's\n\n# pre-1.36.0.\n",
        "Line" : 489,
        "CharPositionInLine" : 12
      },
      "36" : {
        "Text" : "# TODO at least Boost_DEBUG here?\n",
        "Line" : 499,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "#\n\n# Get component dependencies.  Requires the dependencies to have been\n\n# defined for the Boost release version.\n\n#\n\n# component - the component to check\n\n# _ret - list of library dependencies\n\n#\n",
        "Line" : 505,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Note: to add a new Boost release, run\n\n#\n\n#   % cmake -DBOOST_DIR=/path/to/boost/source -P Utilities/Scripts/BoostScanDeps.cmake\n\n#\n\n# The output may be added in a new block below.  If it's the same as\n\n# the previous release, simply update the version range of the block\n\n# for the previous release.  Also check if any new components have\n\n# been added, and add any new components to\n\n# _Boost_COMPONENT_HEADERS.\n\n#\n\n# This information was originally generated by running\n\n# BoostScanDeps.cmake against every boost release to date supported\n\n# by FindBoost:\n\n#\n\n#   % for version in /path/to/boost/sources/*\n\n#     do\n\n#       cmake -DBOOST_DIR=$version -P Utilities/Scripts/BoostScanDeps.cmake\n\n#     done\n\n#\n\n# The output was then updated by search and replace with these regexes:\n\n#\n\n# - Strip message(STATUS) prefix dashes\n\n#   s;^-- ;;\n\n# - Indent\n\n#   s;^set(;    set(;;\n\n# - Add conditionals\n\n#   s;Scanning /path/to/boost/sources/boost_\\(.*\\)_\\(.*\\)_\\(.*);  elseif(NOT Boost_VERSION VERSION_LESS \\10\\20\\3 AND Boost_VERSION VERSION_LESS xxxx);\n\n#\n\n# This results in the logic seen below, but will require the xxxx\n\n# replacing with the following Boost release version (or the next\n\n# minor version to be released, e.g. 1.59 was the latest at the time\n\n# of writing, making 1.60 the next, so 106000 is the needed version\n\n# number).  Identical consecutive releases were then merged together\n\n# by updating the end range of the first block and removing the\n\n# following redundant blocks.\n\n#\n\n# Running the script against all historical releases should be\n\n# required only if the BoostScanDeps.cmake script logic is changed.\n\n# The addition of a new release should only require it to be run\n\n# against the new release.\n",
        "Line" : 513,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "#message(WARNING \"Imported targets not available for Boost version ${Boost_VERSION}\")\n",
        "Line" : 767,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# message(STATUS \"Dependencies for Boost::${component}: ${_boost_DEPS_STRING}\")\n",
        "Line" : 779,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "#\n\n# Get component headers.  This is the primary header (or headers) for\n\n# a given component, and is used to check that the headers are present\n\n# as well as the library itself as an extra sanity check of the build\n\n# environment.\n\n#\n\n# component - the component to check\n\n# _hdrs\n\n#\n",
        "Line" : 782,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Note: new boost components will require adding here.  The header\n\n# must be present in all versions of Boost providing a library.\n",
        "Line" : 792,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# message(STATUS \"Headers for Boost::${component}: ${_boost_HDRS_STRING}\")\n",
        "Line" : 845,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "#\n\n# Determine if any missing dependencies require adding to the component list.\n\n#\n\n# Sets _Boost_${COMPONENT}_DEPENDENCIES for each required component,\n\n# plus _Boost_IMPORTED_TARGETS (TRUE if imported targets should be\n\n# defined; FALSE if dependency information is unavailable).\n\n#\n\n# componentvar - the component list variable name\n\n# extravar - the indirect dependency list variable name\n\n#\n\n#\n",
        "Line" : 848,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# _boost_unprocessed_components - list of components requiring processing\n\n# _boost_processed_components - components already processed (or currently being processed)\n\n# _boost_new_components - new components discovered for future processing\n\n#\n",
        "Line" : 860,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "#\n\n# Update library search directory hint variable with paths used by prebuilt boost binaries.\n\n#\n\n# Prebuilt windows binaries (https://sourceforge.net/projects/boost/files/boost-binaries/)\n\n# have library directories named using MSVC compiler version and architecture.\n\n# This function would append corresponding directories if MSVC is a current compiler,\n\n# so having `BOOST_ROOT` would be enough to specify to find everything.\n\n#\n",
        "Line" : 893,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#\n\n# End functions/macros\n\n#\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 926,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# main.\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 931,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# If the user sets Boost_LIBRARY_DIR, use it as the default for both\n\n# configurations.\n",
        "Line" : 936,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Check the version of Boost against the requested version.\n",
        "Line" : 952,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# The version may appear in a directory with or without the patch\n\n# level, even when the patch level is non-zero.\n",
        "Line" : 958,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# The user has not requested an exact version.  Among known\n\n# versions, find those that are acceptable to the user request.\n\n#\n\n# Note: When adding a new Boost release, also update the dependency\n\n# information in _Boost_COMPONENT_DEPENDENCIES and\n\n# _Boost_COMPONENT_HEADERS.  See the instructions at the top of\n\n# _Boost_COMPONENT_DEPENDENCIES.\n",
        "Line" : 964,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Select acceptable versions.\n",
        "Line" : 984,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# This version is high enough.\n",
        "Line" : 987,
        "CharPositionInLine" : 8
      },
      "55" : {
        "Text" : "# This version is a short-form for the requested version with\n\n# the patch level dropped.\n",
        "Line" : 990,
        "CharPositionInLine" : 8
      },
      "56" : {
        "Text" : "# Any version is acceptable.\n",
        "Line" : 996,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# The reason that we failed to find Boost. This will be set to a\n\n# user-friendly message when we fail to find some necessary piece of\n\n# Boost.\n",
        "Line" : 1001,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Output some of their choices\n",
        "Line" : 1007,
        "CharPositionInLine" : 2
      },
      "59" : {
        "Text" : "# Supply Boost_LIB_DIAGNOSTIC_DEFINITIONS as a convenience target. It\n\n# will only contain any interface definitions on WIN32, but is created\n\n# on all platforms to keep end user code free from platform dependent\n\n# code.  Also provide convenience targets to disable autolinking and\n\n# enable dynamic linking.\n",
        "Line" : 1022,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# In windows, automatic linking is performed, so you do not have\n\n# to specify the libraries.  If you are linking to a dynamic\n\n# runtime, then you can choose to link to either a static or a\n\n# dynamic Boost library, the default is to do a static link.  You\n\n# can alter this for a specific library \"whatever\" by defining\n\n# BOOST_WHATEVER_DYN_LINK to force Boost library \"whatever\" to be\n\n# linked dynamically.  Alternatively you can force all Boost\n\n# libraries to dynamic link by defining BOOST_ALL_DYN_LINK.\n",
        "Line" : 1033,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# This feature can be disabled for Boost library \"whatever\" by\n\n# defining BOOST_WHATEVER_NO_LIB, or for all of Boost by defining\n\n# BOOST_ALL_NO_LIB.\n",
        "Line" : 1042,
        "CharPositionInLine" : 2
      },
      "62" : {
        "Text" : "# If you want to observe which libraries are being linked against\n\n# then defining BOOST_LIB_DIAGNOSTIC will cause the auto-linking\n\n# code to emit a #pragma message each time a library is selected\n\n# for linking.\n",
        "Line" : 1046,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# Collect environment variable inputs as hints.  Do not consider changes.\n",
        "Line" : 1063,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# Collect inputs and cached results.  Detect changes since the last run.\n",
        "Line" : 1076,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Search for Boost include DIR\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1098,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Clear Boost_INCLUDE_DIR if it did not change but other input affecting the\n\n# location did.  We will find a new one based on the new inputs.\n",
        "Line" : 1104,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Try to find Boost by stepping backwards through the Boost versions\n\n# we know about.\n\n# Build a list of path suffixes for each version.\n",
        "Line" : 1134,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "# Add in a path suffix, based on the required version, ideally\n\n# we could read this from version.hpp, but for that to work we'd\n\n# need to know the include dir already\n",
        "Line" : 1139,
        "CharPositionInLine" : 4
      },
      "69" : {
        "Text" : "# Transform 1.35 => 1_35 and 1.36.0 => 1_36_0\n",
        "Line" : 1144,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# Look for a standard boost header file.\n",
        "Line" : 1171,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Extract version information from version.hpp\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1179,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# Set Boost_FOUND based only on header location and version.\n\n# It will be updated below for component libraries.\n",
        "Line" : 1183,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Extract Boost_VERSION and Boost_LIB_VERSION from version.hpp\n",
        "Line" : 1191,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "# Set Boost_FOUND based on requested version.\n",
        "Line" : 1217,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "# State that we found a version of Boost that is too new or too old.\n",
        "Line" : 1230,
        "CharPositionInLine" : 6
      },
      "76" : {
        "Text" : "# Caller will accept any Boost version.\n",
        "Line" : 1243,
        "CharPositionInLine" : 4
      },
      "77" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Prefix initialization\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1252,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Suffix initialization and compiler suffix detection.\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1266,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# Setting some more suffixes for the library\n",
        "Line" : 1283,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# Attempt to guess the compiler suffix\n\n# NOTE: this is not perfect yet, if you experience any issues\n\n# please report them and use the Boost_COMPILER variable\n\n# to work around the problems.\n",
        "Line" : 1291,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "#======================\n\n# Systematically build up the Boost ABI tag\n\n# http://boost.org/doc/libs/1_41_0/more/getting_started/windows.html#library-naming\n",
        "Line" : 1311,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Key       Use this library when:\n\n#  s        linking statically to the C++ standard library and\n\n#           compiler runtime support libraries.\n",
        "Line" : 1316,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "#  g        using debug versions of the standard and runtime\n\n#           support libraries\n",
        "Line" : 1323,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "#  y        using special debug build of python\n",
        "Line" : 1332,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "#  d        using a debug version of your code\n",
        "Line" : 1336,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "#  p        using the STLport standard library rather than the\n\n#           default one supplied with your compiler\n",
        "Line" : 1338,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "#  n        using the STLport deprecated \"native iostreams\" feature\n",
        "Line" : 1344,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Begin finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1357,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# Clear Boost_LIBRARY_DIR_${c} if it did not change but other input affecting the\n\n# location did.  We will find a new one based on the new inputs.\n",
        "Line" : 1366,
        "CharPositionInLine" : 2
      },
      "90" : {
        "Text" : "# If Boost_LIBRARY_DIR_[RELEASE,DEBUG] is set, prefer its value.\n",
        "Line" : 1372,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "# Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES\n",
        "Line" : 1416,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# We want to use the tag inline below without risking double dashes\n",
        "Line" : 1426,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# The previous behavior of FindBoost when Boost_USE_STATIC_LIBS was enabled\n\n# on WIN32 was to:\n\n#  1. Search for static libs compiled against a SHARED C++ standard runtime library (use if found)\n\n#  2. Search for static libs compiled against a STATIC C++ standard runtime library (use if found)\n\n# We maintain this behavior since changing it could break people's builds.\n\n# To disable the ambiguous behavior, the user need only\n\n# set Boost_USE_STATIC_RUNTIME either ON or OFF.\n",
        "Line" : 1438,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# On versions < 1.35, remove the System library from the considered list\n\n# since it wasn't added until 1.35.\n",
        "Line" : 1452,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# Additional components may be required via component dependencies.\n\n# Add any missing components to the list.\n",
        "Line" : 1460,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# If thread is required, get the thread libs as a dependency\n",
        "Line" : 1464,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "# If the user changed any of our control inputs flush previous results.\n",
        "Line" : 1471,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "# Compute component-specific hints.\n",
        "Line" : 1490,
        "CharPositionInLine" : 2
      },
      "99" : {
        "Text" : "# Consolidate and report component-specific hints.\n",
        "Line" : 1503,
        "CharPositionInLine" : 2
      },
      "100" : {
        "Text" : "#\n\n# Find headers\n\n#\n",
        "Line" : 1513,
        "CharPositionInLine" : 2
      },
      "101" : {
        "Text" : "# Look for a standard boost header file.\n",
        "Line" : 1517,
        "CharPositionInLine" : 2
      },
      "102" : {
        "Text" : "#\n\n# Find RELEASE libraries\n\n#\n",
        "Line" : 1529,
        "CharPositionInLine" : 2
      },
      "103" : {
        "Text" : "# if Boost_LIBRARY_DIR_RELEASE is not defined,\n\n# but Boost_LIBRARY_DIR_DEBUG is, look there first for RELEASE libs\n",
        "Line" : 1554,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "# Avoid passing backslashes to _Boost_FIND_LIBRARY due to macro re-parsing.\n",
        "Line" : 1560,
        "CharPositionInLine" : 2
      },
      "105" : {
        "Text" : "#\n\n# Find DEBUG libraries\n\n#\n",
        "Line" : 1570,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "# if Boost_LIBRARY_DIR_DEBUG is not defined,\n\n# but Boost_LIBRARY_DIR_RELEASE is, look there first for DEBUG libs\n",
        "Line" : 1596,
        "CharPositionInLine" : 2
      },
      "107" : {
        "Text" : "# Avoid passing backslashes to _Boost_FIND_LIBRARY due to macro re-parsing.\n",
        "Line" : 1602,
        "CharPositionInLine" : 2
      },
      "108" : {
        "Text" : "# Restore the original find library ordering\n",
        "Line" : 1621,
        "CharPositionInLine" : 0
      },
      "109" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  End finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1626,
        "CharPositionInLine" : 0
      },
      "110" : {
        "Text" : "# The above setting of Boost_FOUND was based only on the header files.\n\n# Update it for the requested component libraries.\n",
        "Line" : 1642,
        "CharPositionInLine" : 0
      },
      "111" : {
        "Text" : "# The headers were found.  Check for requested component libs.\n",
        "Line" : 1645,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "# Optional indirect dependencies are not counted as missing.\n",
        "Line" : 1657,
        "CharPositionInLine" : 4
      },
      "113" : {
        "Text" : "# We were unable to find some libraries, so generate a sensible\n\n# error message that lists the libraries we were unable to find.\n",
        "Line" : 1667,
        "CharPositionInLine" : 4
      },
      "114" : {
        "Text" : "# Compatibility Code for backwards compatibility with CMake\n\n# 2.4's FindBoost module.\n",
        "Line" : 1693,
        "CharPositionInLine" : 4
      },
      "115" : {
        "Text" : "# Look for the boost library path.\n\n# Note that the user may not have installed any libraries\n\n# so it is quite possible the Boost_LIBRARY_DIRS may not exist.\n",
        "Line" : 1696,
        "CharPositionInLine" : 4
      },
      "116" : {
        "Text" : "# Strip off the trailing \"/include\" in the path.\n",
        "Line" : 1706,
        "CharPositionInLine" : 6
      },
      "117" : {
        "Text" : "# Boost headers were not found so no components were found.\n",
        "Line" : 1724,
        "CharPositionInLine" : 2
      },
      "118" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Add imported targets\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1731,
        "CharPositionInLine" : 0
      },
      "119" : {
        "Text" : "# For header-only libraries\n",
        "Line" : 1736,
        "CharPositionInLine" : 2
      },
      "120" : {
        "Text" : "# Even if Boost_USE_STATIC_LIBS is OFF, we might have static\n\n# libraries as a result.\n",
        "Line" : 1752,
        "CharPositionInLine" : 10
      },
      "121" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Notification to end user about what was found\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1795,
        "CharPositionInLine" : 0
      },
      "122" : {
        "Text" : "# we opt not to automatically output Boost_ERROR_REASON here as\n\n# it could be quite lengthy and somewhat imposing in its requests\n\n# Since Boost is not always a required dependency we'll leave this\n\n# up to the end-user.\n",
        "Line" : 1821,
        "CharPositionInLine" : 6
      },
      "123" : {
        "Text" : "# Configure display of cache entries in GUI.\n",
        "Line" : 1834,
        "CharPositionInLine" : 0
      },
      "124" : {
        "Text" : "# Record last used values of input variables so we can\n\n# detect on the next run if the user changed them.\n",
        "Line" : 1849,
        "CharPositionInLine" : 0
      },
      "125" : {
        "Text" : "# Maintain a persistent list of components requested anywhere since\n\n# the last flush.\n",
        "Line" : 1862,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 126
    },
    "cmake/Modules/FindCryptopp.cmake" : {
      "ObjectId" : "04c0f36aa405fd70196f9042d7cc65c16ad2390d",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindCryptopp.cmake\n\n# -------------\n\n#\n\n# Find a Cryptopp installation.\n\n#\n\n# This module finds if Cryptopp is installed and selects a default\n\n# configuration to use.\n\n#\n\n# find_package(Cryptopp ...)\n\n#\n\n#\n\n# The following variables control which libraries are found::\n\n#\n\n#   Cryptopp_USE_STATIC_LIBS  - Set to ON to force use of static libraries.\n\n#\n\n# The following are set after the configuration is done:\n\n#\n\n# ::\n\n#\n\n#   Cryptopp_FOUND            - Set to TRUE if Cryptopp was found.\n\n#   Cryptopp_INCLUDE_DIRS     - Include directories\n\n#   Cryptopp_LIBRARIES        - Path to the Cryptopp libraries.\n\n#   Cryptopp_LIBRARY_DIRS     - compile time link directories\n\n#\n\n#\n\n# Sample usage:\n\n#\n\n# ::\n\n#\n\n#    find_package(Cryptopp)\n\n#    if(Cryptopp_FOUND)\n\n#      target_link_libraries(<YourTarget> ${Cryptopp_LIBRARIES})\n\n#    endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set standard CMake FindPackage variables if found.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindEGL.cmake" : {
      "ObjectId" : "5abe68721a2df6bfab7cdd2157310abe5c6c6f32",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find EGL\n\n#\n\n# EGL_INCLUDE_DIR\n\n# EGL_LIBRARY\n\n# EGL_FOUND\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#find_package_handle_standard_args(EGL DEFAULT_MSG EGL_INCLUDE_DIR EGL_LIBRARY)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindFlexpp.cmake" : {
      "ObjectId" : "a7a5b2ad3b8a6f8ced9f82de70d541b2af3d1d7c",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Look for GNU Flex++, the scanner generator\n\n# Based off a news post from Andy Cedilnik at Kitware\n\n# Defines the following:\n\n#  FLEXPP_EXECUTABLE - path to the bison executable\n\n#  FLEXPP_FILE - parse a file with bison\n\n#  FLEXPP_PREFIX_OUTPUTS - Set to true to make BISON_FILE produce prefixed\n\n#                         symbols in the generated output based on filename.\n\n#                         So for ${filename}.y, you'll get ${filename}parse(), etc.\n\n#                         instead of yyparse().\n\n#  FLEXPP_GENERATE_DEFINES - Set to true to make BISON_FILE output the matching\n\n#                           .h file for a .c file. You want this if you're using\n\n#                           flex.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Modified by Markus for flex++\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindFolly.cmake" : {
      "ObjectId" : "91270e5390ecde9fc6e3a2874f01bafe5cf082f0",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindFolly.cmake\n\n# -------------\n\n#\n\n# Find a Folly installation.\n\n#\n\n# This module finds if Folly is installed and selects a default\n\n# configuration to use.\n\n#\n\n# find_package(Folly ...)\n\n#\n\n#\n\n# The following variables control which libraries are found::\n\n#\n\n#   Folly_USE_STATIC_LIBS  - Set to ON to force use of static libraries.\n\n#\n\n# The following are set after the configuration is done:\n\n#\n\n# ::\n\n#\n\n#   Folly_FOUND            - Set to TRUE if Folly was found.\n\n#   Folly_LIBRARIES        - Path to the Folly libraries.\n\n#   Folly_LIBRARY_DIRS     - compile time link directories\n\n#   Folly_INCLUDE_DIRS     - compile time include directories\n\n#\n\n#\n\n# Sample usage:\n\n#\n\n# ::\n\n#\n\n#    find_package(Folly)\n\n#    if(Folly_FOUND)\n\n#      target_link_libraries(<YourTarget> ${Folly_LIBRARIES})\n\n#    endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set standard CMake FindPackage variables if found.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindGD.cmake" : {
      "ObjectId" : "f56af942fa7fb51ef874c347eac56e130a70667c",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindGD\n\n# --------\n\n#\n\n# Find the gd Library\n\n#\n\n# IMPORTED Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the :prop_tgt:`IMPORTED` target ``GD::GD``,\n\n# if GD has been found.\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the following variables:\n\n#\n\n# ::\n\n#\n\n#   GD_INCLUDE_DIRS - include directories for GD\n\n#   GD_LIBRARIES - libraries to link against GD\n\n#   GD_FOUND - true if GD has been found and can be used\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindGDAL.cmake" : {
      "ObjectId" : "ef1af4054f62dd158faea1c19798575c86829951",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindGDAL\n\n# --------\n\n#\n\n# Locate gdal\n\n#\n\n# This module defines the following CMake variables:\n\n#\n\n#     GDAL_FOUND - True if libgdal is found\n\n#     GDAL_LIBRARY - A variable pointing to the GDAL library\n\n#     GDAL_INCLUDE_DIR - Where to find the headers\n\n#\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 20,
        "CharPositionInLine" : 12
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 21,
        "CharPositionInLine" : 19
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 22,
        "CharPositionInLine" : 17
      },
      "5" : {
        "Text" : "# Fink\n",
        "Line" : 42,
        "CharPositionInLine" : 10
      },
      "6" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 43,
        "CharPositionInLine" : 17
      },
      "7" : {
        "Text" : "# Blastwave\n",
        "Line" : 44,
        "CharPositionInLine" : 15
      },
      "CommentCount" : 8
    },
    "cmake/Modules/FindGDALExtra.cmake" : {
      "ObjectId" : "def6d47cdb429ea31ec148eccee58d64ad32baae",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindGDALExtra.cmake\n\n# -------------\n\n#\n\n# Find additional libraries required by GDAL.\n\n# This is only relevant when static linking GDAL.\n\n#\n\n# find_package(GDALExtra ...)\n\n#\n\n# The following are set after the configuration is done:\n\n#\n\n# ::\n\n#\n\n#   GDALExtra_FOUND            - Set to TRUE if the libraries were found.\n\n#   GDALExtra_INCLUDE_DIRS     - Include directories\n\n#   GDALExtra_LIBRARIES        - Path to the libraries.\n\n#   GDALExtra_LIBRARY_DIRS     - compile time link directories\n\n#\n\n#\n\n# Sample usage:\n\n#\n\n# ::\n\n#\n\n#    find_package(GDALExtra)\n\n#    if(GDALExtra_FOUND)\n\n#      target_link_libraries(<YourTarget> ${GDALExtra_LIBRARIES})\n\n#    endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FindGLBinding.cmake" : {
      "ObjectId" : "a3db2c059b5b84c714e7be21cafd754f2ee18cdb",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindGLBinding\n\n# --------\n\n#\n\n# Find the OpenGL Extension Wrangler Library (glbinding)\n\n#\n\n# IMPORTED Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the :prop_tgt:`IMPORTED` target ``glbinding::glbinding``,\n\n# if glbinding has been found.\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the following variables:\n\n#\n\n# ::\n\n#\n\n#   glbinding_INCLUDE_DIRS - include directories for glbinding\n\n#   glbinding_LIBRARIES - libraries to link against glbinding\n\n#   glbinding_FOUND - true if glbinding has been found and can be used\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindGflags.cmake" : {
      "ObjectId" : "911585004cdfa7130e9aad7cb246d70105899546",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindGflags.cmake\n\n# -------------\n\n#\n\n# Find a Google gflags installation.\n\n#\n\n# This module finds if Google gflags is installed and selects a default\n\n# configuration to use.\n\n#\n\n# find_package(Gflags ...)\n\n#\n\n#\n\n# The following variables control which libraries are found::\n\n#\n\n#   Gflags_USE_STATIC_LIBS  - Set to ON to force use of static libraries.\n\n#\n\n# The following are set after the configuration is done:\n\n#\n\n# ::\n\n#\n\n#   Gflags_FOUND            - Set to TRUE if Gflags was found.\n\n#   Gflags_INCLUDE_DIRS     - Include directories\n\n#   Gflags_LIBRARIES        - Path to the Gflags libraries.\n\n#   Gflags_LIBRARY_DIRS     - compile time link directories\n\n#\n\n#\n\n# Sample usage:\n\n#\n\n# ::\n\n#\n\n#    find_package(Gflags)\n\n#    if(Gflags_FOUND)\n\n#      target_link_libraries(<YourTarget> ${Gflags_LIBRARIES})\n\n#    endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set standard CMake FindPackage variables if found.\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindGlog.cmake" : {
      "ObjectId" : "9a049d5a68856ef7e25f3964f216080be4bb10c1",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindGlog.cmake\n\n# -------------\n\n#\n\n# Find a Google glog installation.\n\n#\n\n# This module finds if Google glog is installed and selects a default\n\n# configuration to use.\n\n#\n\n# find_package(Glog ...)\n\n#\n\n#\n\n# The following variables control which libraries are found::\n\n#\n\n#   Glog_USE_STATIC_LIBS  - Set to ON to force use of static libraries.\n\n#\n\n# The following are set after the configuration is done:\n\n#\n\n# ::\n\n#\n\n#   Glog_FOUND            - Set to TRUE if Glog was found.\n\n#   Glog_INCLUDE_DIRS     - Include directories\n\n#   Glog_LIBRARIES        - Path to the Glog libraries.\n\n#   Glog_LIBRARY_DIRS     - compile time link directories\n\n#\n\n#\n\n# Sample usage:\n\n#\n\n# ::\n\n#\n\n#    find_package(Glog)\n\n#    if(Glog_FOUND)\n\n#      target_link_libraries(<YourTarget> ${Glog_LIBRARIES})\n\n#    endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set standard CMake FindPackage variables if found.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindGperftools.cmake" : {
      "ObjectId" : "12c068a37b2616793821b1954e6fc860d5fcf2e9",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindGperftools.cmake\n\n# -------------\n\n#\n\n# Find a Google gperftools installation.\n\n#\n\n# This module finds if Google gperftools is installed and selects a default\n\n# configuration to use.\n\n#\n\n#   find_package(Gperftools COMPONENTS ...)\n\n#\n\n# Valid components are:\n\n#\n\n#   TCMALLOC\n\n#   PROFILER\n\n#   TCMALLOC_MINIMAL\n\n#   TCMALLOC_AND_PROFILER\n\n#\n\n# The following variables control which libraries are found::\n\n#\n\n#   Gperftools_USE_STATIC_LIBS  - Set to ON to force use of static libraries.\n\n#\n\n# The following are set after the configuration is done:\n\n#\n\n# ::\n\n#\n\n#   Gperftools_FOUND            - Set to TRUE if gperftools was found\n\n#   Gperftools_INCLUDE_DIRS     - Include directories\n\n#   Gperftools_LIBRARIES        - Path to the gperftools libraries\n\n#   Gperftools_LIBRARY_DIRS     - Compile time link directories\n\n#   Gperftools_<component>      - Path to specified component\n\n#\n\n#\n\n# Sample usage:\n\n#\n\n# ::\n\n#\n\n#   find_package(Gperftools)\n\n#   if(Gperftools_FOUND)\n\n#     target_link_libraries(<YourTarget> ${Gperftools_LIBRARIES})\n\n#   endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set standard CMake FindPackage variables if found.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindLibArchive.cmake" : {
      "ObjectId" : "784ca854b3ad1eaaee25edc5003de22bbeff8ed7",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindLibArchive.cmake\n\n# -------------\n\n#\n\n# Find a LibArchive installation.\n\n#\n\n# This module finds if LibArchive is installed and selects a default\n\n# configuration to use.\n\n#\n\n# find_package(LibArchive ...)\n\n#\n\n#\n\n# The following variables control which libraries are found::\n\n#\n\n#   LibArchive_USE_STATIC_LIBS  - Set to ON to force use of static libraries.\n\n#\n\n# The following are set after the configuration is done:\n\n#\n\n# ::\n\n#\n\n#   LibArchive_FOUND            - Set to TRUE if LibArchive was found.\n\n#   LibArchive_INCLUDE_DIRS     - Include directories\n\n#   LibArchive_LIBRARIES        - Path to the LibArchive libraries.\n\n#   LibArchive_LIBRARY_DIRS     - compile time link directories\n\n#\n\n#\n\n# Sample usage:\n\n#\n\n# ::\n\n#\n\n#    find_package(LibArchive)\n\n#    if(LibArchive_FOUND)\n\n#      target_link_libraries(<YourTarget> ${LibArchive_LIBRARIES})\n\n#    endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set standard CMake FindPackage variables if found.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindLibAwsS3.cmake" : {
      "ObjectId" : "17018d28d9bf6ae06bc3ac25d8ef0d8444d499a8",
      "LastModified" : "2019-04-05T17:36:30Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindLibAwsS3.cmake\n\n# -------------\n\n#\n\n# Find a LibAwsS3 installation.\n\n#\n\n# This module finds if LibAwsS3 is installed and selects a default\n\n# configuration to use.\n\n#\n\n# find_package(LibAwsS3 ...)\n\n#\n\n#\n\n# The following variables control which libraries are found::\n\n#\n\n#   LibAwsS3_USE_STATIC_LIBS  - Set to ON to force use of static libraries.\n\n#\n\n# The following are set after the configuration is done:\n\n#\n\n# ::\n\n#\n\n#   LibAwsS3_FOUND            - Set to TRUE if LibAwsS3 was found.\n\n#   LibAwsS3_INCLUDE_DIRS     - Include directories\n\n#   LibAwsS3_LIBRARIES        - Path to the LibAwsS3 libraries.\n\n#   LibAwsS3_LIBRARY_DIRS     - compile time link directories\n\n#\n\n#\n\n# Sample usage:\n\n#\n\n# ::\n\n#\n\n#    find_package(LibAwsS3)\n\n#    if(LibAwsS3_FOUND)\n\n#      target_link_libraries(<YourTarget> ${LibAwsS3_LIBRARIES})\n\n#    endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# kept here just in case mind is changed to use brew 'aws-sdk-cpp' pkg instead of self-build\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#message(\"libAwsCore_LIBRARY = ${libAwsCore_LIBRARY}\")\n\n#message(\"LibAwsS3_LIBRARY = ${LibAwsS3_LIBRARY}\")\n\n#message(\"LibCurl_LIBRARY = ${LibCurl_LIBRARY}\")\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#message(\"LibAwsS3_LIBRARY_DIR= ${LibAwsS3_LIBRARY_DIR}\")\n\n#message(\"LibAwsS3_INCLUDE_DIR= ${LibAwsS3_INCLUDE_DIR}\")\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set standard CMake FindPackage variables if found.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindOpenGL.cmake" : {
      "ObjectId" : "c63fcc7d22f5696d283dce5076900672ece0550f",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindOpenGL\n\n# ----------\n\n#\n\n##############################################################################\n\n#\n\n# NOTE: this is copied from the cmake 3.11 stock version of FindOpenGL.cmake\n\n# (https://github.com/Kitware/CMake/blob/v3.11.0/Modules/FindOpenGL.cmake)\n\n# There have been some modifications made specifically for MapD use.\n\n# They are noted by the following comments:\n\n#\n\n# # NOTE: MapD-customization(<developer>)\n\n#\n\n# You can also run a diff against the above link\n\n#\n\n##############################################################################\n\n#\n\n# FindModule for OpenGL and GLU.\n\n#\n\n# Optional COMPONENTS\n\n# ^^^^^^^^^^^^^^^^^^^\n\n#\n\n# This module respects several optional COMPONENTS: ``EGL``, ``GLX``, and\n\n# ``OpenGL``.  There are corresponding import targets for each of these flags.\n\n#\n\n# IMPORTED Targets\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module defines the :prop_tgt:`IMPORTED` targets:\n\n#\n\n# ``OpenGL::GL``\n\n#  Defined to the platform-specific OpenGL libraries if the system has OpenGL.\n\n# ``OpenGL::OpenGL``\n\n#  Defined to libOpenGL if the system is GLVND-based.\n\n# ``OpenGL::GLU``\n\n#  Defined if the system has GLU.\n\n# ``OpenGL::GLX``\n\n#  Defined if the system has GLX.\n\n# ``OpenGL::EGL``\n\n#  Defined if the system has EGL.\n\n#\n\n# Result Variables\n\n# ^^^^^^^^^^^^^^^^\n\n#\n\n# This module sets the following variables:\n\n#\n\n# ``OPENGL_FOUND``\n\n#  True, if the system has OpenGL and all components are found.\n\n# ``OPENGL_XMESA_FOUND``\n\n#  True, if the system has XMESA.\n\n# ``OPENGL_GLU_FOUND``\n\n#  True, if the system has GLU.\n\n# ``OpenGL_OpenGL_FOUND``\n\n#  True, if the system has an OpenGL library.\n\n# ``OpenGL_GLX_FOUND``\n\n#  True, if the system has GLX.\n\n# ``OpenGL_EGL_FOUND``\n\n#  True, if the system has EGL.\n\n# ``OPENGL_INCLUDE_DIR``\n\n#  Path to the OpenGL include directory.\n\n# ``OPENGL_EGL_INCLUDE_DIRS``\n\n#  Path to the EGL include directory.\n\n# ``OPENGL_LIBRARIES``\n\n#  Paths to the OpenGL library, windowing system libraries, and GLU libraries.\n\n#  On Linux, this assumes GLX and is never correct for EGL-based targets.\n\n#  Clients are encouraged to use the ``OpenGL::*`` import targets instead.\n\n#\n\n# Cache variables\n\n# ^^^^^^^^^^^^^^^\n\n#\n\n# The following cache variables may also be set:\n\n#\n\n# ``OPENGL_egl_LIBRARY``\n\n#  Path to the EGL library.\n\n# ``OPENGL_glu_LIBRARY``\n\n#  Path to the GLU library.\n\n# ``OPENGL_glx_LIBRARY``\n\n#  Path to the GLVND 'GLX' library.\n\n# ``OPENGL_opengl_LIBRARY``\n\n#  Path to the GLVND 'OpenGL' library\n\n# ``OPENGL_gl_LIBRARY``\n\n#  Path to the OpenGL library.  New code should prefer the ``OpenGL::*`` import\n\n#  targets.\n\n#\n\n# Linux-specific\n\n# ^^^^^^^^^^^^^^\n\n#\n\n# Some Linux systems utilize GLVND as a new ABI for OpenGL.  GLVND separates\n\n# context libraries from OpenGL itself; OpenGL lives in \"libOpenGL\", and\n\n# contexts are defined in \"libGLX\" or \"libEGL\".  GLVND is currently the only way\n\n# to get OpenGL 3+ functionality via EGL in a manner portable across vendors.\n\n# Projects may use GLVND explicitly with target ``OpenGL::OpenGL`` and either\n\n# ``OpenGL::GLX`` or ``OpenGL::EGL``.\n\n#\n\n# Projects may use the ``OpenGL::GL`` target (or ``OPENGL_LIBRARIES`` variable)\n\n# to use legacy GL interfaces.  These will use the legacy GL library located\n\n# by ``OPENGL_gl_LIBRARY``, if available.  If ``OPENGL_gl_LIBRARY`` is empty or\n\n# not found and GLVND is available, the ``OpenGL::GL`` target will use GLVND\n\n# ``OpenGL::OpenGL`` and ``OpenGL::GLX`` (and the ``OPENGL_LIBRARIES``\n\n# variable will use the corresponding libraries).  Thus, for non-EGL-based\n\n# Linux targets, the ``OpenGL::GL`` target is most portable.\n\n#\n\n# A ``OpenGL_GL_PREFERENCE`` variable may be set to specify the preferred way\n\n# to provide legacy GL interfaces in case multiple choices are available.\n\n# The value may be one of:\n\n#\n\n# ``GLVND``\n\n#  If the GLVND OpenGL and GLX libraries are available, prefer them.\n\n#  This forces ``OPENGL_gl_LIBRARY`` to be empty.\n\n#  This is the default if components were requested (since components\n\n#  correspond to GLVND libraries) or if policy :policy:`CMP0072` is\n\n#  set to ``NEW``.\n\n#\n\n# ``LEGACY``\n\n#  Prefer to use the legacy libGL library, if available.\n\n#  This is the default if no components were requested and\n\n#  policy :policy:`CMP0072` is not set to ``NEW``.\n\n#\n\n# For EGL targets the client must rely on GLVND support on the user's system.\n\n# Linking should use the ``OpenGL::OpenGL OpenGL::EGL`` targets.  Using GLES*\n\n# libraries is theoretically possible in place of ``OpenGL::OpenGL``, but this\n\n# module does not currently support that; contributions welcome.\n\n#\n\n# ``OPENGL_egl_LIBRARY`` and ``OPENGL_EGL_INCLUDE_DIRS`` are defined in the case of\n\n# GLVND.  For non-GLVND Linux and other systems these are left undefined.\n\n#\n\n# macOS-Specific\n\n# ^^^^^^^^^^^^^^\n\n#\n\n# On OSX FindOpenGL defaults to using the framework version of OpenGL. People\n\n# will have to change the cache values of OPENGL_glu_LIBRARY and\n\n# OPENGL_gl_LIBRARY to use OpenGL with X11 on OSX.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Provide OPENGL_USE_<C> variables for each component.\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The OpenGL.framework provides both gl and glu\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Handle HP-UX cases where we only want to find OpenGL in either hpux64\n\n# or hpux32 depending on if we're doing a 64 bit build.\n",
        "Line" : 172,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# NOTE: MapD-customization(croot) - checking nvidia driver installed libraries.\n\n# doing this because nvidia doesn't automatically install doesn't its dev libs\n\n# in the typical system libs area, so other libs might be present (such as mesa).\n\n# Doing a glob here to grab the nvidia lib paths to use.\n\n# These are usually in /usr/lib/nvidia-<driverversion>\n\n# /usr/lib/nvidia* will take precedence over /usr/lib32/nvidia* and the like\n",
        "Line" : 188,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# The first line below is to make sure that the proper headers\n\n# are used on a Linux machine with the NVidia drivers installed.\n\n# They replace Mesa with NVidia's own library but normally do not\n\n# install headers and that causes the linking to\n\n# fail since the compiler finds the Mesa headers but NVidia's library.\n\n# Make sure the NVIDIA directory comes BEFORE the others.\n\n#  - Atanas Georgiev <atanas@cs.columbia.edu>\n",
        "Line" : 197,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# NOTE: MapD-customization(croot) - adding the ${CMAKE_SOURCE_DIR}/ThirdParty/egl\n\n# directory to the following find_path() call. This is in order to use the EGL\n\n# headers included with the mapd-core distro. The EGL headers are not added to\n\n# linux systems by default, tho the libraries generally are. This ensures that the\n\n# headers exist. The mapd-core EGL headers are the v1.5, and are found here:\n\n# https://www.khronos.org/registry/EGL/\n",
        "Line" : 212,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Search for the GLVND libraries.  We do this regardless of COMPONENTS; we'll\n\n# take into account the COMPONENTS logic later.\n",
        "Line" : 225,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# NOTE: MapD-customization(croot) - adding HINTS instead of PATHS for the following\n\n# 3 find_library calls in order that the nvidia install libs are checked first\n\n# before the system libs\n",
        "Line" : 228,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# A preference has been explicitly specified.\n",
        "Line" : 259,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# No preference was explicitly specified, but the caller did request\n\n# at least one GLVND component.  Prefer GLVND for legacy GL.\n",
        "Line" : 267,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# NOTE: MapD-customization(croot): checking for the existence\n\n# of the CMP0072 policy, which was added in cmake 3.11\n\n# (https://cmake.org/cmake/help/v3.11/policy/CMP0072.html).\n\n# For mapd-core builds we want to be compatible with cmake at least\n\n# 3.5, so we check for the existence of the policy first.\n\n# If it doesn't exist, we'll use LEGACY as the default.\n",
        "Line" : 271,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# No preference was explicitly specified and no GLVND components were\n\n# requested.  Use a policy to choose the default.\n\n# The policy CMP0072 was introduced in cmake 11.\n\n# If the policy doesn't exist, we'll default to use GLVND\n",
        "Line" : 278,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# no policy, so we'll use GLVND by default\n",
        "Line" : 293,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# We can provide legacy GL using GLVND libraries.\n\n# Do not use any legacy GL library.\n",
        "Line" : 299,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# We cannot provide legacy GL using GLVND libraries.\n\n# Search for the legacy GL library.\n",
        "Line" : 303,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# FPHSA cannot handle \"this OR that is required\", so we conditionally set what\n\n# it must look for.  First clear any previous config we might have done:\n",
        "Line" : 331,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# now we append the libraries as appropriate.  The complicated logic\n\n# basically comes down to \"use libOpenGL when we can, and add in specific\n\n# context mechanisms when requested, or we need them to preserve the previous\n\n# default where glx is always available.\"\n",
        "Line" : 335,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# NOTE: MapD-customization(croot) - adding the\n\n# OPENGL_USE_EGL && OPENGL_opengl_LIBRARY\n\n# logic. We can have EGL without GLVND, so this logic\n\n# only adds the OPENGL_opengl_LIBRARY requirement if\n\n# both are found.\n",
        "Line" : 349,
        "CharPositionInLine" : 5
      },
      "20" : {
        "Text" : "# GLVND GLX library.  Preferred when available.\n",
        "Line" : 359,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# GLVND EGL library.\n",
        "Line" : 376,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# Old-style \"libGL\" library: used as a fallback when GLVND isn't available.\n",
        "Line" : 381,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# NOTE: MapD-customization(croot) - adding the\n\n# OPENGL_USE_EGL && !OPENGL_opengl_LIBRARY && OPENGL_gl_LIBRARY\n\n# logic. We can have EGL without GLVND now, so this logic\n\n# adds the OPENGL_gl_LIBRARY requirement if\n\n# both egl & gl are found.\n",
        "Line" : 389,
        "CharPositionInLine" : 5
      },
      "24" : {
        "Text" : "# We always need the 'gl.h' include dir.\n",
        "Line" : 400,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# OpenGL_OpenGL_FOUND is a bit unique in that it is okay if /either/ libOpenGL\n\n# or libGL is found.\n\n# Using libGL with libEGL is never okay, though; we handle that case later.\n",
        "Line" : 427,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# User-visible names should be plural.\n",
        "Line" : 448,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# OpenGL:: targets\n",
        "Line" : 458,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# ::OpenGL is a GLVND library, and thus Linux-only: we don't bother checking\n\n# for a framework version of this library.\n",
        "Line" : 460,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# NOTE: MapD-customization(croot) - changing the logic around here\n\n# quite a bit to handle the fact that glx & egl do not have to be\n\n# glvnd only. So glx & gl or glx & opengl or egl & gl or egl & opengl\n",
        "Line" : 476,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# A legacy GL library is available, so use it for the legacy GL target.\n",
        "Line" : 480,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# ::GLX is a GLVND library, and thus Linux-only: we don't bother checking\n\n# for a framework version of this library.\n",
        "Line" : 503,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# ::EGL is a GLVND library, and thus Linux-only: we don't bother checking\n\n# for a framework version of this library.\n\n# Note we test for OpenGL::OpenGL as a target.  When this module is updated to\n\n# support GLES, we would additionally want to check for the hypothetical GLES\n\n# target and enable EGL if either ::GLES or ::OpenGL is created.\n",
        "Line" : 526,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Note that EGL's include directory is different from OpenGL/GLX's!\n",
        "Line" : 548,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# A legacy GL library is not available, but we can provide the legacy GL\n\n# target using GLVND OpenGL+GLX or OpenGL+EGL.\n",
        "Line" : 554,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# OPENGL_LIBRARIES mirrors OpenGL::GL's logic ...\n",
        "Line" : 593,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# ... and also includes GLU, if available.\n",
        "Line" : 601,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# This deprecated setting is for backward compatibility with CMake1.4\n",
        "Line" : 607,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# This deprecated setting is for backward compatibility with CMake1.4\n",
        "Line" : 609,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 39
    },
    "cmake/Modules/FindParquet.cmake" : {
      "ObjectId" : "8a542b38c3ab6b3033bb1e1387eaff0008db06f5",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindParquet.cmake\n\n# -------------\n\n#\n\n# Find a Parquet-cpp installation.\n\n#\n\n# This module finds if Parquet is installed and selects a default\n\n# configuration to use.\n\n#\n\n# find_package(Parquet ...)\n\n#\n\n#\n\n# The following variables control which libraries are found::\n\n#\n\n#   Parquet_USE_STATIC_LIBS  - Set to ON to force use of static libraries.\n\n#\n\n# The following are set after the configuration is done:\n\n#\n\n# ::\n\n#\n\n#   Parquet_FOUND            - Set to TRUE if Parquet was found.\n\n#   Parquet_LIBRARIES        - Path to the Parquet libraries.\n\n#   Parquet_LIBRARY_DIRS     - compile time link directories\n\n#   Parquet_INCLUDE_DIRS     - compile time include directories\n\n#\n\n#\n\n# Sample usage:\n\n#\n\n# ::\n\n#\n\n#    find_package(Parquet)\n\n#    if(Parquet_FOUND)\n\n#      target_link_libraries(<YourTarget> ${Parquet_LIBRARIES})\n\n#    endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set standard CMake FindPackage variables if found.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindSnappy.cmake" : {
      "ObjectId" : "b2b235e641dfeda094ecaf6d420162282e0f486e",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindSnappy.cmake\n\n# -------------\n\n#\n\n# Find a Snappy installation.\n\n#\n\n# This module finds if Snappy is installed and selects a default\n\n# configuration to use.\n\n#\n\n# find_package(Snappy ...)\n\n#\n\n#\n\n# The following variables control which libraries are found::\n\n#\n\n#   Snappy_USE_STATIC_LIBS  - Set to ON to force use of static libraries.\n\n#\n\n# The following are set after the configuration is done:\n\n#\n\n# ::\n\n#\n\n#   Snappy_FOUND            - Set to TRUE if Snappy was found.\n\n#   Snappy_LIBRARIES        - Path to the Snappy libraries.\n\n#   Snappy_LIBRARY_DIRS     - compile time link directories\n\n#   Snappy_INCLUDE_DIRS     - compile time include directories\n\n#\n\n#\n\n# Sample usage:\n\n#\n\n# ::\n\n#\n\n#    find_package(Snappy)\n\n#    if(Snappy_FOUND)\n\n#      target_link_libraries(<YourTarget> ${Snappy_LIBRARIES})\n\n#    endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set standard CMake FindPackage variables if found.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindThrift.cmake" : {
      "ObjectId" : "a3135f0a5b582994e2b74f823b26ca50f6b41b81",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindThrift.cmake\n\n# -------------\n\n#\n\n# Find a Thrift installation.\n\n#\n\n# This module finds if Thrift is installed and selects a default\n\n# configuration to use.\n\n#\n\n# find_package(Thrift ...)\n\n#\n\n#\n\n# The following variables control which libraries are found::\n\n#\n\n#   Thrift_USE_STATIC_LIBS  - Set to ON to force use of static libraries.\n\n#\n\n# The following are set after the configuration is done:\n\n#\n\n# ::\n\n#\n\n#   Thrift_FOUND            - Set to TRUE if Thrift was found.\n\n#   Thrift_LIBRARIES        - Path to the Thrift libraries.\n\n#   Thrift_EXECUTABLE       - Path to the Thrift executable.\n\n#   Thrift_LIBRARY_DIRS     - compile time link directories\n\n#   Thrift_INCLUDE_DIRS     - compile time include directories\n\n#\n\n#\n\n# Sample usage:\n\n#\n\n# ::\n\n#\n\n#    find_package(Thrift)\n\n#    if(Thrift_FOUND)\n\n#      target_link_libraries(<YourTarget> ${Thrift_LIBRARIES})\n\n#    endif()\n\n#\n\n# TODO(andrewseidl): Add macro for running thrift --gen.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set standard CMake FindPackage variables if found.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "java/calcite/pom.xml" : {
      "ObjectId" : "02e8a26b72315bb2b82bd80dad4b1cd0e509a285",
      "LastModified" : "2019-04-15T23:42:22Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "        <exclusion>\n          <groupId>com.google.protobuf</groupId>\n          <artifactId>protobuf-java</artifactId>\n        </exclusion>",
        "Line" : 56,
        "CharPositionInLine" : 24
      },
      "1" : {
        "Text" : " plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-checkstyle-plugin</artifactId>\n        <version>2.17</version>\n        <executions>\n          <execution>\n            <id>validate</id>\n            <phase>validate</phase>\n            <configuration>\n              <configLocation>checkstyle.xml</configLocation>\n              <encoding>UTF-8</encoding>\n              <consoleOutput>true</consoleOutput>\n              <failsOnError>false</failsOnError>\n              <linkXRef>false</linkXRef>\n            </configuration>\n            <goals>\n              <goal>check</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin ",
        "Line" : 161,
        "CharPositionInLine" : 19
      },
      "2" : {
        "Text" : "plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-checkstyle-plugin</artifactId>\n        <version>2.17</version>\n        <configuration>\n          <configLocation>checkstyle.xml</configLocation>\n        </configuration>\n      </plugin",
        "Line" : 173,
        "CharPositionInLine" : 18
      },
      "CommentCount" : 3
    },
    "java/mapd/pom.xml" : {
      "ObjectId" : "fcc32f8a9ff0a46f2185ff04374603484f8a90fe",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " this is used for inheritance merges ",
        "Line" : 52,
        "CharPositionInLine" : 57
      },
      "1" : {
        "Text" : " bind to the packaging phase ",
        "Line" : 54,
        "CharPositionInLine" : 49
      },
      "CommentCount" : 2
    },
    "java/mapdcommon/pom.xml" : {
      "ObjectId" : "492774342119df15e8dc6cbbd9ac7b75eb27104a",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "java/omniscijdbc/pom.xml" : {
      "ObjectId" : "37c66e98e25b1050d54bb1894484f9b056bea1fa",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " this is used for inheritance merges ",
        "Line" : 108,
        "CharPositionInLine" : 57
      },
      "1" : {
        "Text" : " bind to the packaging phase ",
        "Line" : 110,
        "CharPositionInLine" : 49
      },
      "2" : {
        "Text" : " plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-checkstyle-plugin</artifactId>\n        <version>2.17</version>\n        <executions>\n          <execution>\n            <id>validate</id>\n            <phase>validate</phase>\n            <configuration>\n              <configLocation>checkstyle.xml</configLocation>\n              <encoding>UTF-8</encoding>\n              <consoleOutput>true</consoleOutput>\n              <failsOnError>false</failsOnError>\n              <linkXRef>false</linkXRef>\n            </configuration>\n            <goals>\n              <goal>check</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin ",
        "Line" : 137,
        "CharPositionInLine" : 19
      },
      "3" : {
        "Text" : "plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-checkstyle-plugin</artifactId>\n        <version>2.17</version>\n        <configuration>\n          <configLocation>checkstyle.xml</configLocation>\n        </configuration>\n      </plugin",
        "Line" : 149,
        "CharPositionInLine" : 18
      },
      "CommentCount" : 4
    },
    "java/pom.xml" : {
      "ObjectId" : "662156ea2f12a83b976115fd412c2b0de2a6406b",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "java/thrift/pom.xml" : {
      "ObjectId" : "3753e2bf2139a9bd29ce5b7b954fac0f96e86f2d",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " this is used for inheritance merges ",
        "Line" : 76,
        "CharPositionInLine" : 57
      },
      "1" : {
        "Text" : " bind to the packaging phase ",
        "Line" : 78,
        "CharPositionInLine" : 49
      },
      "2" : {
        "Text" : " plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-checkstyle-plugin</artifactId>\n        <version>2.17</version>\n        <executions>\n          <execution>\n            <id>validate</id>\n            <phase>validate</phase>\n            <configuration>\n              <configLocation>checkstyle.xml</configLocation>\n              <encoding>UTF-8</encoding>\n              <consoleOutput>true</consoleOutput>\n              <failsOnError>false</failsOnError>\n              <linkXRef>false</linkXRef>\n            </configuration>\n            <goals>\n              <goal>check</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin ",
        "Line" : 105,
        "CharPositionInLine" : 19
      },
      "3" : {
        "Text" : "plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-checkstyle-plugin</artifactId>\n        <version>2.17</version>\n        <configuration>\n          <configLocation>checkstyle.xml</configLocation>\n        </configuration>\n      </plugin",
        "Line" : 117,
        "CharPositionInLine" : 18
      },
      "CommentCount" : 4
    },
    "java/utility/pom.xml" : {
      "ObjectId" : "78c57d6dd0019d3e831a454298f0fc4aa1268eb6",
      "LastModified" : "2019-03-29T19:24:21Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " PostGIS Needed to help import geo types ",
        "Line" : 52,
        "CharPositionInLine" : 53
      },
      "1" : {
        "Text" : " this is used for inheritance merges ",
        "Line" : 122,
        "CharPositionInLine" : 57
      },
      "2" : {
        "Text" : " bind to the packaging phase ",
        "Line" : 124,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : " plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-checkstyle-plugin</artifactId>\n        <version>2.17</version>\n        <executions>\n          <execution>\n            <id>validate</id>\n            <phase>validate</phase>\n            <configuration>\n              <configLocation>checkstyle.xml</configLocation>\n              <encoding>UTF-8</encoding>\n              <consoleOutput>true</consoleOutput>\n              <failsOnError>false</failsOnError>\n              <linkXRef>false</linkXRef>\n            </configuration>\n            <goals>\n              <goal>check</goal>\n            </goals>\n          </execution>\n        </executions>\n      </plugin ",
        "Line" : 151,
        "CharPositionInLine" : 19
      },
      "4" : {
        "Text" : "plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-checkstyle-plugin</artifactId>\n        <version>2.17</version>\n        <configuration>\n          <configLocation>checkstyle.xml</configLocation>\n        </configuration>\n      </plugin",
        "Line" : 163,
        "CharPositionInLine" : 18
      },
      "CommentCount" : 5
    }
  },
  "FileTypes" : {
    "CMAKE" : 57,
    "MAKEFILE" : 1,
    "MAVEN" : 8
  },
  "ElapsedTime" : 2024
}