{
  "Repository" : "30845919",
  "Revision" : "HEAD",
  "ObjectId" : "3ed057208f12111a7f8fd35ba3f299bcaaa1efd3",
  "CommitTime" : "2018-09-16T21:24:33Z",
  "Files" : {
    "src/cpp/hu.bme.mit.inf.modes3.components.computervision/src/Application/CMakeLists.txt" : {
      "ObjectId" : "dd37e648d4031f1f9920e89238585e6a378a7017",
      "LastModified" : "2018-01-03T13:11:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#MESSAGE( STATUS \"LIB: \" ${_rlib} )\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.computervision/src/ArucoGenerator/CMakeLists.txt" : {
      "ObjectId" : "c8e2f0bed08f3931e901e7d4a8ce609ccf311f1c",
      "LastModified" : "2018-01-03T13:11:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.computervision/src/CMakeLists.txt" : {
      "ObjectId" : "5f1850b8ee21e36646944ebd21ced9faa76c8293",
      "LastModified" : "2018-01-03T13:11:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#include_directories(${CMAKE_BINARY_DIR}/external/tbb/tbb/src/intel_tbb/include)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#include_directories(${CMAKE_BINARY_DIR}/external/build/include)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#link_directories(${CMAKE_BINARY_DIR}/external/build/x86/vc14/lib)\n\n#link_directories(${CMAKE_BINARY_DIR}/external/build/lib)\n\n#link_directories(${CMAKE_BINARY_DIR}/external/tbb/tbb/src/intel_tbb/lib/ia32/vc14)\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#add_subdirectory(external/opencv)\n\n#add_subdirectory(external/protobuf)\n\n#add_subdirectory(external/tbb)\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#add_dependencies(ComputerVision opencv)\n\n#add_dependencies(ComputerVision intel_tbb)\n\n#add_dependencies(ComputerVision protobuf)\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.computervision/src/ComputerVision/CMakeLists.txt" : {
      "ObjectId" : "89cd200212a9d726d8a95b162b9cd2721fd92d11",
      "LastModified" : "2018-01-03T13:11:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.computervision/src/MonoCalibrate/CMakeLists.txt" : {
      "ObjectId" : "d6c1a00c76fd71d321c30c957486868bc42fca6d",
      "LastModified" : "2018-01-03T13:11:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.computervision/src/StereoCalibrate/CMakeLists.txt" : {
      "ObjectId" : "fffea723c942351e4310ecd3e84eedcafeae65d4",
      "LastModified" : "2018-01-03T13:11:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.computervision/src/external/cppcodec/test/CMakeLists.txt" : {
      "ObjectId" : "0a20bcbdd7532475de560b24a8d888daaa318ca8",
      "LastModified" : "2018-01-03T13:11:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For cppcodec itself, don't prefer system headers over development ones.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.computervision/src/external/cppcodec/tool/CMakeLists.txt" : {
      "ObjectId" : "f70431041465b6404f4ed57a09df7c95bf0d7960",
      "LastModified" : "2018-01-03T13:11:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For cppcodec itself, don't prefer system headers over development ones.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.computervision/src/external/opencv/CMakeLists.txt" : {
      "ObjectId" : "f0e61e74a7419dea755acbfc2e1bc9c15f7705e2",
      "LastModified" : "2018-01-03T13:11:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#INSTALL_COMMAND \"\"\n\n#BUILD_COMMAND \"\"\n\n#CONFIGURE_COMMAND \"\"\n",
        "Line" : 19,
        "CharPositionInLine" : 5
      },
      "CommentCount" : 1
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.computervision/src/external/protobuf/CMakeLists.txt" : {
      "ObjectId" : "798f0524bacb9585669e9c670682cec572df32cb",
      "LastModified" : "2018-01-03T13:11:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SOURCE_DIR ${CMAKE_BINARY_DIR}/external/protobuf/protobuf/src/protobuf\n",
        "Line" : 7,
        "CharPositionInLine" : 5
      },
      "1" : {
        "Text" : "#${CMAKE_BINARY_DIR}/external/protobuf/protobuf/src/protobuf/cmake\n\n#INSTALL_DIR ${CMAKE_BINARY_DIR}/external/build\n",
        "Line" : 12,
        "CharPositionInLine" : 5
      },
      "CommentCount" : 2
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.computervision/src/external/tbb/CMakeLists.txt" : {
      "ObjectId" : "bca0c34e98383363cc09ef33ff91962215da5efd",
      "LastModified" : "2018-01-03T13:11:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.soc/Makefile" : {
      "ObjectId" : "7afa2df82b9c461755bf3ecf3e81d44e52f1b8d1",
      "LastModified" : "2018-01-03T13:11:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.traindetector/CMakeLists.txt" : {
      "ObjectId" : "0647c5579168ec0ca6ca921ff4b65d167c74c06e",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.traindetector/lib/traindetector/CMakeLists.txt" : {
      "ObjectId" : "27beac631ab0f0f25de3d3384772b722789386fe",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.traindetector/tests/traindetector_tests/CMakeLists.txt" : {
      "ObjectId" : "329779d615577ad37e433500d3eff749590f0467",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.traindetector/tests/traindetector_tests/lib/googletest/CMakeLists.txt" : {
      "ObjectId" : "f8a97faaeb8a843e76b3664d73fa0f5d91345143",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Note that googlemock target already builds googletest\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.traindetector/tests/traindetector_tests/lib/googletest/googlemock/CMakeLists.txt" : {
      "ObjectId" : "724fdd5f05eabf1b20043c91d7667b0a25147090",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Mock.\n\n#\n\n# To run the tests for Google Mock itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# A directory to find Google Test sources.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Google Test also calls hermetic setup functions from add_subdirectory,\n\n# although its changes will not affect things at the current scope.\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gmock_SOURCE_DIR} and to the root binary directory as\n\n# ${gmock_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Instructs CMake to process Google Test's CMakeLists.txt and add its\n\n# targets to the current scope.  We are placing Google Test's binary\n\n# directory in a subdirectory of our own as VC compilation may break\n\n# if they are the same (the default).\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Although Google Test's CMakeLists.txt calls this function, the\n\n# changes there don't affect the current scope.  Therefore we have to\n\n# call it again here.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# from ${gtest_dir}/cmake/internal_utils.cmake\n",
        "Line" : 61,
        "CharPositionInLine" : 30
      },
      "10" : {
        "Text" : "# Adds Google Mock's and Google Test's header directories to the search path.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# This directory is needed to build directly from Google\n\n# Test sources.\n",
        "Line" : 67,
        "CharPositionInLine" : 20
      },
      "12" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gmock & gmock_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Google Mock libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that Google Mock can be compiled by\n\n# a user aggressive about warnings.\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# configure and install pkgconfig files\n",
        "Line" : 119,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "########################################################################\n\n#\n\n# Google Mock's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Mock itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gmock_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgmock_build_tests=ON flag when running cmake.\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 144,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# gmock_all_test is commented to save time building and running tests.\n\n# Uncomment if necessary.\n\n# cxx_test(gmock_all_test gmock_main)\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 184,
        "CharPositionInLine" : 43
      },
      "24" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Tests that a binary can be built with Google Mock as a shared library.  On\n\n# some system configurations, it may not possible to run the binary without\n\n# knowing more details about the system configurations. We do not try to run\n\n# this binary. To get a more robust shared library coverage, configure with\n\n# -DBUILD_SHARED_LIBS=ON.\n",
        "Line" : 204,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 215,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 27
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.traindetector/tests/traindetector_tests/lib/googletest/googlemock/Makefile.am" : {
      "ObjectId" : "9adbc5163dd7191a14a887a384fb5d6d2956b44d",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We may need to build our internally packaged gtest. If so, it will be\n\n# included in the 'subdirs' variable.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This is generated by the configure script, so clean it for distribution.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build rules for tests. Automake's naming for some of these variables isn't\n\n# terribly obvious, so this is a brief reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# This exercises all major components of Google Mock.  It also\n\n# verifies that libgmock works.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This tests using Google Mock in multiple translation units.  It also\n\n# verifies that libgmock_main and libgmock work.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Tests that fused gmock files compile and work.\n",
        "Line" : 81,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Google Mock source files that we don't compile directly.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# C++ tests that we don't compile using autotools.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Python tests, which we don't run using autotools.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Nonstandard package files for distribution.\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Pump scripts for generating Google Mock headers.\n\n# TODO(chandlerc@google.com): automate the generation of *.h from *.h.pump.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Script for fusing Google Mock and Google Test source files.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# The Google Mock Generator tool from the cppclean project.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Script for diagnosing compiler errors in programs that use Google\n\n# Mock.\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# CMake scripts.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Microsoft Visual Studio 2005 projects.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Microsoft Visual Studio 2010 projects.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# gmock_test.cc does not really depend on files generated by the\n\n# fused-gmock-internal rule.  However, gmock_test.o does, and it is\n\n# important to include test/gmock_test.cc as part of this rule in order to\n\n# prevent compiling gmock_test.o until all dependent files have been\n\n# generated.\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# TODO(vladl@google.com): Find a way to add Google Tests's sources here.\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Mock can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 26
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.traindetector/tests/traindetector_tests/lib/googletest/googlemock/make/Makefile" : {
      "ObjectId" : "7c13e05fa961dd3a37ee05def12de08ce0e86a88",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building both Google Mock and Google Test and\n\n# using them in user tests.  This file is self-contained, so you don't\n\n# need to use the Makefile in Google Test's source tree.  Please tweak\n\n# it to suit your environment and project.  You may want to move it to\n\n# your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GMOCK_HEADERS and GTEST_HEADERS, which you can use\n\n# in your own targets but shouldn't modify.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file, or if you want to use\n\n# a copy of Google Test at a different location.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Points to the root of Google Mock, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test and Google Mock's header directories as system\n\n# directories, such that the compiler doesn't generate warnings in\n\n# these headers.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# All Google Mock headers. Note that all Google Test headers are\n\n# included here too, as they are #included by Google Mock headers.\n\n# Usually you shouldn't change this definition.\t\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Builds gmock.a and gmock_main.a.  These libraries contain both\n\n# Google Mock and Google Test.  A test should link with either gmock.a\n\n# or gmock_main.a, depending on whether it defines its own main()\n\n# function.  It's fine if your test only uses features from Google\n\n# Test (and not Google Mock).\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# For simplicity and to avoid depending on implementation details of\n\n# Google Mock and Google Test, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Mock and\n\n# Google Test compile fast and for ordinary users their source rarely\n\n# changes.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Builds a sample test.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.traindetector/tests/traindetector_tests/lib/googletest/googletest/CMakeLists.txt" : {
      "ObjectId" : "b9a920b7ad8fc32b649b4795b6a97d9eef697cde",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "########################################################################\n\n# CMake build script for Google Test.\n\n#\n\n# To run the tests for Google Test itself on Linux, use 'make test' or\n\n# ctest.  You can select which tests to run using 'ctest -R regex'.\n\n# For more options, run 'ctest --help'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# BUILD_SHARED_LIBS is a standard CMake variable, but we declare it here to\n\n# make it prominent in the GUI.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# When other libraries are using a shared version of runtime libraries,\n\n# Google Test also has to use one.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Defines pre_project_set_up_hermetic_build() and set_up_hermetic_build().\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "########################################################################\n\n#\n\n# Project-wide settings\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Name of the project.\n\n#\n\n# CMake files in this project can refer to the root source directory\n\n# as ${gtest_SOURCE_DIR} and to the root binary directory as\n\n# ${gtest_BINARY_DIR}.\n\n# Language \"C\" is required for find_package(Threads).\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Visibility\n",
        "Line" : 57,
        "CharPositionInLine" : 20
      },
      "7" : {
        "Text" : "# Define helper functions and macros used by Google Test.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Defined in internal_utils.cmake.\n",
        "Line" : 73,
        "CharPositionInLine" : 30
      },
      "9" : {
        "Text" : "# Where Google Test's .h files can be found.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Summary of tuple support for Microsoft Visual Studio:\n\n# Compiler    version(MS)  version(cmake)  Support\n\n# ----------  -----------  --------------  -----------------------------\n\n# <= VS 2010  <= 10        <= 1600         Use Google Tests's own tuple.\n\n# VS 2012     11           1700            std::tr1::tuple + _VARIADIC_MAX=10\n\n# VS 2013     12           1800            std::tr1::tuple\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "########################################################################\n\n#\n\n# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Google Test libraries.  We build them using more strict warnings than what\n\n# are used for other targets, to ensure that gtest can be compiled by a user\n\n# aggressive about warnings.\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# If the CMake version supports it, attach header directory information\n\n# to the targets for when we are part of a parent build (ie being pulled\n\n# in via add_subdirectory() rather than being a standalone build).\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "########################################################################\n\n#\n\n# Install rules\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# configure and install pkgconfig files\n",
        "Line" : 121,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "########################################################################\n\n#\n\n# Samples on how to link user tests with gtest or gtest_main.\n\n#\n\n# They are not built by default.  To build them, set the\n\n# gtest_build_samples option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_samples=ON flag when running cmake.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "########################################################################\n\n#\n\n# Google Test's own tests.\n\n#\n\n# You can skip this section if you aren't interested in testing\n\n# Google Test itself.\n\n#\n\n# The tests are not built by default.  To build them, set the\n\n# gtest_build_tests option to ON.  You can do it by running ccmake\n\n# or specifying the -Dgtest_build_tests=ON flag when running cmake.\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This must be set in the root directory for the tests to be run by\n\n# 'make test' or ctest.\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "############################################################\n\n# C++ tests built with standard compiler flags.\n",
        "Line" : 171,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "############################################################\n\n# C++ tests built with non-standard compiler flags.\n",
        "Line" : 202,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 205,
        "CharPositionInLine" : 2
      },
      "22" : {
        "Text" : "# 1600 is Visual Studio 2010.\n",
        "Line" : 234,
        "CharPositionInLine" : 43
      },
      "23" : {
        "Text" : "# Visual Studio 2010, 2012, and 2013 define symbols in std::tr1 that\n\n# conflict with our own definitions. Therefore using our own tuple does not\n\n# work on those compilers.\n",
        "Line" : 235,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "############################################################\n\n# Python tests.\n",
        "Line" : 249,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Visual Studio .NET 2003 does not support STL with exceptions disabled.\n",
        "Line" : 255,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# 1310 is Visual Studio .NET 2003\n",
        "Line" : 256,
        "CharPositionInLine" : 46
      },
      "27" : {
        "Text" : "# MSVC 7.1 does not support STL with exceptions disabled.\n",
        "Line" : 292,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 28
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.traindetector/tests/traindetector_tests/lib/googletest/googletest/Makefile.am" : {
      "ObjectId" : "dbc004de6008f90fba9d726316ef504247822714",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# Automake file\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Nonstandard package files for distribution\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gtest source files that we don't compile directly.  They are\n\n# #included by gtest-all.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Sample files that we don't compile.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# C++ test files that we don't compile directly.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Python tests that we don't run.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# CMake script\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MSVC project files\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# xcode project files\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# xcode sample files\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# C++Builder project files\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Distribute and install M4 macro\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We define the global AM_CPPFLAGS as everything we compile includes from these\n\n# directories.\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Modifies compiler and linker flags for pthreads compatibility.\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Build rules for libraries.\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Build rules for samples and tests. Automake's naming for some of\n\n# these variables isn't terribly obvious, so this is a brief\n\n# reference:\n\n#\n\n# TESTS -- Programs run automatically by \"make check\"\n\n# check_PROGRAMS -- Programs built by \"make check\" but not necessarily run\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# A simple sample on using gtest.\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Another sample.  It also verifies that libgtest works.\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# This tests most constructs of gtest and verifies that libgtest_main\n\n# and libgtest work.\n",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Tests that fused gtest files compile and work.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Build rules for putting fused Google Test files into the distribution\n\n# package. The user can also create those files by manually running\n\n# scripts/fuse_gtest_files.py.\n",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Death tests may produce core dumps in the build directory. In case\n\n# this happens, clean them to keep distcleancheck happy.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Disables 'make install' as installing a compiled version of Google\n\n# Test can lead to undefined behavior due to violation of the\n\n# One-Definition Rule.\n",
        "Line" : 300,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.traindetector/tests/traindetector_tests/lib/googletest/googletest/cmake/internal_utils.cmake" : {
      "ObjectId" : "9915c11fdc21c5eb6a185e1e75f576946f9b4b14",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defines functions and macros useful for building Google Test and\n\n# Google Mock.\n\n#\n\n# Note:\n\n#\n\n# - This file will be run twice when building Google Mock (once via\n\n#   Google Test's CMakeLists.txt, and once via Google Mock's).\n\n#   Therefore it shouldn't have any side effects other than defining\n\n#   the functions and macros.\n\n#\n\n# - The functions/macros defined in this file may depend on Google\n\n#   Test and Google Mock's option() definitions, and thus must be\n\n#   called *after* the options have been defined.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tweaks CMake's default compiler/linker settings to suit Google Test's needs.\n\n#\n\n# This must be a macro(), as inside a function string() can only\n\n# update variables in the function scope.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# For MSVC, CMake sets certain flags to defaults we want to override.\n\n# This replacement code is taken from sample in the CMake Wiki at\n\n# http://www.cmake.org/Wiki/CMake_FAQ#Dynamic_Replace.\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# When Google Test is built as a shared library, it should also use\n\n# shared runtime libraries.  Otherwise, it may end up with multiple\n\n# copies of runtime library data in different modules, resulting in\n\n# hard-to-find crashes. When it is built as a static library, it is\n\n# preferable to use CRT as static libraries, as we don't have to rely\n\n# on CRT DLLs being available. CMake always defaults to using shared\n\n# CRT libraries, so we override that default here.\n",
        "Line" : 28,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# We prefer more strict warning checking for building Google Test.\n\n# Replaces /W3 with /W4 in defaults.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Defines the compiler/linker flags used to build Google Test and\n\n# Google Mock.  You can tweak these definitions to suit your need.  A\n\n# variable's value is empty before it's explicitly assigned to.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Note: pthreads on MinGW is not supported, even if available\n\n# instead, we use windows threading primitives\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Newlines inside flags variables break CMake's NMake generator.\n\n# TODO(vladl@google.com): Add -RTCs and -RTCu to debug builds.\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# 1400 is Visual Studio 2005\n",
        "Line" : 66,
        "CharPositionInLine" : 33
      },
      "10" : {
        "Text" : "# Suppress spurious warnings MSVC 7.1 sometimes issues.\n\n# Forcing value to bool.\n",
        "Line" : 67,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Copy constructor and assignment operator could not be generated.\n",
        "Line" : 70,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Compatibility warnings not applicable to Google Test.\n\n# Resolved overload was found by argument-dependent lookup.\n",
        "Line" : 72,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# 1500 is Visual Studio 2008\n",
        "Line" : 76,
        "CharPositionInLine" : 33
      },
      "14" : {
        "Text" : "# Conditional expression is constant.\n\n# When compiling with /W4, we get several instances of C4127\n\n# (Conditional expression is constant). In our code, we disable that\n\n# warning on a case-by-case basis. However, on Visual Studio 2005,\n\n# the warning fires on std::list. Therefore on that compiler and earlier,\n\n# we disable the warning project-wide.\n",
        "Line" : 77,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# 1700 is Visual Studio 2012.\n",
        "Line" : 85,
        "CharPositionInLine" : 39
      },
      "16" : {
        "Text" : "# Suppress \"unreachable code\" warning on VS 2012 and later.\n\n# http://stackoverflow.com/questions/3232669 explains the issue.\n",
        "Line" : 86,
        "CharPositionInLine" : 6
      },
      "17" : {
        "Text" : "# 1900 is Visual Studio 2015\n",
        "Line" : 90,
        "CharPositionInLine" : 42
      },
      "18" : {
        "Text" : "# BigObj required for tests.\n",
        "Line" : 91,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# Until version 4.3.2, GCC doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 104,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Sun Pro doesn't provide macros to indicate whether exceptions and\n\n# RTTI are enabled, so we define GTEST_HAS_* explicitly.\n",
        "Line" : 112,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# CMake 2.8 changes Visual Age's compiler ID to \"XL\".\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# Until version 9.0, Visual Age doesn't define a macro to indicate\n\n# whether RTTI is enabled.  Therefore we define GTEST_HAS_RTTI\n\n# explicitly.\n",
        "Line" : 121,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# RTTI can not be disabled in HP aCC compiler.\n",
        "Line" : 129,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# The pthreads library is available and allowed?\n",
        "Line" : 133,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# For building gtest's own tests and samples.\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# For building the gtest libraries.\n",
        "Line" : 149,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# Defines the gtest & gtest_main libraries.  User tests should link\n\n# with one of them.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# type can be either STATIC or SHARED to denote a static or shared library.\n\n# ARGN refers to additional arguments after 'cxx_flags'.\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "########################################################################\n\n#\n\n# Helper functions for creating build targets.\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# cxx_executable_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ executable that depends on the given libraries and\n\n# is built from the given source files with the given compiler flags.\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# To support mixing linking in static and dynamic libraries, link each\n\n# library in with an extra call to target_link_libraries.\n",
        "Line" : 200,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# cxx_executable(name dir lib srcs...)\n\n#\n\n# creates a named target that depends on the given libs and is built\n\n# from the given source files.  dir/name.cc is implicitly included in\n\n# the source file list.\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Sets PYTHONINTERP_FOUND and PYTHON_EXECUTABLE.\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# cxx_test_with_flags(name cxx_flags libs srcs...)\n\n#\n\n# creates a named C++ test that depends on the given libs and is built\n\n# from the given source files with the given compiler flags.\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# cxx_test(name libs srcs...)\n\n#\n\n# creates a named test target that depends on the given libs and is\n\n# built from the given source files.  Unlike cxx_test_with_flags,\n\n# test/name.cc is already implicitly included in the source file list.\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# py_test(name)\n\n#\n\n# creates a Python test with the given name whose main module is in\n\n# test/name.py.  It does nothing if Python is not installed.\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Multi-configuration build generators as for Visual Studio save\n\n# output in a subdirectory of CMAKE_CURRENT_BINARY_DIR (Debug,\n\n# Release etc.), so we have to provide it here.\n",
        "Line" : 247,
        "CharPositionInLine" : 1
      },
      "38" : {
        "Text" : "# Single-configuration build generators like Makefile generators\n\n# don't have subdirs below CMAKE_CURRENT_BINARY_DIR.\n",
        "Line" : 255,
        "CharPositionInLine" : 1
      },
      "39" : {
        "Text" : "# ${CMAKE_CURRENT_BINARY_DIR} is known at configuration time, so we can\n\n# directly bind it from cmake. ${CTEST_CONFIGURATION_TYPE} is known\n\n# only at ctest runtime (by calling ctest -c <Configuration>), so\n\n# we have to escape $ to delay variable substitution here.\n",
        "Line" : 263,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 40
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.traindetector/tests/traindetector_tests/lib/googletest/googletest/make/Makefile" : {
      "ObjectId" : "9ac74493ba55246597e90b898fae847ae358eab5",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A sample Makefile for building Google Test and using it in user\n\n# tests.  Please tweak it to suit your environment and project.  You\n\n# may want to move it to your project's root directory.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Please tweak the following variable definitions as needed by your\n\n# project, except GTEST_HEADERS, which you can use in your own targets\n\n# but shouldn't modify.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Points to the root of Google Test, relative to where this file is.\n\n# Remember to tweak this if you move this file.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find user code.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# Set Google Test's header directory as a system directory, such that\n\n# the compiler doesn't generate warnings in Google Test headers.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# All tests produced by this Makefile.  Remember to add new tests you\n\n# created to the list.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# All Google Test headers.  Usually you shouldn't change this\n\n# definition.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# House-keeping build targets.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Builds gtest.a and gtest_main.a.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Usually you shouldn't tweak such internal variables, indicated by a\n\n# trailing _.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# For simplicity and to avoid depending on Google Test's\n\n# implementation details, the dependencies specified below are\n\n# conservative and not optimized.  This is fine as Google Test\n\n# compiles fast and for ordinary users its source rarely changes.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Builds a sample test.  A test should link with either gtest.a or\n\n# gtest_main.a, depending on whether it defines its own main()\n\n# function.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 13
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.traindetector/tests/traindetector_tests/lib/googletest/googletest/scripts/test/Makefile" : {
      "ObjectId" : "cdff584637b7a6e9df1fa43ce8f588c43815e561",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# A Makefile for fusing Google Test and building a sample test against it.\n\n#\n\n# SYNOPSIS:\n\n#\n\n#   make [all]  - makes everything.\n\n#   make TARGET - makes the given target.\n\n#   make check  - makes everything and runs the built sample test.\n\n#   make clean  - removes all files generated by make.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Points to the root of fused Google Test, relative to where this file is.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Paths to the fused gtest files.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Where to find the sample test.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Where to find gtest_main.cc.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Flags passed to the preprocessor.\n\n# We have no idea here whether pthreads is available in the system, so\n\n# disable its use.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Flags passed to the C++ compiler.\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.traindetector/tests/traindetector_tests/tests/CMakeLists.txt" : {
      "ObjectId" : "ed40746d0564053d3fe0adf33f83671003fe6208",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.trainsamplegenerator/CMakeLists.txt" : {
      "ObjectId" : "0e205e1d6d96c12db763479d6d6ae7c7cfd5603c",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.xpressnetbridge/CMakeLists.txt" : {
      "ObjectId" : "1e7d01406e965f0d9ae8a2cad123242dce0e9b62",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.xpressnetbridge/cmake-build-debug/CMakeFiles/3.7.2/CMakeCCompiler.cmake" : {
      "ObjectId" : "2752e335e6ce713ccae0bcea9964f19139f4c094",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Save compiler ABI information.\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.xpressnetbridge/cmake-build-debug/CMakeFiles/3.7.2/CMakeCXXCompiler.cmake" : {
      "ObjectId" : "e43dde95dd257a9cfa5c12ccebc954acc98a3c01",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Save compiler ABI information.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.xpressnetbridge/cmake-build-debug/CMakeFiles/3.7.2/CMakeSystem.cmake" : {
      "ObjectId" : "72b7a935791849427d46d8b28331a6dd28e51c1d",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.xpressnetbridge/cmake-build-debug/CPackConfig.cmake" : {
      "ObjectId" : "777f484e72a0db2ef2db0da884a7e9ae1d74f702",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file will be configured to contain variables for CPack. These variables\n\n# should be set in the CMake list file of the project before CPack module is\n\n# included. The list of available CPACK_xxx variables and their associated\n\n# documentation may be obtained using\n\n#  cpack --help-variable-list\n\n#\n\n# Some variables are common to all generators (e.g. CPACK_PACKAGE_NAME)\n\n# and some are specific to a generator\n\n# (e.g. CPACK_NSIS_EXTRA_INSTALL_COMMANDS). The generator specific variables\n\n# usually begin with CPACK_<GENNAME>_xxxx.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.xpressnetbridge/cmake-build-debug/CPackSourceConfig.cmake" : {
      "ObjectId" : "418ee1cd6be93b9c7bbb2fae1433f66475908944",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file will be configured to contain variables for CPack. These variables\n\n# should be set in the CMake list file of the project before CPack module is\n\n# included. The list of available CPACK_xxx variables and their associated\n\n# documentation may be obtained using\n\n#  cpack --help-variable-list\n\n#\n\n# Some variables are common to all generators (e.g. CPACK_PACKAGE_NAME)\n\n# and some are specific to a generator\n\n# (e.g. CPACK_NSIS_EXTRA_INSTALL_COMMANDS). The generator specific variables\n\n# usually begin with CPACK_<GENNAME>_xxxx.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.xpressnetbridge/cmake_modules/FindMosquitto.cmake" : {
      "ObjectId" : "bcacf0df5b05b70f32e01d2ba08515c1d976f855",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find libmosquitto\r\n\n# Find the native libmosquitto includes and libraries\r\n\n#\r\n\n#  MOSQUITTO_INCLUDE_DIR - where to find mosquitto.h, etc.\r\n\n#  MOSQUITTO_LIBRARIES   - List of libraries when using libmosquitto.\r\n\n#  MOSQUITTO_FOUND       - True if libmosquitto found.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\r\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set MOSQUITTO_FOUND to TRUE if\r\n\n# all listed variables are TRUE.\r\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/cpp/hu.bme.mit.inf.modes3.components.xpressnetbridge/cmake_modules/FindMosquittopp.cmake" : {
      "ObjectId" : "aa95422afd2421666a8bebb34e7bed79937afccc",
      "LastModified" : "2018-01-08T14:31:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find libmosquitto\r\n\n# Find the native libmosquitto includes and libraries\r\n\n#\r\n\n#  MOSQUITTOPP_INCLUDE_DIR - where to find mosquitto.h, etc.\r\n\n#  MOSQUITTOPP_LIBRARIES   - List of libraries when using libmosquitto.\r\n\n#  MOSQUITTOPP_FOUND       - True if libmosquitto found.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\r\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set MOSQUITTO_FOUND to TRUE if\r\n\n# all listed variables are TRUE.\r\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 28,
    "MAKEFILE" : 4,
    "AUTOMAKE" : 2
  },
  "ElapsedTime" : 2815
}