{
  "Repository" : "57234548",
  "Revision" : "HEAD",
  "ObjectId" : "5bfe29014ff172b926c5b9333f3f7cdf5a05dbad",
  "CommitTime" : "2019-03-25T21:10:45Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "92a80e550b9bb5b0708573df77e4db68c3a6768f",
      "LastModified" : "2019-01-09T19:43:19Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/AndroidFindJNI.cmake" : {
      "ObjectId" : "7f1074bd0348731e809f2f978dca4f35164d564e",
      "LastModified" : "2018-06-21T19:51:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "CMakeModules/FindNode.cmake" : {
      "ObjectId" : "8eba051740f008b2789e8ed1459ad7acabdba872",
      "LastModified" : "2018-06-21T19:51:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Defaults for standard Node.js builds\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find a path by walking upward from a base directory until the path is\n\n# found. Sets the variable ${PATH} to False if the path can't\n\n# be determined\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Shortcut for finding standard node module locations\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Download with a bit of nice output (without spewing progress)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Embedded win_delay_load_hook file so that this file can be copied\n\n# into projects directly (recommended practice)\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Sets up a project to build Node.js native modules\n\n# - Downloads required dependencies and unpacks them to the build directory.\n\n#   Internet access is required the first invocation but not after (\n\n#   provided the download is successful)\n\n# - Sets up several variables for building against the downloaded\n\n#   dependencies\n\n# - Guarded to prevent multiple executions, so a single project hierarchy\n\n#   will only call this once\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Prevents this function from executing more than once\n",
        "Line" : 131,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Regex patterns used by the init function for component extraction\n",
        "Line" : 136,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Parse function arguments\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Allow the download URL to be overridden by command line argument\n\n# NODEJS_URL\n",
        "Line" : 146,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# Use the argument if specified, falling back to the default\n",
        "Line" : 151,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# Allow name to be overridden by command line argument NODEJS_NAME\n",
        "Line" : 158,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Use the argument if specified, falling back to the default\n",
        "Line" : 162,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# Allow the checksum file to be overridden by command line argument\n\n# NODEJS_CHECKSUM\n",
        "Line" : 169,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Use the argument if specified, falling back to the default\n",
        "Line" : 174,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# Allow the checksum type to be overriden by the command line argument\n\n# NODEJS_CHECKTYPE\n",
        "Line" : 181,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Use the argument if specified, falling back to the default\n",
        "Line" : 186,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# Allow the version to be overridden by the command line argument\n\n# NODEJS_VERSION\n",
        "Line" : 193,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# Use the argument if specified, falling back to the default\n",
        "Line" : 198,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# \"installed\" is a special version that tries to use the currently\n\n# installed version (determined by running node)\n",
        "Line" : 205,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Fall back to the \"latest\" version if node isn't installed\n",
        "Line" : 215,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# This has all of the implications of why the binary is called nodejs in the first place\n\n# https://lists.debian.org/debian-devel-announce/2012/07/msg00002.html\n\n# However, with nvm/n, its nearly standard to have a proper 'node' binary now (since the\n\n# apt-based one is so out of date), so for now just assume that this rare binary conflict\n\n# case is the degenerate case. May need a more complicated solution later.\n",
        "Line" : 217,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# Create a temporary download directory\n",
        "Line" : 239,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# Unless the target is special version \"latest\", the parameters\n\n# necessary to construct the root path are known\n",
        "Line" : 246,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# Extract checksums from the existing checksum file\n",
        "Line" : 250,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# If we're trying to determine the version or we haven't saved the\n\n# checksum file for this version, download it from the specified server\n",
        "Line" : 254,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# Clear away the old checksum in case the new one is different\n\n# and/or it fails to download\n",
        "Line" : 259,
        "CharPositionInLine" : 12
      },
      "27" : {
        "Text" : "# Extract checksums from the temporary file\n",
        "Line" : 277,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# Extract the version, name, header archive and archive checksum\n\n# from the file. This first extract is what defines / specifies the\n\n# actual version number and name.\n",
        "Line" : 281,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# Make sure that the root directory exists, and that the checksum\n\n# file has been moved over from temp\n",
        "Line" : 307,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Now that its fully resolved, report the name and version of Node.js being\n\n# used\n",
        "Line" : 324,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Download the headers for the version being used\n\n# Theoretically, these could be found by searching the installed\n\n# system, but in practice, this can be error prone. They're provided\n\n# on the download servers, so just use the ones there.\n",
        "Line" : 328,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# This adapts the header extraction to support a number of different\n\n# header archive contents in addition to the one used by the\n\n# default Node.js library\n",
        "Line" : 351,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "# Move the headers into a standard location with a standard layout\n",
        "Line" : 370,
        "CharPositionInLine" : 8
      },
      "34" : {
        "Text" : "# Only download the libraries on windows, since its the only place\n\n# its necessary. Note, this requires rerunning CMake if moving\n\n# a module from one platform to another (should happen automatically\n\n# with most generators)\n",
        "Line" : 410,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# Download the win32 library for linking\n",
        "Line" : 415,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "# Download the win64 library for linking\n",
        "Line" : 453,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "# The downloaded headers should always be set for inclusion\n",
        "Line" : 492,
        "CharPositionInLine" : 4
      },
      "38" : {
        "Text" : "# Look for the NAN module, and add it to the includes\n",
        "Line" : 495,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Under windows, we need a bunch of libraries (due to the way\n\n# dynamic linking works)\n",
        "Line" : 505,
        "CharPositionInLine" : 4
      },
      "40" : {
        "Text" : "# Generate and use a delay load hook to allow the node binary\n\n# name to be changed while still loading native modules\n",
        "Line" : 508,
        "CharPositionInLine" : 8
      },
      "41" : {
        "Text" : "# Necessary flags to get delayload working correctly\n",
        "Line" : 514,
        "CharPositionInLine" : 8
      },
      "42" : {
        "Text" : "# Core system libraries used by node\n",
        "Line" : 522,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "# Also link to the node stub itself (downloaded above)\n",
        "Line" : 529,
        "CharPositionInLine" : 8
      },
      "44" : {
        "Text" : "# Non-windows platforms should use these flags\n",
        "Line" : 536,
        "CharPositionInLine" : 8
      },
      "45" : {
        "Text" : "# Special handling for OSX / clang to allow undefined symbols\n\n# Define is required by node on OSX\n",
        "Line" : 540,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# Export all settings for use as arguments in the rest of the build\n",
        "Line" : 547,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# Prevents this function from executing more than once\n",
        "Line" : 555,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# Helper function for defining a node module\n\n# After nodejs_init, all of the settings and dependencies necessary to do\n\n# this yourself are defined, but this helps make sure everything is configured\n\n# correctly. Feel free to use it as a model to do this by hand (or to\n\n# tweak this configuration if you need something custom).\n",
        "Line" : 559,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Validate name parameter (must be a valid C identifier)\n",
        "Line" : 565,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# Make sure node is initialized (variables set) before defining the module\n",
        "Line" : 573,
        "CharPositionInLine" : 4
      },
      "51" : {
        "Text" : "# In order to match node-gyp, we need to build into type specific folders\n\n# ncmake takes care of this, but be sure to set CMAKE_BUILD_TYPE yourself\n\n# if invoking CMake directly\n",
        "Line" : 580,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# A node module is a shared library\n",
        "Line" : 590,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# Add compiler defines for the module\n\n# Two helpful ones:\n\n# MODULE_NAME must match the name of the build library, define that here\n\n# ${NAME}_BUILD is for symbol visibility under windows\n",
        "Line" : 592,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "# This properly defines includes for the module\n",
        "Line" : 602,
        "CharPositionInLine" : 4
      },
      "55" : {
        "Text" : "# Add link flags to the module\n",
        "Line" : 605,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "# Set required properties for the module to build properly\n\n# Correct naming, symbol visiblity and C++ standard\n",
        "Line" : 608,
        "CharPositionInLine" : 4
      },
      "57" : {
        "Text" : "# Handle link flag cases properly\n\n# When there are link flags, they should be appended to LINK_FLAGS with space separation\n\n# If the list is emtpy (true for most *NIX platforms), this is a no-op\n",
        "Line" : 622,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "# Make sure we're buiilding in a build specific output directory\n\n# Only necessary on single-target generators (Make, Ninja)\n\n# Multi-target generators do this automatically\n\n# This (luckily) mirrors node-gyp conventions\n",
        "Line" : 629,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 59
    },
    "CMakeModules/FindPHP.cmake" : {
      "ObjectId" : "85bdb1a39faa0b25f804622cdae4619b1246e9e9",
      "LastModified" : "2018-08-31T15:59:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Discover PHP Version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Discover the includes for php\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Remove the -I part of the response\n",
        "Line" : 26,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# Discover linker flags for php\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Remove the -I part of the response\n",
        "Line" : 45,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 5
    },
    "Toolchain-Android.cmake" : {
      "ObjectId" : "8db0bedc8ee70f00ef48f2a245bf75b0b2c3058c",
      "LastModified" : "2018-09-04T18:51:31Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Toolchain-iOS.cmake" : {
      "ObjectId" : "630c0ffe152b661872f24d0fc1a21ae9e8504841",
      "LastModified" : "2018-09-04T18:51:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of the ios-cmake project. It was retrieved from\n\n# https://github.com/cristeab/ios-cmake.git, which is a fork of\n\n# https://code.google.com/p/ios-cmake/. Which in turn is based off of\n\n# the Platform/Darwin.cmake and Platform/UnixPaths.cmake files which\n\n# are included with CMake 2.8.4\n\n#\n\n# The ios-cmake project is licensed under the new BSD license.\n\n#\n\n# Copyright (c) 2014, Bogdan Cristea and LTE Engineering Software,\n\n# Kitware, Inc., Insight Software Consortium.  All rights reserved.\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n# 1. Redistributions of source code must retain the above copyright\n\n# notice, this list of conditions and the following disclaimer.\n\n#\n\n# 2. Redistributions in binary form must reproduce the above copyright\n\n# notice, this list of conditions and the following disclaimer in the\n\n# documentation and/or other materials provided with the distribution.\n\n#\n\n# 3. Neither the name of the copyright holder nor the names of its\n\n# contributors may be used to endorse or promote products derived from\n\n# this software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n\n# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n\n# COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n\n# INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n\n# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n\n# LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n\n# ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# This file is based off of the Platform/Darwin.cmake and\n\n# Platform/UnixPaths.cmake files which are included with CMake 2.8.4\n\n# It has been altered for iOS development.\n\n#\n\n# Updated by Alex Stewart (alexs.mac@gmail.com).\n\n# The following variables control the behaviour of this toolchain:\n\n#\n\n# IOS_PLATFORM: OS (default) or SIMULATOR\n\n#    OS = Build for iPhoneOS.\n\n#    SIMULATOR = Build for x86 i386 and x86_64 iPhone Simulator.\n\n# CMAKE_OSX_SYSROOT: Path to the iOS SDK to use.  By default this is\n\n#    automatically determined from IOS_PLATFORM and xcodebuild, but\n\n#    can also be manually specified (although this should not be required).\n\n# CMAKE_IOS_DEVELOPER_ROOT: Path to the Developer directory for the iOS platform\n\n#    being compiled for.  By default this is automatically determined from\n\n#    CMAKE_OSX_SYSROOT, but can also be manually specified (although this should\n\n#    not be required).\n\n# ENABLE_BITCODE: (true|false) Enables or disables bitcode support. Default true\n\n#\n\n# This toolchain defines the following variables for use externally:\n\n#\n\n# XCODE_VERSION: Version number (not including Build version) of Xcode detected.\n\n# IOS_SDK_VERSION: Version of iOS SDK being used.\n\n# CMAKE_OSX_ARCHITECTURES: Architectures being compiled for (generated from\n\n#    IOS_PLATFORM).\n\n#\n\n# This toolchain defines the following macros for use externally:\n\n#\n\n# set_xcode_property (TARGET XCODE_PROPERTY XCODE_VALUE XCODE_VARIANT)\n\n#   A convenience macro for setting xcode specific properties on targets.\n\n#   Available variants are: All, Release, RelWithDebInfo, Debug, MinSizeRel\n\n#   example: set_xcode_property (myioslib IPHONEOS_DEPLOYMENT_TARGET \"3.1\" \"all\").\n\n#\n\n# find_host_package (PROGRAM ARGS)\n\n#   A macro used to find executable programs on the host system, not within the\n\n#   iOS environment.  Thanks to the android-cmake project for providing the\n\n#   command.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Fix for PThread library not in path\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Get the Xcode version being used.\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Default to building for iPhoneOS if not specified otherwise, and we cannot\n\n# determine the platform from the CMAKE_OSX_ARCHITECTURES variable.  The use\n\n# of CMAKE_OSX_ARCHITECTURES is such that try_compile() projects can correctly\n\n# determine the value of IOS_PLATFORM from the root project, as\n\n# CMAKE_OSX_ARCHITECTURES is propagated to them by CMake.\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Determine the platform name and architectures for use in xcodebuild commands\n\n# from the specified IOS_PLATFORM name.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If user did not specify the SDK root to use, then query xcodebuild for it.\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Specify minimum version of deployment target.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Unless specified, SDK version 8.0 is used by default as minimum target version.\n",
        "Line" : 136,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Use bitcode or not\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Unless specified, enable bitcode support by default\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Get the SDK version information.\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Find the Developer root for the specific iOS platform being compiled for\n\n# from CMAKE_OSX_SYSROOT.  Should be ../../ from SDK specified in\n\n# CMAKE_OSX_SYSROOT.  There does not appear to be a direct way to obtain\n\n# this information from xcrun or xcodebuild.\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Find the C & C++ compilers for the specified SDK.\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Find (Apple's) libtool.\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Configure libtool to be used instead of ar + ranlib to build static libraries.\n\n# This is required on Xcode 7+, but should also work on previous versions of\n\n# Xcode.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Get the version of Darwin (OS X) of the host.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Standard settings.\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Force unset of OS X-specific deployment target (otherwise autopopulated),\n\n# required as of cmake 2.8.10.\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Set the architectures for which to build.\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Skip the platform compiler checks for cross compiling.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# All iOS/Darwin specific settings - some may be redundant.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Note that only Xcode 7+ supports the newer more specific:\n\n# -m${XCODE_IOS_PLATFORM}-version-min flags, older versions of Xcode use:\n\n# -m(ios/ios-simulator)-version-min instead.\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Xcode 7.0+ uses flags we can build directly from XCODE_IOS_PLATFORM.\n",
        "Line" : 237,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# SIMULATOR uses -mios-simulator-version-min.\n",
        "Line" : 242,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Hidden visibilty is required for C++ on iOS.\n",
        "Line" : 258,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# In order to ensure that the updated compiler flags are used in try_compile()\n\n# tests, we have to forcibly set them in the CMake cache, not merely set them\n\n# in the local scope.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Hack: if a new cmake (which uses CMAKE_INSTALL_NAME_TOOL) runs on an old\n\n# build tree (where install_name_tool was hardcoded) and where\n\n# CMAKE_INSTALL_NAME_TOOL isn't in the cache and still cmake didn't fail in\n\n# CMakeFindBinUtils.cmake (because it isn't rerun) hardcode\n\n# CMAKE_INSTALL_NAME_TOOL here to install_name_tool, so it behaves as it did\n\n# before, Alex.\n",
        "Line" : 282,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Set the find root to the iOS developer roots and to user defined paths.\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Default to searching for frameworks first.\n",
        "Line" : 294,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Set up the default search directories for frameworks.\n",
        "Line" : 296,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Only search the specified iOS SDK, not the remainder of the host filesystem.\n",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# This little macro lets you set any XCode specific property.\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# This macro lets you find executable programs on the host system.\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# iOS Supports POSIX MEMALIGN\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 34
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "87e2e9ef37e92306d25b0801ff34b8730cf410aa",
      "LastModified" : "2018-08-31T15:59:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/wickrcrypto/CMakeLists.txt" : {
      "ObjectId" : "ddd60f153dacd6394c4602c113bea82a46a58371",
      "LastModified" : "2018-08-31T15:59:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Enable FIPS if needed\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# SWIG OPTIONS\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/wickrcrypto/swig/CMakeLists.txt" : {
      "ObjectId" : "dd05955d7a2ad097d501ed7b96723ddf11ce5cf8",
      "LastModified" : "2018-08-31T15:59:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add subdirectories for each language if desired\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Install the SWIG files so dependencies can utilize them\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/wickrcrypto/swig/java/CMakeLists.txt" : {
      "ObjectId" : "7b689479bd95f523e141fab968d7f61b89698752",
      "LastModified" : "2019-01-12T20:38:07Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Setup Java JNI SWIG wrapper\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build JNI code with SWIG   \n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Configure the swig target for java\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build JAR File\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/wickrcrypto/swig/node/CMakeLists.txt" : {
      "ObjectId" : "6fb1eff23487d37ab3bdef07cbb20844fd580d9f",
      "LastModified" : "2018-08-31T15:59:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build code with SWIG   \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure the swig target for node\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make the node module output to it's own folder\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/wickrcrypto/swig/php/CMakeLists.txt" : {
      "ObjectId" : "2e430aa069fc2cb0ce737cc916c8b09b287ef4bd",
      "LastModified" : "2018-08-31T15:59:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build code with SWIG   \n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure the swig target for php7\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "2eee4301ec8bd59eef1714eecb0b23ea9117ba38",
      "LastModified" : "2018-08-31T15:59:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# On Windows, the DLL for OpenSSL is needed in order to run tests\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third-party/CMakeLists.txt" : {
      "ObjectId" : "8d973f748e99921dc3ad4cd850fdc5db29559b63",
      "LastModified" : "2018-08-31T15:59:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "third-party/openssl/1.0.2-fips/CMakeLists.txt" : {
      "ObjectId" : "4a6edc3992ed05c04d721568f7f88d7f18fee665",
      "LastModified" : "2018-08-31T15:59:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add FIPS dependency\n",
        "Line" : 131,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# FIPS Setup\n",
        "Line" : 174,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Build OpenSSL\n",
        "Line" : 179,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "third-party/openssl/1.1.1/CMakeLists.txt" : {
      "ObjectId" : "3b8f8ad65ff1138a17450cbf3750289eea18df00",
      "LastModified" : "2019-01-09T19:43:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# if the BUILD_OPENSSL flag supplied by the user run the build\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "third-party/openssl/CMakeLists.txt" : {
      "ObjectId" : "fa726d4bc7e35ba705fc690609f929afd925d779",
      "LastModified" : "2019-01-09T19:43:19Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIPS is only supported on OPENSSL 1.0.2\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# When building in FIPS mode, building OpenSSL is required\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 17
  },
  "ElapsedTime" : 992
}