{
  "Repository" : "29263442",
  "Revision" : "HEAD",
  "ObjectId" : "e5ba042d78bb07a3cd01f9f80803284eddcc8f9f",
  "CommitTime" : "2019-04-10T20:12:51Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "74b7849816c68bf492fd49f76bc735af84bf3ad0",
      "LastModified" : "2019-03-19T03:05:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# NOTE(abdulras) this is the CMake supported way to control whether we generate\n\n# shared or static libraries.  This impacts the behaviour of `add_library` in\n\n# what type of library it generates.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# NOTE(compnerd) use the `BUILD_SHARED_LIBS` variable to determine what type\n\n# of library to build.  If it is true, we will generate shared libraries,\n\n# otherwise we will generate static libraries.\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# NOTE: android has not always provided a libpthread, but uses the pthreads API\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/ClangClCompileRules.cmake" : {
      "ObjectId" : "0265d5ea780d6e2da9e67e0a94d21e7eea75c85a",
      "LastModified" : "2018-06-18T21:13:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# clang-cl interprets paths starting with /U as macro undefines, so we need to\n\n# put a -- before the input file path to force it to be treated as a path.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/DTrace.cmake" : {
      "ObjectId" : "20a28ccaae24e54bf5bee6f96aeb35ca1d9dbd53",
      "LastModified" : "2018-03-17T15:50:29Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/DispatchAppleOptions.cmake" : {
      "ObjectId" : "1f95f881e07f756c9b580c282d088bcaf92bfc97",
      "LastModified" : "2018-03-17T15:50:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FIXME(compnerd) this should use -idirafter\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# hack for xnu/bsd/sys/event.h EVFILT_SOCK declaration\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# TODO(compnerd) link in libpthread headers\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/modules/DispatchCompilerWarnings.cmake" : {
      "ObjectId" : "d568c721ac28503edcd48ba5ea104b5cfad9f2ca",
      "LastModified" : "2019-04-03T19:53:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO: someone needs to provide the msvc equivalent warning flags\n",
        "Line" : 3,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "cmake/modules/DispatchSanitization.cmake" : {
      "ObjectId" : "a0641f52407ef12566cf62f0d04f3d071168a6b2",
      "LastModified" : "2018-03-17T15:50:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(compnerd) ensure that the compiler supports these options before adding\n\n# them.  At the moment, assume that this will just be used with a GNU\n\n# compatible driver and that the options are spelt correctly in light of that.\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "cmake/modules/DispatchUtilities.cmake" : {
      "ObjectId" : "fea3622ec9b782c4ea09cddda18677b9998d676b",
      "LastModified" : "2019-04-03T19:53:53Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/DispatchWindowsSupport.cmake" : {
      "ObjectId" : "87675a78afe8b804e429f51de55351327767cb49",
      "LastModified" : "2019-04-03T19:53:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(compnerd) use a target to avoid re-creating this file all the time\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindBlocksRuntime.cmake" : {
      "ObjectId" : "111a5d634f02d7ed532cd44f63816df31574b3df",
      "LastModified" : "2019-04-03T19:53:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindBlocksRuntime\n\n# -----------------\n\n#\n\n# Find libBlocksRuntime library and headers.\n\n#\n\n# The module defines the following variables:\n\n#\n\n# ##\n\n#\n\n# BlocksRuntime_FOUND        - true if libBlocksRuntime was found\n\n# BlocksRuntime_INCLUDE_DIR  - include search path\n\n# BlocksRuntime_LIBRARIES    - libraries to link\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindLibRT.cmake" : {
      "ObjectId" : "0a9f0d80e5fb007fef342051fe4d49fd2738fcd5",
      "LastModified" : "2019-04-03T19:53:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindLibRT\n\n# ---------\n\n#\n\n# Find librt library and headers.\n\n#\n\n# The mdoule defines the following variables:\n\n#\n\n# ::\n\n#\n\n# LibRT_FOUND       - true if librt was found\n\n# LibRT_INCLUDE_DIR - include search path\n\n# LibRT_LIBRARIES   - libraries to link\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/SwiftSupport.cmake" : {
      "ObjectId" : "adcf42fbc2bcde548f1450a69f06fc6040554cee",
      "LastModified" : "2019-04-03T19:53:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Returns the current achitecture name in a variable\n\n#\n\n# Usage:\n\n#   get_swift_host_arch(result_var_name)\n\n#\n\n# If the current architecture is supported by Swift, sets ${result_var_name}\n\n# with the sanitized host architecture name derived from CMAKE_SYSTEM_PROCESSOR.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "dispatch/CMakeLists.txt" : {
      "ObjectId" : "8b8be8cfb12f5f1bc586dc581102cff79f43bb2d",
      "LastModified" : "2019-04-03T19:53:53Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "man/CMakeLists.txt" : {
      "ObjectId" : "e81b14b411233a6e0958dae79ac057be4f4363af",
      "LastModified" : "2019-04-03T19:53:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(compnerd) add symlinks\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "os/CMakeLists.txt" : {
      "ObjectId" : "282af25f7708ba3ab7be9390f0655d335f9b1c67",
      "LastModified" : "2019-04-03T19:53:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(compnerd) ensure that object_private.h voucher_activity_private.h\n\n# voucher_private.h are included in the source tarball\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "private/CMakeLists.txt" : {
      "ObjectId" : "f77a92d41693abd5aefe8e736a96709babbd7476",
      "LastModified" : "2019-04-03T19:53:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(compnerd) ensure that benchmark.h data_private.h introduction_private.h\n\n# io_private.h layout_private.h mach_private.h private.h queue_private.h\n\n# source_private.h are included in the source tarball\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "21121bf4f83637212a5b14d08e01e9be140eec78",
      "LastModified" : "2019-04-10T18:09:10Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# TODO(compnerd) split DispatchStubs.cc into a separate component for the ObjC\n\n# registration and a separate component for the swift compiler's emission of a\n\n# call to the ObjC autorelease elision entry point.\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# NOTE(compnerd) Today regardless of whether or not ObjC interop is enabled,\n\n# swift will use an autoreleased return value convention for certain CF\n\n# functions (including some that are used/related to dispatch). This means\n\n# that the swift compiler in callers to such functions will call the function,\n\n# and then pass the result of the function to\n\n# objc_retainAutoreleasedReturnValue. In a context where we have ObjC interop\n\n# disabled, we do not have access to the objc runtime so an implementation of\n\n# objc_retainAutoreleasedReturnValue is not available. To work around this, we\n\n# provide a shim for objc_retainAutoreleasedReturnValue in DispatchStubs.cc\n\n# that just calls retain on the object. Once we fix the swift compiler to\n\n# switch to a different model for handling these arguments with objc-interop\n\n# disabled these shims can be eliminated.\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# FIXME(compnerd) add check for -fblocks?\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FIXME(compnerd) add check for -momit-leaf-frame-pointer?\n",
        "Line" : 221,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "tests/CMakeLists.txt" : {
      "ObjectId" : "ba0d7af053f8efa689e9603f98cf4906b84a4857",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# bsdtests.h needs config_ac.h\n",
        "Line" : 32,
        "CharPositionInLine" : 29
      },
      "1" : {
        "Text" : "# For testing in swift.org CI system; make deadlines lenient by default\n\n# to reduce probability of test failures due to machine load.\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# Tests that reliably pass on all platforms\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tests that usually pass, but occasionally fail.\n\n# Excluded by default for purposes of Swift CI\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Not ported to Windows yet\n",
        "Line" : 174,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# an oddball; dispatch_priority.c compiled with -DUSE_SET_TARGET_QUEUE=1\n",
        "Line" : 177,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# add C tests for platform-specific functionality when applicable\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# test dispatch API for various C/CXX language variants\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# test-specific link options\n",
        "Line" : 201,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# test-specific compile options\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    }
  },
  "FileTypes" : {
    "CMAKE" : 17
  },
  "ElapsedTime" : 1173
}