{
  "Repository" : "181023",
  "Revision" : "HEAD",
  "ObjectId" : "18be4732b39416f23fb51ae006e90b867c069281",
  "CommitTime" : "2019-04-17T05:13:45Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "924e8ccd06e1897219d40622493111f681acfc07",
      "LastModified" : "2019-03-04T14:48:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# message(STATUS \"Project version is: ${VER_MAJOR}.${VER_MINOR}.${VER_BUGFIX}.${VER_BUILD} (${VER_STATUS})\")\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# version requirements\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# we need options here, at the top level, because they are used not only in \"src\" subdir, but in the \"dist\" dir too\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/CompileFeature.cmake" : {
      "ObjectId" : "f8104b763616204cfb8a033b59f9653108dc14dd",
      "LastModified" : "2018-06-05T09:39:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Helper function for coupling add_feature_info(), option(), and add_definitions()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/DeployQt5.cmake" : {
      "ObjectId" : "f92e7db2f4149898439a71b98530a44248b3785e",
      "LastModified" : "2018-06-05T09:39:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Borrowed from Avogadro project (https://github.com/OpenChemistry/avogadroapp)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# DeployQt5\n\n# ---------\n\n#\n\n# Functions to help assemble a standalone Qt5 executable.\n\n#\n\n# A collection of CMake utility functions useful for deploying Qt5\n\n# executables.\n\n#\n\n# The following functions are provided by this module:\n\n#\n\n# ::\n\n#\n\n#    write_qt5_conf\n\n#    resolve_qt5_paths\n\n#    fixup_qt5_executable\n\n#    install_qt5_plugin_path\n\n#    install_qt5_plugin\n\n#    install_qt5_executable\n\n#\n\n# Requires CMake 2.8.9 or greater because Qt 5 does.\n\n# Also depends on BundleUtilities.cmake.\n\n#\n\n# ::\n\n#\n\n#   WRITE_QT5_CONF(<qt_conf_dir> <qt_conf_contents>)\n\n#\n\n# Writes a qt.conf file with the <qt_conf_contents> into <qt_conf_dir>.\n\n#\n\n# ::\n\n#\n\n#   RESOLVE_QT5_PATHS(<paths_var> [<executable_path>])\n\n#\n\n# Loop through <paths_var> list and if any don't exist resolve them\n\n# relative to the <executable_path> (if supplied) or the\n\n# CMAKE_INSTALL_PREFIX.\n\n#\n\n# ::\n\n#\n\n#   FIXUP_QT5_EXECUTABLE(<executable> [<qtplugins> <libs> <dirs> <plugins_dir> <request_qt_conf>])\n\n#\n\n# Copies Qt plugins, writes a Qt configuration file (if needed) and\n\n# fixes up a Qt5 executable using BundleUtilities so it is standalone\n\n# and can be drag-and-drop copied to another machine as long as all of\n\n# the system libraries are compatible.\n\n#\n\n# <executable> should point to the executable to be fixed-up.\n\n#\n\n# <qtplugins> should contain a list of the names or paths of any Qt\n\n# plugins to be installed.\n\n#\n\n# <libs> will be passed to BundleUtilities and should be a list of any\n\n# already installed plugins, libraries or executables to also be\n\n# fixed-up.\n\n#\n\n# <dirs> will be passed to BundleUtilities and should contain and\n\n# directories to be searched to find library dependencies.\n\n#\n\n# <plugins_dir> allows an custom plugins directory to be used.\n\n#\n\n# <request_qt_conf> will force a qt.conf file to be written even if not\n\n# needed.\n\n#\n\n# ::\n\n#\n\n#   INSTALL_QT5_PLUGIN_PATH(plugin executable copy installed_plugin_path_var <plugins_dir> <component> <configurations>)\n\n#\n\n# Install (or copy) a resolved <plugin> to the default plugins directory\n\n# (or <plugins_dir>) relative to <executable> and store the result in\n\n# <installed_plugin_path_var>.\n\n#\n\n# If <copy> is set to TRUE then the plugins will be copied rather than\n\n# installed.  This is to allow this module to be used at CMake time\n\n# rather than install time.\n\n#\n\n# If <component> is set then anything installed will use this COMPONENT.\n\n#\n\n# ::\n\n#\n\n#   INSTALL_QT5_PLUGIN(plugin executable copy installed_plugin_path_var <plugins_dir> <component>)\n\n#\n\n# Install (or copy) an unresolved <plugin> to the default plugins\n\n# directory (or <plugins_dir>) relative to <executable> and store the\n\n# result in <installed_plugin_path_var>.  See documentation of\n\n# INSTALL_QT5_PLUGIN_PATH.\n\n#\n\n# ::\n\n#\n\n#   INSTALL_QT5_EXECUTABLE(<executable> [<qtplugins> <libs> <dirs> <plugins_dir> <request_qt_conf> <component>])\n\n#\n\n# Installs Qt plugins, writes a Qt configuration file (if needed) and\n\n# fixes up a Qt5 executable using BundleUtilities so it is standalone\n\n# and can be drag-and-drop copied to another machine as long as all of\n\n# the system libraries are compatible.  The executable will be fixed-up\n\n# at install time.  <component> is the COMPONENT used for bundle fixup\n\n# and plugin installation.  See documentation of FIXUP_QT5_BUNDLE.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================\n\n# Copyright 2011 Mike McQuaid <mike@mikemcquaid.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# The functions defined in this file depend on the fixup_bundle function\n\n# (and others) found in BundleUtilities.cmake\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cmake/Modules/FindLibtorrentRasterbar.cmake" : {
      "ObjectId" : "4e1f946b0924e6c482b268f782e181df76082539",
      "LastModified" : "2018-06-05T09:39:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find libtorrent-rasterbar\n\n#\n\n# If not using pkg-config, you can pre-set LibtorrentRasterbar_CUSTOM_DEFINITIONS\n\n# for definitions unrelated to Boost's separate compilation (which are already\n\n# decided by the LibtorrentRasterbar_USE_STATIC_LIBS variable).\n\n#\n\n# Once done this will define\n\n#  LibtorrentRasterbar_FOUND - System has libtorrent-rasterbar\n\n#  LibtorrentRasterbar_INCLUDE_DIRS - The libtorrent-rasterbar include directories\n\n#  LibtorrentRasterbar_LIBRARIES - The libraries needed to use libtorrent-rasterbar\n\n#  LibtorrentRasterbar_DEFINITIONS - Compiler switches required for using libtorrent-rasterbar\n\n#  LibtorrentRasterbar_OPENSSL_ENABLED - libtorrent-rasterbar uses and links against OpenSSL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Without pkg-config, we can't possibly figure out the correct build flags.\n\n# libtorrent is very picky about those. Let's take a set of defaults and\n\n# hope that they apply. If not, you the user are on your own.\n",
        "Line" : 37,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# Without pkg-config, we can't possibly figure out the correct boost dependencies\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# all possible boost dependencies\n",
        "Line" : 77,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LibtorrentRasterbar_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindQtSingleApplication.cmake" : {
      "ObjectId" : "3420b435f1f40d3651226d2bccba6337d403a825",
      "LastModified" : "2018-07-16T11:28:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the QtSingleApplication includes and library\n\n# which defines\n\n#\n\n# QtSingleApplication_FOUND - system has QtSingleApplication\n\n# QtSingleApplication_INCLUDE_DIR - where to find header QtSingleApplication\n\n# QtSingleApplication_LIBRARIES - the libraries to link against to use QtSingleApplication\n\n# QtSingleApplication_LIBRARY - where to find the QtSingleApplication library (not for general use)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# copyright (c) 2013 TI_Eugene ti.eugene@gmail.com\n\n#\n\n# Redistribution and use is allowed according to the terms of the FreeBSD license.\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# No need to define QtSingleApplication_USE_DLL here, because it's default for Cygwin.\n",
        "Line" : 47,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindSystemd.cmake" : {
      "ObjectId" : "73ebf3693a1c6be3b90e41e13d702e93b50c00e5",
      "LastModified" : "2018-06-05T09:39:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#######\n\n# Find systemd service dir\n\n# sets variables\n\n# SYSTEMD_FOUND\n\n# SYSTEMD_SERVICES_INSTALL_DIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/FunctionReadVersion.cmake" : {
      "ObjectId" : "2e51f7d0203ada7171f7f2b9d9e9771b79279fab",
      "LastModified" : "2018-06-05T09:39:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# function for parsing version variables that are set in version.pri file\n\n# the version identifiers there are defined as follows:\n\n# VER_MAJOR = 3\n\n# VER_MINOR = 4\n\n# VER_BUGFIX = 0\n\n# VER_BUILD = 0\n\n# VER_STATUS = alpha\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# message(STATUS \"version.pri version contents: ${_priFileContents}\")\n\n# the _priFileContents variable contains something like the following:\n\n# VER_MAJOR = 3;VER_MINOR = 4;VER_BUGFIX = 0;VER_BUILD = 0;VER_STATUS = alpha # Should be empty for stable releases!\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# note quotes around _regex, they are needed because the variable contains semicolons\n",
        "Line" : 15,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# message(STATUS \"Matched version string: ${_tmp}\")\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/Modules/MacroConfigureMSVCRuntime.cmake" : {
      "ObjectId" : "b44fd0a64e51a450b1a67f0d3c98dfa013b7b734",
      "LastModified" : "2018-06-05T09:39:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Default to statically-linked runtime.\n",
        "Line" : 3,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# Set compiler options.\n",
        "Line" : 7,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "cmake/Modules/MacroGlibcDetect.cmake" : {
      "ObjectId" : "7e462e11b7450ae0ef5522fd43731e9de762df98",
      "LastModified" : "2018-06-05T09:39:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################\n\n#\n\n# Copyright 2011 Red Hat, Inc.\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you\n\n# may not use this file except in compliance with the License.  You may\n\n# obtain a copy of the License at\n\n#\n\n#    http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n\n#\n\n###############################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "# there are multiple ways to detect glibc, but given nmi's\n\n# cons'd up paths I will trust only gcc.  I guess I could also use\n\n# ldd --version to detect.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/MacroLinkQtComponents.cmake" : {
      "ObjectId" : "931b78abc204e2ae192a727510289ae48d9d6e70",
      "LastModified" : "2018-06-05T09:39:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - macro similar to target_link_libraries, which links Qt components\n\n# names of the components are passed in Qt4/Qt5 agnostic way (Core, DBus, Xml...)\n\n# and the macro links Qt4 ones if QT4_FOUND is set or Qt5 ones if not\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/MacroQbtCompilerSettings.cmake" : {
      "ObjectId" : "6468e7db3bad07432fe861a7ca1d9bde505c8de2",
      "LastModified" : "2018-06-05T09:39:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Sets cache variable QBT_ADDITONAL_FLAGS and QBT_ADDITONAL_CXX_FLAGS to list of additional\n\n# compiler flags for C and C++ (QBT_ADDITONAL_FLAGS) and for C++ only (QBT_ADDITONAL_CXX_FLAGS)\n\n# and appends them to CMAKE_XXX_FLAGS variables.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# It could use add_compile_options(), but then it is needed to use generator expressions,\n\n# and most interesting of them are not compatible with Visual Studio :(\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if (NOT QBT_ADDITONAL_FLAGS)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-Wshadow -Wconversion ?\n",
        "Line" : 11,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "#\"-fstack-protector-all\"\n\n#\"-Werror -Wno-error=deprecated-declarations\"\n",
        "Line" : 15,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "#\"-Weffc++\"\n\n#\"-Werror -Wno-error=cpp\"\n\n# we should modify code to make these ones obsolete\n\n#\"-Wno-error=sign-conversion -Wno-error=float-equal\"\n",
        "Line" : 21,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# GCC 4.8 has problems with std::array and its initialization\n",
        "Line" : 28,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# check for -pedantic\n",
        "Line" : 33,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# if Glibc version is 2.20 or higher, set -D_DEFAULT_SOURCE\n",
        "Line" : 42,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# Clang 5.0 still doesn't support -Wstrict-null-sentinel\n",
        "Line" : 57,
        "CharPositionInLine" : 12
      },
      "10" : {
        "Text" : "# Code should be improved to render this not needed\n",
        "Line" : 63,
        "CharPositionInLine" : 12
      },
      "11" : {
        "Text" : "# GCC supports it\n",
        "Line" : 66,
        "CharPositionInLine" : 12
      },
      "12" : {
        "Text" : "# check whether we can enable -Og optimization for debug build\n\n# also let's enable -march=native for debug builds\n",
        "Line" : 81,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# endif (NOT QBT_ADDITONAL_FLAGS)\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "cmake/Modules/QbtTargetSources.cmake" : {
      "ObjectId" : "0b9d3142ac8ead0514b783933c0430842ad033ae",
      "LastModified" : "2018-06-05T09:39:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# a helper function which appends source to the target\n\n# sources file names are relative to the the target source dir\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/QbtTranslations.cmake" : {
      "ObjectId" : "71966fa7d1070fd59adb94cd79828efda0ccfc10",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# macros to handle translation files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# qbt_add_translations(<target> QRC_FILE <filename> TS_FILES <filenames>)\n\n# handles out of source builds for Qt resource files that include translations\n\n# The function generates translations out of the supplied list of .ts files in the build directory,\n\n# copies the .qrc file there, calls qt5_add_resources() adds its output to the target sources list.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# to make qt5_add_translation() work as we need\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# With AUTORCC enabled rcc is ran by cmake before language files are generated,\n\n# and thus we call rcc explicitly\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/Modules/bundle.cmake" : {
      "ObjectId" : "608dc395d7493556aaef7bcca21d2713f8695df5",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/winconf-mingw.cmake" : {
      "ObjectId" : "70d7ac00a43091dc7f6fdbe8b160ab338139cb40",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# LIBS += libadvapi32 libshell32 libuser32\n\n# LIBS += libcrypto.dll libssl.dll libwsock32 libws2_32 libz libiconv.dll\n\n# LIBS += libpowrprof\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/winconf-msvc.cmake" : {
      "ObjectId" : "89f812b2811b36dfd01d87c35fd49674e2058924",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# i686 arch requires frame pointer preservation\n",
        "Line" : 5,
        "CharPositionInLine" : 8
      },
      "1" : {
        "Text" : "# Enable Wide characters\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Qt4 does not detect it itself\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cmake/Modules/winconf.cmake" : {
      "ObjectId" : "6976657f8b5b14685dbe2210304e43a5fc268904",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Settings for compiling qBittorrent on Windows\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We want to link with static version of\n\n# libtorrent\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# and boost\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set(Boost_USE_STATIC_RUNTIME True)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Here we assume that all required libraries are installed into the same prefix\n\n# with usual unix subdirectories (bin, lib, include)\n\n# if so, we just need to set CMAKE_SYSTEM_PREFIX_PATH\n\n# If it is not the case, individual paths need to be specified manually (see below)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If two version of Qt are installed, separate prefixes are needed most likely\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# it is safe to set Qt dirs even if their files are directly in the prefix\n\n# Qt4\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# for qt 4 we need qmake, Qt5 provides cmake config files\n",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Qt5\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# And now we can set specific values for the Boost and libtorrent libraries.\n\n# The following values are generated from the paths listed above just for an example\n\n# they have to be set to actual locations\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Boost\n\n# set(BOOST_ROOT \"${COMMON_INSTALL_PREFIX}\")\n\n# set(Boost_version_suffix \"1_59\")\n\n# if a link like boost-version/boost -> boost was created or the boost directory was renamed in the same way,\n\n# the following needs adjustment\n\n# set(BOOST_INCLUDEDIR \"${COMMON_INSTALL_PREFIX}/include/boost-${Boost_version_suffix}\")\n\n# set(BOOST_LIBRARYDIR \"${COMMON_INSTALL_PREFIX}/lib/\")\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# libtorrent\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# set(PC_LIBTORRENT_RASTERBAR_INCLUDEDIR \"${COMMON_INSTALL_PREFIX}\")\n\n# set(PC_LIBTORRENT_RASTERBAR_LIBDIR \"${COMMON_INSTALL_PREFIX}/lib\")\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Test 32/64 bits\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "dist/CMakeLists.txt" : {
      "ObjectId" : "be1c8a84f77d8b6d051f2b8dfb2265d912f79a7e",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# to conditionally install desktop-related files\n",
        "Line" : 1,
        "CharPositionInLine" : 46
      },
      "CommentCount" : 1
    },
    "dist/mac/CMakeLists.txt" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dist/unix/CMakeLists.txt" : {
      "ObjectId" : "26b4bea7dbbf280e1de507af900bd62784e9c2d7",
      "LastModified" : "2019-03-04T14:48:49Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "dist/windows/CMakeLists.txt" : {
      "ObjectId" : "f1a8169b9a3cdf4a93282936bbd22460b510200d",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "macxconf.pri" : {
      "ObjectId" : "40373f53676dcceb60bb3c24fec3e8aeb4eab1e1",
      "LastModified" : "2019-03-04T14:48:49Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# The first path is used when the source is being build by packagers (pbuilder/sbuild/etc)\n\n# The second path is used when you manually run the configure script in the root folder (eg when using qt creator)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "qbittorrent.pro" : {
      "ObjectId" : "a7f2a137dfb02cb01b6eec84aa749d45d265b432",
      "LastModified" : "2019-03-04T14:48:49Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Make target to create release tarball. Use 'make tarball'\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For Qt Creator beautifier\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "7ad732815c8010ce434b9e71be67445b089e2337",
      "LastModified" : "2019-03-04T14:48:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# If C++14 is available, use it as libtorent ABI depends on 11/14 version\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Workaround CMake bug (autogen does not pass required parameters to moc)\n\n# Relevant issue: https://gitlab.kitware.com/cmake/cmake/issues/18041\n",
        "Line" : 48,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# defines\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/app/CMakeLists.txt" : {
      "ObjectId" : "45dc52ae48b2a83ccbea7cac95231e7c5c71e448",
      "LastModified" : "2019-03-04T14:48:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# translations\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# With AUTORCC rcc is ran by cmake before language files are generated,\n\n# and thus we call rcc explicitly\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# we have to include resources into the bundle\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# substitute @EXECUTABLE@ in dist/mac/Info.plist\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# installation\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/app/app.pri" : {
      "ObjectId" : "7473ef6250538f3032f200183875bf04c51bbbff",
      "LastModified" : "2019-03-04T14:48:49Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "src/app/qtsingleapplication/CMakeLists.txt" : {
      "ObjectId" : "d3418240fb69a1ef5422d50338517d85370dfc0b",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# disable warning for 3rdparty code\n",
        "Line" : 24,
        "CharPositionInLine" : 61
      },
      "CommentCount" : 1
    },
    "src/app/qtsingleapplication/qtsingleapplication.pri" : {
      "ObjectId" : "1d852858a03c1d79abff3c9aebc79f7b4ca900d8",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "src/app/qtsingleapplication/qtsinglecoreapplication.pri" : {
      "ObjectId" : "d2d6cc3e148ec45c831641f1afd35cebb33cf92d",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "src/base/CMakeLists.txt" : {
      "ObjectId" : "cba9ce9c0adfeadfe58a069ed1c6c2915d94997c",
      "LastModified" : "2019-03-19T03:08:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# headers\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sources\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/base/base.pri" : {
      "ObjectId" : "791217f26e64f7ae75354939f6718ec5a0bfcd24",
      "LastModified" : "2019-03-19T03:08:22Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "src/gui/CMakeLists.txt" : {
      "ObjectId" : "6cfcf96edfd126ade3dc2a3012115b3a732242da",
      "LastModified" : "2019-03-04T14:48:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# headers\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sources\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# forms\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/gui/gui.pri" : {
      "ObjectId" : "587bf123601c1963f92d6c1a3876d2235d6bf36b",
      "LastModified" : "2019-03-04T14:48:49Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "src/gui/lineedit/CMakeLists.txt" : {
      "ObjectId" : "b0c982e7d699f639b0aeb526eb040e1f7ed3e751",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/gui/lineedit/lineedit.pri" : {
      "ObjectId" : "d07a720c68d8aeececc9ca71caad0ca04d15f5bf",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "src/gui/powermanagement/CMakeLists.txt" : {
      "ObjectId" : "17b0395e7f5d0cc61204a5d19fb86541a7674a37",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/gui/powermanagement/powermanagement.pri" : {
      "ObjectId" : "d5834d935b33bac0f8d1eb8af512329a7e88adcf",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "src/gui/properties/CMakeLists.txt" : {
      "ObjectId" : "0adc4a1fa92e9ad650f6e8fff57a3d571d5dcfe8",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# headers\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sources\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# forms\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/gui/properties/properties.pri" : {
      "ObjectId" : "d2c7dbec9b0abcfd8eb960757cf5d67f0f420fb2",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "src/gui/qtnotify/CMakeLists.txt" : {
      "ObjectId" : "7283f1f703ce9a4c71388128fd0696c7e7fe355d",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/gui/qtnotify/qtnotify.pri" : {
      "ObjectId" : "84d288a4a83305db789b211b8160c3c1b26620d1",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "src/gui/rss/CMakeLists.txt" : {
      "ObjectId" : "c09a6e55363a4d6e52cb82f1b85fd6b038813821",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# headers\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#sources\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# forms\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/gui/search/CMakeLists.txt" : {
      "ObjectId" : "a80aee3cc746dcf1b9853f8b7500b38558fbf58e",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# headers\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sources\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# forms\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# search.qrc\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/src.pro" : {
      "ObjectId" : "b8e970e57dbceace378098be09b6758687d7e9a4",
      "LastModified" : "2019-03-04T14:48:49Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# Global\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Platform specific configuration\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Disable debug output in release mode\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# VERSION DEFINES\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Qt defines\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Resource files\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/webui/CMakeLists.txt" : {
      "ObjectId" : "acfeda8d7e7202179b8427c85f1ad12399854ea5",
      "LastModified" : "2019-03-04T14:48:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# headers\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# sources\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/webui/webui.pri" : {
      "ObjectId" : "1f1135d1a89f1a1e8236f64c2c070d816e729633",
      "LastModified" : "2019-03-04T14:48:49Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "unixconf.pri" : {
      "ObjectId" : "fa059c0df0cc2e21d25136b179d7c74550b8aa99",
      "LastModified" : "2019-03-04T14:48:49Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# The first path is used when the source is being build by packagers (pbuilder/sbuild/etc)\n\n# The second path is used when you manually run the configure script in the root folder (eg when using qt creator)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# COMPILATION SPECIFIC\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Man page\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Systemd Service file\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Menu Icon\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Apps icons\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Status icons\n",
        "Line" : 69,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# INSTALL\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "version.pri" : {
      "ObjectId" : "303716c62a424b471ff2e5f65047b86a5f496440",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# keep it all lowercase to match program naming convention on *nix systems\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Define version numbers here\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Should be empty for stable releases!\n",
        "Line" : 9,
        "CharPositionInLine" : 19
      },
      "3" : {
        "Text" : "# Don't touch the rest part\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "winconf.pri" : {
      "ObjectId" : "0c700380f222f8780c9cc03325035fc82f3d7948",
      "LastModified" : "2018-10-14T09:28:51Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# After 1.55 some Windows users reported regular UI freezes.\n\n# This makes ASIO use the pre-1.56 way of doing things. See issue #2003\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure binary is not relocatable, otherwise debugging will fail\n",
        "Line" : 31,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# See an example build configuration in \"conf.pri.windows\"\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Stack trace support can be enabled in 'conf.pri'\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# i686 arch requires frame pointer preservation\n",
        "Line" : 60,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# i686 arch requires frame pointer preservation\n",
        "Line" : 70,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 6
    }
  },
  "FileTypes" : {
    "CMAKE" : 33,
    "QMAKE" : 16
  },
  "ElapsedTime" : 8131
}