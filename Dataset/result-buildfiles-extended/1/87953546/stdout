{
  "Repository" : "87953546",
  "Revision" : "HEAD",
  "ObjectId" : "83c72f3c2f0f24944df6ecff684b81e66ca43fac",
  "CommitTime" : "2019-04-13T08:57:18Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "aff5e9246b54795b526503e5d24a0726d697857d",
      "LastModified" : "2019-01-18T07:00:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#3rd cmake modules\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#check cxx flag in linux system\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#linux\n",
        "Line" : 13,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "########################################################################\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#linux\n",
        "Line" : 37,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#windows\n",
        "Line" : 58,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#log\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#codecov\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "##################################################################\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#add_subdirectory(frame/samples)\n\n#add_subdirectory(frame/tools)\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cmake/FindGcov.cmake" : {
      "ObjectId" : "aea694991eb21a64653427c0747918623dea4f75",
      "LastModified" : "2018-05-28T00:32:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of CMake-codecov.\n\n#\n\n# Copyright (c)\n\n#   2015-2017 RWTH Aachen University, Federal Republic of Germany\n\n#\n\n# See the LICENSE file in this directory for details\n\n#\n\n# Written by Alexander Haase, alexander.haase@rwth-aachen.de\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include required Modules\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search for gcov binary.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Gcov evaluation is dependent on the used compiler. Check gcov support for\n\n# each compiler that is used. If gcov binary was already found for this\n\n# compiler, do not try to find it again.\n",
        "Line" : 22,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Some distributions like OSX (homebrew) ship gcov with the compiler\n\n# version appended as gcov-x. To find this binary we'll build the\n\n# suggested binary name with the compiler version.\n",
        "Line" : 29,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# Some distributions like Debian ship llvm-cov with the compiler\n\n# version appended as llvm-cov-x.y. To find this binary we'll build\n\n# the suggested binary name with the compiler version.\n",
        "Line" : 39,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "# llvm-cov prior version 3.5 seems to be not working with coverage\n\n# evaluation tools, but these versions are compatible with the gcc\n\n# gcov tool.\n",
        "Line" : 45,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# set additional parameters\n",
        "Line" : 59,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# Fall back to gcov binary if llvm-cov was not found or is\n\n# incompatible. This is the default on OSX, but may crash on\n\n# recent Linux versions.\n",
        "Line" : 69,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Add a new global target for all gcov targets. This target could be used to\n\n# generate the gcov files for the whole project instead of calling <TARGET>-gcov\n\n# for each target.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This function will add gcov evaluation for target <TNAME>. Only sources of\n\n# this target will be evaluated and no dependencies will be added. It will call\n\n# Gcov on any source file of <TNAME> once and store the gcov file in the same\n\n# directory.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# We don't have to check, if the target has support for coverage, thus this\n\n# will be checked by add_coverage_target in Findcoverage.cmake. Instead we\n\n# have to determine which gcov binary to use.\n",
        "Line" : 110,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# If no gcov binary was found, coverage data can't be evaluated.\n",
        "Line" : 127,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# call gcov\n",
        "Line" : 141,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# add target for gcov evaluation of <TNAME>\n",
        "Line" : 152,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# add evaluation target to the global gcov target.\n",
        "Line" : 155,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 16
    },
    "cmake/FindLcov.cmake" : {
      "ObjectId" : "eb7c2a74a4c9a5adb0d340af9002c91fc685de14",
      "LastModified" : "2018-05-28T00:32:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of CMake-codecov.\n\n#\n\n# Copyright (c)\n\n#   2015-2017 RWTH Aachen University, Federal Republic of Germany\n\n#\n\n# See the LICENSE file in this directory for details\n\n#\n\n# Written by Alexander Haase, alexander.haase@rwth-aachen.de\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# configuration\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Search for Gcov which is used by Lcov.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This function will add lcov evaluation for target <TNAME>. Only sources of\n\n# this target will be evaluated and no dependencies will be added. It will call\n\n# geninfo on any source file of <TNAME> once and store the info file in the same\n\n# directory.\n\n#\n\n# Note: This function is only a wrapper to define this function always, even if\n\n#   coverage is not supported by the compiler or disabled. This function must\n\n#   be defined here, because the module will be exited, if there is no coverage\n\n#   support by the compiler or it is disabled by the user.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# capture initial coverage data\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# capture coverage data after execution\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# include required Modules\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Search for required lcov binaries.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# enable genhtml C++ demangeling, if c++filt is found.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# enable no-external flag for lcov, if available.\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# If Lcov was not found, exit module now.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Create directories to be used.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This function will merge lcov files to a single target file. Additional lcov\n\n# flags may be set with setting LCOV_EXTRA_FLAGS before calling this function.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Remove ${OUTFILE} from ${ARGV} and generate lcov parameters with files.\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Generate merged file.\n",
        "Line" : 100,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Add a new global target to generate initial coverage reports for all targets.\n\n# This target will be used to generate the global initial info file, which is\n\n# used to gather even empty report data.\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# This function will add initial capture of coverage data for target <TNAME>,\n\n# which is needed to get also data for objects, which were not loaded at\n\n# execution time. It will call geninfo for every source file of <TNAME> once and\n\n# store the info file in the same directory.\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# We don't have to check, if the target has support for coverage, thus this\n\n# will be checked by add_coverage_target in Findcoverage.cmake. Instead we\n\n# have to determine which gcov binary to use.\n",
        "Line" : 135,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# If no gcov binary was found, coverage data can't be evaluated.\n",
        "Line" : 152,
        "CharPositionInLine" : 1
      },
      "19" : {
        "Text" : "# generate empty coverage files\n",
        "Line" : 165,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# Concatenate all files generated by geninfo to a single file per target.\n",
        "Line" : 178,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# add geninfo file generation to global lcov-geninfo target\n",
        "Line" : 184,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# This function will generate the global info file for all targets. It has to be\n\n# called after all other CMake functions in the root CMakeLists.txt file, to get\n\n# a full list of all targets that generate coverage data.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Skip this function (and do not create the following targets), if there are\n\n# no input files.\n",
        "Line" : 196,
        "CharPositionInLine" : 1
      },
      "24" : {
        "Text" : "# Add a new target to merge the files of all targets.\n",
        "Line" : 202,
        "CharPositionInLine" : 1
      },
      "25" : {
        "Text" : "# Add a new global target to generate coverage reports for all targets. This\n\n# target will be used to generate the global info file.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# This function will add capture of coverage data for target <TNAME>, which is\n\n# needed to get also data for objects, which were not loaded at execution time.\n\n# It will call geninfo for every source file of <TNAME> once and store the info\n\n# file in the same directory.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# We don't have to check, if the target has support for coverage, thus this\n\n# will be checked by add_coverage_target in Findcoverage.cmake. Instead we\n\n# have to determine which gcov binary to use.\n",
        "Line" : 226,
        "CharPositionInLine" : 1
      },
      "28" : {
        "Text" : "# If no gcov binary was found, coverage data can't be evaluated.\n",
        "Line" : 243,
        "CharPositionInLine" : 1
      },
      "29" : {
        "Text" : "# Generate coverage files. If no .gcda file was generated during\n\n# execution, the empty coverage file will be used instead.\n",
        "Line" : 256,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# Concatenate all files generated by geninfo to a single file per target.\n",
        "Line" : 273,
        "CharPositionInLine" : 1
      },
      "31" : {
        "Text" : "# add geninfo file generation to global lcov-capture target\n",
        "Line" : 278,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# Add target for generating html output for this target only.\n",
        "Line" : 284,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# This function will generate the global info file for all targets. It has to be\n\n# called after all other CMake functions in the root CMakeLists.txt file, to get\n\n# a full list of all targets that generate coverage data.\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Skip this function (and do not create the following targets), if there are\n\n# no input files.\n",
        "Line" : 301,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# Add a new target to merge the files of all targets.\n",
        "Line" : 307,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# Add a new global target for all lcov targets. This target could be used to\n\n# generate the lcov html output for the whole project instead of calling\n\n# <TARGET>-geninfo and <TARGET>-genhtml for each target. It will also be\n\n# used to generate a html site for all project data together instead of one\n\n# for each target.\n",
        "Line" : 312,
        "CharPositionInLine" : 1
      },
      "37" : {
        "Text" : "# Add a new global target to generate the lcov html report for the whole project\n\n# instead of calling <TARGET>-genhtml for each target (to create an own report\n\n# for each target). Instead of the lcov target it does not require geninfo for\n\n# all targets, so you have to call <TARGET>-geninfo to generate the info files\n\n# the targets you'd like to have in your report or lcov-geninfo for generating\n\n# info files for all targets before calling lcov-genhtml.\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 38
    },
    "cmake/Findcodecov.cmake" : {
      "ObjectId" : "1e1319f85d6933abe37cfdce7358433f9667a8ee",
      "LastModified" : "2018-05-28T00:32:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file is part of CMake-codecov.\n\n#\n\n# Copyright (c)\n\n#   2015-2017 RWTH Aachen University, Federal Republic of Germany\n\n#\n\n# See the LICENSE file in this directory for details\n\n#\n\n# Written by Alexander Haase, alexander.haase@rwth-aachen.de\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add an option to choose, if coverage should be enabled or not. If enabled\n\n# marked targets will be build with coverage support and appropriate targets\n\n# will be added. If disabled coverage will be ignored for *ALL* targets.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# gcc and clang\n",
        "Line" : 18,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# gcc and clang fallback\n",
        "Line" : 21,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# Add coverage support for target ${TNAME} and register target for coverage\n\n# evaluation. If coverage is disabled or not supported, this function will\n\n# simply do nothing.\n\n#\n\n# Note: This function is only a wrapper to define this function always, even if\n\n#   coverage is not supported by the compiler or disabled. This function must\n\n#   be defined here, because the module will be exited, if there is no coverage\n\n#   support by the compiler or it is disabled by the user.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# only add coverage for target, if coverage is support and enabled.\n",
        "Line" : 35,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "# Add global target to gather coverage information after all targets have been\n\n# added. Other evaluation functions could be added here, after checks for the\n\n# specific module have been passed.\n\n#\n\n# Note: This function is only a wrapper to define this function always, even if\n\n#   coverage is not supported by the compiler or disabled. This function must\n\n#   be defined here, because the module will be exited, if there is no coverage\n\n#   support by the compiler or it is disabled by the user.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# add lcov evaluation\n",
        "Line" : 53,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Exit this module, if coverage is disabled. add_coverage is defined before this\n\n# return, so this module can be exited now safely without breaking any build-\n\n# scripts.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Find the required flags foreach language.\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Coverage flags are not dependent on language, but the used compiler. So\n\n# instead of searching flags foreach language, search flags foreach compiler\n\n# used.\n",
        "Line" : 77,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# CheckFortranCompilerFlag was introduced in CMake 3.x. To be\n\n# compatible with older Cmake versions, we will check if this\n\n# module is present before we use it. Otherwise we will define\n\n# Fortran coverage support as not available.\n",
        "Line" : 99,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Helper function to get the language of a source file.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Helper function to get the relative path of the source file destination path.\n\n# This path is needed by FindGcov and FindLcov cmake files to locate the\n\n# captured data.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# If expression was found, SOURCEFILE is a generator-expression for an\n\n# object library. Currently we found no way to call this function automatic\n\n# for the referenced target, so it must be called in the directoryso of the\n\n# object library definition.\n",
        "Line" : 159,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# get the right path for file\n",
        "Line" : 174,
        "CharPositionInLine" : 1
      },
      "16" : {
        "Text" : "# Add coverage support for target ${TNAME} and register target for coverage\n\n# evaluation.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Check if all sources for target use the same compiler. If a target uses\n\n# e.g. C and Fortran mixed and uses different compilers (e.g. clang and\n\n# gfortran) this can trigger huge problems, because different compilers may\n\n# use different implementations for code coverage.\n",
        "Line" : 186,
        "CharPositionInLine" : 1
      },
      "18" : {
        "Text" : "# If expression was found, FILE is a generator-expression for an object\n\n# library. Object libraries will be ignored.\n",
        "Line" : 194,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# A warning has been printed before, so just return if flags for this\n\n# compiler aren't available.\n",
        "Line" : 224,
        "CharPositionInLine" : 2
      },
      "20" : {
        "Text" : "# enable coverage for target\n",
        "Line" : 230,
        "CharPositionInLine" : 1
      },
      "21" : {
        "Text" : "# Add gcov files generated by compiler to clean target.\n",
        "Line" : 237,
        "CharPositionInLine" : 1
      },
      "22" : {
        "Text" : "# Include modules for parsing the collected data and output it in a readable\n\n# format (like gcov and lcov).\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 23
    },
    "frame/app/CMakeLists.txt" : {
      "ObjectId" : "e8dd35fecbf54c6de8b9f53ddbe44adc18860e94",
      "LastModified" : "2019-01-18T06:01:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Set rpath\n",
        "Line" : 11,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "frame/proto/CMakeLists.txt" : {
      "ObjectId" : "33fe41f319c46f74b1c7d1f178e56dc6e7097019",
      "LastModified" : "2019-03-19T06:06:24Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Set rpath\n",
        "Line" : 2,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "frame/samples/CMakeLists.txt" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2019-01-18T06:01:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "frame/sdk/CMakeLists.txt" : {
      "ObjectId" : "88b2d81c247d1770b3841f7136b23cead4244af5",
      "LastModified" : "2019-01-18T06:01:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Define sdk plugin building macro\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Set rpath\n",
        "Line" : 4,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "###################################################################################################\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "frame/sdk/bus/CMakeLists.txt" : {
      "ObjectId" : "d38a318e577db88de2834c0774d04011007b61f7",
      "LastModified" : "2019-01-18T06:01:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Set rpath\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "frame/sdk/kernel/CMakeLists.txt" : {
      "ObjectId" : "464f4959fbe919c71b973a492f124d4674b985d5",
      "LastModified" : "2019-01-18T06:01:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "frame/sdk/net/CMakeLists.txt" : {
      "ObjectId" : "d667c2b64a4c2f2e9ae9d34277d1cb759a41e3f6",
      "LastModified" : "2019-01-18T06:01:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Set rpath\n",
        "Line" : 4,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "frame/sdk/utility/CMakeLists.txt" : {
      "ObjectId" : "309c5ad1306212e387d33ea68684e5192e79613f",
      "LastModified" : "2019-01-18T06:01:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "frame/server/CMakeLists.txt" : {
      "ObjectId" : "c528f889b7c8116baef3082e3d37cb178549aba6",
      "LastModified" : "2019-01-18T06:01:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Define server plugin building macro\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Set rpath\n",
        "Line" : 6,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "###################################################################################################\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "frame/server/dir/CMakeLists.txt" : {
      "ObjectId" : "002f8537b389e19beba145c498a1759ebcd81173",
      "LastModified" : "2019-01-18T06:01:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "frame/server/game/CMakeLists.txt" : {
      "ObjectId" : "ed87d82cb565795310deac9e835edd754c0da00e",
      "LastModified" : "2019-01-18T06:01:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "frame/server/login/CMakeLists.txt" : {
      "ObjectId" : "8f8f47f23b542eacbb6023f5fb822570328672b3",
      "LastModified" : "2019-01-18T06:01:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "frame/server/master/CMakeLists.txt" : {
      "ObjectId" : "7f0fa956a216e1e19cf806452f51234715ed9938",
      "LastModified" : "2019-01-18T06:01:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "frame/server/proxy/CMakeLists.txt" : {
      "ObjectId" : "f05addfa41638d08765ffeb5a094e6669f695c36",
      "LastModified" : "2019-01-18T06:01:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "frame/server/router/CMakeLists.txt" : {
      "ObjectId" : "b5c6755eb8a88c590adb4ccda5d604601eea4476",
      "LastModified" : "2019-01-18T06:01:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "frame/server/world/CMakeLists.txt" : {
      "ObjectId" : "b8241590ca7d75a3aab6e4e81eb65470f30fab80",
      "LastModified" : "2019-01-18T06:01:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "frame/tools/CMakeLists.txt" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2019-01-18T06:01:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "plugins/CMakeLists.txt" : {
      "ObjectId" : "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
      "LastModified" : "2019-01-18T06:01:47Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 22
  },
  "ElapsedTime" : 1450
}