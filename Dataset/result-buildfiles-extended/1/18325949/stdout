{
  "Repository" : "18325949",
  "Revision" : "HEAD",
  "ObjectId" : "997391815c0bf8db3acd9fa5fb7fa69aca66216a",
  "CommitTime" : "2015-10-17T00:01:57Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "799b39b9340bd5953ede823282c1247c00b09d15",
      "LastModified" : "2015-08-11T07:00:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Specify the install prefix as the exec directory unless specified\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#Define the default build type\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -fpermissive\")\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#Add custom modules to module path\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#Find the ROOT package and configure the flags and paths\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#Find the zlib fro compression\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#Include our headers and continue in the source directory\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/modules/FindROOT.cmake" : {
      "ObjectId" : "ab873f4801f334ed9d248f6bce531aa0cf731fd2",
      "LastModified" : "2015-08-07T02:05:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Finds ROOT instalation\n\n# This module sets up ROOT information\n\n# It defines:\n\n# ROOT_FOUND          If the ROOT is found\n\n# ROOT_INCLUDE_DIR    PATH to the include directory\n\n# ROOT_INCLUDE_DIRS   PATH to the include directories (not cached)\n\n# ROOT_LIBRARIES      Most common libraries\n\n# ROOT_<name>_LIBRARY Full path to the library <name>\n\n# ROOT_LIBRARY_DIR    PATH to the library directory\n\n#\n\n# Updated by K. Smith (ksmith37@nd.edu) to properly handle\n\n#  dependencies in ROOT_GENERATE_DICTIONARY\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# function ROOT_GENERATE_DICTIONARY( dictionary\n\n#                                    header1 header2 ...\n\n#                                    LINKDEF linkdef1 ...\n\n#                                    OPTIONS opt1...)\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#---Get the list of include directories------------------\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "#---Get the list of header files-------------------------\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Is this header a globbing expression?\n",
        "Line" : 88,
        "CharPositionInLine" : 29
      },
      "5" : {
        "Text" : "# skip LinkDefs from globbing result\n",
        "Line" : 91,
        "CharPositionInLine" : 34
      },
      "6" : {
        "Text" : "#---Get LinkDef.h file------------------------------------\n",
        "Line" : 101,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#---call rootcint------------------------------------------\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#----------------------------------------------------------------------------\n\n# function REFLEX_GENERATE_DICTIONARY(dictionary\n\n#                                     header1 header2 ...\n\n#                                     SELECTION selectionfile ...\n\n#                                     OPTIONS opt1...)\n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#---Get the list of header files-------------------------\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "#---Get Selection file------------------------------------\n",
        "Line" : 134,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#---Get the list of include directories------------------\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#---Get preprocessor definitions--------------------------\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#---Nanes and others---------------------------------------\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#set(gccxmlopts \"--gccxmlopt=\\'--gccxml-cxxflags -m64 \\'\")\n",
        "Line" : 156,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "#set(rootmapname ${dictionary}Dict.rootmap)\n\n#set(rootmapopts --rootmap=${rootmapname} --rootmap-lib=${libprefix}${dictionary}Dict)\n\n#---Check GCCXML and get path-----------------------------\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#---Actual command----------------------------------------\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 17
    },
    "goddess/source/CMakeLists.txt" : {
      "ObjectId" : "ddd51b90e2560d1afe28bfb826f6319698e1bfe6",
      "LastModified" : "2015-08-21T14:16:13Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#The ORRUBA dictionary must be Position Independent Code\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "hribf/CMakeLists.txt" : {
      "ObjectId" : "6a3965ad1dd7bf0ab2b3146a17fdbf6fb398731c",
      "LastModified" : "2015-08-07T02:05:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "hribf/source/CMakeLists.txt" : {
      "ObjectId" : "4ff065e9e9ba5ba46c7757cfad25a48cee5c5c10",
      "LastModified" : "2015-08-07T02:05:12Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "scripts/CMakeLists.txt" : {
      "ObjectId" : "7aac1d932a6d73e20d06f3630b415837eb3a073c",
      "LastModified" : "2015-08-21T14:16:13Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "source/CMakeLists.txt" : {
      "ObjectId" : "33282eafccc822d73df2735fe0995df7c84cd696",
      "LastModified" : "2015-08-09T17:19:25Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#We force the compiler to treat .c files as c++.\n\n# (Seems the original authors used .c as a c++ extension?)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_executable(GEBFilter GEBFilter.c GF_veto_cube.c)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#add_executable(ag2mode2 ag2mode2.c spe_fun.c)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#install(TARGETS GEBSort_nogeb mkMap GEBFilter GEBMerge ag2mode2 DESTINATION ${CMAKE_INSTALL_PREFIX})\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 7
  },
  "ElapsedTime" : 1098
}