{
  "Repository" : "23514367",
  "Revision" : "HEAD",
  "ObjectId" : "be3b9818d15a3afc44ca976ac7a26fa70dec25db",
  "CommitTime" : "2018-11-28T10:30:39Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "1985f6529bf67aa0363e9349771fc7e77c6006ee",
      "LastModified" : "2016-09-06T18:17:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add the custom cmake scripts\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# use .. because TBE_LEVELS_DIR already ends in 'levels'\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# use rpavlik's cmake scripts to fetch the current git version hash\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Makefile" : {
      "ObjectId" : "01ed085b8639222be242de299129acaba721b071",
      "LastModified" : "2016-11-17T16:30:29Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile to 'simplify' using cmake\n\n#\n\n# Possible targets:\n\n#   - all         - Use only once, it builds everything and installs the built tree for local runs.\n\n#   - slow        - For incremental builds after running 'all'.\n\n#   - clean       - Removes all build artefacts and the installed tree.\n\n#   - sanitizers  - Will build using clang++ and ASAN/USAN/LSAN, the 'google sanitizers'.\n\n#                   The build will output extra messages for run-time problems, useful for debugging.\n\n#   - regression  - Will run a set of levels with its intended solution to validate the game engine\n\n#                   is still operating as expected. Spoilers! For developers only.\n\n#   - package     - Will build installer packages.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if you want to build Release, just call \"make BUILDTYPE=Release all\"\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# if you want to build without docs, just call \"make WITH_DOCS=off all\"\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# levels currently known to fail regression:\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# zoingandboom (cannot set phone numbers using hints yet)\n",
        "Line" : 80,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 5
    },
    "cmake/GetGitRevisionDescription.cmake" : {
      "ObjectId" : "85eae1562fe2011e9800787819b21f30a8898eb4",
      "LastModified" : "2016-05-25T21:33:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Returns a version string from Git\n\n#\n\n# These functions force a re-configure on each git commit so that you can\n\n# trust the values of the variables in your build system.\n\n#\n\n#  get_git_head_revision(<refspecvar> <hashvar> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the refspec and sha hash of the current head revision\n\n#\n\n#  git_describe(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe on the source tree, and adjusting\n\n# the output so that it tests false if an error occurs.\n\n#\n\n#  git_get_exact_tag(<var> [<additional arguments to git describe> ...])\n\n#\n\n# Returns the results of git describe --exact-match on the source tree,\n\n# and adjusting the output so that it tests false if there was no exact\n\n# matching tag.\n\n#\n\n# Requires CMake 2.6 or newer (uses the 'function' command)\n\n#\n\n# Original Author:\n\n# 2009-2010 Ryan Pavlik <rpavlik@iastate.edu> <abiryan@ryand.net>\n\n# http://academic.cleardefinition.com\n\n# Iowa State University HCI Graduate Program/VRAC\n\n#\n\n# Copyright Iowa State University 2009-2010.\n\n# Distributed under the Boost Software License, Version 1.0.\n\n# (See accompanying file LICENSE_1_0.txt or copy at\n\n# http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We must run the following at \"include\" time, not at function call time,\n\n# to find the path to this module rather than the path to a calling list file\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# .git dir not found, search parent directories\n",
        "Line" : 45,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "# We have reached the root directory, we are not in git\n",
        "Line" : 49,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# check if this is a submodule\n",
        "Line" : 56,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# TODO sanitize\n\n#if((${ARGN}\" MATCHES \"&&\") OR\n\n#\t(ARGN MATCHES \"||\") OR\n\n#\t(ARGN MATCHES \"\\\\;\"))\n\n#\tmessage(\"Please report the following error to the project!\")\n\n#\tmessage(FATAL_ERROR \"Looks like someone's doing something nefarious with git_describe! Passed arguments ${ARGN}\")\n\n#endif()\n",
        "Line" : 97,
        "CharPositionInLine" : 1
      },
      "6" : {
        "Text" : "#message(STATUS \"Arguments to execute_process: ${ARGN}\")\n",
        "Line" : 105,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 7
    },
    "cmake/Linux.cmake" : {
      "ObjectId" : "6751da97d3ba4fc953929321ce6248909b2da314",
      "LastModified" : "2016-09-06T19:13:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# i.e. Linux variants\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###\n\n### below, you'll find all packaging info specific to Linux.\n\n###\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DEB and RPM packages\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# TGZ and SH packagers\n\n# for UNIX (including Linux), no path included\n",
        "Line" : 27,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# we use a special License file for the self-extracting archive\n\n# so we can display both license info *and* give a few instructions\n",
        "Line" : 31,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA \"${CMAKE_CURRENT_SOURCE_DIR}/installer/debian/postinst;${CMAKE_CURRENT_SOURCE_DIR}/installer/debian/prerm;\" )\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/MacOSX-libs.cmake" : {
      "ObjectId" : "ca97eef983e9ebb66d5fcab0ed19478f73a2f8eb",
      "LastModified" : "2016-09-06T20:12:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##\n\n## Detect if the \"port\" command is valid on this system; if so, return full path\n\n##\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# \"/opt/local/bin/port\" doesn't have libs, so we get the parent directory\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# \"/opt/local/bin\" doesn't have libs, so we get the parent directory\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# \"/opt/local\" is where MacPorts lives, add `/lib` suffix and link\n",
        "Line" : 15,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cmake/MacOSX.cmake" : {
      "ObjectId" : "47e0bfad226f0ee61df5a16f3932cc7bdb01e31e",
      "LastModified" : "2016-09-06T20:12:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# set(CPACK_SET_DESTDIR \"ON\")\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Win32.cmake" : {
      "ObjectId" : "41bffd129aa3629efdfe2f41c948bec35a28f0e2",
      "LastModified" : "2016-09-05T20:46:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this cmake file handles custom settings for Win32 builds\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Windows has a rather flat directory layout.\n\n# At least on Win, the CMAKE_INSTALL_PREFIX is the location inside\n\n# 'build' where all files are copied prior to creating the package.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# There is a bug in NSIS that does not handle full unix paths properly. Make\n\n# sure there is at least one set of four (4) backslashes.\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#SET(CPACK_NSIS_MUI_FINISHPAGE_RUN \"tbe.exe\")\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Supply the DLL files on Windows - no static linking :-(\n\n# Technically speaking, this is a hack. But who cares?\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# On Windows, package qt's own qm files for standard strings like yes/non/cancel.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Windows also needs qpa file in the bindir/platforms directory\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "i18n/CMakeLists.txt" : {
      "ObjectId" : "937bb19b84ed78e2492207e2b379a615278715ef",
      "LastModified" : "2016-09-05T20:46:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# i18n handling for The Butterfly Effect\n\n# Note that the actual translations are handled through transifex\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n###  TBE Application translations\n\n###\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Level translations\n\n#\n\n# Not using FindGettext because it appears to be broken?\n\n# The below is a simplified version of gnucash/po/CMakeLists.txt\n\n#\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "i18n/cleanlevels.pro" : {
      "ObjectId" : "f2906b420867abadf403cfc757e7ae92e573fe8e",
      "LastModified" : "2016-09-05T20:46:43Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "imagery/CMakeLists.txt" : {
      "ObjectId" : "e894e05e692c0bf996c32ff73760d37e7971a723",
      "LastModified" : "2016-10-13T20:40:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this CMakeLists.txt file handles the imagery directory:\n\n#  * make sure all files are put into the ${TBE_IMAGES_DIR} directory itself\n\n#    (because TBE is lazy and only looks in that directory)\n\n#  * concatenate all README files to a single file that contains info\n\n#    on all files in the images directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#include(\"illustrations/illustrations.txt\")\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "imagery/icons/CMakeLists.txt" : {
      "ObjectId" : "73147ae674cc40e7557c95eccc3c38e52dc1ffac",
      "LastModified" : "2016-11-21T18:58:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this file is meant to be included by the parent CMakeFiles.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "imagery/illustrations/CMakeLists.txt" : {
      "ObjectId" : "4243182c5dc2e31dce5f6827b4bcd2981ecb90a6",
      "LastModified" : "2016-09-05T20:46:43Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "imagery/src/CMakeLists.txt" : {
      "ObjectId" : "3154f82911a9ea50e1bde48cc8d16f041a870bb9",
      "LastModified" : "2016-09-05T20:46:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this CMake script will iterate over all directories\n\n# and include the CMakeIncludeMe.txt file in there\n\n#\n\n# it's all hardcoded to make sure that CMake can actually\n\n# do its work - it doesn't like globbing\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#handledir(\"RatBread\")\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#handledir(\"StopWatch\")\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "imagery/style/CMakeLists.txt" : {
      "ObjectId" : "b0a9a5dbfd87437437d9c4ff68c7bca1f47225f2",
      "LastModified" : "2016-11-21T18:58:41Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this file is meant to be included by the parent CMakeFiles.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "imagery/style/Makefile" : {
      "ObjectId" : "12a44a9548a93861ba5c50bd210785d76eb7ec37",
      "LastModified" : "2016-09-05T20:46:43Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "imagery/textures/CMakeLists.txt" : {
      "ObjectId" : "5d7369b1d42047924b54a22b05819ef6a0462b09",
      "LastModified" : "2016-09-05T20:46:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# this file is meant to be included by the parent CMakeFiles.txt\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/Box2D/CMakeLists.txt" : {
      "ObjectId" : "aefe61eb5974a0cacbc44e61e44c120606439341",
      "LastModified" : "2016-09-05T20:46:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# if(BOX2D_BUILD_SHARED)\n\n# \tadd_library(Box2D_shared SHARED\n\n# \t\t${BOX2D_General_HDRS}\n\n# \t\t${BOX2D_Joints_SRCS}\n\n# \t\t${BOX2D_Joints_HDRS}\n\n# \t\t${BOX2D_Contacts_SRCS}\n\n# \t\t${BOX2D_Contacts_HDRS}\n\n# \t\t${BOX2D_Dynamics_SRCS}\n\n# \t\t${BOX2D_Dynamics_HDRS}\n\n# \t\t${BOX2D_Common_SRCS}\n\n# \t\t${BOX2D_Common_HDRS}\n\n# \t\t${BOX2D_Shapes_SRCS}\n\n# \t\t${BOX2D_Shapes_HDRS}\n\n# \t\t${BOX2D_Collision_SRCS}\n\n# \t\t${BOX2D_Collision_HDRS}\n\n# \t\t${BOX2D_Rope_SRCS}\n\n# \t\t${BOX2D_Rope_HDRS}\n\n# \t)\n\n# \tset_target_properties(Box2D_shared PROPERTIES\n\n# \t\tOUTPUT_NAME \"Box2D\"\n\n# \t\tCLEAN_DIRECT_OUTPUT 1\n\n# \t\tVERSION ${BOX2D_VERSION}\n\n# \t)\n\n# endif()\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if(BOX2D_BUILD_STATIC)\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# endif()\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# # These are used to create visual studio folders.\n\n# source_group(Collision FILES ${BOX2D_Collision_SRCS} ${BOX2D_Collision_HDRS})\n\n# source_group(Collision\\\\Shapes FILES ${BOX2D_Shapes_SRCS} ${BOX2D_Shapes_HDRS})\n\n# source_group(Common FILES ${BOX2D_Common_SRCS} ${BOX2D_Common_HDRS})\n\n# source_group(Dynamics FILES ${BOX2D_Dynamics_SRCS} ${BOX2D_Dynamics_HDRS})\n\n# source_group(Dynamics\\\\Contacts FILES ${BOX2D_Contacts_SRCS} ${BOX2D_Contacts_HDRS})\n\n# source_group(Dynamics\\\\Joints FILES ${BOX2D_Joints_SRCS} ${BOX2D_Joints_HDRS})\n\n# source_group(Include FILES ${BOX2D_General_HDRS})\n\n# source_group(Rope FILES ${BOX2D_Rope_SRCS} ${BOX2D_Rope_HDRS})\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# if(BOX2D_INSTALL)\n\n# \t# install headers\n\n# \tinstall(FILES ${BOX2D_General_HDRS} DESTINATION include/Box2D)\n\n# \tinstall(FILES ${BOX2D_Collision_HDRS} DESTINATION include/Box2D/Collision)\n\n# \tinstall(FILES ${BOX2D_Shapes_HDRS} DESTINATION include/Box2D/Collision/Shapes)\n\n# \tinstall(FILES ${BOX2D_Common_HDRS} DESTINATION include/Box2D/Common)\n\n# \tinstall(FILES ${BOX2D_Dynamics_HDRS} DESTINATION include/Box2D/Dynamics)\n\n# \tinstall(FILES ${BOX2D_Contacts_HDRS} DESTINATION include/Box2D/Dynamics/Contacts)\n\n# \tinstall(FILES ${BOX2D_Joints_HDRS} DESTINATION include/Box2D/Dynamics/Joints)\n\n# \tinstall(FILES ${BOX2D_Rope_HDRS} DESTINATION include/Box2D/Rope)\n\n# \n\n# \t# install libraries\n\n# \tif(BOX2D_BUILD_SHARED)\n\n# \t\tinstall(TARGETS Box2D_shared EXPORT Box2D-targets \n\n#                   LIBRARY DESTINATION ${LIB_INSTALL_DIR}\n\n#                   ARCHIVE DESTINATION ${LIB_INSTALL_DIR}\n\n#                   RUNTIME DESTINATION bin)\n\n# \tendif()\n\n# \tif(BOX2D_BUILD_STATIC)\n\n# \t\tinstall(TARGETS Box2D EXPORT Box2D-targets DESTINATION ${LIB_INSTALL_DIR})\n\n# \tendif()\n\n# \n\n# \t# install build system hooks for third-party apps\n\n# \tinstall(EXPORT Box2D-targets DESTINATION ${LIB_INSTALL_DIR}/Box2D)\n\n# \n\n#         set (BOX2D_INCLUDE_DIR ${CMAKE_INSTALL_PREFIX}/include)\n\n#         set (BOX2D_INCLUDE_DIRS ${BOX2D_INCLUDE_DIR} )\n\n#         set (BOX2D_LIBRARY_DIRS ${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR})\n\n#         set (BOX2D_LIBRARY Box2D)\n\n#         set (BOX2D_LIBRARIES ${BOX2D_LIBRARY})\n\n#         set (BOX2D_USE_FILE ${CMAKE_INSTALL_PREFIX}/${LIB_INSTALL_DIR}/cmake/Box2D/UseBox2D.cmake)\n\n#         configure_file(Box2DConfig.cmake.in ${CMAKE_CURRENT_BINARY_DIR}/Box2DConfig.cmake @ONLY ESCAPE_QUOTES)\n\n#         install(FILES ${CMAKE_CURRENT_BINARY_DIR}/Box2DConfig.cmake UseBox2D.cmake DESTINATION ${LIB_INSTALL_DIR}/cmake/Box2D)\n\n# endif(BOX2D_INSTALL)\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "229f4c62760b49fa6e502475c8b231d54614c69e",
      "LastModified" : "2016-10-13T20:40:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all Qt-specifics\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Instruct CMake to run moc automatically when needed.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If you want to run with the sanitizers, enable the cmake plugin.\n\n# It is suggested that you run 'make clean sanitizers' from the root of the\n\n# project, this will also enable compilation/linking with clang.\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# make sure to link against our static Box2D library\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "test/BaseObject-tester/BaseObject-tester.pro" : {
      "ObjectId" : "a9d3709b6c49689fa0b71d9f6d543da69523ae15",
      "LastModified" : "2016-09-05T20:46:43Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "test/ChooseLevel-tester/ChooseLevel-tester.pro" : {
      "ObjectId" : "3674d34c6d228dfdd5c39dbd946dbf64fef2b594",
      "LastModified" : "2016-09-05T20:46:43Z",
      "FileType" : "QMAKE",
      "0" : {
        "Text" : "# -------------------------------------------------\n\n# Project created by QtCreator 2009-12-23T12:38:16\n\n# -------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "test/LevelList-tester/LevelList-tester.pro" : {
      "ObjectId" : "709bdcc9057ccfdd9f5b7e6dd55529aa4541ce64",
      "LastModified" : "2016-09-05T20:46:43Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "test/LocalString-tester/LocalString-tester.pro" : {
      "ObjectId" : "a612e7ecf4ab7234f2975e492949802c7097ab82",
      "LastModified" : "2016-09-05T20:46:43Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "test/Position-tester/Position-tester.pro" : {
      "ObjectId" : "a84a1a3330408f1f7d95ffa39d2209764ec9b18d",
      "LastModified" : "2016-09-05T20:46:43Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "test/PropertyList-tester/PropertyList-tester.pro" : {
      "ObjectId" : "c12aec1f4ae1a14756aff9ed556553e9cec3ee72",
      "LastModified" : "2016-09-05T20:46:43Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "test/level-i18n/CMakeLists.txt" : {
      "ObjectId" : "799c9e4ab9617911e63fbcae08dd74b453057f35",
      "LastModified" : "2016-09-05T20:46:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Simplified version of the cmakelists - just enough to test working with i18n.\n\n#\n\n# Linux variants only.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(TBE_TARGET_PREFIX \"../\")\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for internal Qt-related debugging sessions\n\n#set(QT_ROOT_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/../qt-4.x-src-verify/install\")\n\n#set(QT_QMAKE_EXECUTABLE ${QT_ROOT_DIR}/bin/qmake)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# use .. because TBE_LEVELS_DIR already ends in 'levels'\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###\n\n### below, you'll find all packaging info specific to Linux.\n\n###\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# TGZ and SH packagers\n\n# for UNIX (including Linux), no path included\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA \"${CMAKE_CURRENT_SOURCE_DIR}/installer/debian/postinst;${CMAKE_CURRENT_SOURCE_DIR}/installer/debian/prerm;\" )\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Supply the DLL files on Windows - no static linking :-(\n\n# Technically speaking, this is a hack. But who cares?\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "test/level-i18n/i18n/CMakeLists.txt" : {
      "ObjectId" : "b510b1d34a6a1da4d1b67a829877e7ca441a887d",
      "LastModified" : "2016-09-05T20:46:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# i18n handling for The Butterfly Effect\n\n# Note that the actual translations are handled through transifex\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n###  TBE Application translations\n\n###\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# note that tbe_en.ts is missing here, english is the default.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##############################################################################\n\n# Level translations\n\n#\n\n# Not using FindGettext because it appears to be broken?\n\n# The below is a simplified version of gnucash/po/CMakeLists.txt\n\n#\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "test/level-i18n/src/CMakeLists.txt" : {
      "ObjectId" : "c7d45998b54cedb59d9fdeac7a026c2bffe4a64e",
      "LastModified" : "2016-09-05T20:46:43Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# all Qt-specifics\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Instruct CMake to run moc automatically when needed.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# do no longer automatically moc all header files:\n\n#QT4_WRAP_CPP(tbe_HEADERS ${control_HEADERS} ${view_HEADERS} ${model_HEADERS} ${loadsave_HEADERS})\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#INCLUDE(${QT_USE_FILE})\n\n#TARGET_LINK_LIBRARIES(tbe ${QT_LIBRARIES} Box2D)\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    }
  },
  "FileTypes" : {
    "CMAKE" : 18,
    "QMAKE" : 7,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 2445
}