{
  "Repository" : "13344814",
  "Revision" : "HEAD",
  "ObjectId" : "17d34c16cdb62b383af1c671ee3237098d183ec2",
  "CommitTime" : "2019-04-16T19:39:03Z",
  "Files" : {
    "doc/Makefile" : {
      "ObjectId" : "575d8d878e67950d71f964049ddf3dcf0464395c",
      "LastModified" : "2018-01-19T08:01:29Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "opensfm/src/CMakeLists.txt" : {
      "ObjectId" : "4461eeb6859bfdf597486504517458ba04ed7536",
      "LastModified" : "2018-11-21T12:56:42Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find dependencies.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Akaze\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# VLFeat\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Python wrapper\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Tests\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "opensfm/src/cmake/FindCeres.cmake" : {
      "ObjectId" : "74e2a7973a941128a7d3d1be793d0854f22a2bbf",
      "LastModified" : "2015-02-03T15:23:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Ceres library\n\n# Find the native Ceres includes and library\n\n# This module defines\n\n#  CERES_INCLUDE_DIRS, where to find ceres.h, Set when\n\n#                      CERES_INCLUDE_DIR is found.\n\n#  CERES_LIBRARIES, libraries to link against to use Ceres.\n\n#  CERES_ROOT_DIR, The base directory to search for Ceres.\n\n#                  This can also be an environment variable.\n\n#  CERES_FOUND, If false, do not try to use Ceres.\n\n#\n\n# also defined, but not for general use are\n\n#  CERES_LIBRARY, where to find the Ceres library.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If CERES_ROOT_DIR was defined in the environment, use it.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 22,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 23,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 24,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set CERES_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "opensfm/src/cmake/FindEigen.cmake" : {
      "ObjectId" : "2cd3e12c0c243a6cc745bf787b7d765c3198ff59",
      "LastModified" : "2015-02-03T15:23:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Ceres Solver - A fast non-linear least squares minimizer\n\n# Copyright 2013 Google Inc. All rights reserved.\n\n# http://code.google.com/p/ceres-solver/\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright notice,\n\n#   this list of conditions and the following disclaimer.\n\n# * Redistributions in binary form must reproduce the above copyright notice,\n\n#   this list of conditions and the following disclaimer in the documentation\n\n#   and/or other materials provided with the distribution.\n\n# * Neither the name of Google Inc. nor the names of its contributors may be\n\n#   used to endorse or promote products derived from this software without\n\n#   specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# Author: alexs.mac@gmail.com (Alex Stewart)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindEigen.cmake - Find Eigen library, version >= 3.\n\n#\n\n# This module defines the following variables:\n\n#\n\n# EIGEN_FOUND: TRUE iff Eigen is found.\n\n# EIGEN_INCLUDE_DIRS: Include directories for Eigen.\n\n#\n\n# EIGEN_VERSION: Extracted from Eigen/src/Core/util/Macros.h\n\n# EIGEN_WORLD_VERSION: Equal to 3 if EIGEN_VERSION = 3.2.0\n\n# EIGEN_MAJOR_VERSION: Equal to 2 if EIGEN_VERSION = 3.2.0\n\n# EIGEN_MINOR_VERSION: Equal to 0 if EIGEN_VERSION = 3.2.0\n\n#\n\n# The following variables control the behaviour of this module:\n\n#\n\n# EIGEN_INCLUDE_DIR_HINTS: List of additional directories in which to\n\n#                          search for eigen includes, e.g: /timbuktu/eigen3.\n\n#\n\n# The following variables are also defined by this module, but in line with\n\n# CMake recommended FindPackage() module style should NOT be referenced directly\n\n# by callers (use the plural variables detailed above instead).  These variables\n\n# do however affect the behaviour of the module via FIND_[PATH/LIBRARY]() which\n\n# are NOT re-called (i.e. search for library is not repeated) if these variables\n\n# are set with valid values _in the CMake cache_. This means that if these\n\n# variables are set directly in the cache, either by the user in the CMake GUI,\n\n# or by the user passing -DVAR=VALUE directives to CMake when called (which\n\n# explicitly defines a cache variable), then they will be used verbatim,\n\n# bypassing the HINTS variables and other hard-coded search locations.\n\n#\n\n# EIGEN_INCLUDE_DIR: Include directory for CXSparse, not including the\n\n#                    include directory of any dependencies.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Called if we failed to find Eigen or any of it's required dependencies,\n\n# unsets all public (designed to be used externally) variables and reports\n\n# error message at priority depending upon [REQUIRED/QUIET/<NONE>] argument.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make results of search visible in the CMake GUI if Eigen has not\n\n# been found so that user does not have to toggle to advanced view.\n",
        "Line" : 69,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Note <package>_FIND_[REQUIRED/QUIETLY] variables defined by FindPackage()\n\n# use the camelcase library name, not uppercase.\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Neither QUIETLY nor REQUIRED, use no priority which emits a message\n\n# but continues configuration and allows generation.\n",
        "Line" : 79,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Search user-installed locations first, so that we prefer user installs\n\n# to system installs where both exist.\n\n#\n\n# TODO: Add standard Windows search locations for Eigen.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Mac OS X\n",
        "Line" : 91,
        "CharPositionInLine" : 37
      },
      "8" : {
        "Text" : "# Mac OS X.\n",
        "Line" : 92,
        "CharPositionInLine" : 42
      },
      "9" : {
        "Text" : "# Search supplied hint directories first if supplied.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Mark internally as found, then verify. EIGEN_REPORT_NOT_FOUND() unsets\n\n# if called.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Extract Eigen version from Eigen/src/Core/util/Macros.h\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# This is on a single line s/t CMake does not interpret it as a list of\n\n# elements and insert ';' separators which would result in 3.;2.;0 nonsense.\n",
        "Line" : 139,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Set standard CMake FindPackage variables if found.\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Handle REQUIRED / QUIET optional arguments and version.\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Only mark internal variables as advanced if we found Eigen, otherwise\n\n# leave it visible in the standard GUI for the user to set manually.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 16
    },
    "opensfm/src/cmake/FindGflags.cmake" : {
      "ObjectId" : "6587089ba382dc09195298b486da6630f2df236b",
      "LastModified" : "2016-10-03T15:35:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Ceres Solver - A fast non-linear least squares minimizer\n\n# Copyright 2015 Google Inc. All rights reserved.\n\n# http://ceres-solver.org/\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright notice,\n\n#   this list of conditions and the following disclaimer.\n\n# * Redistributions in binary form must reproduce the above copyright notice,\n\n#   this list of conditions and the following disclaimer in the documentation\n\n#   and/or other materials provided with the distribution.\n\n# * Neither the name of Google Inc. nor the names of its contributors may be\n\n#   used to endorse or promote products derived from this software without\n\n#   specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# Author: alexs.mac@gmail.com (Alex Stewart)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindGflags.cmake - Find Google gflags logging library.\n\n#\n\n# This module will attempt to find gflags, either via an exported CMake\n\n# configuration (generated by gflags >= 2.1 which are built with CMake), or\n\n# by performing a standard search for all gflags components.  The order of\n\n# precedence for these two methods of finding gflags is controlled by:\n\n# GFLAGS_PREFER_EXPORTED_GFLAGS_CMAKE_CONFIGURATION.\n\n#\n\n# This module defines the following variables:\n\n#\n\n# GFLAGS_FOUND: TRUE iff gflags is found.\n\n# GFLAGS_INCLUDE_DIRS: Include directories for gflags.\n\n# GFLAGS_LIBRARIES: Libraries required to link gflags.\n\n# GFLAGS_NAMESPACE: The namespace in which gflags is defined.  In versions of\n\n#                   gflags < 2.1, this was google, for versions >= 2.1 it is\n\n#                   by default gflags, although can be configured when building\n\n#                   gflags to be something else (i.e. google for legacy\n\n#                   compatibility).\n\n#\n\n# The following variables control the behaviour of this module when an exported\n\n# gflags CMake configuration is not found.\n\n#\n\n# GFLAGS_PREFER_EXPORTED_GFLAGS_CMAKE_CONFIGURATION: TRUE/FALSE, iff TRUE then\n\n#                           then prefer using an exported CMake configuration\n\n#                           generated by gflags >= 2.1 over searching for the\n\n#                           gflags components manually.  Otherwise (FALSE)\n\n#                           ignore any exported gflags CMake configurations and\n\n#                           always perform a manual search for the components.\n\n#                           Default: TRUE iff user does not define this variable\n\n#                           before we are called, and does NOT specify either\n\n#                           GFLAGS_INCLUDE_DIR_HINTS or GFLAGS_LIBRARY_DIR_HINTS\n\n#                           otherwise FALSE.\n\n# GFLAGS_INCLUDE_DIR_HINTS: List of additional directories in which to\n\n#                           search for gflags includes, e.g: /timbuktu/include.\n\n# GFLAGS_LIBRARY_DIR_HINTS: List of additional directories in which to\n\n#                           search for gflags libraries, e.g: /timbuktu/lib.\n\n#\n\n# The following variables are also defined by this module, but in line with\n\n# CMake recommended FindPackage() module style should NOT be referenced directly\n\n# by callers (use the plural variables detailed above instead).  These variables\n\n# do however affect the behaviour of the module via FIND_[PATH/LIBRARY]() which\n\n# are NOT re-called (i.e. search for library is not repeated) if these variables\n\n# are set with valid values _in the CMake cache_. This means that if these\n\n# variables are set directly in the cache, either by the user in the CMake GUI,\n\n# or by the user passing -DVAR=VALUE directives to CMake when called (which\n\n# explicitly defines a cache variable), then they will be used verbatim,\n\n# bypassing the HINTS variables and other hard-coded search locations.\n\n#\n\n# GFLAGS_INCLUDE_DIR: Include directory for gflags, not including the\n\n#                     include directory of any dependencies.\n\n# GFLAGS_LIBRARY: gflags library, not including the libraries of any\n\n#                 dependencies.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Reset CALLERS_CMAKE_FIND_LIBRARY_PREFIXES to its value when FindGflags was\n\n# invoked, necessary for MSVC.\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Called if we failed to find gflags or any of it's required dependencies,\n\n# unsets all public (designed to be used externally) variables and reports\n\n# error message at priority depending upon [REQUIRED/QUIET/<NONE>] argument.\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Do not use unset, as we want to keep GFLAGS_NAMESPACE in the cache,\n\n# but simply clear its value.\n",
        "Line" : 100,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Make results of search visible in the CMake GUI if gflags has not\n\n# been found so that user does not have to toggle to advanced view.\n",
        "Line" : 105,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Note <package>_FIND_[REQUIRED/QUIETLY] variables defined by FindPackage()\n\n# use the camelcase library name, not uppercase.\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Neither QUIETLY nor REQUIRED, use no priority which emits a message\n\n# but continues configuration and allows generation.\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Verify that all variable names passed as arguments are defined (can be empty\n\n# but must be defined) or raise a fatal error.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Use check_cxx_source_compiles() to compile trivial test programs to determine\n\n# the gflags namespace.  This works on all OSs except Windows.  If using Visual\n\n# Studio, it fails because msbuild forces check_cxx_source_compiles() to use\n\n# CMAKE_BUILD_TYPE=Debug for the test project, which usually breaks detection\n\n# because MSVC requires that the test project use the same build type as gflags,\n\n# which would normally be built in Release.\n\n#\n\n# Defines: GFLAGS_NAMESPACE in the caller's scope with the detected namespace,\n\n#          which is blank (empty string, will test FALSE is CMake conditionals)\n\n#          if detection failed.\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Verify that all required variables are defined.\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Ensure that GFLAGS_NAMESPACE is always unset on completion unless\n\n# we explicitly set if after having the correct namespace.\n",
        "Line" : 151,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Setup include path & link library for gflags for CHECK_CXX_SOURCE_COMPILES.\n",
        "Line" : 156,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# First try the (older) google namespace.  Note that the output variable\n\n# MUST be unique to the build type as otherwise the test is not repeated as\n\n# it is assumed to have already been performed.\n",
        "Line" : 159,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Try (newer) gflags namespace instead.  Note that the output variable\n\n# MUST be unique to the build type as otherwise the test is not repeated as\n\n# it is assumed to have already been performed.\n",
        "Line" : 174,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# Use regex on the gflags headers to attempt to determine the gflags namespace.\n\n# Checks both gflags.h (contained namespace on versions < 2.1.2) and\n\n# gflags_declare.h, which contains the namespace on versions >= 2.1.2.\n\n# In general, this method should only be used when\n\n# GFLAGS_CHECK_GFLAGS_NAMESPACE_USING_TRY_COMPILE() cannot be used, or has\n\n# failed.\n\n#\n\n# Defines: GFLAGS_NAMESPACE in the caller's scope with the detected namespace,\n\n#          which is blank (empty string, will test FALSE is CMake conditionals)\n\n#          if detection failed.\n",
        "Line" : 192,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Verify that all required variables are defined.\n",
        "Line" : 203,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Ensure that GFLAGS_NAMESPACE is always undefined on completion unless\n\n# we explicitly set if after having the correct namespace.\n",
        "Line" : 205,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# Scan gflags.h to identify what namespace gflags was built with.  On\n\n# versions of gflags < 2.1.2, gflags.h was configured with the namespace\n\n# directly, on >= 2.1.2, gflags.h uses the GFLAGS_NAMESPACE #define which\n\n# is defined in gflags_declare.h, we try each location in turn.\n",
        "Line" : 209,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "# Found valid gflags namespace from gflags.h.\n",
        "Line" : 235,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Failed to find gflags namespace from gflags.h, gflags is likely a new\n\n# version, check gflags_declare.h, which in newer versions (>= 2.1.2) contains\n\n# the GFLAGS_NAMESPACE #define, which is then referenced in gflags.h.\n",
        "Line" : 240,
        "CharPositionInLine" : 2
      },
      "21" : {
        "Text" : "# Found valid gflags namespace from gflags.h.\n",
        "Line" : 265,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# -----------------------------------------------------------------\n\n# By default, if the user has expressed no preference for using an exported\n\n# gflags CMake configuration over performing a search for the installed\n\n# components, and has not specified any hints for the search locations, then\n\n# prefer a gflags exported configuration if available.\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Try to find an exported CMake configuration for gflags, as generated by\n\n# gflags versions >= 2.1.\n\n#\n\n# We search twice, s/t we can invert the ordering of precedence used by\n\n# find_package() for exported package build directories, and installed\n\n# packages (found via CMAKE_SYSTEM_PREFIX_PATH), listed as items 6) and 7)\n\n# respectively in [1].\n\n#\n\n# By default, exported build directories are (in theory) detected first, and\n\n# this is usually the case on Windows.  However, on OS X & Linux, the install\n\n# path (/usr/local) is typically present in the PATH environment variable\n\n# which is checked in item 4) in [1] (i.e. before both of the above, unless\n\n# NO_SYSTEM_ENVIRONMENT_PATH is passed).  As such on those OSs installed\n\n# packages are usually detected in preference to exported package build\n\n# directories.\n\n#\n\n# To ensure a more consistent response across all OSs, and as users usually\n\n# want to prefer an installed version of a package over a locally built one\n\n# where both exist (esp. as the exported build directory might be removed\n\n# after installation), we first search with NO_CMAKE_PACKAGE_REGISTRY which\n\n# means any build directories exported by the user are ignored, and thus\n\n# installed directories are preferred.  If this fails to find the package\n\n# we then research again, but without NO_CMAKE_PACKAGE_REGISTRY, so any\n\n# exported build directories will now be detected.\n\n#\n\n# To prevent confusion on Windows, we also pass NO_CMAKE_BUILDS_PATH (which\n\n# is item 5) in [1]), to not preferentially use projects that were built\n\n# recently with the CMake GUI to ensure that we always prefer an installed\n\n# version if available.\n\n#\n\n# [1] http://www.cmake.org/cmake/help/v2.8.11/cmake.html#command:find_package\n",
        "Line" : 287,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# Failed to find an installed version of gflags, repeat search allowing\n\n# exported build directories.\n",
        "Line" : 325,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# Again pass NO_CMAKE_BUILDS_PATH, as we know that gflags is exported and\n\n# do not want to treat projects built with the CMake GUI preferentially.\n",
        "Line" : 329,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# gflags v2.1 - 2.1.2 shipped with a bug in their gflags-config.cmake [1]\n\n# whereby gflags_LIBRARIES = \"gflags\", but there was no imported target\n\n# called \"gflags\", they were called: gflags[_nothreads]-[static/shared].\n\n# As this causes linker errors when gflags is not installed in a location\n\n# on the current library paths, detect if this problem is present and\n\n# fix it.\n\n#\n\n# [1] https://github.com/gflags/gflags/issues/110\n",
        "Line" : 341,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# NOTE: This is not written as additional conditions in the outer\n\n#       if (gflags_FOUND) as the NOT TARGET \"${gflags_LIBRARIES}\"\n\n#       condition causes problems if gflags is not found.\n",
        "Line" : 350,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# Ordering here expresses preference for detection, specifically we do not\n\n# want to use the _nothreads variants if the full library is available.\n",
        "Line" : 360,
        "CharPositionInLine" : 6
      },
      "29" : {
        "Text" : "# gflags does not export the namespace in their CMake configuration, so\n\n# use our function to determine what it should be, as it can be either\n\n# gflags or google dependent upon version & configuration.\n\n#\n\n# NOTE: We use the regex method to determine the namespace here, as\n\n#       check_cxx_source_compiles() will not use imported targets, which\n\n#       is what gflags will be in this case.\n",
        "Line" : 391,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Either failed to find an exported gflags CMake configuration, or user\n\n# told us not to use one.  Perform a manual search for all gflags components.\n",
        "Line" : 412,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Handle possible presence of lib prefix for libraries on MSVC, see\n\n# also GFLAGS_RESET_FIND_LIBRARY_PREFIX().\n",
        "Line" : 415,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Preserve the caller's original values for CMAKE_FIND_LIBRARY_PREFIXES\n\n# s/t we can set it back before returning.\n",
        "Line" : 418,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "# The empty string in this list is important, it represents the case when\n\n# the libraries have no prefix (shared libraries / DLLs).\n",
        "Line" : 421,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# Search user-installed locations first, so that we prefer user installs\n\n# to system installs where both exist.\n",
        "Line" : 426,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# Mac OS X\n",
        "Line" : 430,
        "CharPositionInLine" : 32
      },
      "36" : {
        "Text" : "# Mac OS X.\n",
        "Line" : 431,
        "CharPositionInLine" : 37
      },
      "37" : {
        "Text" : "# Windows (for C:/Program Files prefix).\n",
        "Line" : 435,
        "CharPositionInLine" : 19
      },
      "38" : {
        "Text" : "# Windows (for C:/Program Files prefix).\n",
        "Line" : 436,
        "CharPositionInLine" : 21
      },
      "39" : {
        "Text" : "# Mac OS X.\n",
        "Line" : 440,
        "CharPositionInLine" : 28
      },
      "40" : {
        "Text" : "# Windows (for C:/Program Files prefix).\n",
        "Line" : 444,
        "CharPositionInLine" : 15
      },
      "41" : {
        "Text" : "# Windows (for C:/Program Files prefix).\n",
        "Line" : 445,
        "CharPositionInLine" : 17
      },
      "42" : {
        "Text" : "# Search supplied hint directories first if supplied.\n",
        "Line" : 447,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# gflags typically requires a threading library (which is OS dependent), note\n\n# that this defines the CMAKE_THREAD_LIBS_INIT variable.  If we are able to\n\n# detect threads, we assume that gflags requires it.\n",
        "Line" : 473,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# On Windows (including MinGW), the Shlwapi library is used by gflags if\n\n# available.\n",
        "Line" : 478,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Mark internally as found, then verify. GFLAGS_REPORT_NOT_FOUND() unsets\n\n# if called.\n",
        "Line" : 488,
        "CharPositionInLine" : 2
      },
      "46" : {
        "Text" : "# Identify what namespace gflags was built with.\n",
        "Line" : 492,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# To handle Windows peculiarities / CMake bugs on MSVC we try two approaches\n\n# to detect the gflags namespace:\n\n#\n\n# 1) Try to use check_cxx_source_compiles() to compile a trivial program\n\n#    with the two choices for the gflags namespace.\n\n#\n\n# 2) [In the event 1) fails] Use regex on the gflags headers to try to\n\n#    determine the gflags namespace.  Whilst this is less robust than 1),\n\n#    it does avoid any interaction with msbuild.\n",
        "Line" : 494,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# Failed to determine gflags namespace using check_cxx_source_compiles()\n\n# method, try and obtain it using regex on the gflags headers instead.\n",
        "Line" : 506,
        "CharPositionInLine" : 6
      },
      "49" : {
        "Text" : "# Make the GFLAGS_NAMESPACE a cache variable s/t the user can view it, and could\n\n# overwrite it in the CMake GUI.\n",
        "Line" : 521,
        "CharPositionInLine" : 2
      },
      "50" : {
        "Text" : "# gflags does not seem to provide any record of the version in its\n\n# source tree, thus cannot extract version.\n",
        "Line" : 526,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Catch case when caller has set GFLAGS_NAMESPACE in the cache / GUI\n\n# with an invalid value.\n",
        "Line" : 529,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Catch case when caller has set GFLAGS_INCLUDE_DIR in the cache / GUI and\n\n# thus FIND_[PATH/LIBRARY] are not called, but specified locations are\n\n# invalid, otherwise we would report the library as found.\n",
        "Line" : 538,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# TODO: This regex for gflags library is pretty primitive, we use lowercase\n\n#       for comparison to handle Windows using CamelCase library names, could\n\n#       this check be better?\n",
        "Line" : 548,
        "CharPositionInLine" : 2
      },
      "54" : {
        "Text" : "# Set standard CMake FindPackage variables if found.\n",
        "Line" : 564,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Handle REQUIRED / QUIET optional arguments.\n",
        "Line" : 570,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Only mark internal variables as advanced if we found gflags, otherwise\n\n# leave them visible in the standard GUI for the user to set manually.\n",
        "Line" : 575,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Autogenerated by find_package(gflags)\n",
        "Line" : 581,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 58
    },
    "opensfm/src/cmake/FindGlog.cmake" : {
      "ObjectId" : "0dde218eebf4c0d5ae7dcad6ccc58d0bf8251b70",
      "LastModified" : "2015-02-03T15:23:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Ceres Solver - A fast non-linear least squares minimizer\n\n# Copyright 2013 Google Inc. All rights reserved.\n\n# http://code.google.com/p/ceres-solver/\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright notice,\n\n#   this list of conditions and the following disclaimer.\n\n# * Redistributions in binary form must reproduce the above copyright notice,\n\n#   this list of conditions and the following disclaimer in the documentation\n\n#   and/or other materials provided with the distribution.\n\n# * Neither the name of Google Inc. nor the names of its contributors may be\n\n#   used to endorse or promote products derived from this software without\n\n#   specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# Author: alexs.mac@gmail.com (Alex Stewart)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindGlog.cmake - Find Google glog logging library.\n\n#\n\n# This module defines the following variables:\n\n#\n\n# GLOG_FOUND: TRUE iff glog is found.\n\n# GLOG_INCLUDE_DIRS: Include directories for glog.\n\n# GLOG_LIBRARIES: Libraries required to link glog.\n\n#\n\n# The following variables control the behaviour of this module:\n\n#\n\n# GLOG_INCLUDE_DIR_HINTS: List of additional directories in which to\n\n#                         search for glog includes, e.g: /timbuktu/include.\n\n# GLOG_LIBRARY_DIR_HINTS: List of additional directories in which to\n\n#                         search for glog libraries, e.g: /timbuktu/lib.\n\n#\n\n# The following variables are also defined by this module, but in line with\n\n# CMake recommended FindPackage() module style should NOT be referenced directly\n\n# by callers (use the plural variables detailed above instead).  These variables\n\n# do however affect the behaviour of the module via FIND_[PATH/LIBRARY]() which\n\n# are NOT re-called (i.e. search for library is not repeated) if these variables\n\n# are set with valid values _in the CMake cache_. This means that if these\n\n# variables are set directly in the cache, either by the user in the CMake GUI,\n\n# or by the user passing -DVAR=VALUE directives to CMake when called (which\n\n# explicitly defines a cache variable), then they will be used verbatim,\n\n# bypassing the HINTS variables and other hard-coded search locations.\n\n#\n\n# GLOG_INCLUDE_DIR: Include directory for glog, not including the\n\n#                   include directory of any dependencies.\n\n# GLOG_LIBRARY: glog library, not including the libraries of any\n\n#               dependencies.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Called if we failed to find glog or any of it's required dependencies,\n\n# unsets all public (designed to be used externally) variables and reports\n\n# error message at priority depending upon [REQUIRED/QUIET/<NONE>] argument.\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Make results of search visible in the CMake GUI if glog has not\n\n# been found so that user does not have to toggle to advanced view.\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Note <package>_FIND_[REQUIRED/QUIETLY] variables defined by FindPackage()\n\n# use the camelcase library name, not uppercase.\n",
        "Line" : 74,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Neither QUIETLY nor REQUIRED, use no priority which emits a message\n\n# but continues configuration and allows generation.\n",
        "Line" : 81,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Search user-installed locations first, so that we prefer user installs\n\n# to system installs where both exist.\n\n#\n\n# TODO: Add standard Windows search locations for glog.\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Mac OS X\n",
        "Line" : 93,
        "CharPositionInLine" : 30
      },
      "8" : {
        "Text" : "# Mac OS X.\n",
        "Line" : 94,
        "CharPositionInLine" : 35
      },
      "9" : {
        "Text" : "# Mac OS X.\n",
        "Line" : 99,
        "CharPositionInLine" : 26
      },
      "10" : {
        "Text" : "# Search supplied hint directories first if supplied.\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Mark internally as found, then verify. GLOG_REPORT_NOT_FOUND() unsets\n\n# if called.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Glog does not seem to provide any record of the version in its\n\n# source tree, thus cannot extract version.\n",
        "Line" : 131,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Catch case when caller has set GLOG_INCLUDE_DIR in the cache / GUI and\n\n# thus FIND_[PATH/LIBRARY] are not called, but specified locations are\n\n# invalid, otherwise we would report the library as found.\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# TODO: This regex for glog library is pretty primitive, we use lowercase\n\n#       for comparison to handle Windows using CamelCase library names, could\n\n#       this check be better?\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Set standard CMake FindPackage variables if found.\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Handle REQUIRED / QUIET optional arguments.\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Only mark internal variables as advanced if we found glog, otherwise\n\n# leave them visible in the standard GUI for the user to set manually.\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "opensfm/src/cmake/FindNumPy.cmake" : {
      "ObjectId" : "f14142f18652c1081f098319b47bf123329352de",
      "LastModified" : "2015-02-03T15:23:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the NumPy libraries\n\n# This module finds if NumPy is installed, and sets the following variables\n\n# indicating where it is.\n\n#\n\n# TODO: Update to provide the libraries and paths for linking npymath lib.\n\n#\n\n#  NUMPY_FOUND               - was NumPy found\n\n#  NUMPY_VERSION             - the version of NumPy found as a string\n\n#  NUMPY_VERSION_MAJOR       - the major version number of NumPy\n\n#  NUMPY_VERSION_MINOR       - the minor version number of NumPy\n\n#  NUMPY_VERSION_PATCH       - the patch version number of NumPy\n\n#  NUMPY_VERSION_DECIMAL     - e.g. version 1.6.1 is 10601\n\n#  NUMPY_INCLUDE_DIRS        - path to the NumPy include files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#============================================================================\n\n# Copyright 2012 Continuum Analytics, Inc.\n\n#\n\n# MIT License\n\n#\n\n# Permission is hereby granted, free of charge, to any person obtaining\n\n# a copy of this software and associated documentation files\n\n# (the \"Software\"), to deal in the Software without restriction, including\n\n# without limitation the rights to use, copy, modify, merge, publish,\n\n# distribute, sublicense, and/or sell copies of the Software, and to permit\n\n# persons to whom the Software is furnished to do so, subject to\n\n# the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n\n# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n\n# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n\n# OTHER DEALINGS IN THE SOFTWARE.\n\n#\n\n#============================================================================\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Finding NumPy involves calling the Python interpreter\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Convert the process output into a list\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Just in case there is unexpected output from the Python command.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# The output from Python was unexpected. Raise an error always\n\n# here, because we found NumPy, but it appears to be corrupted somehow.\n",
        "Line" : 78,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Make sure all directory separators are '/'\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Get the major and minor version numbers\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "opensfm/src/cmake/FindSuiteSparse.cmake" : {
      "ObjectId" : "b622e9ab634493ab4430406768e261cdb696f35f",
      "LastModified" : "2018-01-19T08:01:29Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Ceres Solver - A fast non-linear least squares minimizer\n\n# Copyright 2013 Google Inc. All rights reserved.\n\n# http://code.google.com/p/ceres-solver/\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright notice,\n\n#   this list of conditions and the following disclaimer.\n\n# * Redistributions in binary form must reproduce the above copyright notice,\n\n#   this list of conditions and the following disclaimer in the documentation\n\n#   and/or other materials provided with the distribution.\n\n# * Neither the name of Google Inc. nor the names of its contributors may be\n\n#   used to endorse or promote products derived from this software without\n\n#   specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n\n# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\n# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE\n\n# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n\n# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n\n# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n\n# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n\n# POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# Author: alexs.mac@gmail.com (Alex Stewart)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindSuiteSparse.cmake - Find SuiteSparse libraries & dependencies.\n\n#\n\n# This module defines the following variables:\n\n#\n\n# SUITESPARSE_FOUND: TRUE iff SuiteSparse and all dependencies have been found.\n\n# SUITESPARSE_INCLUDE_DIRS: Include directories for all SuiteSparse components.\n\n# SUITESPARSE_LIBRARIES: Libraries for all SuiteSparse component libraries and\n\n#                        dependencies.\n\n# SUITESPARSE_VERSION: Extracted from UFconfig.h (<= v3) or\n\n#                      SuiteSparse_config.h (>= v4).\n\n# SUITESPARSE_MAIN_VERSION: Equal to 4 if SUITESPARSE_VERSION = 4.2.1\n\n# SUITESPARSE_SUB_VERSION: Equal to 2 if SUITESPARSE_VERSION = 4.2.1\n\n# SUITESPARSE_SUBSUB_VERSION: Equal to 1 if SUITESPARSE_VERSION = 4.2.1\n\n#\n\n# SUITESPARSE_IS_BROKEN_SHARED_LINKING_UBUNTU_SYSTEM_VERSION: TRUE iff running\n\n#     on Ubuntu, SUITESPARSE_VERSION is 3.4.0 and found SuiteSparse is a system\n\n#     install, in which case found version of SuiteSparse cannot be used to link\n\n#     a shared library due to a bug (static linking is unaffected).\n\n#\n\n# The following variables control the behaviour of this module:\n\n#\n\n# SUITESPARSE_INCLUDE_DIR_HINTS: List of additional directories in which to\n\n#                                search for SuiteSparse includes,\n\n#                                e.g: /timbuktu/include.\n\n# SUITESPARSE_LIBRARY_DIR_HINTS: List of additional directories in which to\n\n#                                search for SuiteSparse libraries,\n\n#                                e.g: /timbuktu/lib.\n\n#\n\n# The following variables define the presence / includes & libraries for the\n\n# SuiteSparse components searched for, the SUITESPARSE_XX variables are the\n\n# union of the variables for all components.\n\n#\n\n# == Symmetric Approximate Minimum Degree (AMD)\n\n# AMD_FOUND\n\n# AMD_INCLUDE_DIR\n\n# AMD_LIBRARY\n\n#\n\n# == Constrained Approximate Minimum Degree (CAMD)\n\n# CAMD_FOUND\n\n# CAMD_INCLUDE_DIR\n\n# CAMD_LIBRARY\n\n#\n\n# == Column Approximate Minimum Degree (COLAMD)\n\n# COLAMD_FOUND\n\n# COLAMD_INCLUDE_DIR\n\n# COLAMD_LIBRARY\n\n#\n\n# Constrained Column Approximate Minimum Degree (CCOLAMD)\n\n# CCOLAMD_FOUND\n\n# CCOLAMD_INCLUDE_DIR\n\n# CCOLAMD_LIBRARY\n\n#\n\n# == Sparse Supernodal Cholesky Factorization and Update/Downdate (CHOLMOD)\n\n# CHOLMOD_FOUND\n\n# CHOLMOD_INCLUDE_DIR\n\n# CHOLMOD_LIBRARY\n\n#\n\n# == Multifrontal Sparse QR (SuiteSparseQR)\n\n# SUITESPARSEQR_FOUND\n\n# SUITESPARSEQR_INCLUDE_DIR\n\n# SUITESPARSEQR_LIBRARY\n\n#\n\n# == Common configuration for all but CSparse (SuiteSparse version >= 4).\n\n# SUITESPARSE_CONFIG_FOUND\n\n# SUITESPARSE_CONFIG_INCLUDE_DIR\n\n# SUITESPARSE_CONFIG_LIBRARY\n\n#\n\n# == Common configuration for all but CSparse (SuiteSparse version < 4).\n\n# UFCONFIG_FOUND\n\n# UFCONFIG_INCLUDE_DIR\n\n#\n\n# Optional SuiteSparse Dependencies:\n\n#\n\n# == Serial Graph Partitioning and Fill-reducing Matrix Ordering (METIS)\n\n# METIS_FOUND\n\n# METIS_LIBRARY\n\n#\n\n# == Intel Thread Building Blocks (TBB)\n\n# TBB_FOUND\n\n# TBB_LIBRARIES\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Called if we failed to find SuiteSparse or any of it's required dependencies,\n\n# unsets all public (designed to be used externally) variables and reports\n\n# error message at priority depending upon [REQUIRED/QUIET/<NONE>] argument.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Do NOT unset SUITESPARSE_FOUND_REQUIRED_VARS here, as it is used by\n\n# FindPackageHandleStandardArgs() to generate the automatic error message on\n\n# failure which highlights which components are missing.\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Note <package>_FIND_[REQUIRED/QUIETLY] variables defined by FindPackage()\n\n# use the camelcase library name, not uppercase.\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Neither QUIETLY nor REQUIRED, use no priority which emits a message\n\n# but continues configuration and allows generation.\n",
        "Line" : 135,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Do not call RETURN(), s/t we keep processing if not called with REQUIRED.\n",
        "Line" : 140,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Specify search directories for include files and libraries (this is the union\n\n# of the search directories for all OSs).  Search user-specified hint\n\n# directories first if supplied, and search user-installed locations first\n\n# so that we prefer user installs to system installs where both exist.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Mac OS X\n\n# Mac OS X\n",
        "Line" : 150,
        "CharPositionInLine" : 30
      },
      "9" : {
        "Text" : "# Ubuntu\n",
        "Line" : 154,
        "CharPositionInLine" : 27
      },
      "10" : {
        "Text" : "# Mac OS X\n\n# Mac OS X\n",
        "Line" : 159,
        "CharPositionInLine" : 26
      },
      "11" : {
        "Text" : "# Ubuntu\n",
        "Line" : 163,
        "CharPositionInLine" : 23
      },
      "12" : {
        "Text" : "# Given the number of components of SuiteSparse, and to ensure that the\n\n# automatic failure message generated by FindPackageHandleStandardArgs()\n\n# when not all required components are found is helpful, we maintain a list\n\n# of all variables that must be defined for SuiteSparse to be considered found.\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# BLAS.\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# LAPACK.\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# AMD.\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# CAMD.\n",
        "Line" : 213,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# COLAMD.\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# CCOLAMD.\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# CHOLMOD.\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# CXSPARSE.\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# SuiteSparseQR.\n",
        "Line" : 327,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# SuiteSparseQR may be compiled with Intel Threading Building Blocks,\n\n# we assume that if TBB is installed, SuiteSparseQR was compiled with\n\n# support for it, this will do no harm if it wasn't.\n",
        "Line" : 353,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Append TBB malloc library to TBB libraries list whilst retaining\n\n# any CMake generated help string (cache variable).\n",
        "Line" : 375,
        "CharPositionInLine" : 6
      },
      "24" : {
        "Text" : "# Add the TBB libraries to the SuiteSparseQR libraries (the only\n\n# libraries to optionally depend on TBB).\n",
        "Line" : 381,
        "CharPositionInLine" : 6
      },
      "25" : {
        "Text" : "# If we cannot find all required TBB components do not include it as\n\n# a dependency.\n",
        "Line" : 386,
        "CharPositionInLine" : 6
      },
      "26" : {
        "Text" : "# UFconfig / SuiteSparse_config.\n\n#\n\n# If SuiteSparse version is >= 4 then SuiteSparse_config is required.\n\n# For SuiteSparse 3, UFconfig.h is required.\n",
        "Line" : 396,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# SuiteSparse_config (SuiteSparse version >= 4) requires librt library for\n\n# timing by default when compiled on Linux or Unix, but not on OSX (which\n\n# does not have librt).\n",
        "Line" : 422,
        "CharPositionInLine" : 2
      },
      "28" : {
        "Text" : "# Failed to find SuiteSparse_config (>= v4 installs), instead look for\n\n# UFconfig header which should be present in < v4 installs.\n",
        "Line" : 442,
        "CharPositionInLine" : 2
      },
      "29" : {
        "Text" : "# Extract the SuiteSparse version from the appropriate header (UFconfig.h for\n\n# <= v3, SuiteSparse_config.h for >= v4).\n",
        "Line" : 464,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# SuiteSparse version <= 3.\n",
        "Line" : 469,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# This is on a single line s/t CMake does not interpret it as a list of\n\n# elements and insert ';' separators which would result in 4.;2.;1 nonsense.\n",
        "Line" : 494,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# SuiteSparse version >= 4.\n",
        "Line" : 502,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# This is on a single line s/t CMake does not interpret it as a list of\n\n# elements and insert ';' separators which would result in 4.;2.;1 nonsense.\n",
        "Line" : 528,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# METIS (Optional dependency).\n",
        "Line" : 535,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Only mark SuiteSparse as found if all required components and dependencies\n\n# have been found.\n",
        "Line" : 547,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Handle config separately, as otherwise at least one of them will be set\n\n# to NOTFOUND which would cause any check on SUITESPARSE_INCLUDE_DIRS to fail.\n",
        "Line" : 564,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# As SuiteSparse includes are often all in the same directory, remove any\n\n# repetitions.\n",
        "Line" : 574,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# Important: The ordering of these libraries is *NOT* arbitrary, as these\n\n# could potentially be static libraries their link ordering is important.\n",
        "Line" : 578,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# Determine if we are running on Ubuntu with the package install of SuiteSparse\n\n# which is broken and does not support linking a shared library.\n",
        "Line" : 600,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Any even moderately recent Ubuntu release (likely to be affected by\n\n# this bug) should have lsb_release, if it isn't present we are likely\n\n# on a different Linux distribution (should be fine).\n",
        "Line" : 607,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "# We are on Ubuntu, and the SuiteSparse version matches the broken\n\n# system install version and is a system install.\n",
        "Line" : 617,
        "CharPositionInLine" : 6
      },
      "42" : {
        "Text" : "# Handle REQUIRED and QUIET arguments to FIND_PACKAGE\n",
        "Line" : 629,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Do not pass VERSION_VAR to FindPackageHandleStandardArgs() if we failed to\n\n# find SuiteSparse to avoid a confusing autogenerated failure message\n\n# that states 'not found (missing: FOO) (found version: x.y.z)'.\n",
        "Line" : 637,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 44
    }
  },
  "FileTypes" : {
    "CMAKE" : 7,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 1655
}