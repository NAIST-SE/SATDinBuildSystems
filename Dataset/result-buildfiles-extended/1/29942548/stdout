{
  "Repository" : "29942548",
  "Revision" : "HEAD",
  "ObjectId" : "90879f566a7e8392e55119d1feedb0c600784e82",
  "CommitTime" : "2019-04-17T19:33:07Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "d67ad36e0c03d7508cc0680987cbd87fc949038a",
      "LastModified" : "2019-04-10T00:35:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# for 64-bit large file support\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# end for 64-bit large file support\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set EMAN_PREFIX\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Write relative path that will be used to compute EMAN2DIR in libpyEM/EMAN2.py\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#flags used for debugging and testing\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#flags for optimization level. You can only turn one of following option to ON, or leave all of them to OFF.\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#\tSET (OPT_FLAGS \"-O3 -ffast-math\")\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\tSET (OPT_FLAGS \"-Os -ffast-math\")\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\tSET (OPT_FLAGS \"-O5 -ansi -mfpmath=both -march=core-avx-i -m64 -ffast-math -pipe\")\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\tSET (OPT_FLAGS \"-O3 -xHost\")\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This is the default\n",
        "Line" : 161,
        "CharPositionInLine" : 46
      },
      "11" : {
        "Text" : "#MESSAGE(\"OPT_FLAGS = \" ${OPT_FLAGS})\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\tSET(EMAN_CXX_FLAGS \"-n32 -LANG:std -w2 -fullwarn -LANG:ansi-for-init-scope=ON\" CACHE INTERNAL \"C++ compiler flags\")\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#\tSET(EMAN_CXX_FLAGS \"-Wall -Werror\" CACHE INTERNAL \"EMAN CXX FLAGS\")\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "cmake/FindACML.cmake" : {
      "ObjectId" : "22b330478dfc14394f33171ca961e6483b870b22",
      "LastModified" : "2017-07-29T16:35:41Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindConda.cmake" : {
      "ObjectId" : "bf2b835323c7fa6eeb5a103ace994efdbf249869",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Assuming the active conda environment is on PATH, this finds the path of bin/ in the environment\n",
        "Line" : 4,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "cmake/FindDJBFFT.cmake" : {
      "ObjectId" : "40e5dd81c493e6ae5110391728c314056dc8232e",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindFFTW3.cmake" : {
      "ObjectId" : "54f38fb35b108dd6efe1fa602d960438876ffce2",
      "LastModified" : "2018-11-09T04:22:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindFTGL.cmake" : {
      "ObjectId" : "4d877380d91dd97685997864ef7474702510512d",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindNFFT2.cmake" : {
      "ObjectId" : "6f25ba62e66b8bf1a29352c5826c3e384472568d",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindNosetests.cmake" : {
      "ObjectId" : "6f71239105a997c008361171545cb587d4f8c1ba",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindNumPy.cmake" : {
      "ObjectId" : "74241e540a135334e296e2dfa705b390658b1383",
      "LastModified" : "2018-11-09T04:22:01Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindOPTPP.cmake" : {
      "ObjectId" : "77995e0397fe05a120ce8164fad8ba443d42f54c",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/FindPython.cmake" : {
      "ObjectId" : "f2043b970fb0957472407bdb0d2fb7ddd0d7d6cb",
      "LastModified" : "2019-03-15T15:32:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set SP_DIR\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/FindSZLIB.cmake" : {
      "ObjectId" : "1f452dfec54d8ff50f2db81e69cf44520ef67241",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Freetype.cmake" : {
      "ObjectId" : "c9ce440fd16c8833bb8bb3bfc426603cac0f8839",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/HDF5.cmake" : {
      "ObjectId" : "4a337dfb119ef3750a4b5e97fe0607552ec56d7c",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/JPEG.cmake" : {
      "ObjectId" : "ab762dafd2a71beb521579b3b3c4d59619bf8fd0",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/OpenGL.cmake" : {
      "ObjectId" : "eb91442d159c5f4f7e71a9ba2a0379aea5bc6c1a",
      "LastModified" : "2019-04-10T00:35:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use the system compiler to get the path to OS libraries in order to find system OpenGL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Symlink to GL. When the value is /usr/include, cmake ignores it.\n\n# So, this is a workaround to include OpenGL headers\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "cmake/PNG.cmake" : {
      "ObjectId" : "5e2c5aad6c370092d60b91e2ed4ec383b6b9e2ee",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/TIFF.cmake" : {
      "ObjectId" : "f4441998eca3b7da9c9c5a02a6cd4e669150a389",
      "LastModified" : "2019-04-10T00:35:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/functions.cmake" : {
      "ObjectId" : "88b8c2352d7a38513dc838f2feb85707cf8ff3d9",
      "LastModified" : "2019-04-10T00:35:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "66ffb22b5186f4f37715a99636a9dbfe4e5b1e26",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/doxygen/CMakeLists.txt" : {
      "ObjectId" : "1cd774f7bb2c40a1ed3d472b6313b5f1f750453d",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "doc/latex/CMakeLists.txt" : {
      "ObjectId" : "b27cda9602c7345422109d064c4864240cdd7a98",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\tOUTPUT\tEMAN2.dvi\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\tDEPENDS\tmkdoc\t\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\tOUTPUT\tEMAN2.ps\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\tDEPENDS\tEMAN2.dvi\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\tOUTPUT\tEMAN2.pdf \n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\tDEPENDS\tEMAN2.ps\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "doc/modular_class_html/CMakeLists.txt" : {
      "ObjectId" : "0ad141aef9f758769225a0950c33586ae0f99455",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#INSTALL_FILES(/doc FILES processors.html processor_groups.html aligners.html analyzers.html averagers.html cmps.html projectors.html reconstructors.html)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "273ec3fcd33f2caa2a0ae91fafc092df6c5ca9e6",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "images/CMakeLists.txt" : {
      "ObjectId" : "d0436a371a4400da38b03d3460d2ae65ff0cd2ba",
      "LastModified" : "2019-04-10T00:35:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libEM/CMakeLists.txt" : {
      "ObjectId" : "b114e3f37a79dd232103c446a4b61ab5b44b78e3",
      "LastModified" : "2019-04-10T00:35:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libEM/cuda/CMakeLists.txt" : {
      "ObjectId" : "64c9f64d463af0197d956f60c470321b185adcc9",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add current directory to the nvcc include line.\n\n#CUDA_INCLUDE_DIRECTORIES(\n\n#  ${CMAKE_CURRENT_SOURCE_DIR}\n\n#)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# And an executable\n\n#CUDA_ADD_EXECUTABLE(proj3d\n\n#\tproj3d.cu\n\n# )\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Build a shared library\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Specify the dependency.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##############################################################################\n\n# Use the CUDA_COMPILE macro.\n\n#CUDA_COMPILE(CUDA_FILES test_bin.cu)\n\n# \n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#INSTALL_TARGETS(/bin proj3d)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "libEM/cuda/CudaDependency.cmake" : {
      "ObjectId" : "630725c1bc84dd5e080f05b02c87e6072bcf4153",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  For more information, please see: http://software.sci.utah.edu\n\n#\n\n#  The MIT License\n\n#\n\n#  Copyright (c) 2007\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  License for the specific language governing rights and limitations under\n\n#  Permission is hereby granted, free of charge, to any person obtaining a\n\n#  copy of this software and associated documentation files (the \"Software\"),\n\n#  to deal in the Software without restriction, including without limitation\n\n#  the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n#  and/or sell copies of the Software, and to permit persons to whom the\n\n#  Software is furnished to do so, subject to the following conditions:\n\n#\n\n#  The above copyright notice and this permission notice shall be included\n\n#  in all copies or substantial portions of the Software.\n\n#\n\n#  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n#  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n#  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n#  DEALINGS IN THE SOFTWARE.\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This code is based on the Manta swig/python wrapper dependency checking code.\n\n# -- Abe Stephens\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#####################################################################\n\n## CUDA_INCLUDE_NVCC_DEPENDENCIES\n\n##\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# So we want to try and include the dependency file if it exists.  If\n\n# it doesn't exist then we need to create an empty one, so we can\n\n# include it.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If it does exist, then we need to check to see if all the files it\n\n# depends on exist.  If they don't then we should clear the dependency\n\n# file and regenerate it later.  This covers the case where a header\n\n# file has disappeared or moved.\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Include the dependency file.  Create it first if it doesn't exist\n\n# for make files except for IDEs (see below).  The INCLUDE puts a\n\n# dependency that will force CMake to rerun and bring in the new info\n\n# when it changes.  DO NOT REMOVE THIS (as I did and spent a few hours\n\n# figuring out why it didn't work.\n",
        "Line" : 48,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Always include this file to force CMake to run again next\n\n# invocation and rebuild the dependencies.\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# for IDE generators like MS dev only include the depend files\n\n# if they exist.   This is to prevent ecessive reloading of\n\n# workspaces after each build.   This also means\n\n# that the depends will not be correct until cmake\n\n# is run once after the build has completed once.\n\n# the depend files are created in the wrap tcl/python sections\n\n# when the .xml file is parsed.\n",
        "Line" : 63,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Now we need to verify the existence of all the included files\n\n# here.  If they aren't there we need to just blank this variable and\n\n# make the file regenerate again.\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# No dependencies, so regenerate the file.\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# No incoming dependencies, so we need to generate them.  Make the\n\n# output depend on the dependency file itself, which should cause the\n\n# rule to re-run.\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Force CMake to run again next build\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 12
    },
    "libEM/cuda/FindCUDA.cmake" : {
      "ObjectId" : "d941240437108df588380fdc4a957abcf2cdeeef",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "###############################################################################\r\n\n#  For more information, please see: http://software.sci.utah.edu\r\n\n#\r\n\n#  The MIT License\r\n\n#\r\n\n#  Copyright (c) 2008-2009\r\n\n#  NVIDIA Corp.\r\n\n#\r\n\n#  Copyright (c) 2007-2009\r\n\n#  Scientific Computing and Imaging Institute, University of Utah\r\n\n#\r\n\n#  License for the specific language governing rights and limitations under\r\n\n#  Permission is hereby granted, free of charge, to any person obtaining a\r\n\n#  copy of this software and associated documentation files (the \"Software\"),\r\n\n#  to deal in the Software without restriction, including without limitation\r\n\n#  the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n\n#  and/or sell copies of the Software, and to permit persons to whom the\r\n\n#  Software is furnished to do so, subject to the following conditions:\r\n\n#\r\n\n#  The above copyright notice and this permission notice shall be included\r\n\n#  in all copies or substantial portions of the Software.\r\n\n#\r\n\n#  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n\n#  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\n#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n\n#  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\n#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n\n#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n\n#  DEALINGS IN THE SOFTWARE.\r\n\n#\r\n\n# This script locates the Nvidia Compute Unified Driver Architecture (CUDA)\r\n\n# tools. It should work on linux, windows, and mac and should be reasonably\r\n\n# up to date with cuda releases.\r\n\n#\r\n\n# This script makes use of the standard find_package arguments of <VERSION>,\r\n\n# REQUIRED and QUIET.  CUDA_FOUND will report if an acceptable version of CUDA\r\n\n# was found.\r\n\n#\r\n\n# The script will prompt the user to specify CUDA_TOOLKIT_ROOT_DIR if the\r\n\n# prefix cannot be determined by the location of nvcc in the system path. To\r\n\n# use a different installed version of the toolkit set the environment variable\r\n\n# CUDA_BIN_PATH before running cmake (e.g. CUDA_BIN_PATH=/usr/local/cuda1.0\r\n\n# instead of the default /usr/local/cuda).\r\n\n#\r\n\n# Set CUDA_BUILD_EMULATION to ON for Emulation mode.  Defaults to OFF (device\r\n\n# mode).\r\n\n# _DEVICEEMU is defined when CUDA_BUILD_EMULATION is TRUE.\r\n\n#\r\n\n# Set CUDA_HOST_COMPILATION_CPP to OFF for C compilation of host code.\r\n\n# Default TRUE.\r\n\n#\r\n\n# Set CUDA_BUILD_CUBIN to \"ON\" or \"OFF\" to enable and extra compilation pass\r\n\n# with the -cubin option in Device mode. The output is parsed and register,\r\n\n# shared memory usage is printed during build. Default OFF.\r\n\n#\r\n\n# Set CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE to ON if you want the custom build\r\n\n# rule to be attached to the source file in Visual Studio.  Defaults to ON.\r\n\n# Turn OFF if you add the same cuda file to multiple targets.\r\n\n#\r\n\n# This allows the user to build the target from the CUDA file, however bad\r\n\n# things can happen if the CUDA source file is added to multiple targets.  When\r\n\n# performing parallel builds it is possible for the custom build command to be\r\n\n# run more than once and in parallel causing cryptic build errors.  This is\r\n\n# because VS runs the rules for every source file in the target, and a source\r\n\n# can have only one rule no matter how many projects it is added to.  Therefore,\r\n\n# the rule assigned to the source file really only applies to one target you get\r\n\n# clashes when it is run from multiple targets.  Eventually everything will get\r\n\n# built, but if the user is unaware of this behavior, there may be confusion.\r\n\n# It would be nice if we could detect the reuse of source files across multiple\r\n\n# targets and turn the option off for the user, but no good solution could be\r\n\n# found.\r\n\n#\r\n\n# Set CUDA_64_BIT_DEVICE_CODE to ON to compile for 64 bit devices.  Defaults to\r\n\n# match host bit size.  Note that making this different than the host code when\r\n\n# generating C files from CUDA code just won't work, because size_t gets defined\r\n\n# by nvcc in the generated source.  If you compile to PTX and then load the file\r\n\n# yourself, you can mix bit sizes between device and host.\r\n\n#\r\n\n# Set CUDA_VERBOSE_BUILD to ON to see all the commands used when building the\r\n\n# CUDA file.  When using a Makefile generator the value defaults to VERBOSE (run\r\n\n# make VERBOSE=1 to see output).  You can override this by setting\r\n\n# CUDA_VERBOSE_BUILD to ON.\r\n\n#\r\n\n# Set CUDA_GENERATED_OUTPUT_DIR to the path you wish to have the generated files\r\n\n# placed.  If it is blank output files will be placed in\r\n\n# CMAKE_CURRENT_BINARY_DIR.  Intermediate files will always be placed in\r\n\n# CMAKE_CURRENT_BINARY_DIR.\r\n\n#\r\n\n# The script creates the following macros:\r\n\n# CUDA_INCLUDE_DIRECTORIES( path0 path1 ... )\r\n\n# -- Sets the directories that should be passed to nvcc\r\n\n#    (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu\r\n\n#    files.\r\n\n#\r\n\n# CUDA_ADD_LIBRARY( cuda_target file0 file1 ... [OPTIONS ...] )\r\n\n# -- Creates a shared library \"cuda_target\" which contains all of the source\r\n\n#    (*.c, *.cc, etc.) specified and all of the nvcc'ed .cu files specified.\r\n\n#    All of the specified source files and generated .cpp files are compiled\r\n\n#    using the standard CMake compiler, so the normal INCLUDE_DIRECTORIES,\r\n\n#    LINK_DIRECTORIES, and TARGET_LINK_LIBRARIES can be used to affect their\r\n\n#    build and link.  In addition CUDA_INCLUDE_DIRS is added automatically added\r\n\n#    to include_directories().\r\n\n#\r\n\n# CUDA_ADD_EXECUTABLE( cuda_target file0 file1 ... [OPTIONS ...] )\r\n\n# -- Same as CUDA_ADD_LIBRARY except that an exectuable is created.\r\n\n#\r\n\n# CUDA_COMPILE( generated_files file0 file1 ... [OPTIONS ...] )\r\n\n# -- Returns a list of generated files from the input source files to be used\r\n\n#    with ADD_LIBRARY or ADD_EXECUTABLE.\r\n\n#\r\n\n# CUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )\r\n\n# -- Returns a list of PTX files generated from the input source files.\r\n\n#\r\n\n# CUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...\r\n\n#                  [OPTIONS ...] )\r\n\n# -- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,\r\n\n#    CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this function\r\n\n#    under the hood.\r\n\n#\r\n\n#    Given the list of files (file0 file1 ... fileN) this macro generates custom\r\n\n#    commands that generate either PTX or linkable objects (use \"PTX\" or \"OBJ\"\r\n\n#    for the format argument to switch.  Files that don't end with .cu or have\r\n\n#    the HEADER_FILE_ONLY property are ignored.\r\n\n#\r\n\n#    The arguments passed in after OPTIONS are extra command line options to\r\n\n#    give to NVCC.  You can also specify per configuration options by specifying\r\n\n#    the name of the configuration followed by the options.  General options\r\n\n#    must preceed configuration specific options.  Not all configurations need\r\n\n#    to be specified, only the ones provided will be used.\r\n\n#\r\n\n#       OPTIONS -DFLAG=2 \"-DFLAG_OTHER=space in flag\"\r\n\n#       DEBUG -g\r\n\n#       RELEASE --use_fast_math\r\n\n#       RELWITHDEBINFO --use_fast_math;-g\r\n\n#       MINSIZEREL --use_fast_math\r\n\n#\r\n\n#    For certain configurations (namely VS generating object files with\r\n\n#    CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will\r\n\n#    be produced for the given cuda file.  This is because when you add the cuda\r\n\n#    file to Visual Studio it knows that this file produces and will link in the\r\n\n#    resulting object file automatically.\r\n\n#\r\n\n#    This script will also generate a separate cmake script that is used at\r\n\n#    build time to invoke nvcc.  This is for serveral reasons.\r\n\n#\r\n\n#      1. nvcc can return negative numbers as return values which confuses\r\n\n#      Visual Studio into thinking that the command succeeded.  The script now\r\n\n#      checks the error codes and produces errors when there was a problem\r\n\n#\r\n\n#      2. nvcc has been known to not delete intermediate results when it\r\n\n#      encounters problems.  The build rules then don't complete, because there\r\n\n#      exists a partially written output file.  The script now deletes the\r\n\n#      output files if there was an error.\r\n\n#\r\n\n#      3. By putting all the options that affect the build into a file and then\r\n\n#      make the build rule dependent on the file, when the options change the\r\n\n#      output files will be regenerated.\r\n\n#\r\n\n# CUDA_ADD_CUFFT_TO_TARGET( cuda_target )\r\n\n# -- Adds the cufft library to the target.  Handles whether you are in emulation\r\n\n#    mode or not.\r\n\n#\r\n\n# CUDA_ADD_CUBLAS_TO_TARGET( cuda_target )\r\n\n# -- Adds the cublas library to the target.  Handles whether you are in emulation\r\n\n#    mode or not.\r\n\n#\r\n\n# CUDA_BUILD_CLEAN_TARGET()\r\n\n# -- Creates a convience target that deletes all the dependency files generated.\r\n\n#    You should make clean after running this target to ensure the dependency\r\n\n#    files get regenerated.\r\n\n#\r\n\n# The script defines the following variables:\r\n\n#\r\n\n# ( Note CUDA_ADD_* macros setup cuda/cut library dependencies automatically.\r\n\n# These variables are only needed if a cuda API call must be made from code in\r\n\n# a outside library or executable. )\r\n\n#\r\n\n# CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.\r\n\n# CUDA_VERSION_MINOR    -- The minor version.\r\n\n# CUDA_VERSION\r\n\n# CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR\r\n\n#\r\n\n# CUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically\r\n\n#                          for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.\r\n\n# CUDA_LIBRARIES        -- Cuda RT library.\r\n\n# CUDA_CUT_INCLUDE_DIR  -- Include directory for cuda SDK headers (cutil.h).\r\n\n# CUDA_CUT_LIBRARIES    -- SDK libraries.\r\n\n# CUDA_NVCC_FLAGS       -- Additional NVCC command line arguments. NOTE:\r\n\n#                          multiple arguments must be semi-colon delimited\r\n\n#                          e.g. --compiler-options;-Wall\r\n\n# CUDA_NVCC_FLAGS_<CONFIG> -- Confugration specific flags for NVCC.\r\n\n# CUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT\r\n\n#                          implementation (alternative to:\r\n\n#                          CUDA_ADD_CUFFT_TO_TARGET macro)\r\n\n# CUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS\r\n\n#                          implementation (alterative to:\r\n\n#                          CUDA_ADD_CUBLAS_TO_TARGET macro).\r\n\n#\r\n\n#\r\n\n# The script now builds object files instead of generating C files.  In order to\r\n\n# facilitate this, the script now makes use of the CMAKE_{C,CXX}_FLAGS along\r\n\n# with their configuration dependent counterparts (i.e. CMAKE_C_FLAGS_DEBUG).\r\n\n# These flags are passed through nvcc to the native compiler.  In addition, on\r\n\n# some systems special flags are added for building objects intended for shared\r\n\n# libraries.  FindCUDA make use of the CMake variable BUILD_SHARED_LIBS to\r\n\n# determine if these flags should be used.  Please set this variable according\r\n\n# to how the objects are to be used before calling CUDA_ADD_LIBRARY.  A\r\n\n# preprocessor macro, <target_name>_EXPORTS is defined when BUILD_SHARED_LIBS is\r\n\n# defined.  In addition, flags passed into add_definitions with -D or /D are\r\n\n# passed along to nvcc.\r\n\n#\r\n\n# Files with the HEADER_FILE_ONLY property set will not be compiled.\r\n\n#\r\n\n# It might be necessary to set CUDA_TOOLKIT_ROOT_DIR manually on certain platforms,\r\n\n# or to use a cuda runtime not installed in the default location. In newer\r\n\n# versions of the toolkit the cuda library is included with the graphics\r\n\n# driver- be sure that the driver version matches what is needed by the cuda\r\n\n# runtime version.\r\n\n#\r\n\n# -- Abe Stephens SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\r\n\n# -- James Bigler NVIDIA Corp\r\n\n###############################################################################\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindCUDA.cmake\r\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# We need to have at least this version to support the VERSION_LESS argument to 'if'.\r\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This macro helps us find the location of helper files we will need the full path to\r\n",
        "Line" : 231,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being\r\n\n# processed.  Using this variable, we can pull out the current path, and\r\n\n# provide a way to get access to the other files we need local to here.\r\n",
        "Line" : 234,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Set this variable as internal, so the user isn't bugged with it.\r\n",
        "Line" : 249,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#####################################################################\r\n\n## CUDA_INCLUDE_NVCC_DEPENDENCIES\r\n\n##\r\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# So we want to try and include the dependency file if it exists.  If\r\n\n# it doesn't exist then we need to create an empty one, so we can\r\n\n# include it.\r\n",
        "Line" : 257,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# If it does exist, then we need to check to see if all the files it\r\n\n# depends on exist.  If they don't then we should clear the dependency\r\n\n# file and regenerate it later.  This covers the case where a header\r\n\n# file has disappeared or moved.\r\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Include the dependency file.  Create it first if it doesn't exist .  The\r\n\n# INCLUDE puts a dependency that will force CMake to rerun and bring in the\r\n\n# new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few\r\n\n# hours figuring out why it didn't work.\r\n",
        "Line" : 271,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Always include this file to force CMake to run again next\r\n\n# invocation and rebuild the dependencies.\r\n\n#message(\"including dependency_file = ${dependency_file}\")\r\n",
        "Line" : 278,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Now we need to verify the existence of all the included files\r\n\n# here.  If they aren't there we need to just blank this variable and\r\n\n# make the file regenerate again.\r\n",
        "Line" : 283,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#   if(DEFINED CUDA_NVCC_DEPEND)\r\n\n#     message(\"CUDA_NVCC_DEPEND set\")\r\n\n#   else()\r\n\n#     message(\"CUDA_NVCC_DEPEND NOT set\")\r\n\n#   endif()\r\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND true\")\r\n",
        "Line" : 292,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "#message(\"searching for ${f}\")\r\n",
        "Line" : 294,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "#message(\"file ${f} not found\")\r\n",
        "Line" : 296,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND false\")\r\n\n# No dependencies, so regenerate the file.\r\n",
        "Line" : 301,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND_REGENERATE = ${CUDA_NVCC_DEPEND_REGENERATE}\")\r\n\n# No incoming dependencies, so we need to generate them.  Make the\r\n\n# output depend on the dependency file itself, which should cause the\r\n\n# rule to re-run.\r\n",
        "Line" : 306,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# Setup default variables\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 316,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Set whether we are using emulation or device mode.\r\n",
        "Line" : 322,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Parse HOST_COMPILATION mode.\r\n",
        "Line" : 324,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Allow the user to specify if the device code is supposed to be 32 or 64 bit.\r\n",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Prints out extra information about the cuda file during compilation\r\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Extra user settable flags\r\n",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Attach the build rule to the source file in VS.  This option\r\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Specifies whether the commands used when compiling the .cu file will be printed out.\r\n",
        "Line" : 339,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Where to put the generated output.\r\n",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we\r\n\n# need to add another entry for the CMAKE_BUILD_TYPE.  We also need to add the\r\n\n# standerd set of 4 build types (Debug, MinSizeRel, Release, and RelWithDebInfo)\r\n\n# for completeness.  We need run this loop in order to accomodate the addition\r\n\n# of extra configuration types.  Duplicate entries will be removed by\r\n\n# REMOVE_DUPLICATES.\r\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# Locate CUDA, Set Build Type, etc.\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Check to see if the CUDA_TOOLKIT_ROOT_DIR and CUDA_SDK_ROOT_DIR have changed,\r\n\n# if they have then clear the cache variables, so that will be detected again.\r\n",
        "Line" : 371,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Search for the cuda distribution.\r\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Search in the CUDA_BIN_PATH first.\r\n",
        "Line" : 393,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Now search default paths\r\n",
        "Line" : 400,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# We need to force this back into the cache.\r\n",
        "Line" : 410,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# CUDA_NVCC_EXECUTABLE\r\n",
        "Line" : 422,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\r\n",
        "Line" : 430,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Compute the version.\r\n",
        "Line" : 435,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "# Always set this convenience variable\r\n",
        "Line" : 443,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Here we need to determine if the version we found is acceptable.  We will\r\n\n# assume that is unless CUDA_FIND_VERSION_EXACT or CUDA_FIND_VERSION is\r\n\n# specified.  The presence of either of these options checks the version\r\n\n# string and signals if the version is acceptable or not.\r\n",
        "Line" : 446,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#\r\n",
        "Line" : 451,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#\r\n",
        "Line" : 455,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#\r\n",
        "Line" : 459,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# CUDA_TOOLKIT_INCLUDE\r\n",
        "Line" : 469,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Header included in toolkit\r\n",
        "Line" : 471,
        "CharPositionInLine" : 21
      },
      "44" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\r\n",
        "Line" : 476,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Set the user list of include dir to nothing to initialize it.\r\n",
        "Line" : 480,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\r\n",
        "Line" : 493,
        "CharPositionInLine" : 2
      },
      "47" : {
        "Text" : "# CUDA_LIBRARIES\r\n",
        "Line" : 497,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# 1.1 toolkit on linux doesn't appear to have a separate library on\r\n\n# some platforms.\r\n",
        "Line" : 501,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Add cuda library to the link line only if it is found.\r\n",
        "Line" : 505,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "#if (CUDA_cublasemu_LIBRARY)\r\n\n#  set(CUDA_LIBRARIES ${CUDA_LIBRARIES} ${CUDA_cublasemu_LIBRARY})\r\n\n#endif(CUDA_cublasemu_LIBRARY)\r\n",
        "Line" : 514,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "#if (CUDA_cufftemu_LIBRARY)\r\n\n#  set(CUDA_LIBRARIES ${CUDA_LIBRARIES} ${CUDA_cufftemu_LIBRARY})\r\n\n#endif(CUDA_cufftemu_LIBRARY)\r\n",
        "Line" : 522,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "#######################\r\n\n# Look for some of the toolkit helper libraries\r\n",
        "Line" : 532,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Search for cufft and cublas libraries.\r\n",
        "Line" : 539,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "########################\r\n\n# Look for the SDK stuff\r\n",
        "Line" : 553,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Keep the CUDA_SDK_ROOT_DIR first in order to be able to override the\r\n\n# environment variables.\r\n",
        "Line" : 560,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# CUDA_CUT_INCLUDE_DIR\r\n",
        "Line" : 571,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Now search system paths\r\n",
        "Line" : 579,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# CUDA_CUT_LIBRARIES\r\n",
        "Line" : 585,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# cutil library is called cutil64 for 64 bit builds on windows.  We don't want\r\n\n# to get these confused, so we are setting the name based on the word size of\r\n\n# the build.\r\n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# The new version of the sdk shows up in common/lib, but the old one is in lib\r\n",
        "Line" : 599,
        "CharPositionInLine" : 2
      },
      "61" : {
        "Text" : "# Now search system paths\r\n",
        "Line" : 604,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "#############################\r\n\n# Check for required components\r\n",
        "Line" : 611,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# Macros\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 631,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "###############################################################################\r\n\n# Add include directories to pass to the nvcc command.\r\n",
        "Line" : 637,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "##############################################################################\r\n",
        "Line" : 646,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "##############################################################################\r\n\n# Separate the OPTIONS out from the sources\r\n\n#\r\n",
        "Line" : 651,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# Assume this is a file\r\n",
        "Line" : 665,
        "CharPositionInLine" : 8
      },
      "68" : {
        "Text" : "##############################################################################\r\n\n# Parse the OPTIONS from ARGN and set the variables prefixed by _option_prefix\r\n\n#\r\n",
        "Line" : 672,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Determine if we are dealing with a perconfiguration flag\r\n",
        "Line" : 678,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# Set arg to nothing to keep it from being processed further\r\n",
        "Line" : 683,
        "CharPositionInLine" : 8
      },
      "71" : {
        "Text" : "##############################################################################\r\n\n# Helper to add the include directory for CUDA only once\r\n",
        "Line" : 694,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "##############################################################################\r\n\n# This helper macro populates the following variables and setups up custom\r\n\n# commands and targets to invoke the nvcc compiler to generate C or PTX source\r\n\n# dependant upon the format parameter.  The compiler is invoked once with -M\r\n\n# to generate a dependency file and a second time with -cuda or -ptx to generate\r\n\n# a .cpp or .ptx file.\r\n\n# INPUT:\r\n\n#   cuda_target         - Target name\r\n\n#   format              - PTX or OBJ\r\n\n#   FILE1 .. FILEN      - The remaining arguments are the sources to be wrapped.\r\n\n#   OPTIONS             - Extra options to NVCC\r\n\n# OUTPUT:\r\n\n#   generated_files     - List of generated files\r\n\n##############################################################################\r\n\n##############################################################################\r\n",
        "Line" : 711,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# Set up all the command line flags here, so that they can be overriden on a per target basis.\r\n",
        "Line" : 737,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "# Emulation if the card isn't present.\r\n",
        "Line" : 741,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "# Emulation.\r\n",
        "Line" : 743,
        "CharPositionInLine" : 4
      },
      "76" : {
        "Text" : "# Device mode.  No flags necessary.\r\n",
        "Line" : 746,
        "CharPositionInLine" : 4
      },
      "77" : {
        "Text" : "# This needs to be passed in at this stage, because VS needs to fill out the\r\n\n# value of VCInstallDir from within VS.\r\n",
        "Line" : 764,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# Add nvcc flag for 64b Windows\r\n",
        "Line" : 768,
        "CharPositionInLine" : 6
      },
      "79" : {
        "Text" : "# Figure out which configure we will use and pass that in as an argument to\r\n\n# the script.  We need to defer the decision until compilation time, because\r\n\n# for VS projects we won't know if we are making a debug or release build\r\n\n# until build time.\r\n",
        "Line" : 773,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# Initialize our list of includes with the user ones followed by the CUDA system ones.\r\n",
        "Line" : 783,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# Get the include directories for this directory and use them for our nvcc command.\r\n",
        "Line" : 785,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "# Reset these variables\r\n",
        "Line" : 793,
        "CharPositionInLine" : 2
      },
      "83" : {
        "Text" : "# CUDA_HOST_FLAGS\r\n",
        "Line" : 803,
        "CharPositionInLine" : 2
      },
      "84" : {
        "Text" : "# If BUILD_SHARED_LIBS is true, then we need to add extra flags for\r\n\n# compiling objects for shared libraries.\r\n",
        "Line" : 805,
        "CharPositionInLine" : 4
      },
      "85" : {
        "Text" : "# Loop over all the configuration types to generate appropriate flags for run_nvcc.cmake\r\n",
        "Line" : 811,
        "CharPositionInLine" : 2
      },
      "86" : {
        "Text" : "# CMAKE_FLAGS are strings and not lists.  By not putting quotes around CMAKE_FLAGS\r\n\n# we convert the strings to lists (like we want).\r\n",
        "Line" : 814,
        "CharPositionInLine" : 4
      },
      "87" : {
        "Text" : "# nvcc chokes on -g3, so replace it with -g\r\n",
        "Line" : 817,
        "CharPositionInLine" : 4
      },
      "88" : {
        "Text" : "# Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list\r\n\n# like it is currently), we can remove the quotes around the\r\n\n# ${CUDA_NVCC_FLAGS_${config_upper}} variable like the CMAKE_HOST_FLAGS_<CONFIG> variable.\r\n",
        "Line" : 824,
        "CharPositionInLine" : 4
      },
      "89" : {
        "Text" : "# Get the list of definitions from the directory property\r\n",
        "Line" : 830,
        "CharPositionInLine" : 2
      },
      "90" : {
        "Text" : "# Determine output directory\r\n",
        "Line" : 842,
        "CharPositionInLine" : 2
      },
      "91" : {
        "Text" : "# Reset the output variable\r\n",
        "Line" : 849,
        "CharPositionInLine" : 2
      },
      "92" : {
        "Text" : "# Iterate over the macro arguments and create custom\r\n\n# commands for all the .cu files.\r\n",
        "Line" : 852,
        "CharPositionInLine" : 2
      },
      "93" : {
        "Text" : "# Ignore any file marked as a HEADER_FILE_ONLY\r\n",
        "Line" : 855,
        "CharPositionInLine" : 4
      },
      "94" : {
        "Text" : "# Add a custom target to generate a c or ptx file. ######################\r\n",
        "Line" : 859,
        "CharPositionInLine" : 6
      },
      "95" : {
        "Text" : "# Set all of our file names.  Make sure that whatever filenames that have\r\n\n# generated_file_path in them get passed in through as a command line\r\n\n# argument, so that the ${CMAKE_CFG_INTDIR} gets expanded at run time\r\n\n# instead of configure time.\r\n",
        "Line" : 873,
        "CharPositionInLine" : 6
      },
      "96" : {
        "Text" : "# Setup properties for obj files:\r\n",
        "Line" : 883,
        "CharPositionInLine" : 6
      },
      "97" : {
        "Text" : "# This is an object file not to be compiled, but only be linked.\r\n",
        "Line" : 887,
        "CharPositionInLine" : 31
      },
      "98" : {
        "Text" : "# Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.\r\n",
        "Line" : 891,
        "CharPositionInLine" : 6
      },
      "99" : {
        "Text" : "# Bring in the dependencies.  Creates a variable CUDA_NVCC_DEPEND #######\r\n",
        "Line" : 899,
        "CharPositionInLine" : 6
      },
      "100" : {
        "Text" : "# Convience string for output ###########################################\r\n",
        "Line" : 902,
        "CharPositionInLine" : 6
      },
      "101" : {
        "Text" : "# Build the NVCC made dependency file ###################################\r\n",
        "Line" : 909,
        "CharPositionInLine" : 6
      },
      "102" : {
        "Text" : "# Configure the build script\r\n",
        "Line" : 917,
        "CharPositionInLine" : 6
      },
      "103" : {
        "Text" : "# So if a user specifies the same cuda file as input more than once, you\r\n\n# can have bad things happen with dependencies.  Here we check an option\r\n\n# to see if this is the behavior they want.\r\n",
        "Line" : 920,
        "CharPositionInLine" : 6
      },
      "104" : {
        "Text" : "# Create up the comment string\r\n",
        "Line" : 937,
        "CharPositionInLine" : 6
      },
      "105" : {
        "Text" : "# Build the generated file and dependency file ##########################\r\n",
        "Line" : 945,
        "CharPositionInLine" : 6
      },
      "106" : {
        "Text" : "# These output files depend on the source_file and the contents of cmake_dependency_file\r\n",
        "Line" : 948,
        "CharPositionInLine" : 8
      },
      "107" : {
        "Text" : "# Make sure the build system knows the file is generated.\r\n",
        "Line" : 962,
        "CharPositionInLine" : 6
      },
      "108" : {
        "Text" : "# Don't add the object file to the list of generated files if we are using\r\n\n# visual studio and we are attaching the build rule to the cuda file.  VS\r\n\n# will add our object file to the linker automatically for us.\r\n",
        "Line" : 965,
        "CharPositionInLine" : 6
      },
      "109" : {
        "Text" : "# Visual Studio 8 crashes when you close the solution when you don't add the object file.\r\n",
        "Line" : 971,
        "CharPositionInLine" : 8
      },
      "110" : {
        "Text" : "#message(\"Not adding ${generated_file}\")\r\n",
        "Line" : 973,
        "CharPositionInLine" : 10
      },
      "111" : {
        "Text" : "# Add the other files that we want cmake to clean on a cleanup ##########\r\n",
        "Line" : 982,
        "CharPositionInLine" : 6
      },
      "112" : {
        "Text" : "# Set the return parameter\r\n",
        "Line" : 990,
        "CharPositionInLine" : 2
      },
      "113" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# ADD LIBRARY\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 995,
        "CharPositionInLine" : 0
      },
      "114" : {
        "Text" : "# Separate the sources from the options\r\n",
        "Line" : 1004,
        "CharPositionInLine" : 2
      },
      "115" : {
        "Text" : "# Create custom commands and targets for each file.\r\n",
        "Line" : 1006,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "# Add the library.\r\n",
        "Line" : 1009,
        "CharPositionInLine" : 2
      },
      "117" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\r\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\r\n",
        "Line" : 1019,
        "CharPositionInLine" : 2
      },
      "118" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# ADD EXECUTABLE\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1029,
        "CharPositionInLine" : 0
      },
      "119" : {
        "Text" : "# Separate the sources from the options\r\n",
        "Line" : 1038,
        "CharPositionInLine" : 2
      },
      "120" : {
        "Text" : "# Create custom commands and targets for each file.\r\n",
        "Line" : 1040,
        "CharPositionInLine" : 2
      },
      "121" : {
        "Text" : "# Add the library.\r\n",
        "Line" : 1043,
        "CharPositionInLine" : 2
      },
      "122" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\r\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\r\n",
        "Line" : 1053,
        "CharPositionInLine" : 2
      },
      "123" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# CUDA COMPILE\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1063,
        "CharPositionInLine" : 0
      },
      "124" : {
        "Text" : "# Separate the sources from the options\r\n",
        "Line" : 1070,
        "CharPositionInLine" : 2
      },
      "125" : {
        "Text" : "# Create custom commands and targets for each file.\r\n",
        "Line" : 1072,
        "CharPositionInLine" : 2
      },
      "126" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# CUDA COMPILE PTX\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1080,
        "CharPositionInLine" : 0
      },
      "127" : {
        "Text" : "# Separate the sources from the options\r\n",
        "Line" : 1087,
        "CharPositionInLine" : 2
      },
      "128" : {
        "Text" : "# Create custom commands and targets for each file.\r\n",
        "Line" : 1089,
        "CharPositionInLine" : 2
      },
      "129" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# CUDA ADD CUFFT TO TARGET\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1096,
        "CharPositionInLine" : 0
      },
      "130" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# CUDA ADD CUBLAS TO TARGET\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1109,
        "CharPositionInLine" : 0
      },
      "131" : {
        "Text" : "###############################################################################\r\n\n###############################################################################\r\n\n# CUDA BUILD CLEAN TARGET\r\n\n###############################################################################\r\n\n###############################################################################\r\n",
        "Line" : 1122,
        "CharPositionInLine" : 0
      },
      "132" : {
        "Text" : "# Call this after you add all your CUDA targets, and you will get a convience\r\n\n# target.  You should also make clean after running this target to get the\r\n\n# build system to generate all the code again.\r\n",
        "Line" : 1128,
        "CharPositionInLine" : 2
      },
      "133" : {
        "Text" : "# Clear out the variable, so the next time we configure it will be empty.\r\n\n# This is useful so that the files won't persist in the list after targets\r\n\n# have been removed.\r\n",
        "Line" : 1139,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 134
    },
    "libEM/cuda/make2cmake.cmake" : {
      "ObjectId" : "24d2f9f9327deb29b865949891ddde2bf7f5641c",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  For more information, please see: http://software.sci.utah.edu\r\n\n#\r\n\n#  The MIT License\r\n\n#\r\n\n#  Copyright (c) 2007\r\n\n#  Scientific Computing and Imaging Institute, University of Utah\r\n\n#\r\n\n#  License for the specific language governing rights and limitations under\r\n\n#  Permission is hereby granted, free of charge, to any person obtaining a\r\n\n#  copy of this software and associated documentation files (the \"Software\"),\r\n\n#  to deal in the Software without restriction, including without limitation\r\n\n#  the rights to use, copy, modify, merge, publish, distribute, sublicense,\r\n\n#  and/or sell copies of the Software, and to permit persons to whom the\r\n\n#  Software is furnished to do so, subject to the following conditions:\r\n\n#\r\n\n#  The above copyright notice and this permission notice shall be included\r\n\n#  in all copies or substantial portions of the Software.\r\n\n#\r\n\n#  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\r\n\n#  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n\n#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\r\n\n#  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n\n#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\r\n\n#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\r\n\n#  DEALINGS IN THE SOFTWARE.\r\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make2cmake CMake Script\r\n\n# Abe Stephens and James Bigler\r\n\n# (c) 2007 Scientific Computing and Imaging Institute, University of Utah\r\n\n# Note that the REGEX expressions may need to be tweaked for different dependency generators.\r\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# message(\"FOUND DEPENDS\")\r\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Remember, four backslashes is escaped to one backslash in the string.\r\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# This works for the nvcc -M generated dependency files.\r\n",
        "Line" : 42,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If softlinks start to matter, we should change this to REALPATH.  For now we need\r\n\n# to flatten paths, because nvcc can generate stuff like /bin/../include instead of\r\n\n# just /include.\r\n",
        "Line" : 53,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\r\n",
        "Line" : 63,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# Remove the duplicate entries and sort them.\r\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "libEM/cuda/parse_cubin.cmake" : {
      "ObjectId" : "1367d617c89210bacb3c95f453e39ce26d71febc",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  For more information, please see: http://software.sci.utah.edu\n\n#\n\n#  The MIT License\n\n#\n\n#  Copyright (c) 2007\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  License for the specific language governing rights and limitations under\n\n#  Permission is hereby granted, free of charge, to any person obtaining a\n\n#  copy of this software and associated documentation files (the \"Software\"),\n\n#  to deal in the Software without restriction, including without limitation\n\n#  the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n#  and/or sell copies of the Software, and to permit persons to whom the\n\n#  Software is furnished to do so, subject to the following conditions:\n\n#\n\n#  The above copyright notice and this permission notice shall be included\n\n#  in all copies or substantial portions of the Software.\n\n#\n\n#  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n#  OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n#  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n#  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n#  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n#  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n#  DEALINGS IN THE SOFTWARE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# .cubin Parsing CMake Script\n\n# Abe Stephens\n\n# (c) 2007 Scientific Computing and Imaging Institute, University of Utah\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Remember, four backslashes is escaped to one backslash in the string.\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Only look at \"code { }\" blocks.\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Break into individual lines.\n",
        "Line" : 46,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Extract kernel names.\n",
        "Line" : 51,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Check to see if the kernel name starts with \"_\"\n",
        "Line" : 55,
        "CharPositionInLine" : 10
      },
      "7" : {
        "Text" : "# if (${entry} MATCHES \"^_\")\n",
        "Line" : 57,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# Skip the rest of this block.\n\n# message(\"Skipping ${entry}\")\n\n# set(skip TRUE)\n",
        "Line" : 58,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# else (${entry} MATCHES \"^_\")\n",
        "Line" : 61,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# endif (${entry} MATCHES \"^_\")\n",
        "Line" : 63,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# Skip the rest of the block if necessary\n",
        "Line" : 67,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Registers\n",
        "Line" : 70,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# Local memory\n",
        "Line" : 76,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "# Shared memory\n",
        "Line" : 82,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "libEM/cuda/run_nvcc.cmake" : {
      "ObjectId" : "7fb49bfe5e18d8a574c4582137ff4486003204df",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file runs the nvcc commands to produce the desired output file along with\r\n\n# the dependency file needed by CMake to compute dependencies.  In addition the\r\n\n# file checks the output of each command and if the command fails it deletes the\r\n\n# output files.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Input variables\r\n\n#\r\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\r\n\n#                          ON : Describe each step\r\n\n#\r\n\n# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or\r\n\n#                               RelWithDebInfo, but it should match one of the\r\n\n#                               entries in CUDA_HOST_FLAGS. This is the build\r\n\n#                               configuration used when compiling the code.  If\r\n\n#                               blank or unspecified Debug is assumed as this is\r\n\n#                               what CMake does.\r\n\n#\r\n\n# generated_file:STRING=<> File to generate.  This argument must be passed in.\r\n\n#\r\n\n# generated_cubin_file:STRING=<> File to generate.  This argument must be passed\r\n\n#                                                   in if build_cubin is true.\r\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set these up as variables to make reading the generated file easier\r\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# We won't actually use these variables for now, but we need to set this, in\r\n\n# order to force this file to be run again if it changes.\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This is the list of host compilation flags.  It C or CXX should already have\r\n\n# been chosen by FindCUDA.cmake.\r\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler\r\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# If we weren't given a build_configuration, use Debug.\r\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#message(\"CUDA_NVCC_HOST_COMPILER_FLAGS = ${CUDA_NVCC_HOST_COMPILER_FLAGS}\")\r\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\r\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")\r\n\n# Add the build specific configuration flags\r\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# cuda_execute_process - Executes a command with optional command echo and status message.\r\n\n#\r\n\n#   status  - Status message to print if verbose is true\r\n\n#   command - COMMAND argument from the usual execute_process argument structure\r\n\n#   ARGN    - Remaining arguments are the command with arguments\r\n\n#\r\n\n#   CUDA_result - return value from running the command\r\n\n#\r\n\n# Make this a macro instead of a function, so that things like RESULT_VARIABLE\r\n\n# and other return variables are present after executing the process.\r\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Now we need to build up our command string.  We are accounting for quotes\r\n\n# and spaces, anything else is left up to the user to fix if they want to\r\n\n# copy and paste a runnable command line.\r\n",
        "Line" : 96,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# If there are quotes, excape them, so they come through.\r\n",
        "Line" : 101,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "# Args with spaces need quotes around them to get them to be parsed as a single argument.\r\n",
        "Line" : 103,
        "CharPositionInLine" : 6
      },
      "14" : {
        "Text" : "# Echo the command\r\n",
        "Line" : 110,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Run the command\r\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Delete the target file\r\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Generate the dependency file\r\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Generate the cmake readable dependency file to a temp file.  Don't put the\r\n\n# quotes just around the filenames for the input_file and output_file variables.\r\n\n# CMake will pass the quotes through and not be able to find the file.\r\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Copy the file if it is different\r\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Delete the temporary file\r\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Generate the code\r\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Since nvcc can sometimes leave half done files make sure that we delete the output file.\r\n",
        "Line" : 192,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# Cubin resource report commands.\r\n",
        "Line" : 204,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Run with -cubin to produce resource usage report.\r\n",
        "Line" : 206,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Execute the parser script.\r\n",
        "Line" : 221,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 26
    },
    "libEM/fonts/CMakeLists.txt" : {
      "ObjectId" : "82b5904c412cae10ecd9dc3b9e9e02b639b42a3c",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libEM/gorgon/CMakeLists.txt" : {
      "ObjectId" : "6596d10c87d7623c483eb63561937e129c5c9617",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libEM/pmconfig/CMakeLists.txt" : {
      "ObjectId" : "0100227ff3645e9fcfd6cc1d7212b8709aa3ea6b",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libEM/sparx/CMakeLists.txt" : {
      "ObjectId" : "5dc09253ddf9c786cb843e5e0845e182870b0b7a",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libEM/sparx/cuda/CMakeLists.txt" : {
      "ObjectId" : "e65c6b95139435d352c07ed6ec27e9e980ea25a2",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add current directory to the nvcc include line.\n\n#CUDA_INCLUDE_DIRECTORIES(\n\n#  ${CMAKE_CURRENT_SOURCE_DIR}\n\n#)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##############################################################################\n\n# Use one executable only.\n\n#CUDA_ADD_EXECUTABLE(sparx_cuda_test\n\n# sparx_cuda_test.cu\n\n# cuda_ccf.cu\n\n# )\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Build a shared library\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Specify the dependency.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##############################################################################\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#INSTALL_TARGETS(/bin sparx_cuda_test)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "libEM/sparx/temp/Makefile" : {
      "ObjectId" : "e07e6b289ba2a94a8b6485305fdfc1dd0cfefe57",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "libEM/sparx/temp/voldist/Makefile" : {
      "ObjectId" : "92ba163099cc7b3145e53d95900f34a11bcba60a",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "libpyEM/CMakeLists.txt" : {
      "ObjectId" : "c1e97aa87a5548461b59b26e2b34ceede187e78b",
      "LastModified" : "2019-04-10T00:35:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Boost\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#this definition is for boost.python > 1.35.0 \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "libpyEM/qtgui/CMakeLists.txt" : {
      "ObjectId" : "dda754dba463941dae28d38434e0dd6d820971fa",
      "LastModified" : "2019-04-10T00:35:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# MESSAGE(\"gui files: ${qtguifiles}\")\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "programs/CMakeLists.txt" : {
      "ObjectId" : "feb842562375c7cd190bf636c37f8be83e5cec51",
      "LastModified" : "2019-04-10T00:35:27Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# git-describe output: <tag>-<num-of-commits-since-tag>-g<hash>\n",
        "Line" : 27,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 1
    },
    "pyemtbx/CMakeLists.txt" : {
      "ObjectId" : "8aa0db14b8fd66ea1f462040e8c4c960841faed7",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "recipes/CMakeLists.txt" : {
      "ObjectId" : "d9b23db8a356d08377575d1f0af0cb29686f13c2",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rt/CMakeLists.txt" : {
      "ObjectId" : "ae8f9c88ade2d5913732b751615b7d4e37e014bd",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rt/emdata/CMakeLists.txt" : {
      "ObjectId" : "2dd8685e729cddcdec35b9b197c3d8531518d71f",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#LINK_LIBRARIES(GLEM2)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# all of these commented out by david woolford, because when i started writing testing code\n\n# none of them where being compile anyway...\n\n#ADD_EXECUTABLE(blankimg blankimg.cpp)\n\n#ADD_EXECUTABLE(fft fft.cpp)\n\n#ADD_EXECUTABLE(rotate rotate.cpp)\n\n#ADD_EXECUTABLE(rotate_translate rotate_translate.cpp)\n\n#ADD_EXECUTABLE(rotate_phi rotate_phi.cpp)\n\n#ADD_EXECUTABLE(ccf2 ccf2.cpp)\n\n#ADD_EXECUTABLE(testalign testalign.cpp)\n\n#ADD_EXECUTABLE(testpolardata testpolardata.cpp)\n\n#ADD_EXECUTABLE(fft_test fft_test.cpp)\n\n#ADD_EXECUTABLE(projector_test projector_test.cpp)\n\n#ADD_EXECUTABLE(mem_test mem_test.cpp)\n\n#ADD_EXECUTABLE(storage_order_test storage_order_test.cpp)\n\n#ADD_EXECUTABLE(randnum_test randnum_test.cpp)\n\n# this test added by david woolford - it should be executed and results evaluated on every platform.\n\n#ADD_EXECUTABLE(test_emobject_and_dict test_emobject.cpp)\n\n#ADD_EXECUTABLE(imagic_ctf_test imagic_ctf_test.cpp)\n\n#ADD_EXECUTABLE(memtest memtest.cpp)\n\n#ADD_EXECUTABLE(memtest2 memtest2.cpp)\n\n#ADD_EXECUTABLE(ccf3 ccf3.cpp)\n\n#ADD_EXECUTABLE(transform transform.cpp)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#FIND_LIBRARY(EMAN1_LIBRARY NAMES EM PATHS $ENV{EMANDIR}/lib $ENV{HOME}/EMAN/lib)\n\n#IF(EMAN1_LIBRARY)\n\n#\tFIND_PATH(EMAN1_INCLUDE_PATH EMData.h $ENV{EMANDIR}/include $ENV{HOME}/EMAN/include)\t\n\n#\tIF(EMAN1_INCLUDE_PATH)\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#ADD_EXECUTABLE(emdata_api emdata_api.cpp)\n\n#ADD_EXECUTABLE(rotate1 rotate1.cpp)\n\n#ADD_EXECUTABLE(ccf1 ccf1.cpp)\n\n#TARGET_LINK_LIBRARIES(emdata_api ${EMAN1_LIBRARY})\n\n#TARGET_LINK_LIBRARIES(rotate1 ${EMAN1_LIBRARY})\n\n#TARGET_LINK_LIBRARIES(ccf1 ${EMAN1_LIBRARY})        \n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "#INCLUDE_DIRECTORIES(${EMAN1_INCLUDE_PATH})\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#\tENDIF(EMAN1_INCLUDE_PATH)\n\n#ENDIF(EMAN1_LIBRARY)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "rt/imageio/CMakeLists.txt" : {
      "ObjectId" : "abff59e751aef662cb7cbc06d205b7e8f04249f2",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "rt/pyem/CMakeLists.txt" : {
      "ObjectId" : "eec0f2307fee772c99b9ef779e5a206d9af413dc",
      "LastModified" : "2019-04-10T00:35:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sparx/CMakeLists.txt" : {
      "ObjectId" : "88ce2f9e4b31f6b2a96eec9fc44a48b72c1185f1",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sparx/bin/CMakeLists.txt" : {
      "ObjectId" : "836e110a8561cf13c22e5af2a1cfbe8c48a3aa49",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sparx/libpy/CMakeLists.txt" : {
      "ObjectId" : "eb163a20b91823cbad18f6851f3b71e9b18aab78",
      "LastModified" : "2017-08-06T22:37:36Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sphire/CMakeLists.txt" : {
      "ObjectId" : "88ce2f9e4b31f6b2a96eec9fc44a48b72c1185f1",
      "LastModified" : "2019-04-10T00:35:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sphire/bin/CMakeLists.txt" : {
      "ObjectId" : "836e110a8561cf13c22e5af2a1cfbe8c48a3aa49",
      "LastModified" : "2019-04-10T00:35:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sphire/libpy/CMakeLists.txt" : {
      "ObjectId" : "06014469426298e19e570d69aba022eb66aa22ad",
      "LastModified" : "2019-04-10T00:35:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "sphire/libpy/prior_calculation/CMakeLists.txt" : {
      "ObjectId" : "99061394cfb63b165e5c32cc0642dfc4ab382be6",
      "LastModified" : "2019-04-10T00:35:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "utils/CMakeLists.txt" : {
      "ObjectId" : "b4bc4be73fee170c12fe3a794ab673fc4f614576",
      "LastModified" : "2019-04-10T00:35:27Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 54,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 5058
}