{
  "Repository" : "143420",
  "Revision" : "HEAD",
  "ObjectId" : "4c0164d3c88fd9f31fd0f12d03a503b9c371e8a3",
  "CommitTime" : "2019-04-16T23:26:52Z",
  "Files" : {
    "docs/src/remap/Makefile" : {
      "ObjectId" : "7318c744dbfdf11222281c39ddc4f709c9b89e6b",
      "LastModified" : "2011-10-28T06:26:31Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# rebuild svg and eps files from mscgen inputs\n\n# see http://www.mcternan.me.uk/mscgen/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include in docs like so:\n\n#image::images/iocontrol-prepare.{basebackend-docbook!svg}{basebackend-docbook?eps}[]\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/Makefile" : {
      "ObjectId" : "47418d3473f41e4d79dba8ffb35b9094416cef10",
      "LastModified" : "2019-01-24T23:28:13Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# see http://www.cmcrossroads.com/ask-mr-make/6535-tracing-rule-execution-in-gnu-make\n\n# to trace make execution of make in more detail:\n\n# make VV=1\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Delete the default suffix rules\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# A \"trivial build\" is one which should not include dependency information\n\n# either because it should be usable before dependency information can be\n\n# generated or when it is invalid (clean, docclean) or when running as root\n\n# when the user must guarantee in advance that everything is built\n\n# (setuid, install)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Beautify output\n\n# ---------------------------------------------------------------------------\n\n#\n\n# A simple variant is to prefix commands with $(Q) - that's useful\n\n# for commands that shall be hidden in non-verbose mode.\n\n#\n\n#\t$(Q)ln $@ :<\n\n#\n\n# If BUILD_VERBOSE equals 0 then the above command will be hidden.\n\n# If BUILD_VERBOSE equals 1 then the above command is displayed.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# When KERNELRELEASE is not defined, this is the userspace build.\n\n# The \"modules\" target is the gateway to the kernel module build.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Print 'entering' all the time\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Create the variables with := so that subsequent += alterations keep it\n\n# as a \"substitute at assignment time\" variable\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Submakefiles from each of these directories will be included if they exist\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Each item in INCLUDES is transformed into a -I directive later on\n\n# The top directory is always included\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# When used like $(call TOxxx, ...) these turn a list of source files\n\n# into the corresponding list of object files, dependency files,\n\n# or both.  When a source file has to be compiled with special flags,\n\n# TOOBJSDEPS is used.  Confusingly, TOOBJSDEPS includes preprocessed source\n\n# file names, but this is what allows 'make src.i' to produce proper\n\n# preprocessed source when src.c needs a customized compile flag.\n\n# See Submakefile.skel for an example.\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# This checks that all the things listed in USERSRCS are either C files\n\n# or C++ files\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Find the list of object files for each type of source file\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Find the dependency filenames, then include them all\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Each directory in $(INCLUDES) is passed as a -I directory when compiling.\n",
        "Line" : 186,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Compilation options.\tPerhaps some of these should come from Makefile.inc? (CXXFLAGS now does)\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Rules to make .o (object) files\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Rules to make .i (preprocessed) files\n",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# For each file to be copied to ../include, its location in the source tree\n\n# is listed here.  Note that due to $(INCLUDE), defined above, the include\n\n# files in the source tree are the ones used when building linuxcnc.  The copy\n\n# in ../include is used when building external components of linuxcnc.\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# the \"headers\" target installs all the header files in ../include\n",
        "Line" : 380,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# install header files as part of the build\n",
        "Line" : 385,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Add converting of %.po files\n",
        "Line" : 388,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# tooledit as standalone app:\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# ngcgui as standalone app:\n",
        "Line" : 402,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# pyngcgui as standalone app:\n",
        "Line" : 411,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# gremlin_view as standalone app:\n",
        "Line" : 420,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# halshow as standalone app:\n",
        "Line" : 429,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# And make userspace depend on $(TARGETS)\n",
        "Line" : 437,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# This is the gateway into the crazy world of \"kbuild\", the linux 2.6 system\n\n# for building kernel modules.\tOther kernel module build styles need to be\n\n# accomodated here.\n",
        "Line" : 447,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# These rules clean things up.\t'modclean' cleans files generated by 'modules'\n\n# (except that it doesn't remove the modules that were copied to rtlib)\n\n# 'clean' cleans everything but dependency files, and 'depclean' cleans them\n\n# too.\n",
        "Line" : 458,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# So that nothing is built as root, this rule does not depend on the touched\n\n# files (Note that files in depends/ might be rebuilt, and there's little that\n\n# can be done about it)\n",
        "Line" : 480,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# These rules allows a header file from this directory to be installed into\n\n# ../include.  A pair of rules like these will exist in the Submakefile\n\n# of each file that contains headers.\n",
        "Line" : 496,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# install all the sample configs, including subdirs (tar is required on debian systems, and common on others)\n",
        "Line" : 593,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# RUN_IN_PLACE\n",
        "Line" : 732,
        "CharPositionInLine" : 6
      },
      "33" : {
        "Text" : "# userspace\n",
        "Line" : 739,
        "CharPositionInLine" : 6
      },
      "34" : {
        "Text" : "# KERNELRELEASE is nonempty, therefore we are building modules using the\n\n# \"kbuild\" system.  $(BASEPWD) is used here, instead of relative paths, because\n\n# that's what kbuild seems to require\n",
        "Line" : 745,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# For each module, there's an addition to obj-m or obj-$(CONFIG_foo)\n\n# plus a definition of foo-objs, which contains the full path to the\n\n# object file(s) that the module contains.  Unfortunately, this setup pollutes\n\n# the source directory with object files and other temporaries, but I can't\n\n# find a way around it.\n",
        "Line" : 773,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Subdirectory:  rtapi\n",
        "Line" : 779,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Subdirectory: rtapi/examples (unneeded?)\n",
        "Line" : 785,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Subdirectory: hal/components\n",
        "Line" : 787,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Subdirectory: hal/drivers\n",
        "Line" : 831,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Rules to make .o (object) files\n",
        "Line" : 1031,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Rules to make .o (object) files\n",
        "Line" : 1047,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#../rtlib/uparport$(MODULE_EXT): $(addprefix objects/rt,$(uparport-objs))\n",
        "Line" : 1084,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Phony so that it is always rebuilt when requested, not because it\n\n# shouldn't exist as a file\n",
        "Line" : 1137,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# When you depend on objects/var-ZZZ you are depending on the contents of the\n\n# variable ZZZ, which is assumed to depend on a Makefile, a Submakefile, or\n\n# Makefile.inc\n",
        "Line" : 1177,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# vim:ts=8:sts=8:sw=8:noet:\n",
        "Line" : 1193,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 46,
      "Errorlog" : "line 1026:33 token recognition error at: '\\0'\nline 1150:42 token recognition error at: '\\0'\nline 1151:40 token recognition error at: '\\0'\nline 1152:40 token recognition error at: '\\0'\n"
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 10566
}