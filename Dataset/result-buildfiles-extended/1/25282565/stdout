{
  "Repository" : "25282565",
  "Revision" : "HEAD",
  "ObjectId" : "8dbddf3eb44706d3d88309db614f2cae0dffb225",
  "CommitTime" : "2019-03-16T17:37:35Z",
  "Files" : {
    "src/CMakeLists.txt" : {
      "ObjectId" : "66dd650aca8bc895ebfd0001a46559de60baee2c",
      "LastModified" : "2018-09-08T02:38:23Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/challenge/CMakeLists.txt" : {
      "ObjectId" : "3779bd606e371a4a9aad411c2627ffc3ae194a06",
      "LastModified" : "2018-09-08T02:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  INCLUDE_DIRS include\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n\n# include_directories(include)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Declare a C++ executable\n\n# add_executable(challenge_node src/challenge_node.cpp)\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Specify libraries to link a library or executable target against\n\n# target_link_libraries(challenge_node\n\n#   ${catkin_LIBRARIES}\n\n# )\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n\n# catkin_add_gtest(${PROJECT_NAME}-test test/test_challenge.cpp)\n\n# if(TARGET ${PROJECT_NAME}-test)\n\n#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})\n\n# endif()\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "src/decision_igvc/CMakeLists.txt" : {
      "ObjectId" : "105c1914558c23827539dfeda05964ebd1b6d25d",
      "LastModified" : "2019-03-16T17:37:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build in \"Release\" (with lots of compiler optimizations) by default\n\n# (If built in \"Debug\", some functions can take orders of magnitude longer)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Find catkin macros and libraries\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n\n# include_directories(include)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Declare a C++ executable\n\n# add_executable(sample_package_node src/sample_package_node.cpp)\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Specify libraries to link a library or executable target against\n\n# target_link_libraries(sample_package_node\n\n#   ${catkin_LIBRARIES}\n\n# )\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# gTest\n",
        "Line" : 94,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#TODO: gps_decision tests\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# rostest\n",
        "Line" : 116,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "src/drag_race_iarrc/CMakeLists.txt" : {
      "ObjectId" : "0c9167d9713fe8c29687c4d38dcd7d30b8042421",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build in \"Release\" (with lots of compiler optimizations) by default\n\n# (If built in \"Debug\", some functions can take orders of magnitude longer)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This exports the compile commands so people using Vim with YouCompleteMe\n\n# can have easy autocompletion\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Find catkin macros and libraries\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## System dependencies are found with CMake's conventions\n\n# find_package(Boost REQUIRED COMPONENTS system)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO: Wait. Do we need this line if we're not \"exporting\" the headers from the package\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Declare a C++ executable\n\n# add_executable(${PROJECT_NAME}_node src/drag_race_node.cpp)\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# TODO: Perhaps rename to something like `drag_race_controller_node`\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Specify libraries to link a library or executable target against\n\n# target_link_libraries(${PROJECT_NAME}_node\n\n#   ${catkin_LIBRARIES}\n\n# )\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n\n# catkin_add_gtest(${PROJECT_NAME}-test test/test_drag_race.cpp)\n\n# if(TARGET ${PROJECT_NAME}-test)\n\n#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})\n\n# endif()\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Adding gtests to the package\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# TODO: Maybe some rostests?\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "## Add folders to be run by python nosetests\n\n# catkin_add_nosetests(test)\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "src/drivers/CMakeLists.txt" : {
      "ObjectId" : "5ca575c93936686e304e7d90eab37a46848609bf",
      "LastModified" : "2018-09-08T02:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unfortunately some 3rd party libraries we use aren't support in C++17,\n\n# so we have to stick with C++14 for now\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Find catkin macros and libraries\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Adding rostest to the package\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# name the test and link it to the .test file and the .cpp file itself, this will allow\n\n# \"catkin_make run_tests\" to be able to find and run this rostest\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "src/localisation_igvc/CMakeLists.txt" : {
      "ObjectId" : "a1e5bd7b5d716a8d278417f2ad5dea8b8a7e5c6a",
      "LastModified" : "2018-09-08T02:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This package is currently just used to house the EKF launch file. \n\n# If we end up adding more in-house localisation things, they should go here\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/mapping_igvc/CMakeLists.txt" : {
      "ObjectId" : "efc8d009c8d8d5a7c1b0805680dcd1b988fa286b",
      "LastModified" : "2018-09-08T02:38:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build in \"Release\" (with lots of compiler optimizations) by default\n\n# (If built in \"Debug\", some functions can take orders of magnitude longer)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Find catkin macros and libraries\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################\n\n## Declare ROS messages, services and actions ##\n\n################################################\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## To declare and build messages, services or actions from within this\n\n## package, follow these steps:\n\n## * Let MSG_DEP_SET be the set of packages whose message types you use in\n\n##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).\n\n## * In the file package.xml:\n\n##   * add a build_depend tag for \"message_generation\"\n\n##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET\n\n##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in\n\n##     but can be declared for certainty nonetheless:\n\n##     * add a run_depend tag for \"message_runtime\"\n\n## * In this file (CMakeLists.txt):\n\n##   * add \"message_generation\" and every package in MSG_DEP_SET to\n\n##     find_package(catkin REQUIRED COMPONENTS ...)\n\n##   * add \"message_runtime\" and every package in MSG_DEP_SET to\n\n##     catkin_package(CATKIN_DEPENDS ...)\n\n##   * uncomment the add_*_files sections below as needed\n\n##     and list every .msg/.srv/.action file to be processed\n\n##   * uncomment the generate_messages entry below\n\n##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Generate messages in the 'msg' folder\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Generate added messages and services with any dependencies listed here\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#INCLUDE_DIRS include\n",
        "Line" : 60,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Declare a C++ executable\n\n# TODO\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Specify libraries to link a library or executable target against\n\n# target_link_libraries(${PROJECT_NAME}_node\n\n#   ${catkin_LIBRARIES}\n\n# )\n\n# TODO\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#gTest\n\n# rostest\n\n# TODO: Maybe? Not sure if we need rostests for the ObstacleManager\n",
        "Line" : 90,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 15
    },
    "src/mapping_msgs_urc/CMakeLists.txt" : {
      "ObjectId" : "d0ad4d99c46dd9714ef4ab6b7d5aa708924ce051",
      "LastModified" : "2018-11-10T19:11:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################\n\n## Declare ROS messages, services and actions ##\n\n################################################\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Generate messages in the 'msg' folder\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Generate added messages and services with any dependencies listed here\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/mapping_urc/CMakeLists.txt" : {
      "ObjectId" : "9d0262a1c23ae0074b14f74e3fee40738451f915",
      "LastModified" : "2018-11-10T19:11:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build in \"Release\" (with lots of compiler optimizations) by default\n\n# (If built in \"Debug\", some functions can take orders of magnitude longer)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Find catkin macros and libraries\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Bring in the `multi_resolution_graph` library\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Declare a C++ executable\n\n# TODO: Issue #348\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Specify libraries to link a library or executable target against\n\n# target_link_libraries(${PROJECT_NAME}_node\n\n#   ${catkin_LIBRARIES}\n\n# )\n\n# TODO: Issue #348\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#TODO: gTest (Issue #348)\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#TODO: rosTest (Issue #348)\n",
        "Line" : 53,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 12
    },
    "src/pathfinding_igvc/CMakeLists.txt" : {
      "ObjectId" : "3b9e18bfbd4f99fdb3fc75d66f9ea7bd008dd83e",
      "LastModified" : "2018-11-10T19:11:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build in \"Release\" (with lots of compiler optimizations) by default\n\n# (If built in \"Debug\", some functions can take orders of magnitude longer)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Find catkin macros and libraries\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# INCLUDE_DIRS include\n",
        "Line" : 18,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n\n# include_directories(include)\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Declare a C++ executable\n\n# add_executable(sample_package_node src/sample_package_node.cpp)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Specify libraries to link a library or executable target against\n\n# target_link_libraries(sample_package_node\n\n#   ${catkin_LIBRARIES}\n\n# )\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Adding gtests to the package\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Adding rostest to the package\n",
        "Line" : 128,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# name the test and link it to the .test file and the .cpp file itself, this will allow\n\n# \"catkin_make run_tests\" to be able to find and run this rostest\n",
        "Line" : 130,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "src/reactive_system_urc/CMakeLists.txt" : {
      "ObjectId" : "a3012ea0d16dcbddecea990c1774277cef360389",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build in \"Release\" (with lots of compiler optimizations) by default\n\n# (If built in \"Debug\", some functions can take orders of magnitude longer)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Find catkin macros and libraries\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Declare a C++ executable\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Specify libraries to link a library or executable target against\n\n# target_link_libraries(sample_package_node\n\n#   ${catkin_LIBRARIES}\n\n# )\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/sample_package/CMakeLists.txt" : {
      "ObjectId" : "ab0a0ab8b3cf7af8ecfbba510c0c5479f17249ca",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build in \"Release\" (with lots of compiler optimizations) by default\n\n# (If built in \"Debug\", some functions can take orders of magnitude longer)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## System dependencies are found with CMake's conventions\n\n# find_package(Boost REQUIRED COMPONENTS system)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Uncomment this if the package has a setup.py. This macro ensures\n\n## modules and global scripts declared therein get installed\n\n## See http://ros.org/doc/api/catkin/html/user_guide/setup_dot_py.html\n\n# catkin_python_setup()\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################\n\n## Declare ROS messages, services and actions ##\n\n################################################\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## To declare and build messages, services or actions from within this\n\n## package, follow these steps:\n\n## * Let MSG_DEP_SET be the set of packages whose message types you use in\n\n##   your messages/services/actions (e.g. std_msgs, actionlib_msgs, ...).\n\n## * In the file package.xml:\n\n##   * add a build_depend tag for \"message_generation\"\n\n##   * add a build_depend and a run_depend tag for each package in MSG_DEP_SET\n\n##   * If MSG_DEP_SET isn't empty the following dependency has been pulled in\n\n##     but can be declared for certainty nonetheless:\n\n##     * add a run_depend tag for \"message_runtime\"\n\n## * In this file (CMakeLists.txt):\n\n##   * add \"message_generation\" and every package in MSG_DEP_SET to\n\n##     find_package(catkin REQUIRED COMPONENTS ...)\n\n##   * add \"message_runtime\" and every package in MSG_DEP_SET to\n\n##     catkin_package(CATKIN_DEPENDS ...)\n\n##   * uncomment the add_*_files sections below as needed\n\n##     and list every .msg/.srv/.action file to be processed\n\n##   * uncomment the generate_messages entry below\n\n##   * add every package in MSG_DEP_SET to generate_messages(DEPENDENCIES ...)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Generate messages in the 'msg' folder\n\n# add_message_files(\n\n#   FILES\n\n#   Message1.msg\n\n#   Message2.msg\n\n# )\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Generate services in the 'srv' folder\n\n# add_service_files(\n\n#   FILES\n\n#   Service1.srv\n\n#   Service2.srv\n\n# )\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Generate actions in the 'action' folder\n\n# add_action_files(\n\n#   FILES\n\n#   Action1.action\n\n#   Action2.action\n\n# )\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Generate added messages and services with any dependencies listed here\n\n# generate_messages(\n\n#   DEPENDENCIES\n\n#   std_msgs\n\n# )\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "################################################\n\n## Declare ROS dynamic reconfigure parameters ##\n\n################################################\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## To declare and build dynamic reconfigure parameters within this\n\n## package, follow these steps:\n\n## * In the file package.xml:\n\n##   * add a build_depend and a run_depend tag for \"dynamic_reconfigure\"\n\n## * In this file (CMakeLists.txt):\n\n##   * add \"dynamic_reconfigure\" to\n\n##     find_package(catkin REQUIRED COMPONENTS ...)\n\n##   * uncomment the \"generate_dynamic_reconfigure_options\" section below\n\n##     and list every .cfg file to be processed\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Generate dynamic reconfigure parameters in the 'cfg' folder\n\n# generate_dynamic_reconfigure_options(\n\n#   cfg/DynReconf1.cfg\n\n#   cfg/DynReconf2.cfg\n\n# )\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#  LIBRARIES sample_package\n\n#  CATKIN_DEPENDS roscpp std_msgs\n\n#  DEPENDS system_lib\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n\n# include_directories(include)\n",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Declare a C++ library\n\n# add_library(sample_package\n\n#   src/${PROJECT_NAME}/sample_package.cpp\n\n# )\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "## Add cmake target dependencies of the library\n\n## as an example, code may need to be generated before libraries\n\n## either from message generation or dynamic reconfigure\n\n# add_dependencies(sample_package ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## Declare a C++ executable\n\n# add_executable(sample_package_node src/sample_package_node.cpp)\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## Add cmake target dependencies of the executable\n\n## same as for the library above\n\n# add_dependencies(sample_package_node ${${PROJECT_NAME}_EXPORTED_TARGETS} ${catkin_EXPORTED_TARGETS})\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## Specify libraries to link a library or executable target against\n\n# target_link_libraries(sample_package_node\n\n#   ${catkin_LIBRARIES}\n\n# )\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#############\n\n## Install ##\n\n#############\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# all install targets should use catkin DESTINATION variables\n\n# See http://ros.org/doc/api/catkin/html/adv_user_guide/variables.html\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "## Mark executable scripts (Python etc.) for installation\n\n## in contrast to setup.py, you can choose the destination\n\n# install(PROGRAMS\n\n#   scripts/my_python_script\n\n#   DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Mark executables and/or libraries for installation\n\n# install(TARGETS sample_package sample_package_node\n\n#   ARCHIVE DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   LIBRARY DESTINATION ${CATKIN_PACKAGE_LIB_DESTINATION}\n\n#   RUNTIME DESTINATION ${CATKIN_PACKAGE_BIN_DESTINATION}\n\n# )\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mark cpp header files for installation\n\n# install(DIRECTORY include/${PROJECT_NAME}/\n\n#   DESTINATION ${CATKIN_PACKAGE_INCLUDE_DESTINATION}\n\n#   FILES_MATCHING PATTERN \"*.h\"\n\n#   PATTERN \".svn\" EXCLUDE\n\n# )\n",
        "Line" : 176,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mark other files for installation (e.g. launch and bag files, etc.)\n\n# install(FILES\n\n#   # myfile1\n\n#   # myfile2\n\n#   DESTINATION ${CATKIN_PACKAGE_SHARE_DESTINATION}\n\n# )\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n\n# if(TARGET ${PROJECT_NAME}-test)\n\n#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})\n\n# endif()\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Adding gtests to the package\n",
        "Line" : 200,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# Adding rostest to the package\n",
        "Line" : 204,
        "CharPositionInLine" : 4
      },
      "32" : {
        "Text" : "# name the test and link it to the .test file and the .cpp file itself, this will allow\n\n# \"catkin_make run_tests\" to be able to find and run this rostest\n",
        "Line" : 206,
        "CharPositionInLine" : 4
      },
      "33" : {
        "Text" : "## Add folders to be run by python nosetests\n\n# catkin_add_nosetests(test)\n",
        "Line" : 212,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 34
    },
    "src/sb_gazebo/CMakeLists.txt" : {
      "ObjectId" : "21223140781538c56a3fbecd661565dce5156698",
      "LastModified" : "2019-02-23T21:02:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  INCLUDE_DIRS include\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n\n# include_directories(include)\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Declare a C++ executable\n\n# add_executable(gazebo_node src/gazebo_node.cpp)\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Specify libraries to link a library or executable target against\n\n# target_link_libraries(gazebo_node\n\n#   ${catkin_LIBRARIES}\n\n# )\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n\n# catkin_add_gtest(${PROJECT_NAME}-test test/test_gazebo.cpp)\n\n# if(TARGET ${PROJECT_NAME}-test)\n\n#   target_link_libraries(${PROJECT_NAME}-test ${PROJECT_NAME})\n\n# endif()\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "src/sb_geom/CMakeLists.txt" : {
      "ObjectId" : "ddc42f9ef829e063ddf2ec0647a5f1231e45bd00",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Add our custom cmake files to the `CMAKE_MODULE_PATH` so that we can use them here\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Since this is a highly performance sensitive section of the codebase\n\n# build in \"Release\" (with lots of compiler optimizations) by default\n\n# (If built in \"Debug\", some functions can take up to 250x longer)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make code position independent. This is required to let us link against\n\n# the dlib shared library\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# We currently have dlib downloaded because we need a newer version then\n\n# the Ubuntu system version (we need >19.6)\n\n# Eventually we should switch back to using the Ubuntu system version (once\n\n# it's updated)\n\n#add_subdirectory(./dlib dlib_build)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n\n# include_directories(include)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We have this include because the system version of dlib on Ubuntu\n\n# is out of date and is missing the \"global_optimization\" part of the\n\n# library. Eventually, if the system version of dlib is updated to >19.6,\n\n# we should be able to remove this line and delete the `dlib` folder.\n\n# Current system version of dlib in Ubuntu is indicated here:\n\n#   https://launchpad.net/ubuntu/+source/dlib\n",
        "Line" : 64,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# Put all the libraries we use into a single variable\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Declare C++ libraries\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Find all the `.h` and `.cpp` files for the `sb_geom` library\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# We have this include because the system version of dlib on Ubuntu\n\n# is out of date and is missing the \"global_optimization\" part of the\n\n# library. Eventually, if the system version of dlib is updated to >19.6,\n\n# we should be able to remove this line and delete the `dlib` folder.\n\n# Current system version of dlib in Ubuntu is indicated here:\n\n#   https://launchpad.net/ubuntu/+source/dlib\n",
        "Line" : 87,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "# NOTE: We have to make this library static so we can link against dlib\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "src/sb_geom/cmake/FindALGLIB.cmake" : {
      "ObjectId" : "f88035eeeacc4ab0bab185b5faea989262de1fa9",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find ALGLIB\n\n# Find the native ALGLIB includes and library\n\n#\n\n#  ALGLIB_INCLUDE_DIRS    - where to find fftw3.h\n\n#  ALGLIB_LIBRARIES   - List of libraries when using FFTW.\n\n#  ALGLIB_FOUND       - True if FFTW found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set ALGLIB_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/sb_geom/cmake/FindDLIB.cmake" : {
      "ObjectId" : "5b8d3f54585e4ed1dffda01294f3a8585a09eb40",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find dlib\n\n# Find the native dlib includes and library\n\n#\n\n#  DLIB_INCLUDE_DIRS - dlib include directories\n\n#  DLIB_LIBRARIES - dlib libraries\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Handle the REQUIRED argument and set the <UPPERCASED_NAME>_FOUND variable\n\n# The package is found if all variables listed are TRUE\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/sb_geom/dlib/dlib/CMakeLists.txt" : {
      "ObjectId" : "a0ba1f09c11714c6af1b39b09289f53e68163582",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\r\n\n# This is a CMake makefile.  You can find the cmake utility and\r\n\n# information about it at http://www.cmake.org\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Adhere to GNU filesystem layout conventions\r\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# default to a Release build (except if CMAKE_BUILD_TYPE is set)\r\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Set DLIB_VERSION in the including CMake file so they can use it to do whatever they want. \r\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set only because there are old target_link_libraries() statements in the\r\n\n# FindCUDA.cmake file that comes with CMake that error out if the new behavior\r\n\n# is used.  In newer versions of CMake we can instead set CUDA_LINK_LIBRARIES_KEYWORD which fixes this issue.\r\n",
        "Line" : 36,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# Suppress superfluous randlib warnings about libdlib.a having no symbols on MacOSX.\r\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Don't try to call add_library(dlib) and setup dlib's stuff if it has already\r\n\n# been done by some other part of the current cmake project.  We do this\r\n\n# because it avoids getting warnings/errors about cmake policy CMP0002.  This\r\n\n# happens when a project tries to call add_subdirectory() on dlib more than\r\n\n# once.  This most often happens when the top level of a project depends on two\r\n\n# or more other things which both depend on dlib. \r\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#set (DLIB_USE_FFTW_STR \"Disable this if you don't want to link against fftw\" )\r\n",
        "Line" : 101,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# Set these variables so they are set in the config.h.in file when dlib\r\n\n# is installed.\r\n",
        "Line" : 117,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# Set these variables so they are set in the config.h.in file when dlib\r\n\n# is installed.\r\n",
        "Line" : 124,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# Never force the asserts off when doing an in project build.  The only\r\n\n# time this matters is when using visual studio.  The visual studio IDE\r\n\n# has a drop down that lets the user select either release or debug\r\n\n# builds.  The DLIB_ASSERT macro is setup to enable/disable automatically\r\n\n# based on this drop down (via preprocessor magic).  However, if\r\n\n# DLIB_DISABLE_ASSERTS is defined it permanently disables asserts no\r\n\n# matter what, which would defeat the visual studio drop down.  So here\r\n\n# we make a point to not do that kind of severe disabling when in a\r\n\n# project build.  It should also be pointed out that DLIB_DISABLE_ASSERTS\r\n\n# is only needed when building and installing dlib as a separately\r\n\n# installed library.  It doesn't matter when doing an in project build. \r\n",
        "Line" : 129,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "#option(DLIB_USE_FFTW ${DLIB_USE_FFTW_STR} OFF)\r\n",
        "Line" : 153,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "#option(DLIB_USE_FFTW ${DLIB_USE_FFTW_STR} ON)\r\n",
        "Line" : 163,
        "CharPositionInLine" : 6
      },
      "13" : {
        "Text" : "#toggle_preprocessor_switch(DLIB_USE_FFTW)\r\n",
        "Line" : 172,
        "CharPositionInLine" : 3
      },
      "14" : {
        "Text" : "# we want to link to the right stuff depending on our platform.  \r\n",
        "Line" : 243,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "###############################################################################\r\n",
        "Line" : 244,
        "CharPositionInLine" : 32
      },
      "16" : {
        "Text" : "############################################################################\r\n",
        "Line" : 250,
        "CharPositionInLine" : 20
      },
      "17" : {
        "Text" : "# If both X11 and anaconda are installed, it's possible for the\r\n\n# anaconda path to appear before /opt/X11, so we remove anaconda.\r\n",
        "Line" : 255,
        "CharPositionInLine" : 15
      },
      "18" : {
        "Text" : "# Make sure X11 is in the include path.  Note that we look for\r\n\n# Xlocale.h rather than Xlib.h because it avoids finding a partial\r\n\n# copy of the X11 headers on systems with anaconda installed.\r\n",
        "Line" : 266,
        "CharPositionInLine" : 15
      },
      "19" : {
        "Text" : "##################################################################################\r\n",
        "Line" : 294,
        "CharPositionInLine" : 14
      },
      "20" : {
        "Text" : "# link to the nsl library if it exists.  this is something you need sometimes \r\n",
        "Line" : 295,
        "CharPositionInLine" : 9
      },
      "21" : {
        "Text" : "# link to the socket library if it exists.  this is something you need on solaris\r\n",
        "Line" : 301,
        "CharPositionInLine" : 9
      },
      "22" : {
        "Text" : "##################################################################################\r\n",
        "Line" : 324,
        "CharPositionInLine" : 15
      },
      "23" : {
        "Text" : "# try to find libpng \r\n",
        "Line" : 353,
        "CharPositionInLine" : 9
      },
      "24" : {
        "Text" : "# Make sure there isn't something wrong with the version of LIBPNG\r\n\n# installed on this system.  \r\n",
        "Line" : 355,
        "CharPositionInLine" : 9
      },
      "25" : {
        "Text" : "# If we can't find libpng then statically compile it in.\r\n",
        "Line" : 366,
        "CharPositionInLine" : 12
      },
      "26" : {
        "Text" : "# try to find libjpeg \r\n",
        "Line" : 421,
        "CharPositionInLine" : 9
      },
      "27" : {
        "Text" : "# Make sure there isn't something wrong with the version of libjpeg \r\n\n# installed on this system.  Also don't use the installed libjpeg\r\n\n# if this is an APPLE system because apparently it's broken (as of 2015/01/01).\r\n",
        "Line" : 423,
        "CharPositionInLine" : 9
      },
      "28" : {
        "Text" : "# If we can't find libjpeg then statically compile it in.\r\n",
        "Line" : 434,
        "CharPositionInLine" : 12
      },
      "29" : {
        "Text" : "# Try to find BLAS, LAPACK and MKL\r\n",
        "Line" : 491,
        "CharPositionInLine" : 10
      },
      "30" : {
        "Text" : "# There is some bug in cmake that causes it to mess up the\r\n\n# -std=c++11 option if you let it propagate it to nvcc in some\r\n\n# cases.  So instead we disable this and manually include\r\n\n# things from CMAKE_CXX_FLAGS in the CUDA_NVCC_FLAGS list below.\r\n",
        "Line" : 541,
        "CharPositionInLine" : 12
      },
      "31" : {
        "Text" : "# Grab all the -D flags from CMAKE_CXX_FLAGS so we can pass them\r\n\n# to nvcc.\r\n",
        "Line" : 547,
        "CharPositionInLine" : 15
      },
      "32" : {
        "Text" : "# Note that we add __STRICT_ANSI__ to avoid freaking out nvcc with gcc specific\r\n\n# magic in the standard C++ header files (since nvcc uses gcc headers on\r\n\n# linux).\r\n",
        "Line" : 554,
        "CharPositionInLine" : 12
      },
      "33" : {
        "Text" : "# sometimes this setting isn't propagated to NVCC, which then causes the\r\n\n# compile to fail.  So make sure it's propagated.\r\n",
        "Line" : 563,
        "CharPositionInLine" : 15
      },
      "34" : {
        "Text" : "# Visual studio doesn't have -fPIC so don't do it in that case.\r\n",
        "Line" : 565,
        "CharPositionInLine" : 29
      },
      "35" : {
        "Text" : "# make sure cuda is really working by doing a test compile\r\n",
        "Line" : 573,
        "CharPositionInLine" : 15
      },
      "36" : {
        "Text" : "# see https://github.com/davisking/dlib/issues/363\r\n",
        "Line" : 580,
        "CharPositionInLine" : 29
      },
      "37" : {
        "Text" : "# Find where cuSOLVER is since the FindCUDA cmake package doesn't\r\n\n# bother to look for it.\r\n",
        "Line" : 610,
        "CharPositionInLine" : 12
      },
      "38" : {
        "Text" : "# Also find OpenMP since cuSOLVER needs it.  Importantly, we only\r\n\n# look for one to link to if our use of BLAS, specifically the\r\n\n# Intel MKL, hasn't already decided what to use.  This is because\r\n\n# it makes the MKL bug out if you link to another openmp lib other\r\n\n# than Intel's when you use the MKL.\r\n",
        "Line" : 615,
        "CharPositionInLine" : 12
      },
      "39" : {
        "Text" : "# make sure sqlite3.h is in the include path\r\n",
        "Line" : 666,
        "CharPositionInLine" : 9
      },
      "40" : {
        "Text" : "# make sure fftw3.h is in the include path\r\n",
        "Line" : 681,
        "CharPositionInLine" : 9
      },
      "41" : {
        "Text" : "# Tell CMake to build dlib via add_library()/cuda_add_library()\r\n",
        "Line" : 695,
        "CharPositionInLine" : 6
      },
      "42" : {
        "Text" : "# The old cuda_add_library() command doesn't support CMake's newer dependency\r\n\n# stuff, so we have to set the include path manually still, which we do here.\r\n",
        "Line" : 697,
        "CharPositionInLine" : 9
      },
      "43" : {
        "Text" : "##### end of if NOT DLIB_ISO_CPP_ONLY ##########################################################\r\n",
        "Line" : 714,
        "CharPositionInLine" : 13
      },
      "44" : {
        "Text" : "# Allow the unit tests to ask us to compile the all/source.cpp file just to make sure it compiles.\r\n",
        "Line" : 739,
        "CharPositionInLine" : 3
      },
      "45" : {
        "Text" : "# Install the library\r\n",
        "Line" : 756,
        "CharPositionInLine" : 3
      },
      "46" : {
        "Text" : "# Windows (including cygwin) considers .dll to be runtime artifacts\r\n",
        "Line" : 764,
        "CharPositionInLine" : 63
      },
      "47" : {
        "Text" : "# Windows considers .dll to be runtime artifacts\r\n",
        "Line" : 770,
        "CharPositionInLine" : 63
      },
      "48" : {
        "Text" : "# overwrite config.h with the configured one\r\n",
        "Line" : 781,
        "CharPositionInLine" : 7
      },
      "49" : {
        "Text" : "## Config.cmake generation and installation\r\n",
        "Line" : 787,
        "CharPositionInLine" : 7
      },
      "50" : {
        "Text" : "## dlib-1.pc generation and installation\r\n",
        "Line" : 808,
        "CharPositionInLine" : 7
      },
      "51" : {
        "Text" : "# Give the output library files names that are unique functions of the\r\n\n# visual studio mode that compiled them.  We do this so that people who\r\n\n# compile dlib and then copy the .lib files around (which they shouldn't be\r\n\n# doing in the first place!) will hopefully be slightly less confused by\r\n\n# what happens since, at the very least, the filenames will indicate what\r\n\n# visual studio runtime they go with.\r\n",
        "Line" : 819,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 52
    },
    "src/sb_geom/dlib/dlib/cmake_utils/add_global_compiler_switch.cmake" : {
      "ObjectId" : "5f3d83ce4eafbdd17e2ecd2a7d84c28d1a774492",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make macros that can add compiler switches to the entire project.  Not just\n\n# to the current cmake folder being built.  \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# If removing the switch would change the flags then it's already present\n\n# and we don't need to do anything.\n",
        "Line" : 10,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 2
    },
    "src/sb_geom/dlib/dlib/cmake_utils/check_if_neon_available.cmake" : {
      "ObjectId" : "41aaa042117cc11499aa3c7fe8543317ae1f018d",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This script checks if __ARM_NEON__ is defined for your compiler\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Don't rerun this script if its already been executed.\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Set to false unless we find out otherwise in the code below.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# test if __ARM_NEON__ is defined\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/sb_geom/dlib/dlib/cmake_utils/set_compiler_specific_options.cmake" : {
      "ObjectId" : "1c6eaaea3c90e0474c870f9eab6c17470ee95d7d",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# push USING_OLD_VISUAL_STUDIO_COMPILER to the parent so we can use it in the\n\n# examples CMakeLists.txt file.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Setup some options to allow a user to enable SSE and AVX instruction use.  \n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# else if using Visual Studio \n",
        "Line" : 63,
        "CharPositionInLine" : 60
      },
      "3" : {
        "Text" : "# Use SSE2 by default when using Visual Studio.\n",
        "Line" : 64,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "# Visual studio doesn't have an /arch:SSE2 flag when building in 64 bit modes.\n\n# So only give it when we are doing a 32 bit build.\n",
        "Line" : 75,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Visual studio doesn't have an /arch:SSE2 flag when building in 64 bit modes.\n\n# So only give it when we are doing a 32 bit build.\n",
        "Line" : 85,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# By default, g++ won't warn or error if you forget to return a value in a\n\n# function which requires you to do so.  This option makes it give a warning\n\n# for doing this.\n",
        "Line" : 107,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "# Increase clang's default tempalte recurision depth so the dnn examples don't error out.\n",
        "Line" : 114,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "# By default Visual Studio does not support .obj files with more than 65k sections.\n\n# However, code generated by file_to_code_ex and code using DNN module can have\n\n# them.  So this flag enables > 65k sections, but produces .obj files\n\n# that will not be readable by VS 2005.\n",
        "Line" : 119,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "# Clang can compile all Dlib's code at Windows platform. Tested with Clang 5\n",
        "Line" : 126,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 10
    },
    "src/sb_geom/dlib/dlib/cmake_utils/tell_visual_studio_to_use_static_runtime.cmake" : {
      "ObjectId" : "db9f5e919a17a851f6643e033b777ed3d51e1a1e",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Including this cmake script into your cmake project will cause visual studio\r\n\n# to build your project against the static C runtime.\r\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/sb_geom/dlib/dlib/cmake_utils/test_for_cpp11/CMakeLists.txt" : {
      "ObjectId" : "c6037a4dd32a412e3717b1d2f65100f622a7ce86",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to enable C++11\r\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/sb_geom/dlib/dlib/cmake_utils/test_for_cuda/CMakeLists.txt" : {
      "ObjectId" : "eb2d120c181193e7aaeeca9e66805dec97601c19",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Override the FindCUDA.cmake setting to avoid duplication of host flags if using a toolchain:\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/sb_geom/dlib/dlib/cmake_utils/test_for_cudnn/CMakeLists.txt" : {
      "ObjectId" : "5560882596fde6ad4e7a337a5411247472909004",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Override the FindCUDA.cmake setting to avoid duplication of host flags if using a toolchain:\r\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/sb_geom/dlib/dlib/cmake_utils/test_for_neon/CMakeLists.txt" : {
      "ObjectId" : "5b6c24e214106aa2c9df9e9573bbdfcaaf7f0f3c",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/sb_geom/dlib/dlib/cmake_utils/use_cpp_11.cmake" : {
      "ObjectId" : "4b66d70d9fba289268f89e90fe86456cba0a10f4",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This script creates a function, enable_cpp11_for_target(), which checks if your\n\n# compiler has C++11 support and enables it if it does.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Set to false unless we find out otherwise in the code below.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Now turn on the appropriate compiler switch to enable C++11 if you have a\n\n# C++11 compiler.  In CMake 3.1 there is a simple flag you can set, but earlier\n\n# verions of CMake are not so convenient.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Since we don't know what compiler this is just try to build a c++11 project and see if it compiles.\n",
        "Line" : 55,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Set a flag if the compiler you are using is capable of providing C++11 features.\n",
        "Line" : 60,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "# Tell cmake that we need C++11 for dlib\n",
        "Line" : 73,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# cxx_decltype_incomplete_return_types  # purposfully commented out because cmake errors out on this when using visual studio and cmake 3.8.0\n",
        "Line" : 83,
        "CharPositionInLine" : 12
      },
      "7" : {
        "Text" : "# Sometimes clang will lie and report that it supports C++11 when\n\n# really it doesn't support thread_local.  So check for that.\n",
        "Line" : 88,
        "CharPositionInLine" : 9
      },
      "8" : {
        "Text" : "# Always enable whatever partial C++11 support we have, even if it isn't full\n\n# support, and just hope for the best.\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "src/sb_geom/dlib/dlib/external/cblas/CMakeLists.txt" : {
      "ObjectId" : "0d8e78264d92f33ebb9b0448eea6c56abd57e23e",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\r\n\n# This is a CMake makefile.  You can find the cmake utility and\r\n\n# information about it at http://www.cmake.org\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#cblas_ccopy.c\r\n",
        "Line" : 18,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "#cblas_cgbmv.c\r\n",
        "Line" : 21,
        "CharPositionInLine" : 3
      },
      "3" : {
        "Text" : "#cblas_chbmv.c\r\n\n#cblas_chemm.c\r\n\n#cblas_chemv.c\r\n\n#cblas_cher2.c\r\n\n#cblas_cher2k.c\r\n\n#cblas_cher.c\r\n\n#cblas_cherk.c\r\n\n#cblas_chpmv.c\r\n\n#cblas_chpr2.c\r\n\n#cblas_chpr.c\r\n",
        "Line" : 26,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "#cblas_csscal.c\r\n\n#cblas_cswap.c\r\n\n#cblas_csymm.c\r\n\n#cblas_csyr2k.c\r\n\n#cblas_csyrk.c\r\n\n#cblas_ctbmv.c\r\n\n#cblas_ctbsv.c\r\n\n#cblas_ctpmv.c\r\n\n#cblas_ctpsv.c\r\n\n#cblas_ctrmm.c\r\n\n#cblas_ctrmv.c\r\n",
        "Line" : 37,
        "CharPositionInLine" : 3
      },
      "5" : {
        "Text" : "#cblas_ctrsv.c\r\n\n#cblas_dasum.c\r\n",
        "Line" : 49,
        "CharPositionInLine" : 3
      },
      "6" : {
        "Text" : "#cblas_dcopy.c\r\n",
        "Line" : 52,
        "CharPositionInLine" : 3
      },
      "7" : {
        "Text" : "#cblas_dgbmv.c\r\n",
        "Line" : 54,
        "CharPositionInLine" : 3
      },
      "8" : {
        "Text" : "#cblas_dnrm2.c\r\n\n#cblas_drot.c\r\n\n#cblas_drotg.c\r\n\n#cblas_drotm.c\r\n\n#cblas_drotmg.c\r\n\n#cblas_dsbmv.c\r\n",
        "Line" : 58,
        "CharPositionInLine" : 3
      },
      "9" : {
        "Text" : "#cblas_dsdot.c\r\n\n#cblas_dspmv.c\r\n\n#cblas_dspr2.c\r\n\n#cblas_dspr.c\r\n\n#cblas_dswap.c\r\n\n#cblas_dsymm.c\r\n\n#cblas_dsymv.c\r\n\n#cblas_dsyr2.c\r\n\n#cblas_dsyr2k.c\r\n\n#cblas_dsyr.c\r\n\n#cblas_dsyrk.c\r\n\n#cblas_dtbmv.c\r\n\n#cblas_dtbsv.c\r\n\n#cblas_dtpmv.c\r\n\n#cblas_dtpsv.c\r\n\n#cblas_dtrmm.c\r\n\n#cblas_dtrmv.c\r\n",
        "Line" : 65,
        "CharPositionInLine" : 3
      },
      "10" : {
        "Text" : "#cblas_dtrsv.c\r\n\n#cblas_dzasum.c\r\n\n#cblas_dznrm2.c\r\n\n#cblas_icamax.c\r\n\n#cblas_idamax.c\r\n\n#cblas_isamax.c\r\n\n#cblas_izamax.c\r\n\n#cblas_sasum.c\r\n",
        "Line" : 83,
        "CharPositionInLine" : 3
      },
      "11" : {
        "Text" : "#cblas_scasum.c\r\n\n#cblas_scnrm2.c\r\n\n#cblas_scopy.c\r\n",
        "Line" : 92,
        "CharPositionInLine" : 3
      },
      "12" : {
        "Text" : "#cblas_sdsdot.c\r\n\n#cblas_sgbmv.c\r\n",
        "Line" : 96,
        "CharPositionInLine" : 3
      },
      "13" : {
        "Text" : "#cblas_snrm2.c\r\n\n#cblas_srot.c\r\n\n#cblas_srotg.c\r\n\n#cblas_srotm.c\r\n\n#cblas_srotmg.c\r\n\n#cblas_ssbmv.c\r\n",
        "Line" : 101,
        "CharPositionInLine" : 3
      },
      "14" : {
        "Text" : "#cblas_sspmv.c\r\n\n#cblas_sspr2.c\r\n\n#cblas_sspr.c\r\n\n#cblas_sswap.c\r\n\n#cblas_ssymm.c\r\n\n#cblas_ssymv.c\r\n\n#cblas_ssyr2.c\r\n\n#cblas_ssyr2k.c\r\n\n#cblas_ssyr.c\r\n\n#cblas_ssyrk.c\r\n\n#cblas_stbmv.c\r\n\n#cblas_stbsv.c\r\n\n#cblas_stpmv.c\r\n\n#cblas_stpsv.c\r\n\n#cblas_strmm.c\r\n\n#cblas_strmv.c\r\n",
        "Line" : 108,
        "CharPositionInLine" : 3
      },
      "15" : {
        "Text" : "#cblas_strsv.c\r\n",
        "Line" : 125,
        "CharPositionInLine" : 3
      },
      "16" : {
        "Text" : "#cblas_zcopy.c\r\n",
        "Line" : 128,
        "CharPositionInLine" : 3
      },
      "17" : {
        "Text" : "#cblas_zdscal.c\r\n\n#cblas_zgbmv.c\r\n",
        "Line" : 131,
        "CharPositionInLine" : 3
      },
      "18" : {
        "Text" : "#cblas_zhbmv.c\r\n\n#cblas_zhemm.c\r\n\n#cblas_zhemv.c\r\n\n#cblas_zher2.c\r\n\n#cblas_zher2k.c\r\n\n#cblas_zher.c\r\n\n#cblas_zherk.c\r\n\n#cblas_zhpmv.c\r\n\n#cblas_zhpr2.c\r\n\n#cblas_zhpr.c\r\n",
        "Line" : 137,
        "CharPositionInLine" : 3
      },
      "19" : {
        "Text" : "#cblas_zswap.c\r\n\n#cblas_zsymm.c\r\n\n#cblas_zsyr2k.c\r\n\n#cblas_zsyrk.c\r\n\n#cblas_ztbmv.c\r\n\n#cblas_ztbsv.c\r\n\n#cblas_ztpmv.c\r\n\n#cblas_ztpsv.c\r\n\n#cblas_ztrmm.c\r\n\n#cblas_ztrmv.c\r\n",
        "Line" : 148,
        "CharPositionInLine" : 3
      },
      "20" : {
        "Text" : "#cblas_ztrsv.c\r\n",
        "Line" : 159,
        "CharPositionInLine" : 3
      },
      "CommentCount" : 21
    },
    "src/sb_geom/dlib/dlib/external/pybind11/CMakeLists.txt" : {
      "ObjectId" : "eaf199a71128eb8cb13b9896ddede00427e67c68",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMakeLists.txt -- Build system for the pybind11 modules\r\n\n#\r\n\n# Copyright (c) 2015 Wenzel Jakob <wenzel@inf.ethz.ch>\r\n\n#\r\n\n# All rights reserved. Use of this source code is governed by a\r\n\n# BSD-style license that can be found in the LICENSE file.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# cmake warns if loaded from a min-3.0-required parent dir, so silence the warning:\r\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# CMake versions < 3.4.0 do not support try_compile/pthread checks without C as active language.\r\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check if pybind11 is being used directly or via add_subdirectory\r\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Cache variables so pybind11_add_module can be used in parent projects\r\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# NB: when adding a header don't forget to also add it to setup.py\r\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# extract project version from source\r\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# CMake >= 3.0\r\n",
        "Line" : 94,
        "CharPositionInLine" : 42
      },
      "8" : {
        "Text" : "# Build an interface library target:\r\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# to match exported target\r\n",
        "Line" : 97,
        "CharPositionInLine" : 50
      },
      "10" : {
        "Text" : "# GNUInstallDirs \"DATADIR\" wrong here; CMake search path wants \"share\".\r\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Remove CMAKE_SIZEOF_VOID_P from ConfigVersion.cmake since the library does\r\n\n# not depend on architecture specific settings or libraries.\r\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 12
    },
    "src/sb_geom/dlib/dlib/external/pybind11/tools/FindCatch.cmake" : {
      "ObjectId" : "9d490c5aade2151ebdd8cc84509361ba1c061f84",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the Catch test framework or download it (single header)\n\n#\n\n# This is a quick module for internal use. It assumes that Catch is\n\n# REQUIRED and that a minimum version is provided (not EXACT). If\n\n# a suitable version isn't found locally, the single header file\n\n# will be downloaded and placed in the build dir: PROJECT_BINARY_DIR.\n\n#\n\n# This code sets the following variables:\n\n#  CATCH_INCLUDE_DIR      - path to catch.hpp\n\n#  CATCH_VERSION          - version number\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Extract the version number from catch.hpp\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Download the single-header version of Catch\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Look for catch locally\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Download the header if it wasn't found or if it's outdated\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/sb_geom/dlib/dlib/external/pybind11/tools/FindEigen3.cmake" : {
      "ObjectId" : "9c546a05d859b18c49554d7ee7221cc486b7760e",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Eigen3 lib\n\n#\n\n# This module supports requiring a minimum version, e.g. you can do\n\n#   find_package(Eigen3 3.1.2)\n\n# to require version 3.1.2 or newer of Eigen3.\n\n#\n\n# Once done this will define\n\n#\n\n#  EIGEN3_FOUND - system has eigen lib with correct version\n\n#  EIGEN3_INCLUDE_DIR - the eigen include directory\n\n#  EIGEN3_VERSION - eigen version\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2007 Montel Laurent, <montel@kde.org>\n\n# Copyright (c) 2008, 2009 Gael Guennebaud, <g.gael@free.fr>\n\n# Copyright (c) 2009 Benoit Jacob <jacob.benoit.1@gmail.com>\n\n# Redistribution and use is allowed according to the terms of the 2-clause BSD license.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "src/sb_geom/dlib/dlib/external/pybind11/tools/FindPythonLibsNew.cmake" : {
      "ObjectId" : "ad3ed48fae50d461a08d925840d244a760f5da51",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find python libraries\n\n# This module finds the libraries corresponding to the Python interpeter\n\n# FindPythonInterp provides.\n\n# This code sets the following variables:\n\n#\n\n#  PYTHONLIBS_FOUND           - have the Python libs been found\n\n#  PYTHON_PREFIX              - path to the Python installation\n\n#  PYTHON_LIBRARIES           - path to the python library\n\n#  PYTHON_INCLUDE_DIRS        - path to where Python.h is found\n\n#  PYTHON_MODULE_EXTENSION    - lib extension, e.g. '.so' or '.pyd'\n\n#  PYTHON_MODULE_PREFIX       - lib name prefix: usually an empty string\n\n#  PYTHON_SITE_PACKAGES       - path to installation site-packages\n\n#  PYTHON_IS_DEBUG            - whether the Python interpreter is a debug build\n\n#\n\n# Thanks to talljimbo for the patch adding the 'LDVERSION' config\n\n# variable usage.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2001-2009 Kitware, Inc.\n\n# Copyright 2012 Continuum Analytics, Inc.\n\n#\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright\n\n# notice, this list of conditions and the following disclaimer.\n\n#\n\n# * Redistributions in binary form must reproduce the above copyright\n\n# notice, this list of conditions and the following disclaimer in the\n\n# documentation and/or other materials provided with the distribution.\n\n#\n\n# * Neither the names of Kitware, Inc., the Insight Software Consortium,\n\n# nor the names of their contributors may be used to endorse or promote\n\n# products derived from this software without specific prior written\n\n# permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\n# # A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\n# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#=============================================================================\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Checking for the extension makes sure that `LibsNew` was found and not just `Libs`.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Use the Python interpreter to find the libs.\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# According to http://stackoverflow.com/questions/646518/python-how-to-detect-debug-interpreter\n\n# testing whether sys has the gettotalrefcount function is a reliable, cross-platform\n\n# way to detect a CPython debug interpreter.\n\n#\n\n# The library suffix is from the config var LDVERSION sometimes, otherwise\n\n# VERSION. VERSION will typically be like \"2.7\" on unix, and \"27\" on windows.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Convert the process output into a list\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Make sure the Python has the same pointer-size as the chosen compiler\n\n# Skip if CMAKE_SIZEOF_VOID_P is not defined\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# The built-in FindPython didn't always give the version numbers\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Make sure all directory separators are '/'\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# when run in a venv, PYTHON_PREFIX points to it. But the libraries remain in the\n\n# original python installation. They may be found relative to PYTHON_INCLUDE_DIR.\n",
        "Line" : 145,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# raise an error if the python libs are still not found.\n",
        "Line" : 153,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "#message(STATUS \"Searching for Python libs in ${_PYTHON_LIBS_SEARCH}\")\n\n# Probably this needs to be more involved. It would be nice if the config\n\n# information the python interpreter itself gave us were more complete.\n",
        "Line" : 164,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# If all else fails, just set the name/version and let the linker figure out the path.\n",
        "Line" : 172,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# We use PYTHON_INCLUDE_DIR, PYTHON_LIBRARY and PYTHON_DEBUG_LIBRARY for the\n\n# cache entries because they are meant to specify the location of a single\n\n# library. We now set the variables listed by the documentation for this\n\n# module.\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "src/sb_geom/dlib/dlib/external/pybind11/tools/pybind11Tools.cmake" : {
      "ObjectId" : "a7c471a07a38e158ab4fde3a304c53b27ca774c9",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# tools/pybind11Tools.cmake -- Build system for the pybind11 modules\n\n#\n\n# Copyright (c) 2015 Wenzel Jakob <wenzel@inf.ethz.ch>\n\n#\n\n# All rights reserved. Use of this source code is governed by a\n\n# BSD-style license that can be found in the LICENSE file.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add a CMake parameter for choosing a desired Python version\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Checks whether the given CXX/linker flags can compile and link a cxx file.  cxxflags and\n\n# linkerflags are lists of flags to use.  The result variable is a unique variable name for each set\n\n# of flags: the compilation result will be cached base on the result variable.  If the flags work,\n\n# sets them in cxxflags_out/linkerflags_out internal cache variables (in addition to ${result}).\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal: find the appropriate link time optimization flags for this compiler\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Clang Gold plugin does not support -Os; append -O3 to MinSizeRel builds to override it\n",
        "Line" : 66,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Intel equivalent to LTO is called IPO\n",
        "Line" : 84,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# cmake only interprets libraries as linker flags when they start with a - (otherwise it\n\n# converts /LTCG to \\LTCG as if it was a Windows path).  Luckily MSVC supports passing flags\n\n# with - instead of /, even if it is a bit non-standard:\n",
        "Line" : 88,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# Enable LTO flags if found, except for Debug builds\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Build a Python extension module:\n\n# pybind11_add_module(<name> [MODULE | SHARED] [EXCLUDE_FROM_ALL]\n\n#                     [NO_EXTRAS] [THIN_LTO] source1 [source2 ...])\n\n#\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# from project CMakeLists.txt\n\n# from pybind11Config\n",
        "Line" : 134,
        "CharPositionInLine" : 37
      },
      "10" : {
        "Text" : "# The prefix and extension are provided by FindPythonLibsNew.cmake\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# -fvisibility=hidden is required to allow multiple modules compiled against\n\n# different pybind versions to work properly, and for some features (e.g.\n\n# py::module_local).  We force it on everything inside the `pybind11`\n\n# namespace; also turning it on for a pybind module compilation here avoids\n\n# potential warnings or issues from having mixed hidden/non-hidden types.\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Link against the Python shared library on Windows\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# It's quite common to have multiple copies of the same Python version\n\n# installed on one's system. E.g.: one copy from the OS and another copy\n\n# that's statically linked into an application like Blender or Maya.\n\n# If we link our plugin library against the OS Python here and import it\n\n# into Blender or Maya later on, this will cause segfaults when multiple\n\n# conflicting Python instances are active at the same time (even when they\n\n# are of the same version).\n",
        "Line" : 153,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Windows is not affected by this issue since it handles DLL imports\n\n# differently. The solution for Linux and Mac OS is simple: we just don't\n\n# link against the Python library. The resulting shared library will have\n\n# missing symbols, but that's perfectly fine -- they will be resolved at\n\n# import time.\n",
        "Line" : 161,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Suppress CMake >= 3.0 warning for shared libraries\n",
        "Line" : 170,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# Make sure C++11/14 are enabled\n",
        "Line" : 175,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# Strip unnecessary sections of the binary on Linux/Mac OS\n",
        "Line" : 185,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "# /MP enables multithreaded builds (relevant when there are many files), /bigobj is\n\n# needed for bigger binding projects due to the limit to 64k addressable sections\n",
        "Line" : 198,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 19
    },
    "src/sb_geom/dlib/dlib/java/CMakeLists.txt" : {
      "ObjectId" : "bea6196d10348462a11d9c18bc816742bd7fc944",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Additional dependencies\r\n\n#add_subdirectory(../../dlib dlib_build)\r\n\n#set(additional_link_libraries dlib::dlib)\r\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Tell swig to put the output files (the shared library and .jar) into the local folder.\r\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Alternatively, instead of using install_target_output_folder, you can tell\r\n\n# cmake to output the shared library, java source files, and the jar to\r\n\n# separate output folders.  These commands would put them into folders thelib,\r\n\n# thesrc, and thejar, respectively.\r\n\n#set(install_shared_library_output_folder thelib)\r\n\n#set(install_java_source_output_folder    thesrc)\r\n\n#set(install_jar_output_folder            thejar)\r\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/sb_geom/dlib/dlib/matlab/CMakeLists.txt" : {
      "ObjectId" : "3d0bbb0bd273aa2b28b0875e10896adfc505e512",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# You can tell cmake where to put the mex files when you run 'make install' by\r\n\n# setting this variable.  The path is relative to this CMakeLists.txt file.\r\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Compile the example_mex_function.cpp file and link it to dlib.  Note\r\n\n# that you can give a list of things to link to here.  E.g. \r\n\n#    add_mex_function(some_other_mex_function pthread dlib fftw) \r\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "src/sb_geom/dlib/dlib/test/CMakeLists.txt" : {
      "ObjectId" : "533d5de4b0eba6ddd377ec3e863a3519f6eeca39",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\r\n\n# This is a CMake makefile.  You can find the cmake utility and\r\n\n# information about it at http://www.cmake.org\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# create a variable called target_name and set it to the string \"dtest\"\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# compile the dlib/all/source.cpp file into its own object just to make sure it compiles\r\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# This variable contains a list of all the tests we are building\r\n\n# into the regression test suite.\r\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# add all the cpp files we want to compile to this list.  This tells\r\n\n# cmake that they are part of our target (which is the executable named dtest)\r\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Turn on all warnings when using gcc.\r\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/sb_geom/dlib/dlib/test/blas_bindings/CMakeLists.txt" : {
      "ObjectId" : "1b9cf98583fe0560b514dc5cda64e9f745cf4b1f",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\r\n\n# This is a CMake makefile.  You can find the cmake utility and\r\n\n# information about it at http://www.cmake.org\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This variable contains a list of all the tests we are building\r\n\n# into the regression test suite.\r\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# create a variable called target_name and set it to the string \"test\"\r\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add all the cpp files we want to compile to this list.  This tells\r\n\n# cmake that they are part of our target (which is the executable named test)\r\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Tell cmake to link our target executable to dlib\r\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/sb_geom/dlib/dlib/test/examples/CMakeLists.txt" : {
      "ObjectId" : "37c4efd561e21f41dd6720ea92d802dd3ee4a527",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Disable some warnings from gcc when compiling the examples because fixing them would make the\r\n\n# examples harder to read.\r\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/sb_geom/dlib/dlib/test/gui/CMakeLists.txt" : {
      "ObjectId" : "e47c13e1258b7ca2c620d4b3dfbc4637218828ee",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\r\n\n# This is a CMake makefile.  You can find the cmake utility and\r\n\n# information about it at http://www.cmake.org\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# create a variable called target_name and set it to the string \"test\"\r\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add all the cpp files we want to compile to this list.  This tells\r\n\n# cmake that they are part of our target (which is the executable named test)\r\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Tell cmake to link our target executable to dlib.\r\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/sb_geom/dlib/dlib/test/tools/CMakeLists.txt" : {
      "ObjectId" : "e442f38a564588ca028e3192e41d853973dda34e",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "src/sb_geom_msgs/CMakeLists.txt" : {
      "ObjectId" : "2dd6fc86020fefcd4e010850e3fc34a474acf137",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################\n\n## Declare ROS messages, services and actions ##\n\n################################################\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Generate messages in the 'msg' folder\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Generate added messages and services with any dependencies listed here\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/sb_laserscan_processing/CMakeLists.txt" : {
      "ObjectId" : "022435b36b25582967c8849dbc8a869786c250ab",
      "LastModified" : "2019-02-16T21:30:48Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build in \"Release\" (with lots of compiler optimizations) by default\n\n# (If built in \"Debug\", some functions can take orders of magnitude longer)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Find catkin macros and libraries\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Declare a C++ executable\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Specify libraries to link a library or executable target against\n\n# target_link_libraries(sample_package_node\n\n#   ${catkin_LIBRARIES}\n\n# )\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Adding gtests to the package\n\n#catkin_add_gtest(laserscan-cone-manager-test test/laserscan-cone-manager-test.cpp src/LaserscanConeManager.cpp)\n\n#target_link_libraries(laserscan-cone-manager-test ${catkin_LIBRARIES})\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# Adding rostest to the package\n\n#find_package(rostest REQUIRED)\n\n# name the test and link it to the .test file and the .cpp file itself, this will allow\n\n# \"catkin_make run_tests\" to be able to find and run this rostest\n\n#add_rostest_gtest(laserscan_cone_manager_rostest test/sb_laserscan_processing_test.test test/laserscan_cone_manager_rostest.cpp)\n\n#target_link_libraries(laserscan_cone_manager_rostest ${catkin_LIBRARIES})\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    },
    "src/sb_pointcloud_processing/CMakeLists.txt" : {
      "ObjectId" : "18f2134a7fa325b095367643c8b7e428eaa7500c",
      "LastModified" : "2019-02-23T21:02:45Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build in \"Release\" (with lots of compiler optimizations) by default\n\n# (If built in \"Debug\", some functions can take orders of magnitude longer)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Declare a C++ executable\n\n## With catkin_make all packages are built within a single CMake context\n\n## The recommended prefix ensures that target names across packages don't collide\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Adding gtests to the package\n",
        "Line" : 133,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Adding rostest to the package\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "src/sb_utils/CMakeLists.txt" : {
      "ObjectId" : "8b57ceaf2e4683f83358b51fa2aed53dc5a64bd9",
      "LastModified" : "2019-03-16T17:37:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build in \"Release\" (with lots of compiler optimizations) by default\n\n# (If built in \"Debug\", some functions can take orders of magnitude longer)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Find catkin macros and libraries\n\n## if COMPONENTS list like find_package(catkin REQUIRED COMPONENTS xyz)\n\n## is used, also find other catkin packages\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###################################\n\n## catkin specific configuration ##\n\n###################################\n\n## The catkin_package macro generates cmake config files for your package\n\n## Declare things to be passed to dependent projects\n\n## INCLUDE_DIRS: uncomment this if you package contains header files\n\n## LIBRARIES: libraries you create in this project that dependent projects also need\n\n## CATKIN_DEPENDS: catkin_packages dependent projects also need\n\n## DEPENDS: system dependencies of this project that dependent projects also need\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n\n# include_directories(include)\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Declare a C++ library\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Specify libraries to link a library or executable target against\n\n# target_link_libraries(utils_lib_node\n\n#   ${catkin_LIBRARIES}\n\n# )\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## Add gtest based cpp test target and link libraries\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Adding rostest to the package\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 10
    },
    "src/sb_vision/CMakeLists.txt" : {
      "ObjectId" : "153bbc2c9323aae2666edc07d8bb7f40c4d0fdec",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build in \"Release\" (with lots of compiler optimizations) by default\n\n# (If built in \"Debug\", some functions can take orders of magnitude longer)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Find catkin macros and libraries\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#  INCLUDE_DIRS include\n",
        "Line" : 18,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "###########\n\n## Build ##\n\n###########\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "## Specify additional locations of header files\n\n## Your package locations should be listed before other locations\n\n# include_directories(include)\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Declare a C++ executable\n\n# add_executable(drivers_node src/drivers_node.cpp)\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Specify libraries to link a library or executable target against\n\n# target_link_libraries(drivers_node\n\n#   ${catkin_LIBRARIES}\n\n# )\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#############\n\n## Testing ##\n\n#############\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# GTest\n",
        "Line" : 97,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    }
  },
  "FileTypes" : {
    "CMAKE" : 44
  },
  "ElapsedTime" : 1430
}