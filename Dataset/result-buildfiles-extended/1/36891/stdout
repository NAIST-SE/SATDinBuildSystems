{
  "Repository" : "36891",
  "Revision" : "HEAD",
  "ObjectId" : "6f8a0efbb0f3f0b51a53d76186b0e9f08ce733bb",
  "CommitTime" : "2019-02-21T00:35:42Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "a9d046a7ad40010eb812a07116437af606545ad6",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# get rid of Visual Studio's default \"Debug\" and \"Release\" output directories\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Step into the subdirectories\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "bindings/CMakeLists.txt" : {
      "ObjectId" : "63f3eecdee4dd0d92ee8626221faab7cdd69a20d",
      "LastModified" : "2018-07-30T14:00:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Language bindings\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# useful if multiple versions of the Python lib are installed\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Language bindings (Python, Java and Processing)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# NOTE: We need a platform-independent copy command for the .java files, but neither the COMMAND\n\n#       nor CMake's \"-E copy\" support wildcards on Windows. We could probably whip up something\n\n#       more elegant which only makes the relevant line platform-dependent without copying all\n\n#       the other lines. But this simple branching is pretty robust and also works with older\n\n#       versions of CMake.\n",
        "Line" : 55,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Linux\n",
        "Line" : 94,
        "CharPositionInLine" : 19
      },
      "5" : {
        "Text" : "# Create Folder Structure\n",
        "Line" : 102,
        "CharPositionInLine" : 20
      },
      "6" : {
        "Text" : "# Copy java library, native library, pairing tool, and example app into folder structure\n",
        "Line" : 113,
        "CharPositionInLine" : 20
      },
      "7" : {
        "Text" : "# Cross-platform zipping :)\n",
        "Line" : 119,
        "CharPositionInLine" : 20
      },
      "8" : {
        "Text" : "# Ensure building targets in the correct order\n\n# (native lib->java lib->processing lib)\n",
        "Line" : 126,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 9
    },
    "cmake/FindUSB1.cmake" : {
      "ObjectId" : "4f665f3c6fd698818dc9b740c9123af841c92019",
      "LastModified" : "2016-01-08T12:55:11Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find the freetype library\n\n# Once done this defines\n\n#\n\n#  LIBUSB_FOUND - system has libusb\n\n#  LIBUSB_INCLUDE_DIR - the libusb include directory\n\n#  LIBUSB_LIBRARIES - Link these to use libusb\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Copyright (c) 2006, 2008  Laurent Montel, <montel@kde.org>\n\n#\n\n#\n\n# Modified on 2015/07/14 by Chadwick Boulay <chadwick.boulay@gmail.com>\n\n# to use static local libraries only.\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# in cache already\n",
        "Line" : 20,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Because we want to use the static library,\n\n# look locally only.\n",
        "Line" : 24,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# There are 4 platform-specific ways we might get the libraries.\n\n# 1 - Windows MSVC, download the source, compile with MSVC\n\n# 2 - Windows MSVC, download pre-compiled binaries <- Do not use; wrong CRT library\n\n# 3 - Windows MinGW, download pre-compiled binaries\n\n# 4 - OSX, download the source, build, but do not install\n\n# 5 - OSX, homebrew OR download the source, build, and install\n\n# Each of these puts the compiled library into a different folder\n\n# and that is also architecture-specific.\n",
        "Line" : 34,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#TODO: Add self-compiled folder for MinGW\n",
        "Line" : 51,
        "CharPositionInLine" : 16
      },
      "6" : {
        "Text" : "#TODO: Add self-compiled folder for MinGW\n",
        "Line" : 55,
        "CharPositionInLine" : 16
      },
      "CommentCount" : 7
    },
    "cmake/common.cmake" : {
      "ObjectId" : "2465a54c15e20c4aa8927b446c0bd2288c28164c",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Some platform-specific but target-agnostic settings\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We recommend using MinGW-w64 for the Windows builds which generates\r\n\n# position-independent code by default, so skip this for Windows builds.\r\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# https://github.com/thp/psmoveapi/issues/29\r\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Required by pthread, must be defined before include of any standard header.\r\n\n# It's easier to do this here once instead of multiple times in different source/header files.\r\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Prevent windows.h from automatically including a bunch of header files\r\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Build Universal Binaries for OS X\r\n",
        "Line" : 32,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Windows' math include does not define constants by default.\r\n\n# Set this definition so it does.\r\n\n# Also set NOMINMAX so the min and max functions are not overwritten with macros.\r\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Fix compiler warnings\r\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Force to always compile with W4 (C++)\r\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Force to always compile with W4 (C)\r\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Enable debug (symbol) information for all builds\r\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Disable some warnings that are not important (C++)\r\n",
        "Line" : 77,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "#unreferenced formal parameter\r\n\n#named type definition in parentheses\r\n\n#nonstandard extension used : nameless struct/union\r\n\n#uses old-style declarator\r\n\n#nonstandard extension used : non-constant aggregate initializer\r\n\n#nonstandard extension used : translation unit is empty\r\n\n#assignment operator could not be generated\r\n\n#nonstandard extension used : zero-sized array in struct/union\r\n\n#default constructor could not be generated\r\n\n#struct 'libusb_version' can never be instantiated - user defined constructor required\r\n",
        "Line" : 78,
        "CharPositionInLine" : 37
      },
      "13" : {
        "Text" : "# Disable some warnings that are not important (C)\r\n",
        "Line" : 89,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#unreferenced formal parameter\r\n\n#named type definition in parentheses\r\n\n#nonstandard extension used : nameless struct/union\r\n\n#uses old-style declarator\r\n\n#nonstandard extension used : non-constant aggregate initializer\r\n\n#nonstandard extension used : translation unit is empty\r\n\n#assignment operator could not be generated\r\n\n#nonstandard extension used : zero-sized array in struct/union\r\n\n#default constructor could not be generated\r\n\n#struct 'libusb_version' can never be instantiated - user defined constructor required\r\n",
        "Line" : 90,
        "CharPositionInLine" : 35
      },
      "15" : {
        "Text" : "# Update if necessary\r\n",
        "Line" : 103,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# Enable solution folders for msvc\r\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Pretty-print if a \"use\" feature has been enabled\r\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 18
    },
    "docs/Makefile" : {
      "ObjectId" : "262a2c8f796b0e20421f427970a96f9063841a7a",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for Sphinx documentation\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# You can set these variables from the command line.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# User-friendly check for sphinx-build\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Internal variables.\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# the i18n builder cannot share the environment and doctrees with the others\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "examples/CMakeLists.txt" : {
      "ObjectId" : "5de0566e12904c7a752263805a222ff3c340aa07",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Additional applications that can be used to test the library\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# C examples\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Build GLFW as dependency\n",
        "Line" : 26,
        "CharPositionInLine" : 8
      },
      "3" : {
        "Text" : "# C examples\n",
        "Line" : 32,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "# C++ examples\n",
        "Line" : 39,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# C test programs\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "examples/java/build.xml" : {
      "ObjectId" : "371d0f6c5da2cbf7e690ba0be82015bbaf79e2a9",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "ANT",
      "CommentCount" : 0
    },
    "examples/labs/accelerometer3d/accelerometer3d.pro" : {
      "ObjectId" : "d1909be0d2de88a16236f4ce0f870cfb10861a00",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "examples/labs/movetytouch/movetytouch.pro" : {
      "ObjectId" : "1d339c6b13ddbc028742f0171be16d631ef6a654",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "examples/labs/orientation/orientation.pro" : {
      "ObjectId" : "afbab6cfbffcf38ac4848ab1af34b2b2650d6848",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "examples/labs/paint/paint.pro" : {
      "ObjectId" : "fb2a6bfe2aaeb73aac3c0d25afbbf3c3f7a3c8c2",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "examples/labs/playbackspeed/playbackspeed.pro" : {
      "ObjectId" : "e3e744fdccf27c4356a5030c177b57caf571236c",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "examples/labs/sensorfilter/sensorfilter.pro" : {
      "ObjectId" : "aee22fad1a655e12964c1c6b9867549ba3e4c943",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "examples/labs/whiteboard/whiteboard.pro" : {
      "ObjectId" : "83ee4d6251be7998edf35a6b13b81a0908c1d1dc",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "QMAKE",
      "CommentCount" : 0
    },
    "external/glfw/CMake/amd64-mingw32msvc.cmake" : {
      "ObjectId" : "705e251d3917f3787eca55aa3b3b0e303aee548f",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win64\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "external/glfw/CMake/i586-mingw32msvc.cmake" : {
      "ObjectId" : "393ddbda3019706378b25bb3d1abb634a3936866",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "external/glfw/CMake/i686-pc-mingw32.cmake" : {
      "ObjectId" : "9a46aef7b3457c8382fe16b3ad2e5a776f7f5f7d",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target system name\n",
        "Line" : 2,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "#Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "external/glfw/CMake/i686-w64-mingw32.cmake" : {
      "ObjectId" : "9bd60936de2ed08f365601fbbfe404adbb37853a",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target system name\n",
        "Line" : 2,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "external/glfw/CMake/modules/FindMir.cmake" : {
      "ObjectId" : "b1a495ba191db856c27e790cecd100a7288eeb89",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find Mir on a Unix system\n\n#\n\n# This will define:\n\n#\n\n#   MIR_LIBRARIES   - Link these to use Wayland\n\n#   MIR_INCLUDE_DIR - Include directory for Wayland\n\n#\n\n# Copyright (c) 2014 Brandon Schaefer <brandon.schaefer@canonical.com>\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "external/glfw/CMake/modules/FindVulkan.cmake" : {
      "ObjectId" : "d3a664a8bda6d16449d86c24781e0f28a3ebaec8",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find Vulkan\n\n#\n\n# VULKAN_INCLUDE_DIR\n\n# VULKAN_LIBRARY\n\n# VULKAN_FOUND\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "external/glfw/CMake/modules/FindWaylandProtocols.cmake" : {
      "ObjectId" : "8eb83f27ef88575f80a56198bd2635580452a914",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/glfw/CMake/modules/FindXKBCommon.cmake" : {
      "ObjectId" : "0f571eeacb5cd91d4ef72a89a066142e5a6a0d0a",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find XKBCommon\n\n# Once done, this will define\n\n#\n\n#   XKBCOMMON_FOUND - System has XKBCommon\n\n#   XKBCOMMON_INCLUDE_DIRS - The XKBCommon include directories\n\n#   XKBCOMMON_LIBRARIES - The libraries needed to use XKBCommon\n\n#   XKBCOMMON_DEFINITIONS - Compiler switches required for using XKBCommon\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "external/glfw/CMake/x86_64-w64-mingw32.cmake" : {
      "ObjectId" : "84b2c701ec1d9e2ee0b72f3031cfccb4a81d205e",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Define the environment for cross compiling from Linux to Win32\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Target system name\n",
        "Line" : 2,
        "CharPositionInLine" : 34
      },
      "2" : {
        "Text" : "# Configure the behaviour of the find commands \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "external/glfw/CMakeLists.txt" : {
      "ObjectId" : "b1476bd551de2529970ad80b8365ccd58a9dbb82",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Until all major package systems have moved to CMake 3,\n\n# we stick with the older INSTALL_NAME_DIR mechanism\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# On Unix-like systems, shared libraries can use the soname system.\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Set compiler specific flags\n\n#--------------------------------------------------------------------\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Workaround for legacy MinGW not providing XInput and DirectInput\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Enable link-time exploit mitigation features enabled by default on MSVC\n",
        "Line" : 107,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Compatibility with data execution prevention (DEP)\n",
        "Line" : 110,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Compatibility with address space layout randomization (ASLR)\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Compatibility with 64-bit address space layout randomization (ASLR)\n",
        "Line" : 124,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Detect and select backend APIs\n\n#--------------------------------------------------------------------\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Add Vulkan static library if requested\n\n#--------------------------------------------------------------------\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Find and add Unix math and time libraries\n\n#--------------------------------------------------------------------\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Win32 for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use X11 for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 207,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Set up library and include paths\n",
        "Line" : 216,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Check for XRandR (modern resolution switching and gamma control)\n",
        "Line" : 220,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# Check for Xinerama (legacy multi-monitor support)\n",
        "Line" : 229,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Check for Xf86VidMode (fallback gamma control)\n",
        "Line" : 238,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# Backwards compatibility (see CMake bug 0006976)\n",
        "Line" : 246,
        "CharPositionInLine" : 12
      },
      "18" : {
        "Text" : "# Check for Xkb (X keyboard extension)\n",
        "Line" : 253,
        "CharPositionInLine" : 4
      },
      "19" : {
        "Text" : "# Check for Xcursor\n",
        "Line" : 260,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Wayland for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Mir for window creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Use Cocoa for window creation and NSOpenGL for context creation\n\n#--------------------------------------------------------------------\n",
        "Line" : 309,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Set up library and include paths\n",
        "Line" : 326,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Export GLFW library dependencies\n\n#--------------------------------------------------------------------\n",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Create generated files\n\n#--------------------------------------------------------------------\n",
        "Line" : 354,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Add subdirectories\n\n#--------------------------------------------------------------------\n",
        "Line" : 374,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "#--------------------------------------------------------------------\n\n# Install files other than the library\n\n# The library is installed by src/CMakeLists.txt\n\n#--------------------------------------------------------------------\n",
        "Line" : 391,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Only generate this target if no higher-level project already has\n",
        "Line" : 409,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 29
    },
    "external/glfw/examples/CMakeLists.txt" : {
      "ObjectId" : "138a781667cd08c68582a6a9e54ff0fede8b1bc7",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tell MSVC to use main instead of WinMain for Windows subsystem executables\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "external/glfw/src/CMakeLists.txt" : {
      "ObjectId" : "5042aba382aa86dba035b84c5955adef6f7ee821",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# For some reason, CMake doesn't know about .m\n",
        "Line" : 51,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# HACK: When building on MinGW, WINVER and UNICODE need to be defined before\n\n# the inclusion of stddef.h (by glfw3.h), which is itself included before\n\n# win32_platform.h.  We define them here until a saner solution can be found\n\n# NOTE: MinGW-w64 and Visual C++ do /not/ need this hack.\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Enable a reasonable set of warnings (no, -Wextra is not reasonable)\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Remove the lib prefix on the DLL (but not the import library\n",
        "Line" : 87,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Add a suffix to the import library to avoid naming conflicts\n",
        "Line" : 90,
        "CharPositionInLine" : 12
      },
      "5" : {
        "Text" : "# Add a suffix to the import library to avoid naming conflicts\n",
        "Line" : 93,
        "CharPositionInLine" : 12
      },
      "6" : {
        "Text" : "# Add -fno-common to work around a bug in Apple's GCC\n",
        "Line" : 97,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# Hide symbols not explicitly tagged for export from the shared library\n",
        "Line" : 103,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 8
    },
    "external/glfw/tests/CMakeLists.txt" : {
      "ObjectId" : "205ec377e8991752950b8a71234f49a3b2c7981c",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Tell MSVC to use main instead of WinMain for Windows subsystem executables\n",
        "Line" : 61,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "397ef5cb517d19812d5525e03419b6142733f887",
      "LastModified" : "2018-10-23T19:03:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Do all the PSMOVEAPI-only work\n\n# At the end we will call separate files for tracker and utils\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Container for library dependencies\n\n# Container for source files\n\n# Container for build targets to be installed\n\n# Container for math related source files\n",
        "Line" : 13,
        "CharPositionInLine" : 31
      },
      "2" : {
        "Text" : "# Make a debug build with helpful output for debugging / maintenance\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Debugging output\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Linker commands to put into the .pc file (when installing)\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# http://stackoverflow.com/questions/4702732/the-program-cant-start-because-libgcc-s-dw2-1-dll-is-missing\n",
        "Line" : 72,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Linux\n",
        "Line" : 83,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Source files that are needed for both the shared and static library\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Shared library\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# For system-wide installation\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Only install the udev configuration file on Linux\n",
        "Line" : 197,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 11
    },
    "src/tracker/CMakeLists.txt" : {
      "ObjectId" : "606438aa50b05b5971e89d202164d7d21786951b",
      "LastModified" : "2018-07-30T14:00:38Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build the OpenCV-based camera tracking module? (see psmove_tracker.h)\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Enable tweaks (e.g. registry settings on Windows, ...) for PS Eye\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use the PS3EYEDriver to interface with the PS Eye camera (OS X and Windows only)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# To show the OpenCV camera capture window everytime (useful for debugging)\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# PS3EYEDriver is based on GPL'd code\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "#\n\n# Tracker support\n\n#\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# 1 - OpenCV\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# 2 - Platform-specific settings\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#OpenCV extra dependencies: comctl32 gdi32 ole32 setupapi ws2_32 vfw32\n",
        "Line" : 76,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "#Linux\n",
        "Line" : 80,
        "CharPositionInLine" : 11
      },
      "10" : {
        "Text" : "# 3 - Cameras\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# PS3EYEDriver\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# PS3EYEDriver is based on GPL'd code\n",
        "Line" : 118,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Due to a bug in OpenCV 3.0+, C source files that call cvGetSize will crash when built by MSVC.\n\n# psmove_tracker.c is such a file, so we need to force the C++ compiler to be used for it, even though it's a C file. \n\n# Once the OpenCV bug is fixed, this can/should be removed.\n\n#\n\n# See https://github.com/Itseez/opencv/issues/6221 for more info.\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 14,
      "Errorlog" : "line 39:50 token recognition error at: '\\i'\n"
    },
    "src/utils/CMakeLists.txt" : {
      "ObjectId" : "ad4b2482009cc7a94c67777c933505663e8471a2",
      "LastModified" : "2017-12-27T13:10:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# New command line interface\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 21,
    "QMAKE" : 7,
    "MAKEFILE" : 1,
    "ANT" : 1
  },
  "ElapsedTime" : 1100
}