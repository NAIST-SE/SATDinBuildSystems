{
  "Repository" : "16560",
  "Revision" : "HEAD",
  "ObjectId" : "fa61107cefae611b0092229a6b1c2460b4353c51",
  "CommitTime" : "2015-04-16T13:00:57Z",
  "Files" : {
    "Dashboards/CTestConfig.cmake" : {
      "ObjectId" : "55157ad9619b8e0f45aed1b13437320081fc32de",
      "LastModified" : "2012-08-10T12:32:34Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This file should be placed in the root directory of your project.\n\n## Then modify the CMakeLists.txt file in the root directory of your\n\n## project to incorporate the testing dashboard.\n\n## # The following are required to uses Dart and the Cdash dashboard\n\n##   ENABLE_TESTING()\n\n##   INCLUDE(CTest)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET (CTEST_TRIGGER_SITE \"http:///cgi-bin/Submit-CMake-TestingResults.pl\")\n\n#SET (VALGRIND_COMMAND_OPTIONS \"-q --tool=memcheck --leak-check=full --show-reachable=yes --workaround-gcc296-bugs=yes --num-callers=50\")\n\n#SET (CTEST_EXPERIMENTAL_COVERAGE_EXCLUDE \".*test_.*\")\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Dashboards/CTestConfigHexabus.cmake" : {
      "ObjectId" : "0ea263f860da36c5869a864303cdc07f5c606d28",
      "LastModified" : "2014-07-21T12:26:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n\n## This file should be placed in the root directory of your project.\n\n## Then modify the CMakeLists.txt file in the root directory of your\n\n## project to incorporate the testing dashboard.\n\n## # The following are required to uses Dart and the Cdash dashboard\n\n##   ENABLE_TESTING()\n\n##   INCLUDE(CTest)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(CTEST_DROP_SITE \"pubdoc.itwm.fhg.de\")\n\n#set(CTEST_DROP_LOCATION \"/p/hpc/pspro/cdash/submit.php?project=${CTEST_PROJECT_NAME}\")\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#hexabridge\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "Dashboards/Tools.cmake" : {
      "ObjectId" : "aea7b9a31f84b0155141985d2efbdacf5ce4f0fe",
      "LastModified" : "2014-07-21T12:26:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# generic support code, provides the kde_ctest_setup() macro, which sets up everything required:\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# init branch to checkout\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# initialisation target architectur\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# check if ToolChainFile is set\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# initialisation compiler\n",
        "Line" : 41,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# init branch to checkout\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# setup CTEST_BUILD_NAME\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "#\n\n#\n\n#\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n#\n\n#\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n#\n\n#\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# OS_NAME OS_VERSION)\n",
        "Line" : 124,
        "CharPositionInLine" : 29
      },
      "12" : {
        "Text" : "# OS_NAME OS_VERSION)\n",
        "Line" : 128,
        "CharPositionInLine" : 26
      },
      "13" : {
        "Text" : "#message(\"  OS_NAME   :  ${OS_NAME}\")\n\n#message(\"  OS_VERSION:  ${OS_VERSION}\")\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# CentOS release 5.5 (Final)\n",
        "Line" : 139,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# openSUSE 11.1 (x86_64)\n\n# VERSION = 11.1\n",
        "Line" : 146,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# DISTRIB_ID=Ubuntu\n\n# DISTRIB_RELEASE=10.04\n\n# DISTRIB_CODENAME=lucid\n\n# DISTRIB_DESCRIPTION=\"Ubuntu 10.04.4 LTS\"\n",
        "Line" : 155,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "#message(\"    OS_NAME   :  ${OS_NAME}\")\n\n#message(\"    OS_VERSION:  ${OS_VERSION}\")\n",
        "Line" : 163,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 18
    },
    "Dashboards/do_test.cmake" : {
      "ObjectId" : "8763c5ef1c0cccc2347200b6d71a6fab31edd3e4",
      "LastModified" : "2014-07-21T12:26:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n\n# bernd.loerwald@itwm.fraunhofer.de\n\n# update by kai.krueger@itwm.fraunhofer.de\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# cdash / ctest information ########################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# test configuration ###############################################################\n\n# parse arguments\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# check for boost and default to version 1.49 if directory does not exists\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# variables / configuration based on test configuration ############################\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# find and submit subproject list ##################################################\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#file(GLOB _dummy ${CTEST_SOURCE_DIRECTORY}/hostsoftware/*/CMakeLists.txt)\n\n#foreach ( line ${_dummy})\n\n#  get_filename_component(_currentDir \"${line}\" PATH)\n\n#  get_filename_component(_item \"${_currentDir}\" NAME)\n\n#  message(\"====>${line}<====${_currentDir}===${_item}\")\n\n#  list(APPEND CTEST_PROJECT_SUBPROJECTS ${_item})\n\n#endforeach()\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# create project.xml\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# external software ################################################################\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# cmake options ####################################################################\n",
        "Line" : 219,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# prepare binary directory (clear, write initial cache) ############################\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# prepare source directory (do initial checkout, switch branch) ####################\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# do testing #######################################################################\n",
        "Line" : 249,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# start loop over all subprojects  #################################################\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# write CMakeCache file here\n",
        "Line" : 282,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "#    OS_NAME\n\n#    OS_VERSION\n",
        "Line" : 293,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "# todo: create package, upload to distribution server\n\n# do the packing only if switch is on and\n",
        "Line" : 380,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "# do the packaging\n",
        "Line" : 387,
        "CharPositionInLine" : 6
      },
      "18" : {
        "Text" : "# upload files\n",
        "Line" : 395,
        "CharPositionInLine" : 6
      },
      "19" : {
        "Text" : "# end loop over all subprojects  ###################################################\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#file (REMOVE_RECURSE \"${CTEST_INSTALL_DIRECTORY}\")\n\n#if (NOT \"${TESTING_MODEL}\" STREQUAL \"Continuous\")\n\n#  file (REMOVE_RECURSE \"${CTEST_BINARY_DIRECTORY}\")\n\n#endif()\n",
        "Line" : 435,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "firmware/Hexabus-Device/Makefile" : {
      "ObjectId" : "51aa44af957fc26533926cd9fff4651cfade21db",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "firmware/bootloader/BootloaderFlasher/Makefile" : {
      "ObjectId" : "5170435a5c417fb67333583d45b97fc84bf3e0e3",
      "LastModified" : "2014-07-21T12:26:54Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "hostsoftware/cmake_modules/CPackTools.cmake" : {
      "ObjectId" : "da1cb94a0a9dacc8605ae6ebad111aaf0612918e",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set system architecture\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set(CPACK_DEBIAN_PACKAGE_CONTROL_EXTRA \"\")\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(CPACK_PACKAGE_FILE_NAME \"${PROJECT_NAME}_${CPACK_PACKAGE_VERSION}-1_${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}\")\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "hostsoftware/cmake_modules/CheckCompiler.cmake" : {
      "ObjectId" : "35ade57cb0696f61987ba7577b10788bdef4ee4c",
      "LastModified" : "2014-07-21T12:26:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n\n#\n\n#  Figure out the version of the used compiler\n\n#  Variables set by this module\n\n#  CMAKE_CXX_COMPILER_MAJOR  major version of compiler\n\n#  CMAKE_CXX_COMPILER_MINR   minor version of compiler\n\n#  CMAKE_CXX_COMPILER_PATCH  patch level (e.g. gcc 4.1.0)\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#execute_process(COMMAND <cmd1> [args1...]]\n\n#                  [COMMAND <cmd2> [args2...] [...]]\n\n#                  [WORKING_DIRECTORY <directory>]\n\n#                  [TIMEOUT <seconds>]\n\n#                  [RESULT_VARIABLE <variable>]\n\n#                  [OUTPUT_VARIABLE <variable>]\n\n#                  [ERROR_VARIABLE <variable>]\n\n#                  [INPUT_FILE <file>]\n\n#                  [OUTPUT_FILE <file>]\n\n#                  [ERROR_FILE <file>]\n\n#                  [OUTPUT_QUIET]\n\n#                  [ERROR_QUIET]\n\n#                  [OUTPUT_STRIP_TRAILING_WHITESPACE]\n\n#                  [ERROR_STRIP_TRAILING_WHITESPACE])\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# check the version of the compiler\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#  if( ${CMAKE_CXX_COMPILER_VERSION_FULL} MATCHES \"\" )\n\n#    set(\n\n#  endif()\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# just print the results if requested\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "hostsoftware/cmake_modules/CompilerFlags.cmake" : {
      "ObjectId" : "6441719ba9187370f54f4ed6d4b983a754df66b9",
      "LastModified" : "2014-07-21T12:26:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Detect the system we're compiling on\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "###\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# OR  ${CMAKE_CXX_COMPILER_MAJOR}>=4 AND \n\n#      ${CMAKE_CXX_COMPILER_MINOR}4))  # gcc version <= 4.3.3\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#not supported by openwrt build toolchain\n\n#not supported by openwrt build toolchain\n",
        "Line" : 59,
        "CharPositionInLine" : 72
      },
      "5" : {
        "Text" : "# to avoid warnings when using gcc 4.5\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "## Releases are made with the release build. Optimize code.\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "#set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} -fstack-protector-all\") #not supported by openwrt build toolchain\n",
        "Line" : 93,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "#set(CMAKE_CXX_FLAGS_RELEASE \"${CMAKE_CXX_FLAGS_RELEASE} ${FLAGS_WARNINGS}\")\n",
        "Line" : 95,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "#      CACHE STRING \"Flags for Release build\"\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## debug flags\n",
        "Line" : 103,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "## gprof and gcov support\n",
        "Line" : 109,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "## Experimental flags\n",
        "Line" : 117,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# TODO: we need to check the compiler here, gcc does not know about those flags, is this The Right Thing To Do (TM)?\n",
        "Line" : 130,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "#  set(CMAKE_CXX_FLAGS \" /DWIN32 /D_WINDOWS /W3 /Zm1000 /EHsc /GR \")\n\n#  set(CMAKE_CXX_FLAGS_RELEASE \"/MD /O2 /Ob2 /D NDEBUG\")\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "hostsoftware/cmake_modules/FindAlsa.cmake" : {
      "ObjectId" : "65f694c8026e60017d9c29d9b1ad32771da90dcf",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n\n# - Find ALSA\n\n# Find the native ALSA includes and library\n\n#\n\n#  ALSA_INCLUDE_DIR - where to find .h\n\n#  ALSA_LIBRARIES   - List of libraries when using Alsa.\n\n#  ALSA_FOUND       - True if Alsa found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#\n\n# set defaults\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set ALSA_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# if the include and the program are found then we have it\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "hostsoftware/cmake_modules/FindBoost.cmake" : {
      "ObjectId" : "47f475a54684c98006e77630b26b7d860e20950a",
      "LastModified" : "2014-07-21T12:26:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Boost include dirs and libraries\n\n# Usage of this module as follows:\n\n#\n\n# NOTE: Take note of the Boost_ADDITIONAL_VERSIONS variable below.\n\n# Due to Boost naming conventions and limitations in CMake this find\n\n# module is NOT future safe with respect to Boost version numbers,\n\n# and may break.\n\n#\n\n# == Using Header-Only libraries from within Boost: ==\n\n#\n\n#   find_package( Boost 1.36.0 )\n\n#   if(Boost_FOUND)\n\n#      include_directories(${Boost_INCLUDE_DIRS})\n\n#      add_executable(foo foo.cc)\n\n#   endif()\n\n#\n\n#\n\n# == Using actual libraries from within Boost: ==\n\n#\n\n#   set(Boost_USE_STATIC_LIBS        ON)\n\n#   set(Boost_USE_MULTITHREADED      ON)\n\n#   set(Boost_USE_STATIC_RUNTIME    OFF)\n\n#   find_package( Boost 1.36.0 COMPONENTS date_time filesystem system ... )\n\n#\n\n#   if(Boost_FOUND)\n\n#      include_directories(${Boost_INCLUDE_DIRS})\n\n#      add_executable(foo foo.cc)\n\n#      target_link_libraries(foo ${Boost_LIBRARIES})\n\n#   endif()\n\n#\n\n#\n\n# The components list needs to contain actual names of boost libraries only,\n\n# such as \"date_time\" for \"libboost_date_time\".  If you're using parts of\n\n# Boost that contain header files only (e.g. foreach) you do not need to\n\n# specify COMPONENTS.\n\n#\n\n# You should provide a minimum version number that should be used. If you provide this\n\n# version number and specify the REQUIRED attribute, this module will fail if it\n\n# can't find the specified or a later version. If you specify a version number this is\n\n# automatically put into the considered list of version numbers and thus doesn't need\n\n# to be specified in the Boost_ADDITIONAL_VERSIONS variable (see below).\n\n#\n\n# NOTE for Visual Studio Users:\n\n#     Automatic linking is used on MSVC & Borland compilers by default when\n\n#     #including things in Boost.  It's important to note that setting\n\n#     Boost_USE_STATIC_LIBS to OFF is NOT enough to get you dynamic linking,\n\n#     should you need this feature.  Automatic linking typically uses static\n\n#     libraries with a few exceptions (Boost.Python is one).\n\n#\n\n#     Please see the section below near Boost_LIB_DIAGNOSTIC_DEFINITIONS for\n\n#     more details.  Adding a TARGET_LINK_LIBRARIES() as shown in the example\n\n#     above appears to cause VS to link dynamically if Boost_USE_STATIC_LIBS\n\n#     gets set to OFF.  It is suggested you avoid automatic linking since it\n\n#     will make your application less portable.\n\n#\n\n# =========== The mess that is Boost_ADDITIONAL_VERSIONS (sorry?) ============\n\n#\n\n# OK, so the Boost_ADDITIONAL_VERSIONS variable can be used to specify a list of\n\n# boost version numbers that should be taken into account when searching\n\n# for Boost. Unfortunately boost puts the version number into the\n\n# actual filename for the libraries, so this variable will certainly be needed\n\n# in the future when new Boost versions are released.\n\n#\n\n# Currently this module searches for the following version numbers:\n\n# 1.33, 1.33.0, 1.33.1, 1.34, 1.34.0, 1.34.1, 1.35, 1.35.0, 1.35.1,\n\n# 1.36, 1.36.0, 1.36.1, 1.37, 1.37.0, 1.38, 1.38.0, 1.39, 1.39.0,\n\n# 1.40, 1.40.0, 1.41, 1.41.0, 1.42, 1.42.0, 1.43, 1.43.0, 1.44, 1.44.0,\n\n# 1.45, 1.45.0, 1.46, 1.46.0, 1.46.1, 1.47, 1.47.0, 1.48, 1.48.0\n\n#\n\n# NOTE: If you add a new major 1.x version in Boost_ADDITIONAL_VERSIONS you should\n\n# add both 1.x and 1.x.0 as shown above.  Official Boost include directories\n\n# omit the 3rd version number from include paths if it is 0 although not all\n\n# binary Boost releases do so.\n\n#\n\n# set(Boost_ADDITIONAL_VERSIONS \"1.78\" \"1.78.0\" \"1.79\" \"1.79.0\")\n\n#\n\n# ===================================== ============= ========================\n\n#\n\n# Variables used by this module, they can change the default behaviour and\n\n# need to be set before calling find_package:\n\n#\n\n#   Boost_USE_MULTITHREADED      Can be set to OFF to use the non-multithreaded\n\n#                                boost libraries.  If not specified, defaults\n\n#                                to ON.\n\n#\n\n#   Boost_USE_STATIC_LIBS        Can be set to ON to force the use of the static\n\n#                                boost libraries. Defaults to OFF.\n\n#\n\n#   Boost_NO_SYSTEM_PATHS        Set to TRUE to suppress searching in system\n\n#                                paths (or other locations outside of BOOST_ROOT\n\n#                                or BOOST_INCLUDEDIR).  Useful when specifying\n\n#                                BOOST_ROOT. Defaults to OFF.\n\n#                                  [Since CMake 2.8.3]\n\n#\n\n#   Boost_NO_BOOST_CMAKE         Do not do a find_package call in config mode\n\n#                                before searching for a regular boost install.\n\n#                                This will avoid finding boost-cmake installs.\n\n#                                Defaults to OFF.\n\n#                                  [Since CMake 2.8.6]\n\n#\n\n#   Boost_USE_STATIC_RUNTIME     If enabled, searches for boost libraries\n\n#                                linked against a static C++ standard library\n\n#                                ('s' ABI tag). This option should be set to\n\n#                                ON or OFF because the default behavior\n\n#                                if not specified is platform dependent\n\n#                                for backwards compatibility.\n\n#                                  [Since CMake 2.8.3]\n\n#\n\n#   Boost_USE_DEBUG_PYTHON       If enabled, searches for boost libraries\n\n#                                compiled against a special debug build of\n\n#                                Python ('y' ABI tag). Defaults to OFF.\n\n#                                  [Since CMake 2.8.3]\n\n#\n\n#   Boost_USE_STLPORT            If enabled, searches for boost libraries\n\n#                                compiled against the STLPort standard\n\n#                                library ('p' ABI tag). Defaults to OFF.\n\n#                                  [Since CMake 2.8.3]\n\n#\n\n#   Boost_USE_STLPORT_DEPRECATED_NATIVE_IOSTREAMS\n\n#                                If enabled, searches for boost libraries\n\n#                                compiled against the deprecated STLPort\n\n#                                \"native iostreams\" feature ('n' ABI tag).\n\n#                                Defaults to OFF.\n\n#                                  [Since CMake 2.8.3]\n\n#\n\n# Other Variables used by this module which you may want to set.\n\n#\n\n#   Boost_ADDITIONAL_VERSIONS    A list of version numbers to use for searching\n\n#                                the boost include directory.  Please see\n\n#                                the documentation above regarding this\n\n#                                annoying, but necessary variable :(\n\n#\n\n#   Boost_DEBUG                  Set this to TRUE to enable debugging output\n\n#                                of FindBoost.cmake if you are having problems.\n\n#                                Please enable this before filing any bug\n\n#                                reports.\n\n#\n\n#   Boost_DETAILED_FAILURE_MSG   FindBoost doesn't output detailed information\n\n#                                about why it failed or how to fix the problem\n\n#                                unless this is set to TRUE or the REQUIRED\n\n#                                keyword is specified in find_package().\n\n#                                  [Since CMake 2.8.0]\n\n#\n\n#   Boost_COMPILER               Set this to the compiler suffix used by Boost\n\n#                                (e.g. \"-gcc43\") if FindBoost has problems finding\n\n#                                the proper Boost installation\n\n#\n\n#   Boost_THREADAPI                When building boost.thread, sometimes the name of the\n\n#                                library contains an additional \"pthread\" or \"win32\"\n\n#                                string known as the threadapi.  This can happen when\n\n#                                compiling against pthreads on Windows or win32 threads\n\n#                                on Cygwin.  You may specify this variable and if set\n\n#                                when FindBoost searches for the Boost threading library\n\n#                                it will first try to match the threadapi you specify.\n\n#                                  For Example: libboost_thread_win32-mgw45-mt-1_43.a\n\n#                                might be found if you specified \"win32\" here before\n\n#                                falling back on libboost_thread-mgw45-mt-1_43.a.\n\n#                                  [Since CMake 2.8.3]\n\n#\n\n#   Boost_REALPATH               Resolves symbolic links for discovered boost libraries\n\n#                                to assist with packaging.  For example, instead of\n\n#                                Boost_SYSTEM_LIBRARY_RELEASE being resolved to\n\n#                                \"/usr/lib/libboost_system.so\" it would be\n\n#                                \"/usr/lib/libboost_system.so.1.42.0\" instead.\n\n#                                This does not affect linking and should not be\n\n#                                enabled unless the user needs this information.\n\n#                                  [Since CMake 2.8.3]\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# These last three variables are available also as environment variables:\n\n# Also, note they are completely UPPERCASE, except Boost_DIR.\n\n#\n\n#   Boost_DIR or                 The preferred installation prefix for searching for\n\n#   BOOST_ROOT or BOOSTROOT      Boost.  Set this if the module has problems finding\n\n#                                the proper Boost installation.\n\n#\n\n#                                Note that Boost_DIR behaves exactly as <package>_DIR\n\n#                                variables are documented to behave in find_package's\n\n#                                Config mode.  That is, if it is set as a -D argument\n\n#                                to CMake, it must point to the location of the\n\n#                                BoostConfig.cmake or Boost-config.cmake file.  If it\n\n#                                is set as an environment variable, it must point to\n\n#                                the root of the boost installation.  BOOST_ROOT and\n\n#                                BOOSTROOT, on the other hand, will point to the root\n\n#                                in either case.\n\n#\n\n#                                To prevent falling back on the system paths, set\n\n#                                Boost_NO_SYSTEM_PATHS to true.\n\n#\n\n#                                To avoid finding boost-cmake installations, set\n\n#                                Boost_NO_BOOST_CMAKE to true.\n\n#\n\n#   BOOST_INCLUDEDIR             Set this to the include directory of Boost, if the\n\n#                                module has problems finding the proper Boost installation\n\n#\n\n#   BOOST_LIBRARYDIR             Set this to the lib directory of Boost, if the\n\n#                                module has problems finding the proper Boost installation\n\n#\n\n# Variables defined by this module:\n\n#\n\n#   Boost_FOUND                         System has Boost, this means the include dir was\n\n#                                       found, as well as all the libraries specified in\n\n#                                       the COMPONENTS list.\n\n#\n\n#   Boost_INCLUDE_DIRS                  Boost include directories: not cached\n\n#\n\n#   Boost_INCLUDE_DIR                   This is almost the same as above, but this one is\n\n#                                       cached and may be modified by advanced users\n\n#\n\n#   Boost_LIBRARIES                     Link to these to use the Boost libraries that you\n\n#                                       specified: not cached\n\n#\n\n#   Boost_LIBRARY_DIRS                  The path to where the Boost library files are.\n\n#\n\n#   Boost_VERSION                       The version number of the boost libraries that\n\n#                                       have been found, same as in version.hpp from Boost\n\n#\n\n#   Boost_LIB_VERSION                   The version number in filename form as\n\n#                                       it's appended to the library filenames\n\n#\n\n#   Boost_MAJOR_VERSION                 major version number of boost\n\n#   Boost_MINOR_VERSION                 minor version number of boost\n\n#   Boost_SUBMINOR_VERSION              subminor version number of boost\n\n#\n\n#   Boost_LIB_DIAGNOSTIC_DEFINITIONS    [WIN32 Only] You can call\n\n#                                       add_definitions(${Boost_LIB_DIAGNOSTIC_DEFINITIONS})\n\n#                                       to have diagnostic information about Boost's\n\n#                                       automatic linking outputted during compilation time.\n\n#\n\n# For each component you specify in find_package(), the following (UPPER-CASE)\n\n# variables are set.  You can use these variables if you would like to pick and\n\n# choose components for your targets instead of just using Boost_LIBRARIES.\n\n#\n\n#   Boost_${COMPONENT}_FOUND            True IF the Boost library \"component\" was found.\n\n#\n\n#   Boost_${COMPONENT}_LIBRARY          Contains the libraries for the specified Boost\n\n#                                       \"component\" (includes debug and optimized keywords\n\n#                                       when needed).\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#=============================================================================\n\n# Copyright 2006-2009 Kitware, Inc.\n\n# Copyright 2006-2008 Andreas Schneider <mail@cynapses.org>\n\n# Copyright 2007      Wengo\n\n# Copyright 2007      Mike Jackson\n\n# Copyright 2008      Andreas Pakulat <apaku@gmx.de>\n\n# Copyright 2008-2010 Philip Lowman <philip@yhbt.com>\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Before we go searching, check whether boost-cmake is avaialble, unless the\n\n# user specifically asked NOT to search for boost-cmake.\n\n#\n\n# If Boost_DIR is set, this behaves as any find_package call would. If not,\n\n# it looks at BOOST_ROOT and BOOSTROOT to find Boost.\n\n#\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# If Boost_DIR is not set, look for BOOSTROOT and BOOST_ROOT as alternatives,\n\n# since these are more conventional for Boost.\n",
        "Line" : 269,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Do the same find_package call but look specifically for the CMake version.\n\n# Note that args are passed in the Boost_FIND_xxxxx variables, so there is no\n\n# need to delegate them to this find_package call.\n",
        "Line" : 279,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# If we found boost-cmake, then we're done.  Print out what we found.\n\n# Otherwise let the rest of the module try to find it.\n",
        "Line" : 284,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n#  FindBoost functions & macros\n\n#\n\n############################################\n\n#\n\n# Check the existence of the libraries.\n\n#\n\n############################################\n\n# This macro was taken directly from the FindQt4.cmake file that is included\n\n# with the CMake distribution. This is NOT my work. All work was done by the\n\n# original authors of the FindQt4.cmake file. Only minor modifications were\n\n# made to remove references to Qt and make this file more generally applicable\n\n# And ELSE/ENDIF pairs were removed for readability.\n\n#########################################################################\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# if the generator supports configuration types then set\n\n# optimized and debug libraries, or if the CMAKE_BUILD_TYPE has a value\n",
        "Line" : 315,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# if there are no configuration types and CMAKE_BUILD_TYPE has no value\n\n# then just use the release libraries\n",
        "Line" : 320,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# FIXME: This probably should be set for both cases\n",
        "Line" : 324,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# if only the release version was found, set the debug variable also to the release version\n",
        "Line" : 328,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# if only the debug version was found, set the release variable also to the debug version\n",
        "Line" : 335,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# If the debug & release library ends up being the same, omit the keywords\n",
        "Line" : 342,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "# Remove superfluous \"debug\" / \"optimized\" keywords from\n\n# Boost_LIBRARY_DIRS\n",
        "Line" : 351,
        "CharPositionInLine" : 6
      },
      "15" : {
        "Text" : "# patch MD\n",
        "Line" : 364,
        "CharPositionInLine" : 4
      },
      "16" : {
        "Text" : "# Make variables changeble to the advanced user\n",
        "Line" : 367,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "#-------------------------------------------------------------------------------\n",
        "Line" : 375,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#\n\n# Runs compiler with \"-dumpversion\" and parses major/minor\n\n# version with a regex.\n\n#\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#\n\n# A convenience function for marking desired components\n\n# as found or not\n\n#\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "#\n\n# Take a list of libraries with \"thread\" in it\n\n# and prepend duplicates with \"thread_${Boost_THREADAPI}\"\n\n# at the front of the list\n\n#\n",
        "Line" : 404,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\n\n# If a library is found, replace its cache entry with its REALPATH\n\n#\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\n\n# End functions/macros\n\n#\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# The version may appear in a directory with or without the patch\n\n# level, even when the patch level is non-zero.\n",
        "Line" : 446,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# The user has not requested an exact version.  Among known\n\n# versions, find those that are acceptable to the user request.\n",
        "Line" : 452,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Select acceptable versions.\n",
        "Line" : 463,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# This version is high enough.\n",
        "Line" : 466,
        "CharPositionInLine" : 8
      },
      "27" : {
        "Text" : "# This version is a short-form for the requested version with\n\n# the patch level dropped.\n",
        "Line" : 469,
        "CharPositionInLine" : 8
      },
      "28" : {
        "Text" : "# Any version is acceptable.\n",
        "Line" : 475,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# The reason that we failed to find Boost. This will be set to a\n\n# user-friendly message when we fail to find some necessary piece of\n\n# Boost.\n",
        "Line" : 480,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# On versions < 1.35, remove the System library from the considered list\n\n# since it wasn't added until 1.35.\n",
        "Line" : 488,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# in cache already\n",
        "Line" : 507,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# Need to search for boost\n",
        "Line" : 526,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Output some of their choices\n",
        "Line" : 530,
        "CharPositionInLine" : 4
      },
      "34" : {
        "Text" : "# In windows, automatic linking is performed, so you do not have\n\n# to specify the libraries.  If you are linking to a dynamic\n\n# runtime, then you can choose to link to either a static or a\n\n# dynamic Boost library, the default is to do a static link.  You\n\n# can alter this for a specific library \"whatever\" by defining\n\n# BOOST_WHATEVER_DYN_LINK to force Boost library \"whatever\" to be\n\n# linked dynamically.  Alternatively you can force all Boost\n\n# libraries to dynamic link by defining BOOST_ALL_DYN_LINK.\n",
        "Line" : 546,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# This feature can be disabled for Boost library \"whatever\" by\n\n# defining BOOST_WHATEVER_NO_LIB, or for all of Boost by defining\n\n# BOOST_ALL_NO_LIB.\n",
        "Line" : 555,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# If you want to observe which libraries are being linked against\n\n# then defining BOOST_LIB_DIAGNOSTIC will cause the auto-linking\n\n# code to emit a #pragma message each time a library is selected\n\n# for linking.\n",
        "Line" : 559,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# If BOOST_ROOT was defined in the environment, use it.\n",
        "Line" : 579,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# If BOOST_ROOT was defined in the environment, use it.\n",
        "Line" : 584,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# If BOOSTROOT was defined in the environment, use it.\n",
        "Line" : 589,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# If BOOST_INCLUDEDIR was defined in the environment, use it.\n",
        "Line" : 594,
        "CharPositionInLine" : 2
      },
      "41" : {
        "Text" : "# If BOOST_LIBRARYDIR was defined in the environment, use it.\n",
        "Line" : 599,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# prepend BOOST_INCLUDEDIR to search path if specified\n",
        "Line" : 634,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Search for Boost include DIR\n\n# ------------------------------------------------------------------------\n\n# Try to find Boost by stepping backwards through the Boost versions\n\n# we know about.\n",
        "Line" : 641,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# Build a list of path suffixes for each version.\n",
        "Line" : 647,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# Add in a path suffix, based on the required version, ideally\n\n# we could read this from version.hpp, but for that to work we'd\n\n# need to know the include dir already\n",
        "Line" : 650,
        "CharPositionInLine" : 6
      },
      "46" : {
        "Text" : "# Transform 1.35 => 1_35 and 1.36.0 => 1_36_0\n",
        "Line" : 655,
        "CharPositionInLine" : 6
      },
      "47" : {
        "Text" : "# Look for a standard boost header file.\n",
        "Line" : 678,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Extract version information from version.hpp\n\n# ------------------------------------------------------------------------\n",
        "Line" : 687,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# Extract Boost_VERSION and Boost_LIB_VERSION from version.hpp\n\n# Read the whole file:\n\n#\n",
        "Line" : 692,
        "CharPositionInLine" : 4
      },
      "50" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Suffix initialization and compiler suffix detection.\n\n# ------------------------------------------------------------------------\n",
        "Line" : 727,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Setting some more suffixes for the library\n",
        "Line" : 731,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Attempt to guess the compiler suffix\n\n# NOTE: this is not perfect yet, if you experience any issues\n\n# please report them and use the Boost_COMPILER variable\n\n# to work around the problems.\n",
        "Line" : 744,
        "CharPositionInLine" : 4
      },
      "53" : {
        "Text" : "# Good luck!\n",
        "Line" : 766,
        "CharPositionInLine" : 20
      },
      "54" : {
        "Text" : "# yes, this is correct\n",
        "Line" : 767,
        "CharPositionInLine" : 34
      },
      "55" : {
        "Text" : "# Good luck!\n",
        "Line" : 768,
        "CharPositionInLine" : 20
      },
      "56" : {
        "Text" : "# yes, this is correct\n",
        "Line" : 769,
        "CharPositionInLine" : 34
      },
      "57" : {
        "Text" : "# no GCC version encoding prior to 1.34\n",
        "Line" : 776,
        "CharPositionInLine" : 38
      },
      "58" : {
        "Text" : "# no GCC version encoding prior to 1.34\n",
        "Line" : 784,
        "CharPositionInLine" : 38
      },
      "59" : {
        "Text" : "# Determine which version of GCC we have.\n",
        "Line" : 787,
        "CharPositionInLine" : 10
      },
      "60" : {
        "Text" : "# In Boost 1.36.0 and newer, the mangled compiler name used\n\n# on Mac OS X/Darwin is \"xgcc\".\n",
        "Line" : 791,
        "CharPositionInLine" : 16
      },
      "61" : {
        "Text" : "# In Boost <= 1.35.0, there is no mangled compiler name for\n\n# the Mac OS X/Darwin version of GCC.\n",
        "Line" : 795,
        "CharPositionInLine" : 16
      },
      "62" : {
        "Text" : "# We don't know the Boost version, so assume it's\n\n# pre-1.36.0.\n",
        "Line" : 800,
        "CharPositionInLine" : 14
      },
      "63" : {
        "Text" : "#======================\n\n# Systematically build up the Boost ABI tag\n\n# http://boost.org/doc/libs/1_41_0/more/getting_started/windows.html#library-naming\n",
        "Line" : 825,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# Key       Use this library when:\n\n#  s        linking statically to the C++ standard library and\n\n#           compiler runtime support libraries.\n",
        "Line" : 830,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "#  g        using debug versions of the standard and runtime\n\n#           support libraries\n",
        "Line" : 837,
        "CharPositionInLine" : 2
      },
      "66" : {
        "Text" : "#  y        using special debug build of python\n",
        "Line" : 845,
        "CharPositionInLine" : 2
      },
      "67" : {
        "Text" : "#  d        using a debug version of your code\n",
        "Line" : 849,
        "CharPositionInLine" : 2
      },
      "68" : {
        "Text" : "#  p        using the STLport standard library rather than the\n\n#           default one supplied with your compiler\n",
        "Line" : 851,
        "CharPositionInLine" : 2
      },
      "69" : {
        "Text" : "#  n        using the STLport deprecated \"native iostreams\" feature\n",
        "Line" : 857,
        "CharPositionInLine" : 2
      },
      "70" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  Begin finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 870,
        "CharPositionInLine" : 2
      },
      "71" : {
        "Text" : "# prepend BOOST_LIBRARYDIR to search path if specified\n",
        "Line" : 901,
        "CharPositionInLine" : 2
      },
      "72" : {
        "Text" : "# Support preference of static libs by adjusting CMAKE_FIND_LIBRARY_SUFFIXES\n",
        "Line" : 913,
        "CharPositionInLine" : 2
      },
      "73" : {
        "Text" : "# We want to use the tag inline below without risking double dashes\n",
        "Line" : 923,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "# The previous behavior of FindBoost when Boost_USE_STATIC_LIBS was enabled\n\n# on WIN32 was to:\n\n#  1. Search for static libs compiled against a SHARED C++ standard runtime library (use if found)\n\n#  2. Search for static libs compiled against a STATIC C++ standard runtime library (use if found)\n\n# We maintain this behavior since changing it could break people's builds.\n\n# To disable the ambiguous behavior, the user need only\n\n# set Boost_USE_STATIC_RUNTIME either ON or OFF.\n",
        "Line" : 935,
        "CharPositionInLine" : 2
      },
      "75" : {
        "Text" : "#\n\n# Find RELEASE libraries\n\n#\n",
        "Line" : 959,
        "CharPositionInLine" : 4
      },
      "76" : {
        "Text" : "#\n\n# Find DEBUG libraries\n\n#\n",
        "Line" : 990,
        "CharPositionInLine" : 4
      },
      "77" : {
        "Text" : "# Restore the original find library ordering\n",
        "Line" : 1031,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# ------------------------------------------------------------------------\n\n#  End finding boost libraries\n\n# ------------------------------------------------------------------------\n",
        "Line" : 1035,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# Check the version of Boost against the requested version.\n",
        "Line" : 1047,
        "CharPositionInLine" : 4
      },
      "80" : {
        "Text" : "# If the user requested an exact version of Boost, check\n\n# that. We already know that the Boost version we have is >= the\n\n# requested version.\n",
        "Line" : 1071,
        "CharPositionInLine" : 6
      },
      "81" : {
        "Text" : "# If the user didn't specify a patchlevel, it's 0.\n",
        "Line" : 1076,
        "CharPositionInLine" : 6
      },
      "82" : {
        "Text" : "# We'll set Boost_FOUND true again if we have an exact version match.\n",
        "Line" : 1081,
        "CharPositionInLine" : 6
      },
      "83" : {
        "Text" : "# State that we found a version of Boost that is too new or too old.\n",
        "Line" : 1095,
        "CharPositionInLine" : 6
      },
      "84" : {
        "Text" : "# Always check for missing components\n",
        "Line" : 1108,
        "CharPositionInLine" : 4
      },
      "85" : {
        "Text" : "# We were unable to find some libraries, so generate a sensible\n\n# error message that lists the libraries we were unable to find.\n",
        "Line" : 1126,
        "CharPositionInLine" : 6
      },
      "86" : {
        "Text" : "# Compatibility Code for backwards compatibility with CMake\n\n# 2.4's FindBoost module.\n",
        "Line" : 1147,
        "CharPositionInLine" : 6
      },
      "87" : {
        "Text" : "# Look for the boost library path.\n\n# Note that the user may not have installed any libraries\n\n# so it is quite possible the Boost_LIBRARY_PATH may not exist.\n",
        "Line" : 1150,
        "CharPositionInLine" : 6
      },
      "88" : {
        "Text" : "# Strip off the trailing \"/include\" in the path.\n",
        "Line" : 1160,
        "CharPositionInLine" : 8
      },
      "89" : {
        "Text" : "# we opt not to automatically output Boost_ERROR_REASON here as\n\n# it could be quite lengthy and somewhat imposing in it's requests\n\n# Since Boost is not always a required dependency we'll leave this\n\n# up to the end-user.\n",
        "Line" : 1208,
        "CharPositionInLine" : 8
      },
      "90" : {
        "Text" : "# show the Boost_INCLUDE_DIRS AND Boost_LIBRARIES variables only in the advanced view\n",
        "Line" : 1221,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 91
    },
    "hostsoftware/cmake_modules/FindCppNetlib.cmake" : {
      "ObjectId" : "d2e33634acf307041e600fa7beec692a5bd8b64c",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n\n# - Find CPPNETLIB\n\n# Find the native CPPNETLIB includes and library\n\n#\n\n#  CPPNETLIB_INCLUDE_DIR    - where to find .h\n\n#  CPPNETLIB_LIBRARIES   - List of libraries when using CPPNETLIB.\n\n#  CPPNETLIB_FOUND       - True if CPPNETLIB found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#\n\n# set defaults\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# locate the library\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set CPPNETLIB_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 147,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# if the include and the program are found then we have it\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "hostsoftware/cmake_modules/FindCurl.cmake" : {
      "ObjectId" : "9c161a8b495e9d8410f82e801ff108a8000790ae",
      "LastModified" : "2014-07-21T12:26:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n\n# locates the curl library\n\n# This file defines:\n\n# * CURL_FOUND if curl was found\n\n# * CURL_LIBRARY The lib to link to (currently only a static unix lib) \n\n# * CURL_INCLUDE_DIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# set defaults\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "##\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "##\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# find the include files\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# locate the library\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# On MacOS\n",
        "Line" : 92,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "#list(APPEND CURL_LIBRARIES ${_dummy})\n",
        "Line" : 116,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "#else( PC_CURL_STATIC_LIBRARIES )\n",
        "Line" : 128,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#endif( PC_CURL_STATIC_LIBRARIES )\n",
        "Line" : 135,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# On Linux\n",
        "Line" : 138,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#  if (CURL_INCLUDE_DIR AND CURL_LIBRARY)\n\n#    set (CURL_FOUND TRUE)\n\n#    if (NOT CURL_FIND_QUIETLY)\n\n#      message (STATUS \"Found curl headers in ${CURL_INCLUDE_DIR} and libraries ${CURL_LIBRARY}\")\n\n#    endif (NOT CURL_FIND_QUIETLY)\n\n#  else (CURL_INCLUDE_DIR AND CURL_LIBRARY)\n\n#    if (CURL_FIND_REQUIRED)\n\n#      message (FATAL_ERROR \"curl could not be found!\")\n\n#    endif (CURL_FIND_REQUIRED)\n\n#  endif (CURL_INCLUDE_DIR AND CURL_LIBRARY)\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "hostsoftware/cmake_modules/FindGnutls.cmake" : {
      "ObjectId" : "f46588c0f9d35ed9471fa798aff988b3a0892cf6",
      "LastModified" : "2014-07-21T12:26:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n\n# locates the gnutls library\n\n# This file defines:\n\n# * GNUTLS_FOUND if gnutls was found\n\n# * GNUTLS_LIBRARY The lib to link to (currently only a static unix lib) \n\n# * GNUTLS_INCLUDE_DIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# set defaults\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "##\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "##\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# find the include files\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# locate the library\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# On MacOS\n",
        "Line" : 92,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "#list(APPEND GNUTLS_LIBRARIES ${_dummy})\n",
        "Line" : 109,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "#else( PC_GNUTLS_STATIC_LIBRARIES )\n",
        "Line" : 122,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#endif( PC_GNUTLS_STATIC_LIBRARIES )\n",
        "Line" : 129,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# On Linux\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#  if (GNUTLS_INCLUDE_DIR AND GNUTLS_LIBRARY)\n\n#    set (GNUTLS_FOUND TRUE)\n\n#    if (NOT GNUTLS_FIND_QUIETLY)\n\n#      message (STATUS \"Found gnutls headers in ${GNUTLS_INCLUDE_DIR} and libraries ${GNUTLS_LIBRARY}\")\n\n#    endif (NOT GNUTLS_FIND_QUIETLY)\n\n#  else (GNUTLS_INCLUDE_DIR AND GNUTLS_LIBRARY)\n\n#    if (GNUTLS_FIND_REQUIRED)\n\n#      message (FATAL_ERROR \"gnutls could not be found!\")\n\n#    endif (GNUTLS_FIND_REQUIRED)\n\n#  endif (GNUTLS_INCLUDE_DIR AND GNUTLS_LIBRARY)\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "hostsoftware/cmake_modules/FindHBT.cmake" : {
      "ObjectId" : "10462d0e0c6018c4ab1928196669368926378196",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n\n# - Find HBT\n\n# Find the native HBT includes and libraries\n\n#\n\n#  HBT_INCLUDE_DIR - where to find .h\n\n#  HBT_LIBRARIES   - List of libraries to link\n\n#  HBT_FOUND       - True if HBT found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#\n\n# set defaults\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# locate the library\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set HBT_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# if the include and the program are found then we have it\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "hostsoftware/cmake_modules/FindJson.cmake" : {
      "ObjectId" : "7e03bbf8664e89ef4b09149504366894b8e3b79f",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n\n# - Try to find libjson include dirs and libraries\n\n# Usage of this module as follows:\n\n# This file defines:\n\n# * JSON_FOUND if protoc was found\n\n# * JSON_LIBRARY The lib to link to (currently only a static unix lib, not\n\n# portable)\n\n# * JSON_INCLUDE The include directories for libjson.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# set defaults\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# find the include files\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# locate the library\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# if the include and the program are found then we have it\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "hostsoftware/cmake_modules/FindJsonCpp.cmake" : {
      "ObjectId" : "7f280cc0b2d6d7630acc2ef282b5e79b07b8004e",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n\n# - Try to find libjsoncpp include dirs and libraries\n\n# Usage of this module as follows:\n\n# This file defines:\n\n# * JSONCPP_FOUND if protoc was found\n\n# * JSONCPP_LIBRARY The lib to link to (currently only a static unix lib, not\n\n# portable)\n\n# * JSONCPP_INCLUDE The include directories for libjsoncpp.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# set defaults\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# find the include files\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# locate the library\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# if the include and the program are found then we have it\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#if( NOT WIN32)\n\n#  list(APPEND JSONCPP_LIBRARY \"-lrt\")\n\n#endif( NOT WIN32)\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "hostsoftware/cmake_modules/FindLdap.cmake" : {
      "ObjectId" : "d148a1d8e44172c9de3819317864f5f1e583f9c0",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n\n# locates the ldap library\n\n# This file defines:\n\n# * LDAP_FOUND if ldap was found\n\n# * LDAP_LIBRARY The lib to link to (currently only a static unix lib) \n\n# * LDAP_INCLUDE_DIR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# set defaults\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "##\n",
        "Line" : 44,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "##\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# find the include files\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# locate the library\n",
        "Line" : 88,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# On MacOS\n",
        "Line" : 93,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "#list(APPEND LDAP_LIBRARIES ${_dummy})\n",
        "Line" : 111,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "#else( PC_LDAP_STATIC_LIBRARIES )\n",
        "Line" : 124,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "#endif( PC_LDAP_STATIC_LIBRARIES )\n",
        "Line" : 132,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# On Linux\n",
        "Line" : 135,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "#  if (LDAP_INCLUDE_DIR AND LDAP_LIBRARY)\n\n#    set (LDAP_FOUND TRUE)\n\n#    if (NOT LDAP_FIND_QUIETLY)\n\n#      message (STATUS \"Found ldap headers in ${LDAP_INCLUDE_DIR} and libraries ${LDAP_LIBRARY}\")\n\n#    endif (NOT LDAP_FIND_QUIETLY)\n\n#  else (LDAP_INCLUDE_DIR AND LDAP_LIBRARY)\n\n#    if (LDAP_FIND_REQUIRED)\n\n#      message (FATAL_ERROR \"ldap could not be found!\")\n\n#    endif (LDAP_FIND_REQUIRED)\n\n#  endif (LDAP_INCLUDE_DIR AND LDAP_LIBRARY)\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "hostsoftware/cmake_modules/FindLibHexabus.cmake" : {
      "ObjectId" : "f8020f548ae4ae25581e8177f2fdc30b9f154910",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n\n# - Find HXB\n\n# Find the native HXB includes and library\n\n#\n\n#  HXB_INCLUDE_DIR    - where to find .h\n\n#  HXB_LIBRARIES   - List of libraries when using HXB.\n\n#  HXB_FOUND       - True if HXB found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#\n\n# set defaults\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# locate the library\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set HXB_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# if the include and the program are found then we have it\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "hostsoftware/cmake_modules/FindLibMysmartGrid.cmake" : {
      "ObjectId" : "d6d59f7629c872e83221b8f87028efa41e744952",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n\n# - Try to find libmysmartgrid include dirs and libraries\n\n# Usage of this module as follows:\n\n# This file defines:\n\n# * LIBMYSMARTGRID_FOUND if protoc was found\n\n# * LIBMYSMARTGRID_LIBRARY The lib to link to (currently only a static unix lib, not\n\n# portable)\n\n# * LIBMYSMARTGRID_INCLUDE The include directories for libmysmartgrid.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# when crosscompiling import the executable targets from a file\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY FIRST)\n\n#  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE FIRST)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# set defaults\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# locate the library\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# use target mysmartgrid for libmysmartgrid.a \n\n# remember to use target_link_libraries() for linking targets\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# if the include and the program are found then we have it\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# if( NOT WIN32)\n\n#   list(APPEND LIBMYSMARTGRID_LIBRARY \"-lrt\")\n\n# endif( NOT WIN32)\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n\n#  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "hostsoftware/cmake_modules/FindLibklio.cmake" : {
      "ObjectId" : "6d65da3d4846459a03052d08596b7ca8bfe2e513",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n\n# - Try to find libklio include dirs and libraries\n\n# Usage of this module as follows:\n\n# This file defines:\n\n# * LIBKLIO_FOUND if protoc was found\n\n# * LIBKLIO_LIBRARY The lib to link to (currently only a static unix lib, not\n\n# portable)\n\n# * LIBKLIO_INCLUDE The include directories for libklio.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# when crosscompiling import the executable targets from a file\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY FIRST)\n\n#  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE FIRST)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#\n\n# set defaults\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# locate the library\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#get_filename_component (LIBKLIO_LIBRARIES ${LIBKLIO_LIBRARY} NAME)\n\n#set(LIBKLIO_LIBRARY_DIR ${LIBKLIO_LIBRARY_DIR})\n\n#set(LIBKLIO_FOUND ${LIBKLIO_FOUND})\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# use target klio for libklio.a\n\n# remember to use target_link_libraries() for linking targets\n",
        "Line" : 114,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# if the include and the program are found then we have it\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# if( NOT WIN32)\n\n#   list(APPEND LIBKLIO_LIBRARY \"-lrt\")\n\n# endif( NOT WIN32)\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "#  set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n\n#  set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "hostsoftware/cmake_modules/FindRocksDB.cmake" : {
      "ObjectId" : "4e01430884577ee1c458367da0601a8948845232",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n\n# - Try to find rocksdb include dirs and libraries\n\n# Usage of this module as follows:\n\n# This file defines:\n\n# * ROCKSDB_FOUND if protoc was found\n\n# * ROCKSDB_LIBRARY The lib to link to (currently only a static unix lib, not\n\n# portable)\n\n# * ROCKSDB_INCLUDE The include directories for rocksdb.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# pkg_check_modules (PC_ROCKSDB rocksdb>=2.7)\n",
        "Line" : 15,
        "CharPositionInLine" : 5
      },
      "2" : {
        "Text" : "#\n\n# set defaults\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# find the include files\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# locate the library\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# if the include and the program are found then we have it\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "hostsoftware/cmake_modules/FindRtMidi.cmake" : {
      "ObjectId" : "e7e1e93f7c7d4bbaafebdf25a74f43d1b28dcac2",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find RTMIDI\n\n# Find the native RTMIDI includes and library\n\n#\n\n#  RTMIDI_INCLUDE_DIR    - where to find .h\n\n#  RTMIDI_LIBRARIES   - List of libraries when using RTMIDI.\n\n#  RTMIDI_FOUND       - True if RTMIDI found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 9,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set RTMIDI_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "hostsoftware/cmake_modules/FindSqlite.cmake" : {
      "ObjectId" : "f0dfd22448707f0240076ee8cad2bc0f022ada5d",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n\n# Revision 1391, 1.2 kB  (checked in by rexbron) \n\n# - Try to find SQLITE3\n\n# Once done this will define\n\n#\n\n#  SQLITE3_FOUND - system has SQLITE3\n\n#  SQLITE3_INCLUDE_DIR - the SQLITE3 include directory\n\n#  SQLITE3_LIBRARIES - Link these to use SQLITE3\n\n#  SQLITE3_DEFINITIONS - Compiler switches required for using SQLITE3\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n\n# For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 15,
        "CharPositionInLine" : 3
      },
      "2" : {
        "Text" : "#\n\n# set defaults\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# find the include files\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# locate the library\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#set(SQLITE3_LIBRARIES ${SQLITE3_LIBRARY})\n\n#MARK_AS_ADVANCED(\n\n#  SQLITE3_FOUND\n\n#  SQLITE3_INCLUDE_DIR\n\n#  SQLITE3_LIBRARIES\n\n#  )\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# if the include and the program are found then we have it\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#if( NOT WIN32)\n\n#  list(APPEND SQLITE3_LIBRARY \"-lrt\")\n\n#endif( NOT WIN32)\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "hostsoftware/cmake_modules/FindUCI.cmake" : {
      "ObjectId" : "c0cc3fed2dac863ef324553cb9574eb81b5e8aed",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n\n# - Try to find libuci include dirs and libraries\n\n# Usage of this module as follows:\n\n# This file defines:\n\n# * UCI_FOUND if protoc was found\n\n# * UCI_LIBRARY The lib to link to (currently only a static unix lib, not\n\n# portable)\n\n# * UCI_INCLUDE The include directories for libuci.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# set defaults\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# find the include files\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# locate the library\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# if the include and the program are found then we have it\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "hostsoftware/cmake_modules/Findlibusb-1.0.cmake" : {
      "ObjectId" : "405ed51688ab9f8b1269f11e3b147e0df57b6520",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find libusb-1.0\n\n# Once done this will define\n\n#\n\n#  LIBUSB_1_FOUND - system has libusb\n\n#  LIBUSB_1_INCLUDE_DIRS - the libusb include directory\n\n#  LIBUSB_1_LIBRARIES - Link these to use libusb\n\n#  LIBUSB_1_DEFINITIONS - Compiler switches required for using libusb\n\n#\n\n#  Adapted from cmake-modules Google Code project\n\n#\n\n#  Copyright (c) 2006 Andreas Schneider <mail@cynapses.org>\n\n#\n\n#  (Changes for libusb) Copyright (c) 2008 Kyle Machulis <kyle@nonpolynomial.com>\n\n#\n\n# Redistribution and use is allowed according to the terms of the New BSD license.\n\n#\n\n# CMake-Modules Project New BSD License\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright notice, this\n\n#   list of conditions and the following disclaimer.\n\n#\n\n# * Redistributions in binary form must reproduce the above copyright notice,\n\n#   this list of conditions and the following disclaimer in the\n\n#   documentation and/or other materials provided with the distribution.\n\n#\n\n# * Neither the name of the CMake-Modules Project nor the names of its\n\n#   contributors may be used to endorse or promote products derived from this\n\n#   software without specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n\n#  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# show the LIBUSB_1_INCLUDE_DIRS and LIBUSB_1_LIBRARIES variables only in the advanced view\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 3
    },
    "hostsoftware/cmake_modules/HexabusCommon.cmake" : {
      "ObjectId" : "0651e86ca293131f9863325ff8161f3211832413",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n\n# Common setting for Hexabus packages\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Version settings\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# have the full monty in makefiles\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# enable unit testing\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# add a path where some libraries might be stored\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Where are the additional libraries installed? Note: provide includes\n\n# path here, subsequent checks will resolve everything else\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# expand the root_path if do crosscompiling\n\n#\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#  set(CMAKE_INCLUDE_PATH ${CMAKE_INCLUDE_PATH} ${CMAKE_TOOLCHAIN_DIRECTORY}/usr/include)\n\n#  set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} ${CMAKE_TOOLCHAIN_DIRECTORY}/usr/lib)\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Detect the system we're compiling on\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "#\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# g++ fails to produce sensible warnings about missng field initializers in C++11 mode\n\n# because it warns *way* too much about code that is in no way incorrect\n\n# see https://gcc.gnu.org/bugzilla/show_bug.cgi?id=36750#c11\n",
        "Line" : 82,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "#\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "hostsoftware/cmake_modules/ProjectInfo.cmake" : {
      "ObjectId" : "a52b5a966838a6decef52d68426f312670b80868",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "hostsoftware/cmake_modules/UseCodeCoverage.cmake" : {
      "ObjectId" : "fe91168e34f1efd1212979b36124fdfda4d6a6fd",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n\n# - Enable Code Coverage\n\n#\n\n#\n\n# USAGE:\n\n# 1. Copy this file into your cmake modules path\n\n# 2. Add the following line to your CMakeLists.txt:\n\n#      include(UseCodeCoverage)\n\n# 3. Select the ENABLE_CODECOVERAGE option when you want to build with code coverage enabled.\n\n#\n\n# Variables you may define are:\n\n#  CODECOV_OUTPUTFILE - the name of the temporary output file used. Defaults to \"cmake_coverage.output\"\n\n#  CODECOV_HTMLOUTPUTDIR - the name of the directory where HTML results are placed. Defaults to \"coverage_results\"\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n#  Copyright (C) 2010 Brad Hards <bradh@frogmouth.net>\n\n#\n\n#  Redistribution and use is allowed according to the terms of the New\n\n#  BSD license.\n\n#  For details see the accompanying COPYING-CMAKE-SCRIPTS file.\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set( CMAKE_EXE_LINKER_FLAGS ${CMAKE_EXE_LINKER_FLAGS} --coverage )\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#       add_dependencies(test coverage_init)\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "hostsoftware/hbt/CMakeLists.txt" : {
      "ObjectId" : "d68be86d7b7ebfa95a14cd0ff98478b38488f386",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###################################################################################################\n\n# No user settings below\n\n###################################################################################################\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Reflect the package structure\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "### print some output for the user\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "hostsoftware/hbt/Makefile" : {
      "ObjectId" : "e9fe99d9764ff01ba8b33bb7d96b5c324cae5faf",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Clang offers better error messages during development. Uncomment for \n\n# release.\n\n#export CC=/usr/bin/clang\n\n#export CXX=/usr/bin/clang++\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "hostsoftware/hbt/include/CMakeLists.txt" : {
      "ObjectId" : "59c5532db786655e6cdb319267fd9b2f449765be",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "hostsoftware/hbt/lib/CMakeLists.txt" : {
      "ObjectId" : "e5a2107488b7950c66c38ba25ba4b95e8466884f",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "hostsoftware/hbt/lib/IR/CMakeLists.txt" : {
      "ObjectId" : "4f91731f40c16bda03a376ae4d349f79752ed887",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "hostsoftware/hbt/lib/Lang/CMakeLists.txt" : {
      "ObjectId" : "e192daada1bcb8f5aa85e74808b0bc2861d465da",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "hostsoftware/hbt/lib/MC/CMakeLists.txt" : {
      "ObjectId" : "dc178e1c06d20795a9790ebe45474397ac83e2d4",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "hostsoftware/hbt/lib/Util/CMakeLists.txt" : {
      "ObjectId" : "16333e566becc84e8c6639f186146585b11549f4",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "hostsoftware/hbt/src/CMakeLists.txt" : {
      "ObjectId" : "2b09ff3864c8389d7a19b606d6b4f93ad9cdc847",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "hostsoftware/hbt/tests/CMakeLists.txt" : {
      "ObjectId" : "d12f5964c9a5b0e7c01f976031543e259bcdb5c6",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "hostsoftware/hexadaemon/CMakeLists.txt" : {
      "ObjectId" : "4acdeb535f9fbe3c6e77fdd0978202f4ac98a640",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###################################################################################################\n\n# No user settings below\n\n###################################################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check for some compiler stuff\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Reflect the package structure\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# add some files to the installation target\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CPACK packaging\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "### print some output for the user\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "hostsoftware/hexadaemon/src/CMakeLists.txt" : {
      "ObjectId" : "bca8d3fa41b8872736c744a6c6686ec8087374bd",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#link_directories(\n\n#  #  ${SQLITE3_STATIC_LIBRARY_DIRS}\n\n#  )\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Link the executables\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add programs to the install target \n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "hostsoftware/hexanode/backend/CMakeLists.txt" : {
      "ObjectId" : "a6bae9a667a4c272b759d39c92ddc27508ca83bc",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Reflect the package structure\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add some files to the installation target\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CPACK packaging\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "### print some output for the user\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "hostsoftware/hexanode/backend/Makefile" : {
      "ObjectId" : "ddbec9fdafe44685889e2c7491ea2fe63129214b",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "hostsoftware/hexanode/backend/RtMidi/CMakeLists.txt" : {
      "ObjectId" : "0c7eef28c2466878576d4e6562a541984e414e3c",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "hostsoftware/hexanode/backend/libhexanode/CMakeLists.txt" : {
      "ObjectId" : "aa9de438ad69518b6a514fc510e13a89e37d988b",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#target_link_libraries(hexanode ${Boost_IOSTREAMS_LIBRARY})\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "hostsoftware/hexanode/backend/src/CMakeLists.txt" : {
      "ObjectId" : "3749e37b8c65b01e7395777fb487cd96db4396f5",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  ${JSON_LIBRARY}\n\n#  ${CURL_LIBRARIES}\n\n#  ${SQLITE3_LIBRARIES}\n\n#  ${GNUTLS_LIBRARIES}\n\n#  ${OPENSSL_CRYPTO_LIBRARY}\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add programs to the install target \n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "hostsoftware/hexanode/webfrontend/CMakeLists.txt" : {
      "ObjectId" : "a60f7d64ef1866fed9e4c47eed1478e9bb89d517",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###################################################################################################\n\n# No user settings below\n\n###################################################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Where are the additional libraries installed? Note: provide includes\n\n# path here, subsequent checks will resolve everything else\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CPACK packaging\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/README.md\")\n\n#set(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.txt\")\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "### print some output for the user\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "hostsoftware/hexanode/webfrontend/Makefile" : {
      "ObjectId" : "ddbec9fdafe44685889e2c7491ea2fe63129214b",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "hostsoftware/hexinfo/CMakeLists.txt" : {
      "ObjectId" : "45aaa4da712006e9ac8aff844feccf017a5c12ab",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###################################################################################################\n\n# No user settings below\n\n###################################################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Reflect the package structure\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# enable unit testing\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# add some files to the installation target\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CPACK packaging\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "### print some output for the user\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "hostsoftware/hexinfo/Makefile" : {
      "ObjectId" : "ddbec9fdafe44685889e2c7491ea2fe63129214b",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "hostsoftware/hexinfo/src/CMakeLists.txt" : {
      "ObjectId" : "0f9d5c072053a797c2478c92b8aae8febc69bf78",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "hostsoftware/libhexabus/CMakeLists.txt" : {
      "ObjectId" : "7ae3eb280ada1194b34722c84439ee5ab1083001",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###################################################################################################\n\n# No user settings below\n\n###################################################################################################\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find libklio\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CPACK packaging\n",
        "Line" : 25,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Reflect the package structure\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# enable unit testing\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# add some files to the installation target\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "### print some output for the user\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#  message(\" sqlite3        include: ${SQLITE3_INCLUDE_DIR}, lib: ${SQLITE3_LIBRARIES}\")\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#  message(\" curl    include: ${CURL_INCLUDE_DIR}, lib: ${CURL_LIBRARIES}\")\n\n#  message(\" gnutls  include: ${GNUTLS_INCLUDE_DIR}, lib: ${GNUTLS_LIBRARIES}\")\n\n#  message(\" rocksdb include: ${ROCKSDB_INCLUDE_DIR}, lib: ${ROCKSDB_LIBRARY}\")\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "hostsoftware/libhexabus/Makefile" : {
      "ObjectId" : "ddbec9fdafe44685889e2c7491ea2fe63129214b",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "hostsoftware/libhexabus/libhexabus/CMakeLists.txt" : {
      "ObjectId" : "914d0a4d819b962ad02ce7710e8c7f02595b34be",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#meh\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#target_link_libraries(hexabus ${Boost_IOSTREAMS_LIBRARY})\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "hostsoftware/libhexabus/src/CMakeLists.txt" : {
      "ObjectId" : "7f846da6fe28191db09fcb5deb9387a2e7758b95",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#  link_directories(\n\n#  ${SQLITE3_STATIC_LIBRARY_DIRS}\n\n#  )\n\n#    link_directories(\n\n#  ${LIBMYSMARTGRID_LIBRARY}\n\n#  )\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Link the executables\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link the executables\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link the executables\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Link the executables\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#    ${JSON_LIBRARY}\n\n#    ${CURL_LIBRARIES}\n\n#    ${SQLITE3_LIBRARIES}\n\n#    ${GNUTLS_LIBRARIES}\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#    ${ROCKSDB_LIBRARY}\n\n#    ${OPENSSL_CRYPTO_LIBRARY}\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#    gcrypt\n",
        "Line" : 108,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# add programs to the install target\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "hostsoftware/libhexabus/tests/CMakeLists.txt" : {
      "ObjectId" : "f390398bc34f57f1b9597a651586682133e26234",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "hostsoftware/libhexabus/tests/packet/CMakeLists.txt" : {
      "ObjectId" : "104690b3133ac6ad6e49144b61be1b345e01548c",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Link the executable\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "hostsoftware/libjhexabus/build.xml" : {
      "ObjectId" : "e29f6cb99312ec6e2cb7a6f73cc06e756d1c6aa3",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " set global properties for this build ",
        "Line" : 5,
        "CharPositionInLine" : 48
      },
      "1" : {
        "Text" : " Create the time stamp ",
        "Line" : 12,
        "CharPositionInLine" : 35
      },
      "2" : {
        "Text" : " Create the build directory structure used by compile ",
        "Line" : 14,
        "CharPositionInLine" : 66
      },
      "3" : {
        "Text" : " Compile the java code from ${src} into ${build} ",
        "Line" : 21,
        "CharPositionInLine" : 59
      },
      "4" : {
        "Text" : " Compile the java code from ${examples} into ${build} ",
        "Line" : 27,
        "CharPositionInLine" : 64
      },
      "5" : {
        "Text" : " Create the distribution directory ",
        "Line" : 33,
        "CharPositionInLine" : 47
      },
      "6" : {
        "Text" : " Put everything in ${build} into the libjhexabus-${DSTAMP}.jar file ",
        "Line" : 36,
        "CharPositionInLine" : 80
      },
      "7" : {
        "Text" : " Delete the ${build} and ${dist} directory trees ",
        "Line" : 42,
        "CharPositionInLine" : 61
      },
      "CommentCount" : 8
    },
    "hostsoftware/network-autoconfig/CMakeLists.txt" : {
      "ObjectId" : "c58b5aba9b615efbb703f9ee96da49558286981c",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# -*- mode: cmake; -*-\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###################################################################################################\n\n# No user settings below\n\n###################################################################################################\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add some files to the installation target\n\n#INSTALL(FILES README.md LICENSE.txt DESTINATION share/doc/hexaswitch)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# CPACK packaging\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(CPACK_PACKAGE_DESCRIPTION_FILE \"${CMAKE_CURRENT_SOURCE_DIR}/README.md\")\n\n#set(CPACK_RESOURCE_FILE_LICENSE \"${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.txt\")\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "### print some output for the user\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "hostsoftware/network-autoconfig/Makefile" : {
      "ObjectId" : "d9a0394ffefb63423dd4f07712c76f1491e25a8f",
      "LastModified" : "2015-04-16T10:07:06Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 51,
    "MAKEFILE" : 8,
    "ANT" : 1
  },
  "ElapsedTime" : 2609
}