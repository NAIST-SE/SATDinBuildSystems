{
  "Repository" : "28358137",
  "Revision" : "HEAD",
  "ObjectId" : "ec948b5c9561dada44f81682f5e917dcc9cc8010",
  "CommitTime" : "2019-03-29T03:32:49Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "399171a69ab05205bffd7a1a07221c64bf8c4d36",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#disable parts of caffe we don't need\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#our version of caffe needs to pull in headers from gnina and we'll use c++11\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "Eigen/CMakeLists.txt" : {
      "ObjectId" : "a92dd6f6cafd2206f8be1a50f1294e2ae49feb5a",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/CMakeLists.txt" : {
      "ObjectId" : "c326f374d9ee89c953dd9caefbfaffccb905511c",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/Cholesky/CMakeLists.txt" : {
      "ObjectId" : "d01488b41a826850277a918f555e3668167dd367",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/CholmodSupport/CMakeLists.txt" : {
      "ObjectId" : "814dfa61313847c0f33538e11c4ac4557ec3e32e",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/Core/CMakeLists.txt" : {
      "ObjectId" : "2346fc2bbca4d9bd699efc4c366afd7abd400e3c",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/Core/arch/AltiVec/CMakeLists.txt" : {
      "ObjectId" : "9f8d2e9c46765f4253d6877d040e5c2a90612086",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/Core/arch/CMakeLists.txt" : {
      "ObjectId" : "8456dec1581554a4f7798ebe7d9d292369f21607",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/Core/arch/Default/CMakeLists.txt" : {
      "ObjectId" : "339c091d156100d46f3acbc67ad205749d8f4b3d",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/Core/arch/NEON/CMakeLists.txt" : {
      "ObjectId" : "fd4d4af50cb46dac7e6b29ef8654e70528e1f3ca",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/Core/arch/SSE/CMakeLists.txt" : {
      "ObjectId" : "46ea7cc623c62394c78425b15e100b84126b40a7",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/Core/products/CMakeLists.txt" : {
      "ObjectId" : "21fc94ae38a5574289ae4e304ce087f3ed6897f0",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/Core/util/CMakeLists.txt" : {
      "ObjectId" : "a1e2e521fc11124c92768621c4edf784bc10f51f",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/Eigen2Support/CMakeLists.txt" : {
      "ObjectId" : "7ae41b3cbe9c568f7efdaf45cd1a1ef874bf309b",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/Eigen2Support/Geometry/CMakeLists.txt" : {
      "ObjectId" : "c347a8f26228694dc67e0e89ff6d509152dac738",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/Eigenvalues/CMakeLists.txt" : {
      "ObjectId" : "193e0268599516e2515318ed04eb6dda37b2dd59",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/Geometry/CMakeLists.txt" : {
      "ObjectId" : "f8f728b84faf0e08d91fac04e2986260368b9063",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/Geometry/arch/CMakeLists.txt" : {
      "ObjectId" : "1267a79c78767c43d11c529cc84468cbdd1052a2",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/Householder/CMakeLists.txt" : {
      "ObjectId" : "ce4937db061bbadb0357ccc45547b141761a70e3",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/IterativeLinearSolvers/CMakeLists.txt" : {
      "ObjectId" : "59ccc0072cc4ed78e6aa783bfab2486aac757fca",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/Jacobi/CMakeLists.txt" : {
      "ObjectId" : "490dac626439ade5e05baaba504689366db22e6d",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/LU/CMakeLists.txt" : {
      "ObjectId" : "e0d8d78c1720abb27432f41aa2ace29ef3f3794f",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/LU/arch/CMakeLists.txt" : {
      "ObjectId" : "f6b7ed9ecc3a25e3885c7fece60428481e51c696",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/MetisSupport/CMakeLists.txt" : {
      "ObjectId" : "2bad314163c5044265aa6ac14e3767308dd04ba6",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/OrderingMethods/CMakeLists.txt" : {
      "ObjectId" : "9f4bb275808257ac71d6c04d9c602ce5c0b5be8d",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/PaStiXSupport/CMakeLists.txt" : {
      "ObjectId" : "28c657e9bcf7d3e0ecc800f6d5a11d54020b58cc",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/PardisoSupport/CMakeLists.txt" : {
      "ObjectId" : "a097ab401920ea1b7068f790edcfcf9086b3038b",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/QR/CMakeLists.txt" : {
      "ObjectId" : "96f43d7f5b30fa024b9bd2d9e3a5dacb9d401ecb",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/SPQRSupport/CMakeLists.txt" : {
      "ObjectId" : "4968beaf2c59bcec07fe1861b5d72cb4d6723a6d",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/SVD/CMakeLists.txt" : {
      "ObjectId" : "55efc44b12970d5ec715393cb68cd061203ce941",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/SparseCholesky/CMakeLists.txt" : {
      "ObjectId" : "375a59d7a577877313a1ff2a6bf1c8fac138768b",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/SparseCore/CMakeLists.txt" : {
      "ObjectId" : "d860452a65cb20850a12a120ab1fd3e3fd83dccc",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/SparseLU/CMakeLists.txt" : {
      "ObjectId" : "69729ee8961aa7d4ef514e9f890de0d29f12161f",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/SparseQR/CMakeLists.txt" : {
      "ObjectId" : "f9ddf2bdb75878292267c18697d9dedbd69a6611",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/StlSupport/CMakeLists.txt" : {
      "ObjectId" : "0f094f637acd51b0931e58a199c30f550beaa282",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/SuperLUSupport/CMakeLists.txt" : {
      "ObjectId" : "b28ebe5839cf5c664abdb44c186547507ce688d3",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/UmfPackSupport/CMakeLists.txt" : {
      "ObjectId" : "a57de00209d3bc746b050d1b8aa736bccc66f2bc",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/misc/CMakeLists.txt" : {
      "ObjectId" : "a58ffb7457e06a7a69426a21a9d46d07a6a8ee91",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "Eigen/src/plugins/CMakeLists.txt" : {
      "ObjectId" : "1a1d3ffbd724d17e161c40c48ac56c8b1aeb2e1f",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "caffe/CMakeLists.txt" : {
      "ObjectId" : "33e95991939ac77b25c99464e66db8baff211b48",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Caffe project\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ Caffe version\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ Using cmake scripts and modules\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---[ Options\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# TODO: rename to USE_CUDA\n",
        "Line" : 34,
        "CharPositionInLine" : 63
      },
      "5" : {
        "Text" : "# ---[ Dependencies\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---[ Flags\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ---[ Warnings\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ---[ Config generation\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ---[ Includes\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ---[ Includes & defines for CUDA\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# cuda_compile() does not have per-call dependencies or include pathes\n\n# (cuda_compile() has per-call flags, but we set them here too for clarity)\n\n#\n\n# list(REMOVE_ITEM ...) invocations remove PRIVATE and PUBLIC keywords from collected definitions and include pathes\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# pass include pathes to cuda_include_directories()\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# add definitions to nvcc flags directly\n",
        "Line" : 90,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# ---[ Subdirectories\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ---[ Linter target\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# ---[ pytest target\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# ---[ uninstall target\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# ---[ Configuration summary\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# ---[ Export configs generation\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "caffe/Makefile" : {
      "ObjectId" : "c823f66ef10d7dde496fda56e1264be151a9cf9b",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Explicitly check for the config file, otherwise make -k will proceed anyway.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# All of the directories containing code.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The target shared library name\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#DYNAMIC_SONAME_SHORT := $(DYNAMIC_NAME_SHORT).$(DYNAMIC_VERSION_MAJOR)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##############################\n\n# Get all source files\n\n##############################\n\n# CXX_SRCS are the source files excluding the test ones.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CU_SRCS are the cuda source files\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# TEST_SRCS are the test source files\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# TOOL_SRCS are the source files for the tool binaries\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# EXAMPLE_SRCS are the source files for the example binaries\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# BUILD_INCLUDE_DIR contains any generated header files we want to include.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# PROTO_SRCS are the protocol buffer definitions\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# PROTO_BUILD_DIR will contain the .cc and obj files generated from\n\n# PROTO_SRCS; PROTO_BUILD_INCLUDE_DIR will contain the .h header files\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# NONGEN_CXX_SRCS includes all source/header files except those generated\n\n# automatically (e.g., by proto).\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# PY$(PROJECT)_SRC is the python wrapper for $(PROJECT)\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# MAT$(PROJECT)_SRC is the mex entrance point of matlab package for $(PROJECT)\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "##############################\n\n# Derive generated files\n\n##############################\n\n# The generated files for protocol buffers\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# The objects corresponding to the source files\n\n# These objects will be linked into the final shared library, so we\n\n# exclude the tool, example, and test objects.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# tool, example, and test objects\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Output files for automatic dependency generation\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# tool, example, and test bins\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# symlinks to tool bins without the \".bin\" extension\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Put the test binaries in build/test for convenience.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# TEST_ALL_BIN is the test binary that links caffe dynamically.\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "##############################\n\n# Derive compiler warning dump locations\n\n##############################\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "##############################\n\n# Derive include and lib directories\n\n##############################\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# add <cuda>/lib64 only if it exists\n",
        "Line" : 168,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# handle IO dependencies\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "##############################\n\n# Set build directories\n\n##############################\n",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "##############################\n\n# Set directory for Doxygen-generated documentation\n\n##############################\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# should be the same as OUTPUT_DIRECTORY in the .Doxyfile\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# All the files that might have Doxygen documentation.\n",
        "Line" : 228,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "##############################\n\n# Configure build\n\n##############################\n",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Determine platform\n",
        "Line" : 245,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Linux\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# older versions of gcc are too dumb to build boost with -Wuninitalized\n",
        "Line" : 259,
        "CharPositionInLine" : 1
      },
      "35" : {
        "Text" : "# boost::thread is reasonably called boost_thread (compare OS X)\n\n# We will also explicitly add stdc++ to the link target.\n",
        "Line" : 263,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# OS X:\n\n# clang++ instead of g++\n\n# libstdc++ for NVCC compatibility on OS X >= 10.9 with CUDA < 7.0\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# clang throws this warning for cuda headers\n",
        "Line" : 280,
        "CharPositionInLine" : 2
      },
      "38" : {
        "Text" : "# 10.11 strips DYLD_* env vars so link CUDA (rpath is available on 10.5+)\n",
        "Line" : 282,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "# gtest needs to use its own tuple to not conflict with clang\n",
        "Line" : 291,
        "CharPositionInLine" : 1
      },
      "40" : {
        "Text" : "# boost::thread is called boost_thread-mt to mark multithreading on OS X\n",
        "Line" : 293,
        "CharPositionInLine" : 1
      },
      "41" : {
        "Text" : "# we need to explicitly ask for the rpath to be obeyed\n",
        "Line" : 295,
        "CharPositionInLine" : 1
      },
      "42" : {
        "Text" : "# Custom compiler\n",
        "Line" : 302,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Static linking\n",
        "Line" : 307,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# The following line must not be indented with a tab, since we are not inside a target\n",
        "Line" : 313,
        "CharPositionInLine" : 2
      },
      "45" : {
        "Text" : "# Debugging\n",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# cuDNN acceleration configuration.\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# NCCL acceleration configuration\n",
        "Line" : 331,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# configure IO libraries\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# CPU-only configuration\n",
        "Line" : 351,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Python layer support\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# BLAS configuration (default = ATLAS)\n",
        "Line" : 367,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# MKL\n",
        "Line" : 370,
        "CharPositionInLine" : 1
      },
      "53" : {
        "Text" : "# OpenBLAS\n",
        "Line" : 377,
        "CharPositionInLine" : 1
      },
      "54" : {
        "Text" : "# ATLAS\n",
        "Line" : 380,
        "CharPositionInLine" : 1
      },
      "55" : {
        "Text" : "# Linux simply has cblas and atlas\n",
        "Line" : 383,
        "CharPositionInLine" : 3
      },
      "56" : {
        "Text" : "# OS X packages atlas as the vecLib framework\n",
        "Line" : 387,
        "CharPositionInLine" : 2
      },
      "57" : {
        "Text" : "# 10.10 has accelerate while 10.9 has veclib\n",
        "Line" : 389,
        "CharPositionInLine" : 2
      },
      "58" : {
        "Text" : "# Automatic dependency generation (nvcc is handled separately)\n",
        "Line" : 409,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "# Complete build flags.\n",
        "Line" : 412,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# mex may invoke an older gcc that is too liberal with -Wuninitalized\n",
        "Line" : 416,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# 'superclean' target recursively* deletes all files ending with an extension\n\n# in $(SUPERCLEAN_EXTS) below.  This may be useful if you've built older\n\n# versions of Caffe that do not place all generated files in a location known\n\n# to the 'clean' target.\n\n#\n\n# 'supercleanlist' will list the files to be deleted by make superclean.\n\n#\n\n# * Recursive with the exception that symbolic links are never followed, per the\n\n# default behavior of 'find'.\n",
        "Line" : 430,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# Set the sub-targets of the 'everything' target.\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Only build matcaffe as part of \"everything\" if MATLAB_DIR is specified.\n",
        "Line" : 443,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "##############################\n\n# Define build targets\n\n##############################\n",
        "Line" : 448,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "# Create a target \".linked\" in this BUILD_DIR to tell Make that the \"build\" link\n\n# is currently correct, then delete the one in the OTHER_BUILD_DIR in case it\n\n# exists and $(DEBUG) is toggled later.\n",
        "Line" : 558,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Target for extension-less symlinks to tool binaries with extension '*.bin'.\n",
        "Line" : 619,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# add proto\n",
        "Line" : 683,
        "CharPositionInLine" : 1
      },
      "68" : {
        "Text" : "# add include\n",
        "Line" : 685,
        "CharPositionInLine" : 1
      },
      "69" : {
        "Text" : "# add tool and example binaries\n",
        "Line" : 689,
        "CharPositionInLine" : 1
      },
      "70" : {
        "Text" : "# add libraries\n",
        "Line" : 692,
        "CharPositionInLine" : 1
      },
      "71" : {
        "Text" : "# add python - it's not the standard way, indeed...\n",
        "Line" : 696,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 72,
      "Errorlog" : "line 390:125 token recognition error at: '\\1'\n"
    },
    "caffe/cmake/ConfigGen.cmake" : {
      "ObjectId" : "09bb09b4ff29f0863ee2217df91b654b8473044b",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################################\n\n# Helper function to get all list items that begin with given prefix\n\n# Usage:\n\n#   caffe_get_items_with_prefix(<prefix> <list_variable> <output_variable>)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################################\n\n# Function for generation Caffe build- and install- tree export config files\n\n# Usage:\n\n#  caffe_generate_export_configs()\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ Configure build-tree CaffeConfig.cmake file ]---\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Add targets to the build-tree export set\n",
        "Line" : 35,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# ---[ Configure install-tree CaffeConfig.cmake file ]---\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Install the CaffeConfig.cmake and export set to use with install-tree\n",
        "Line" : 43,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# ---[ Configure and install version file ]---\n",
        "Line" : 47,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# TODO: Lines below are commented because Caffe doesn't declare its version in headers.\n\n# When the declarations are added, modify `caffe_extract_caffe_version()` macro and uncomment\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# configure_file(cmake/Templates/CaffeConfigVersion.cmake.in \"${PROJECT_BINARY_DIR}/CaffeConfigVersion.cmake\" @ONLY)\n\n# install(FILES \"${PROJECT_BINARY_DIR}/CaffeConfigVersion.cmake\" DESTINATION ${install_cmake_suffix})\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 9
    },
    "caffe/cmake/Cuda.cmake" : {
      "ObjectId" : "799172c77611ad95b0d51f67d37c1da58679df5f",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Known NVIDIA GPU achitectures Caffe can be compiled for.\n\n# This list will be used for CUDA_ARCH_NAME = All option\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################################\n\n# A function for automatic detection of GPUs installed  (if autodetection is enabled)\n\n# Usage:\n\n#   caffe_detect_installed_gpus(out_variable)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################################\n\n# Function for selecting GPU arch flags for nvcc based on CUDA_ARCH_NAME\n\n# Usage:\n\n#   caffe_select_nvcc_arch_flags(out_variable)\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# List of arch names\n",
        "Line" : 58,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# set CUDA_ARCH_NAME strings (so it will be seen as dropbox in CMake-Gui)\n",
        "Line" : 66,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# verify CUDA_ARCH_NAME value\n",
        "Line" : 71,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# (${CUDA_ARCH_NAME} STREQUAL \"Manual\")\n",
        "Line" : 100,
        "CharPositionInLine" : 10
      },
      "7" : {
        "Text" : "# remove dots and convert to lists\n",
        "Line" : 104,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# Tell NVCC to add binaries for the specified GPUs\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# User explicitly specified PTX for the concrete BIN\n",
        "Line" : 123,
        "CharPositionInLine" : 6
      },
      "10" : {
        "Text" : "# User didn't explicitly specify PTX for the concrete BIN, we assume PTX=BIN\n",
        "Line" : 127,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# Tell NVCC to add PTX intermediate code for the specified architectures\n",
        "Line" : 133,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "################################################################################################\n\n# Short command for cuda compilation\n\n# Usage:\n\n#   caffe_cuda_compile(<objlist_variable> <cuda_files>)\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# we remove /EHa as it generates warnings under windows\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "14" : {
        "Text" : "################################################################################################\n\n# Short command for cuDNN detection. Believe it soon will be a part of CUDA toolkit distribution.\n\n# That's why not FindcuDNN.cmake file, but just the macro\n\n# Usage:\n\n#   detect_cuDNN()\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# dynamic libs have different suffix in mac and linux\n",
        "Line" : 187,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "# cuDNN v3 and beyond\n",
        "Line" : 205,
        "CharPositionInLine" : 4
      },
      "17" : {
        "Text" : "################################################################################################\n\n###  Non macro section\n\n################################################################################################\n",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# cmake 2.8.7 compatibility which doesn't search for curand\n",
        "Line" : 243,
        "CharPositionInLine" : 31
      },
      "19" : {
        "Text" : "# cudnn detection\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# setting nvcc arch flags\n",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Boost 1.55 workaround, see https://svn.boost.org/trac/boost/ticket/9392 or\n\n# https://github.com/ComputationalRadiationPhysics/picongpu/blob/master/src/picongpu/CMakeLists.txt\n",
        "Line" : 270,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# avoid warning for CMake >= 2.8.12\n",
        "Line" : 274,
        "CharPositionInLine" : 2
      },
      "23" : {
        "Text" : "# disable some nvcc diagnostic that apears in boost, glog, glags, opencv, etc.\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# setting default testing device\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Handle clang/libc++ issue\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# OSX 10.9 and higher uses clang/libc++ by default which is incompatible with old CUDA toolkits\n",
        "Line" : 295,
        "CharPositionInLine" : 2
      },
      "27" : {
        "Text" : "# enabled by default if and only if CUDA version is less than 7.0\n",
        "Line" : 297,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 28
    },
    "caffe/cmake/Dependencies.cmake" : {
      "ObjectId" : "de6a789713a6db0326d2a4441e50cd75f020f087",
      "LastModified" : "2018-11-14T15:31:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# These lists are later turned into target properties on main caffe library target\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# high priority to our protobuf generated header\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ Boost\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# find and setup openbabel\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ Threads\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ---[ OpenMP\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Ideally, this should be provided by the BLAS library IMPORTED target. However,\n\n# nobody does this, so we need to link to OpenMP explicitly and have the maintainer\n\n# to flick the switch manually as needed.\n\n#\n\n# Moreover, OpenMP package does not provide an IMPORTED target as well, and the\n\n# suggested way of linking to OpenMP is to append to CMAKE_{C,CXX}_FLAGS.\n\n# However, this naïve method will force any user of Caffe to add the same kludge\n\n# into their buildsystem again, so we put these options into per-target PUBLIC\n\n# compile options and link flags, so that they will be exported properly.\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# ---[ Google-glog\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ---[ Google-gflags\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# ---[ Google-protobuf\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# ---[ HDF5\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# ---[ LMDB\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# ---[ LevelDB\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ---[ Snappy\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# ---[ CUDA\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# ---[ OpenCV\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# if not OpenCV 3.x, then imgcodecs are not found\n",
        "Line" : 116,
        "CharPositionInLine" : 23
      },
      "17" : {
        "Text" : "# ---[ BLAS\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# ---[ Python\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# use python3\n",
        "Line" : 159,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "# Find the matching boost python implementation\n",
        "Line" : 163,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# disable Python 3 search\n",
        "Line" : 186,
        "CharPositionInLine" : 4
      },
      "22" : {
        "Text" : "# ---[ Matlab\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# sudo apt-get install liboctave-dev\n",
        "Line" : 209,
        "CharPositionInLine" : 2
      },
      "24" : {
        "Text" : "# ---[ Doxygen\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "caffe/cmake/External/gflags.cmake" : {
      "ObjectId" : "e3dba04f33fc8658bc48b23a6dba366730f52794",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# guard against multiple includes\n",
        "Line" : 1,
        "CharPositionInLine" : 27
      },
      "1" : {
        "Text" : "# use the system-wide gflags if present\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# gflags will use pthreads if it's available in the system, so we must link with it\n",
        "Line" : 9,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# build directory\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# install directory\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# we build gflags statically, but want to link it into the caffe shared library\n\n# this requires position-independent code\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "caffe/cmake/External/glog.cmake" : {
      "ObjectId" : "f9d0549cd9097bcde2d809bd7402249b46a0ea4c",
      "LastModified" : "2017-03-02T00:17:05Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# glog depends on gflags\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# try the system-wide glog first\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# fetch and build glog from github\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# build directory\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# install directory\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# we build glog statically, but want to link it into the caffe shared library\n\n# this requires position-independent code\n",
        "Line" : 19,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# depend on gflags if we're also building it\n",
        "Line" : 28,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 7
    },
    "caffe/cmake/Misc.cmake" : {
      "ObjectId" : "e0a94f02f3caace4d792a88ae7052f9826e7b663",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Configuration types\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# --[ If user doesn't specify build type then assume release\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ Solution folders\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---[ Install options\n\n#if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n\n#  set(CMAKE_INSTALL_PREFIX \"${PROJECT_BINARY_DIR}/install\" CACHE PATH \"Default install path\" FORCE)\n\n#endif()\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ RPATH settings\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ---[ Funny target\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---[ Set debug postfix\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "caffe/cmake/Modules/FindAtlas.cmake" : {
      "ObjectId" : "ee9dd2fb8cae12022d5dbaa897583fad4084de61",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Atlas (and Lapack) libraries\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  Atlas_ROOT_DIR:            Base directory where all Atlas components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  Atlas_FOUND\n\n#  Atlas_INCLUDE_DIRS\n\n#  Atlas_LIBRARIES\n\n#  Atlas_LIBRARYRARY_DIRS\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "caffe/cmake/Modules/FindGFlags.cmake" : {
      "ObjectId" : "29b60f05037bf2257b44eb191306d000dc64900f",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find GFLAGS\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  GFLAGS_ROOT_DIR:            Base directory where all GFLAGS components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  GFLAGS_FOUND\n\n#  GFLAGS_INCLUDE_DIRS\n\n#  GFLAGS_LIBRARIES\n\n#  GFLAGS_LIBRARYRARY_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We are testing only a couple of files in the include directories\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "caffe/cmake/Modules/FindGlog.cmake" : {
      "ObjectId" : "99abbe478a02b452326be8c6a4f6dba6a328352c",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find Glog\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  GLOG_ROOT_DIR:            Base directory where all GLOG components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  GLOG_FOUND\n\n#  GLOG_INCLUDE_DIRS\n\n#  GLOG_LIBRARIES\n\n#  GLOG_LIBRARYRARY_DIRS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "caffe/cmake/Modules/FindLAPACK.cmake" : {
      "ObjectId" : "9641c45d196d69bf3b0cea7191bcb55a2252d2da",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find LAPACK library\n\n# This module finds an installed fortran library that implements the LAPACK\n\n# linear-algebra interface (see http://www.netlib.org/lapack/).\n\n#\n\n# The approach follows that taken for the autoconf macro file, acx_lapack.m4\n\n# (distributed at http://ac-archive.sourceforge.net/ac-archive/acx_lapack.html).\n\n#\n\n# This module sets the following variables:\n\n#  LAPACK_FOUND - set to true if a library implementing the LAPACK interface is found\n\n#  LAPACK_LIBRARIES - list of libraries (using full path name) for LAPACK\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Note: I do not think it is a good idea to mixup different BLAS/LAPACK versions\n\n# Hence, this script wants to find a Lapack library matching your Blas library\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do nothing if LAPACK was found before\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Old search lapack script\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro checks for the existence of the combination of fortran libraries\n\n# given by _list.  If the combination is found, this macro checks (using the\n\n# Check_Fortran_Function_Exists macro) whether can link against that library\n\n# combination using the name of a routine given by _name using the linker\n\n# flags given by _flags.  If the combination of libraries is found and passes\n\n# the link test, LIBRARIES is set to the list of complete library paths that\n\n# have been found.  Otherwise, LIBRARIES is set to FALSE.\n\n# N.B. _prefix is the prefix applied to the names of all cached variables that\n\n# are generated internally and marked advanced by this macro.\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# Test this combination of libraries.\n",
        "Line" : 68,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Intel MKL\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# OpenBlas\n",
        "Line" : 98,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# GotoBlas\n",
        "Line" : 109,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# ACML\n",
        "Line" : 120,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Accelerate\n",
        "Line" : 131,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# vecLib\n",
        "Line" : 142,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Generic LAPACK library?\n",
        "Line" : 153,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Do nothing if LAPACK was found before\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "caffe/cmake/Modules/FindLMDB.cmake" : {
      "ObjectId" : "8a817fd6f10403d34ebf49ed84f9bdaab7e424ba",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Try to find the LMBD libraries and headers\n\n#  LMDB_FOUND - system has LMDB lib\n\n#  LMDB_INCLUDE_DIR - the LMDB include directory\n\n#  LMDB_LIBRARIES - Libraries needed to use LMDB\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FindCWD based on FindGMP by:\n\n# Copyright (c) 2006, Laurent Montel, <montel@kde.org>\n\n#\n\n# Redistribution and use is allowed according to the terms of the BSD license.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Adapted from FindCWD by:\n\n# Copyright 2013 Conrad Steenberg <conrad.steenberg@gmail.com>\n\n# Aug 31, 2013\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "caffe/cmake/Modules/FindLevelDB.cmake" : {
      "ObjectId" : "97f08ac934926b2b321590177b6fcfac5d8611d8",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find LevelDB\n\n#\n\n#  LevelDB_INCLUDES  - List of LevelDB includes\n\n#  LevelDB_LIBRARIES - List of libraries when using LevelDB.\n\n#  LevelDB_FOUND     - True if LevelDB found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Look for the header file.\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Look for the library.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "caffe/cmake/Modules/FindMKL.cmake" : {
      "ObjectId" : "5ab93b2d6b6496880ef7fe59ed62237348018ec6",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the MKL libraries\r\n\n#\r\n\n# Options:\r\n\n#\r\n\n#   MKL_USE_SINGLE_DYNAMIC_LIBRARY  : use single dynamic library interface\r\n\n#   MKL_USE_STATIC_LIBS             : use static libraries\r\n\n#   MKL_MULTI_THREADED              : use multi-threading\r\n\n#\r\n\n# This module defines the following variables:\r\n\n#\r\n\n#   MKL_FOUND            : True mkl is found\r\n\n#   MKL_INCLUDE_DIR      : unclude directory\r\n\n#   MKL_LIBRARIES        : the libraries to link against.\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# ---[ Options\r\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ---[ Root folders\r\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ---[ Find include dir\r\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ Find libraries\r\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "caffe/cmake/Modules/FindMatlabMex.cmake" : {
      "ObjectId" : "28ae65e7cbbae0a28768323dcdd4d6984fca5643",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This module looks for MatlabMex compiler\n\n# Defines variables:\n\n#    Matlab_DIR    - Matlab root dir\n\n#    Matlab_mex    - path to mex compiler\n\n#    Matlab_mexext - path to mexext\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Suppress `readlink` warning if `which` returned nothing\n",
        "Line" : 29,
        "CharPositionInLine" : 23
      },
      "CommentCount" : 2
    },
    "caffe/cmake/Modules/FindNumPy.cmake" : {
      "ObjectId" : "a671494cababa39534b4ac1a8d506bbaba76d8b6",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the NumPy libraries\n\n# This module finds if NumPy is installed, and sets the following variables\n\n# indicating where it is.\n\n#\n\n# TODO: Update to provide the libraries and paths for linking npymath lib.\n\n#\n\n#  NUMPY_FOUND               - was NumPy found\n\n#  NUMPY_VERSION             - the version of NumPy found as a string\n\n#  NUMPY_VERSION_MAJOR       - the major version number of NumPy\n\n#  NUMPY_VERSION_MINOR       - the minor version number of NumPy\n\n#  NUMPY_VERSION_PATCH       - the patch version number of NumPy\n\n#  NUMPY_VERSION_DECIMAL     - e.g. version 1.6.1 is 10601\n\n#  NUMPY_INCLUDE_DIR         - path to the NumPy include files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "caffe/cmake/Modules/FindOpenBLAS.cmake" : {
      "ObjectId" : "a6512ae7e4e0835a1b665d2185008dc1792a006f",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    Check include files\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#    Check libraries\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "caffe/cmake/Modules/FindOpenBabel2.cmake" : {
      "ObjectId" : "f8abd6da8f38e600f3cb93606416844947b34b6d",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindOpenBabel.cmake\n\n# Try to find Open Babel headers and libraries\n\n# Defines:\n\n#\n\n#  OPENBABEL2_FOUND - system has Open Babel\n\n#  OPENBABEL2_INCLUDE_DIR - the Open Babel include directory\n\n#  OPENBABEL2_LIBRARIES - Link these to use Open Babel\n\n#  IF OPENBABEL_DIR is defined, will look there first\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already or user-specified\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "caffe/cmake/Modules/FindSnappy.cmake" : {
      "ObjectId" : "eff2a864a7b8613a1498892a9b3861f2e3e061c9",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the Snappy libraries\n\n#\n\n# The following variables are optionally searched for defaults\n\n#  Snappy_ROOT_DIR:    Base directory where all Snappy components are found\n\n#\n\n# The following are set after configuration is done:\n\n#  SNAPPY_FOUND\n\n#  Snappy_INCLUDE_DIR\n\n#  Snappy_LIBRARIES\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "caffe/cmake/Modules/FindvecLib.cmake" : {
      "ObjectId" : "4d44e613a0023a2c1500151ca34ea7646cd19262",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Find the vecLib libraries as part of Accelerate.framework or as standalon framework\n\n#\n\n# The following are set after configuration is done:\n\n#  VECLIB_FOUND\n\n#  vecLib_INCLUDE_DIR\n\n#  vecLib_LINKER_LIBS\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "caffe/cmake/ProtoBuf.cmake" : {
      "ObjectId" : "72ea3230c50451b5403a5e89f0e4456334d8f732",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Finds Google Protocol Buffers library and compilers and extends\n\n# the standard cmake script with version and python generation support\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# As of Ubuntu 14.04 protoc is no longer a part of libprotobuf-dev package\n\n# and should be installed separately as in: sudo apt-get install protobuf-compiler\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# fetches protobuf version\n",
        "Line" : 17,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# place where to generate protobuf sources\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################################\n\n# Modification of standard 'protobuf_generate_cpp()' with output dir parameter and python support\n\n# Usage:\n\n#   caffe_protobuf_generate_cpp_py(<output_dir> <srcs_var> <hdrs_var> <python_var> <proto_files>)\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Create an include path for each file specified\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "caffe/cmake/Summary.cmake" : {
      "ObjectId" : "8c7bd623dd24b5b337fd4a83c3344492a76bad75",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################################\n\n# Caffe status report function.\n\n# Automatically align right column and selects text based on condition.\n\n# Usage:\n\n#   caffe_status(<text>)\n\n#   caffe_status(<heading> <value1> [<value2> ...])\n\n#   caffe_status(<heading> <condition> THEN <text for TRUE> ELSE <text for FALSE> )\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################################\n\n# Function for fetching Caffe version from git and headers\n\n# Usage:\n\n#   caffe_extract_caffe_version()\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# caffe_parse_header(${Caffe_INCLUDE_DIR}/caffe/version.hpp Caffe_VERSION_LINES CAFFE_MAJOR CAFFE_MINOR CAFFE_PATCH)\n\n# set(Caffe_VERSION \"${CAFFE_MAJOR}.${CAFFE_MINOR}.${CAFFE_PATCH}\" PARENT_SCOPE)\n",
        "Line" : 79,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# or for #define Caffe_VERSION \"x.x.x\"\n\n# caffe_parse_header_single_define(Caffe ${Caffe_INCLUDE_DIR}/caffe/version.hpp Caffe_VERSION)\n\n# set(Caffe_VERSION ${Caffe_VERSION_STRING} PARENT_SCOPE)\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "################################################################################################\n\n# Prints accumulated caffe configuration summary\n\n# Usage:\n\n#   caffe_print_configuration_summary()\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "caffe/cmake/Targets.cmake" : {
      "ObjectId" : "090f86c550099935386bb3104f5224b557f9975d",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################################\n\n# Defines global Caffe_LINK flag, This flag is required to prevent linker from excluding\n\n# some objects which are not addressed directly but are registered via static constructors\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################################\n\n# Convenient command to setup source group for IDEs that support this feature (VS, XCode)\n\n# Usage:\n\n#   caffe_source_group(<group> GLOB[_RECURSE] <globbing_expression>)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################################\n\n# Collecting sources from globbing and appending to output list variable\n\n# Usage:\n\n#   caffe_collect_sources(<output_variable> GLOB[_RECURSE] <globbing_expression>)\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################################\n\n# Short command getting caffe sources (assuming standard Caffe code tree)\n\n# Usage:\n\n#   caffe_pickup_caffe_sources(<root>)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# put all files in source groups (visible as subfolder in many IDEs)\n",
        "Line" : 54,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# source groups for test target\n",
        "Line" : 65,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# collect files\n",
        "Line" : 70,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# adding headers to make the visible in some IDEs (Qt, VS, Xcode)\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "8" : {
        "Text" : "# collect cuda files\n",
        "Line" : 82,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# add proto to make them editable in IDEs too\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# convert to absolute paths\n",
        "Line" : 91,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# propagate to parent scope\n",
        "Line" : 97,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "################################################################################################\n\n# Short command for setting default target properties\n\n# Usage:\n\n#   caffe_default_properties(<target>)\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# make sure we build all external dependencies first\n",
        "Line" : 114,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "################################################################################################\n\n# Short command for setting runtime directory for build target\n\n# Usage:\n\n#   caffe_set_runtime_directory(<target> <dir>)\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "################################################################################################\n\n# Short command for setting solution folder property for target\n\n# Usage:\n\n#   caffe_set_solution_folder(<target> <folder>)\n",
        "Line" : 129,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "################################################################################################\n\n# Reads lines from input file, prepends source directory to each line and writes to output file\n\n# Usage:\n\n#   caffe_configure_testdatafile(<testdatafile>)\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "################################################################################################\n\n# Filter out all files that are not included in selected list\n\n# Usage:\n\n#   caffe_leave_only_selected_tests(<filelist_variable> <selected_list>)\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# blank list means leave all\n",
        "Line" : 158,
        "CharPositionInLine" : 13
      },
      "CommentCount" : 19
    },
    "caffe/cmake/Utils.cmake" : {
      "ObjectId" : "653de5fdf89be08a753fe42a6fb82cc6b625c4d4",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################################\n\n# Command alias for debugging messages\n\n# Usage:\n\n#   dmsg(<message>)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################################\n\n# Removes duplicates from list(s)\n\n# Usage:\n\n#   caffe_list_unique(<list_variable> [<list_variable>] [...])\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "################################################################################################\n\n# Clears variables from list\n\n# Usage:\n\n#   caffe_clear_vars(<variables_list>)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################################\n\n# Removes duplicates from string\n\n# Usage:\n\n#   caffe_string_unique(<string_variable>)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################################\n\n# Prints list element per line\n\n# Usage:\n\n#   caffe_print_list(<list>)\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "################################################################################################\n\n# Function merging lists of compiler flags to single string.\n\n# Usage:\n\n#   caffe_merge_flag_lists(out_variable <list1> [<list2>] [<list3>] ...)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "################################################################################################\n\n# Converts all paths in list to absolute\n\n# Usage:\n\n#   caffe_convert_absolute_paths(<list_variable>)\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "################################################################################################\n\n# Reads set of version defines from the header file\n\n# Usage:\n\n#   caffe_parse_header(<file> <define1> <define2> <define3> ..)\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "################################################################################################\n\n# Reads single version define from the header file and parses it\n\n# Usage:\n\n#   caffe_parse_header_single_define(<library_name> <file> <define_name>)\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# append a TWEAK version if it exists:\n",
        "Line" : 149,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "########################################################################################################\n\n# An option that the user can select. Can accept condition to control when option is available for user.\n\n# Usage:\n\n#   caffe_option(<option_variable> \"doc string\" <initial value or boolean expression> [IF <condition>])\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "################################################################################################\n\n# Utility macro for comparing two lists. Used for CMake debugging purposes\n\n# Usage:\n\n#   caffe_compare_lists(<list_variable> <list2_variable> [description])\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "################################################################################################\n\n# Command for disabling warnings for different platforms (see below for gcc and VisualStudio)\n\n# Usage:\n\n#   caffe_warnings_disable(<CMAKE_[C|CXX]_FLAGS[_CONFIGURATION]> -Wshadow /wd4996 ..,)\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "################################################################################################\n\n# Helper function get current definitions\n\n# Usage:\n\n#   caffe_get_current_definitions(<definitions_variable>)\n",
        "Line" : 272,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "################################################################################################\n\n# Helper function get current includes/definitions\n\n# Usage:\n\n#   caffe_get_current_cflags(<cflagslist_variable>)\n",
        "Line" : 288,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "################################################################################################\n\n# Helper function to parse current linker libs into link directories, libflags and osx frameworks\n\n# Usage:\n\n#   caffe_parse_linker_libs(<Caffe_LINKER_LIBS_var> <directories_var> <libflags_var> <frameworks_var>)\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# split libs into debug, optimized, unspecified and frameworks\n",
        "Line" : 317,
        "CharPositionInLine" : 2
      },
      "17" : {
        "Text" : "# attach debug or optimized libs to unspecified according to current configuration\n",
        "Line" : 331,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "# convert linker libraries list to link flags\n",
        "Line" : 341,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "################################################################################################\n\n# Helper function to detect Darwin version, i.e. 10.8, 10.9, 10.10, ....\n\n# Usage:\n\n#   caffe_detect_darwin_version(<version_variable>)\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 20
    },
    "caffe/cmake/lint.cmake" : {
      "ObjectId" : "70a006572bbffe3a77882cfe461fb0e1c4998a12",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# suppress cmake warning\n",
        "Line" : 8,
        "CharPositionInLine" : 31
      },
      "1" : {
        "Text" : "# find all files of interest\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# find all files that should be excluded\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# exclude generated pb files\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "caffe/docs/CMakeLists.txt" : {
      "ObjectId" : "ae47e46173677e098ef2487e6db3835c48de2fae",
      "LastModified" : "2016-12-22T00:49:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Building docs script\n\n# Requirements:\n\n#   sudo apt-get install doxygen texlive ruby-dev\n\n#   sudo gem install jekyll execjs therubyracer\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#################################################################################################\n\n# Gather docs from <root>/examples/**/readme.md\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Only use file if it is to be included in docs.\n",
        "Line" : 17,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Since everything is called readme.md, rename it by its dirname.\n",
        "Line" : 21,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# folder value might be like <subfolder>/readme.md. That's why make directory.\n",
        "Line" : 26,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "################################################################################################\n\n# Gather docs from examples/*.ipynb and add YAML front-matter.\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "################################################################################################\n\n########################## [ Non macro part ] ##################################################\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Gathering is done at each 'make doc'\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Doxygen config file path\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Adding docs target\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Gathering examples into docs subfolder\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Auto detect output directory\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# creates symlink in docs subfolder to code documentation built by doxygen\n",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# for quick launch of jekyll\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "caffe/examples/CMakeLists.txt" : {
      "ObjectId" : "43bbcb83789c97dcb29ad4e60b84f714c0dea654",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# get file name\n",
        "Line" : 4,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# get folder name\n",
        "Line" : 7,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# set back RUNTIME_OUTPUT_DIRECTORY\n",
        "Line" : 15,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# install\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Funny command to make tutorials work\n\n# TODO: remove in future as soon as naming is standardized everywhere\n",
        "Line" : 26,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "caffe/matlab/CMakeLists.txt" : {
      "ObjectId" : "987730d9b5506ad2bd654f7f729ee63c114cc74c",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Builds Matlab (or Octave) interface. In case of Matlab caffe must be\n\n# compield as shared library. Octave can link static or shared caffe library\n\n# To install octave run: sudo apt-get install liboctave-dev\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# helper function to set proper mex file extension\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# global settings\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# prepare linker flag lists\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Matlab R2014a complans for -Wl,--whole-archive\n",
        "Line" : 46,
        "CharPositionInLine" : 52
      },
      "5" : {
        "Text" : "# ---[ Install\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "caffe/python/CMakeLists.txt" : {
      "ObjectId" : "c53299d265b3952e03f47d0ff82b90e88bb9ab1f",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ---[ Install\n\n# scripts\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# module\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# _caffe.so\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "caffe/src/caffe/CMakeLists.txt" : {
      "ObjectId" : "4a8055685663187951f5dfa88e7baaa0f0af4124",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# generate protobuf sources\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include python files either to force generation\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# note, crucial to prepend!\n",
        "Line" : 11,
        "CharPositionInLine" : 51
      },
      "3" : {
        "Text" : "# --[ Caffe library\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# creates 'test_srcs', 'srcs', 'test_cuda', 'cuda' lists\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ---[ Tests\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---[ Install\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "caffe/src/caffe/test/CMakeLists.txt" : {
      "ObjectId" : "d8afc30b76bc42511ae4227ada4dfb641036217c",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The option allows to include in build only selected test files and exclude all others\n\n# Usage example:\n\n#  cmake -DBUILD_only_tests=\"common,net,blob,im2col_kernel\"\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# For 'make runtest' target we don't need to embed test data paths to\n\n# source files, because test target is executed in source directory\n\n# That's why the lines below are commented. TODO: remove them\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# definition needed to include CMake generated files\n\n#add_definitions(-DCMAKE_BUILD)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# generates test_data/sample_data_list.txt.gen.cmake\n\n#caffe_configure_testdatafile(test_data/sample_data_list.txt)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ---[ Adding test target\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ---[ Adding runtest\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "caffe/src/gtest/CMakeLists.txt" : {
      "ObjectId" : "e98254af130d6b9d710fcc62a0b21c2f651b314e",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_library(gtest_main gtest_main.cc)\n\n#target_link_libraries(gtest_main gtest)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "caffe/tools/CMakeLists.txt" : {
      "ObjectId" : "3789450555e2be0b4a429a63029cec14a039f4a8",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Collect source files\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Build each source file independently\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# caffe target already exits\n",
        "Line" : 8,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# target\n",
        "Line" : 13,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# set back RUNTIME_OUTPUT_DIRECTORY\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# restore output name without suffix\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Install\n",
        "Line" : 27,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 7
    },
    "cmake/Modules/FindCUDA.cmake" : {
      "ObjectId" : "6ca37fe9321525d9ef30867caaf8847894a03086",
      "LastModified" : "2018-11-14T15:31:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#.rst:\n\n# FindCUDA\n\n# --------\n\n#\n\n# Tools for building CUDA C files: libraries and build dependencies.\n\n#\n\n# This script locates the NVIDIA CUDA C tools.  It should work on linux,\n\n# windows, and mac and should be reasonably up to date with CUDA C\n\n# releases.\n\n#\n\n# This script makes use of the standard find_package arguments of\n\n# <VERSION>, REQUIRED and QUIET.  CUDA_FOUND will report if an\n\n# acceptable version of CUDA was found.\n\n#\n\n# The script will prompt the user to specify CUDA_TOOLKIT_ROOT_DIR if\n\n# the prefix cannot be determined by the location of nvcc in the system\n\n# path and REQUIRED is specified to find_package().  To use a different\n\n# installed version of the toolkit set the environment variable\n\n# CUDA_BIN_PATH before running cmake (e.g.\n\n# CUDA_BIN_PATH=/usr/local/cuda1.0 instead of the default\n\n# /usr/local/cuda) or set CUDA_TOOLKIT_ROOT_DIR after configuring.  If\n\n# you change the value of CUDA_TOOLKIT_ROOT_DIR, various components that\n\n# depend on the path will be relocated.\n\n#\n\n# It might be necessary to set CUDA_TOOLKIT_ROOT_DIR manually on certain\n\n# platforms, or to use a cuda runtime not installed in the default\n\n# location.  In newer versions of the toolkit the cuda library is\n\n# included with the graphics driver- be sure that the driver version\n\n# matches what is needed by the cuda runtime version.\n\n#\n\n# The following variables affect the behavior of the macros in the\n\n# script (in alphebetical order).  Note that any of these flags can be\n\n# changed multiple times in the same directory before calling\n\n# CUDA_ADD_EXECUTABLE, CUDA_ADD_LIBRARY, CUDA_COMPILE, CUDA_COMPILE_PTX,\n\n# CUDA_COMPILE_FATBIN, CUDA_COMPILE_CUBIN or CUDA_WRAP_SRCS::\n\n#\n\n#   CUDA_64_BIT_DEVICE_CODE (Default matches host bit size)\n\n#   -- Set to ON to compile for 64 bit device code, OFF for 32 bit device code.\n\n#      Note that making this different from the host code when generating object\n\n#      or C files from CUDA code just won't work, because size_t gets defined by\n\n#      nvcc in the generated source.  If you compile to PTX and then load the\n\n#      file yourself, you can mix bit sizes between device and host.\n\n#\n\n#   CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE (Default ON)\n\n#   -- Set to ON if you want the custom build rule to be attached to the source\n\n#      file in Visual Studio.  Turn OFF if you add the same cuda file to multiple\n\n#      targets.\n\n#\n\n#      This allows the user to build the target from the CUDA file; however, bad\n\n#      things can happen if the CUDA source file is added to multiple targets.\n\n#      When performing parallel builds it is possible for the custom build\n\n#      command to be run more than once and in parallel causing cryptic build\n\n#      errors.  VS runs the rules for every source file in the target, and a\n\n#      source can have only one rule no matter how many projects it is added to.\n\n#      When the rule is run from multiple targets race conditions can occur on\n\n#      the generated file.  Eventually everything will get built, but if the user\n\n#      is unaware of this behavior, there may be confusion.  It would be nice if\n\n#      this script could detect the reuse of source files across multiple targets\n\n#      and turn the option off for the user, but no good solution could be found.\n\n#\n\n#   CUDA_BUILD_CUBIN (Default OFF)\n\n#   -- Set to ON to enable and extra compilation pass with the -cubin option in\n\n#      Device mode. The output is parsed and register, shared memory usage is\n\n#      printed during build.\n\n#\n\n#   CUDA_BUILD_EMULATION (Default OFF for device mode)\n\n#   -- Set to ON for Emulation mode. -D_DEVICEEMU is defined for CUDA C files\n\n#      when CUDA_BUILD_EMULATION is TRUE.\n\n#\n\n#   CUDA_GENERATED_OUTPUT_DIR (Default CMAKE_CURRENT_BINARY_DIR)\n\n#   -- Set to the path you wish to have the generated files placed.  If it is\n\n#      blank output files will be placed in CMAKE_CURRENT_BINARY_DIR.\n\n#      Intermediate files will always be placed in\n\n#      CMAKE_CURRENT_BINARY_DIR/CMakeFiles.\n\n#\n\n#   CUDA_HOST_COMPILATION_CPP (Default ON)\n\n#   -- Set to OFF for C compilation of host code.\n\n#\n\n#   CUDA_HOST_COMPILER (Default CMAKE_C_COMPILER, $(VCInstallDir)/bin for VS)\n\n#   -- Set the host compiler to be used by nvcc.  Ignored if -ccbin or\n\n#      --compiler-bindir is already present in the CUDA_NVCC_FLAGS or\n\n#      CUDA_NVCC_FLAGS_<CONFIG> variables.  For Visual Studio targets\n\n#      $(VCInstallDir)/bin is a special value that expands out to the path when\n\n#      the command is run from within VS.\n\n#\n\n#   CUDA_NVCC_FLAGS\n\n#   CUDA_NVCC_FLAGS_<CONFIG>\n\n#   -- Additional NVCC command line arguments.  NOTE: multiple arguments must be\n\n#      semi-colon delimited (e.g. --compiler-options;-Wall)\n\n#\n\n#   CUDA_PROPAGATE_HOST_FLAGS (Default ON)\n\n#   -- Set to ON to propagate CMAKE_{C,CXX}_FLAGS and their configuration\n\n#      dependent counterparts (e.g. CMAKE_C_FLAGS_DEBUG) automatically to the\n\n#      host compiler through nvcc's -Xcompiler flag.  This helps make the\n\n#      generated host code match the rest of the system better.  Sometimes\n\n#      certain flags give nvcc problems, and this will help you turn the flag\n\n#      propagation off.  This does not affect the flags supplied directly to nvcc\n\n#      via CUDA_NVCC_FLAGS or through the OPTION flags specified through\n\n#      CUDA_ADD_LIBRARY, CUDA_ADD_EXECUTABLE, or CUDA_WRAP_SRCS.  Flags used for\n\n#      shared library compilation are not affected by this flag.\n\n#\n\n#   CUDA_SEPARABLE_COMPILATION (Default OFF)\n\n#   -- If set this will enable separable compilation for all CUDA runtime object\n\n#      files.  If used outside of CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY\n\n#      (e.g. calling CUDA_WRAP_SRCS directly),\n\n#      CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME and\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS should be called.\n\n#\n\n#   CUDA_SOURCE_PROPERTY_FORMAT\n\n#   -- If this source file property is set, it can override the format specified\n\n#      to CUDA_WRAP_SRCS (OBJ, PTX, CUBIN, or FATBIN).  If an input source file\n\n#      is not a .cu file, setting this file will cause it to be treated as a .cu\n\n#      file. See documentation for set_source_files_properties on how to set\n\n#      this property.\n\n#\n\n#   CUDA_USE_STATIC_CUDA_RUNTIME (Default ON)\n\n#   -- When enabled the static version of the CUDA runtime library will be used\n\n#      in CUDA_LIBRARIES.  If the version of CUDA configured doesn't support\n\n#      this option, then it will be silently disabled.\n\n#\n\n#   CUDA_VERBOSE_BUILD (Default OFF)\n\n#   -- Set to ON to see all the commands used when building the CUDA file.  When\n\n#      using a Makefile generator the value defaults to VERBOSE (run make\n\n#      VERBOSE=1 to see output), although setting CUDA_VERBOSE_BUILD to ON will\n\n#      always print the output.\n\n#\n\n# The script creates the following macros (in alphebetical order)::\n\n#\n\n#   CUDA_ADD_CUFFT_TO_TARGET( cuda_target )\n\n#   -- Adds the cufft library to the target (can be any target).  Handles whether\n\n#      you are in emulation mode or not.\n\n#\n\n#   CUDA_ADD_CUBLAS_TO_TARGET( cuda_target )\n\n#   -- Adds the cublas library to the target (can be any target).  Handles\n\n#      whether you are in emulation mode or not.\n\n#\n\n#   CUDA_ADD_EXECUTABLE( cuda_target file0 file1 ...\n\n#                        [WIN32] [MACOSX_BUNDLE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#   -- Creates an executable \"cuda_target\" which is made up of the files\n\n#      specified.  All of the non CUDA C files are compiled using the standard\n\n#      build rules specified by CMAKE and the cuda files are compiled to object\n\n#      files using nvcc and the host compiler.  In addition CUDA_INCLUDE_DIRS is\n\n#      added automatically to include_directories().  Some standard CMake target\n\n#      calls can be used on the target after calling this macro\n\n#      (e.g. set_target_properties and target_link_libraries), but setting\n\n#      properties that adjust compilation flags will not affect code compiled by\n\n#      nvcc.  Such flags should be modified before calling CUDA_ADD_EXECUTABLE,\n\n#      CUDA_ADD_LIBRARY or CUDA_WRAP_SRCS.\n\n#\n\n#   CUDA_ADD_LIBRARY( cuda_target file0 file1 ...\n\n#                     [STATIC | SHARED | MODULE] [EXCLUDE_FROM_ALL] [OPTIONS ...] )\n\n#   -- Same as CUDA_ADD_EXECUTABLE except that a library is created.\n\n#\n\n#   CUDA_BUILD_CLEAN_TARGET()\n\n#   -- Creates a convience target that deletes all the dependency files\n\n#      generated.  You should make clean after running this target to ensure the\n\n#      dependency files get regenerated.\n\n#\n\n#   CUDA_COMPILE( generated_files file0 file1 ... [STATIC | SHARED | MODULE]\n\n#                 [OPTIONS ...] )\n\n#   -- Returns a list of generated files from the input source files to be used\n\n#      with ADD_LIBRARY or ADD_EXECUTABLE.\n\n#\n\n#   CUDA_COMPILE_PTX( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of PTX files generated from the input source files.\n\n#\n\n#   CUDA_COMPILE_FATBIN( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of FATBIN files generated from the input source files.\n\n#\n\n#   CUDA_COMPILE_CUBIN( generated_files file0 file1 ... [OPTIONS ...] )\n\n#   -- Returns a list of CUBIN files generated from the input source files.\n\n#\n\n#   CUDA_COMPUTE_SEPARABLE_COMPILATION_OBJECT_FILE_NAME( output_file_var\n\n#                                                        cuda_target\n\n#                                                        object_files )\n\n#   -- Compute the name of the intermediate link file used for separable\n\n#      compilation.  This file name is typically passed into\n\n#      CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS.  output_file_var is produced\n\n#      based on cuda_target the list of objects files that need separable\n\n#      compilation as specified by object_files.  If the object_files list is\n\n#      empty, then output_file_var will be empty.  This function is called\n\n#      automatically for CUDA_ADD_LIBRARY and CUDA_ADD_EXECUTABLE.  Note that\n\n#      this is a function and not a macro.\n\n#\n\n#   CUDA_INCLUDE_DIRECTORIES( path0 path1 ... )\n\n#   -- Sets the directories that should be passed to nvcc\n\n#      (e.g. nvcc -Ipath0 -Ipath1 ... ). These paths usually contain other .cu\n\n#      files.\n\n#\n\n#\n\n#   CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS( output_file_var cuda_target\n\n#                                            nvcc_flags object_files)\n\n#   -- Generates the link object required by separable compilation from the given\n\n#      object files.  This is called automatically for CUDA_ADD_EXECUTABLE and\n\n#      CUDA_ADD_LIBRARY, but can be called manually when using CUDA_WRAP_SRCS\n\n#      directly.  When called from CUDA_ADD_LIBRARY or CUDA_ADD_EXECUTABLE the\n\n#      nvcc_flags passed in are the same as the flags passed in via the OPTIONS\n\n#      argument.  The only nvcc flag added automatically is the bitness flag as\n\n#      specified by CUDA_64_BIT_DEVICE_CODE.  Note that this is a function\n\n#      instead of a macro.\n\n#\n\n#   CUDA_SELECT_NVCC_ARCH_FLAGS(out_variable [target_CUDA_architectures])\n\n#   -- Selects GPU arch flags for nvcc based on target_CUDA_architectures\n\n#      target_CUDA_architectures : Auto | Common | All | LIST(ARCH_AND_PTX ...)\n\n#       - \"Auto\" detects local machine GPU compute arch at runtime.\n\n#       - \"Common\" and \"All\" cover common and entire subsets of architectures\n\n#      ARCH_AND_PTX : NAME | NUM.NUM | NUM.NUM(NUM.NUM) | NUM.NUM+PTX\n\n#      NAME: Fermi Kepler Maxwell Kepler+Tegra Kepler+Tesla Maxwell+Tegra Pascal\n\n#      NUM: Any number. Only those pairs are currently accepted by NVCC though:\n\n#            2.0 2.1 3.0 3.2 3.5 3.7 5.0 5.2 5.3 6.0 6.2\n\n#      Returns LIST of flags to be added to CUDA_NVCC_FLAGS in ${out_variable}\n\n#      Additionally, sets ${out_variable}_readable to the resulting numeric list\n\n#      Example:\n\n#       CUDA_SELECT_NVCC_ARCH_FLAGS(ARCH_FLAGS 3.0 3.5+PTX 5.2(5.0) Maxwell)\n\n#        LIST(APPEND CUDA_NVCC_FLAGS ${ARCH_FLAGS})\n\n#\n\n#      More info on CUDA architectures: https://en.wikipedia.org/wiki/CUDA\n\n#      Note that this is a function instead of a macro.\n\n#\n\n#   CUDA_WRAP_SRCS ( cuda_target format generated_files file0 file1 ...\n\n#                    [STATIC | SHARED | MODULE] [OPTIONS ...] )\n\n#   -- This is where all the magic happens.  CUDA_ADD_EXECUTABLE,\n\n#      CUDA_ADD_LIBRARY, CUDA_COMPILE, and CUDA_COMPILE_PTX all call this\n\n#      function under the hood.\n\n#\n\n#      Given the list of files (file0 file1 ... fileN) this macro generates\n\n#      custom commands that generate either PTX or linkable objects (use \"PTX\" or\n\n#      \"OBJ\" for the format argument to switch).  Files that don't end with .cu\n\n#      or have the HEADER_FILE_ONLY property are ignored.\n\n#\n\n#      The arguments passed in after OPTIONS are extra command line options to\n\n#      give to nvcc.  You can also specify per configuration options by\n\n#      specifying the name of the configuration followed by the options.  General\n\n#      options must precede configuration specific options.  Not all\n\n#      configurations need to be specified, only the ones provided will be used.\n\n#\n\n#         OPTIONS -DFLAG=2 \"-DFLAG_OTHER=space in flag\"\n\n#         DEBUG -g\n\n#         RELEASE --use_fast_math\n\n#         RELWITHDEBINFO --use_fast_math;-g\n\n#         MINSIZEREL --use_fast_math\n\n#\n\n#      For certain configurations (namely VS generating object files with\n\n#      CUDA_ATTACH_VS_BUILD_RULE_TO_CUDA_FILE set to ON), no generated file will\n\n#      be produced for the given cuda file.  This is because when you add the\n\n#      cuda file to Visual Studio it knows that this file produces an object file\n\n#      and will link in the resulting object file automatically.\n\n#\n\n#      This script will also generate a separate cmake script that is used at\n\n#      build time to invoke nvcc.  This is for several reasons.\n\n#\n\n#        1. nvcc can return negative numbers as return values which confuses\n\n#        Visual Studio into thinking that the command succeeded.  The script now\n\n#        checks the error codes and produces errors when there was a problem.\n\n#\n\n#        2. nvcc has been known to not delete incomplete results when it\n\n#        encounters problems.  This confuses build systems into thinking the\n\n#        target was generated when in fact an unusable file exists.  The script\n\n#        now deletes the output files if there was an error.\n\n#\n\n#        3. By putting all the options that affect the build into a file and then\n\n#        make the build rule dependent on the file, the output files will be\n\n#        regenerated when the options change.\n\n#\n\n#      This script also looks at optional arguments STATIC, SHARED, or MODULE to\n\n#      determine when to target the object compilation for a shared library.\n\n#      BUILD_SHARED_LIBS is ignored in CUDA_WRAP_SRCS, but it is respected in\n\n#      CUDA_ADD_LIBRARY.  On some systems special flags are added for building\n\n#      objects intended for shared libraries.  A preprocessor macro,\n\n#      <target_name>_EXPORTS is defined when a shared library compilation is\n\n#      detected.\n\n#\n\n#      Flags passed into add_definitions with -D or /D are passed along to nvcc.\n\n#\n\n#\n\n#\n\n# The script defines the following variables::\n\n#\n\n#   CUDA_VERSION_MAJOR    -- The major version of cuda as reported by nvcc.\n\n#   CUDA_VERSION_MINOR    -- The minor version.\n\n#   CUDA_VERSION\n\n#   CUDA_VERSION_STRING   -- CUDA_VERSION_MAJOR.CUDA_VERSION_MINOR\n\n#   CUDA_HAS_FP16         -- Whether a short float (float16,fp16) is supported.\n\n#\n\n#   CUDA_TOOLKIT_ROOT_DIR -- Path to the CUDA Toolkit (defined if not set).\n\n#   CUDA_SDK_ROOT_DIR     -- Path to the CUDA SDK.  Use this to find files in the\n\n#                            SDK.  This script will not directly support finding\n\n#                            specific libraries or headers, as that isn't\n\n#                            supported by NVIDIA.  If you want to change\n\n#                            libraries when the path changes see the\n\n#                            FindCUDA.cmake script for an example of how to clear\n\n#                            these variables.  There are also examples of how to\n\n#                            use the CUDA_SDK_ROOT_DIR to locate headers or\n\n#                            libraries, if you so choose (at your own risk).\n\n#   CUDA_INCLUDE_DIRS     -- Include directory for cuda headers.  Added automatically\n\n#                            for CUDA_ADD_EXECUTABLE and CUDA_ADD_LIBRARY.\n\n#   CUDA_LIBRARIES        -- Cuda RT library.\n\n#   CUDA_CUFFT_LIBRARIES  -- Device or emulation library for the Cuda FFT\n\n#                            implementation (alternative to:\n\n#                            CUDA_ADD_CUFFT_TO_TARGET macro)\n\n#   CUDA_CUBLAS_LIBRARIES -- Device or emulation library for the Cuda BLAS\n\n#                            implementation (alternative to:\n\n#                            CUDA_ADD_CUBLAS_TO_TARGET macro).\n\n#   CUDA_cudart_static_LIBRARY -- Statically linkable cuda runtime library.\n\n#                                 Only available for CUDA version 5.5+\n\n#   CUDA_cudadevrt_LIBRARY -- Device runtime library.\n\n#                             Required for separable compilation.\n\n#   CUDA_cupti_LIBRARY    -- CUDA Profiling Tools Interface library.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_curand_LIBRARY   -- CUDA Random Number Generation library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_cusolver_LIBRARY -- CUDA Direct Solver library.\n\n#                            Only available for CUDA version 7.0+.\n\n#   CUDA_cusparse_LIBRARY -- CUDA Sparse Matrix library.\n\n#                            Only available for CUDA version 3.2+.\n\n#   CUDA_npp_LIBRARY      -- NVIDIA Performance Primitives lib.\n\n#                            Only available for CUDA version 4.0+.\n\n#   CUDA_nppc_LIBRARY     -- NVIDIA Performance Primitives lib (core).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nppi_LIBRARY     -- NVIDIA Performance Primitives lib (image processing).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_npps_LIBRARY     -- NVIDIA Performance Primitives lib (signal processing).\n\n#                            Only available for CUDA version 5.5+.\n\n#   CUDA_nvcuvenc_LIBRARY -- CUDA Video Encoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#   CUDA_nvcuvid_LIBRARY  -- CUDA Video Decoder library.\n\n#                            Only available for CUDA version 3.2+.\n\n#                            Windows only.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#   James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#   Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#   Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#   Copyright (c) 2007-2009\n\n#   Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#   This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#   for the text of the license.\n",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n\n###############################################################################\n",
        "Line" : 343,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# FindCUDA.cmake\n",
        "Line" : 366,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This macro helps us find the location of helper files we will need the full path to\n",
        "Line" : 368,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# CMAKE_CURRENT_LIST_FILE contains the full path to the file currently being\n\n# processed.  Using this variable, we can pull out the current path, and\n\n# provide a way to get access to the other files we need local to here.\n",
        "Line" : 371,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Set this variable as internal, so the user isn't bugged with it.\n",
        "Line" : 386,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#####################################################################\n\n## CUDA_INCLUDE_NVCC_DEPENDENCIES\n\n##\n",
        "Line" : 390,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# So we want to try and include the dependency file if it exists.  If\n\n# it doesn't exist then we need to create an empty one, so we can\n\n# include it.\n",
        "Line" : 394,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# If it does exist, then we need to check to see if all the files it\n\n# depends on exist.  If they don't then we should clear the dependency\n\n# file and regenerate it later.  This covers the case where a header\n\n# file has disappeared or moved.\n",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Include the dependency file.  Create it first if it doesn't exist .  The\n\n# INCLUDE puts a dependency that will force CMake to rerun and bring in the\n\n# new info when it changes.  DO NOT REMOVE THIS (as I did and spent a few\n\n# hours figuring out why it didn't work.\n",
        "Line" : 408,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# Always include this file to force CMake to run again next\n\n# invocation and rebuild the dependencies.\n\n#message(\"including dependency_file = ${dependency_file}\")\n",
        "Line" : 415,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# Now we need to verify the existence of all the included files\n\n# here.  If they aren't there we need to just blank this variable and\n\n# make the file regenerate again.\n",
        "Line" : 420,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "#   if(DEFINED CUDA_NVCC_DEPEND)\n\n#     message(\"CUDA_NVCC_DEPEND set\")\n\n#   else()\n\n#     message(\"CUDA_NVCC_DEPEND NOT set\")\n\n#   endif()\n",
        "Line" : 423,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND found\")\n",
        "Line" : 429,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# message(\"searching for ${f}\")\n",
        "Line" : 431,
        "CharPositionInLine" : 6
      },
      "16" : {
        "Text" : "#message(\"file ${f} not found\")\n",
        "Line" : 433,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND false\")\n\n# No dependencies, so regenerate the file.\n",
        "Line" : 438,
        "CharPositionInLine" : 4
      },
      "18" : {
        "Text" : "#message(\"CUDA_NVCC_DEPEND_REGENERATE = ${CUDA_NVCC_DEPEND_REGENERATE}\")\n\n# No incoming dependencies, so we need to generate them.  Make the\n\n# output depend on the dependency file itself, which should cause the\n\n# rule to re-run.\n",
        "Line" : 443,
        "CharPositionInLine" : 2
      },
      "19" : {
        "Text" : "#message(\"Generating an empty dependency_file: ${dependency_file}\")\n",
        "Line" : 449,
        "CharPositionInLine" : 4
      },
      "20" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Setup variables' defaults\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 455,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Allow the user to specify if the device code is supposed to be 32 or 64 bit.\n",
        "Line" : 461,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Attach the build rule to the source file in VS.  This option\n",
        "Line" : 469,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Prints out extra information about the cuda file during compilation\n",
        "Line" : 472,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Set whether we are using emulation or device mode.\n",
        "Line" : 475,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Where to put the generated output.\n",
        "Line" : 478,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Parse HOST_COMPILATION mode.\n",
        "Line" : 481,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Extra user settable flags\n",
        "Line" : 484,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Using cc which is symlink to clang may let NVCC think it is GCC and issue\n\n# unhandled -dumpspecs option to clang. Also in case neither\n\n# CMAKE_C_COMPILER is defined (project does not use C language) nor\n\n# CUDA_HOST_COMPILER is specified manually we should skip -ccbin and let\n\n# nvcc use its own default C compiler.\n\n# Only care about this on APPLE with clang to avoid\n\n# following symlinks to things like ccache\n",
        "Line" : 493,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# if the real path does not end up being clang then\n\n# go back to using CMAKE_C_COMPILER\n",
        "Line" : 502,
        "CharPositionInLine" : 6
      },
      "30" : {
        "Text" : "# Propagate the host flags to the host compiler via -Xcompiler\n",
        "Line" : 517,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Enable CUDA_SEPARABLE_COMPILATION\n",
        "Line" : 520,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Specifies whether the commands used when compiling the .cu file will be printed out.\n",
        "Line" : 523,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Makefile and similar generators don't define CMAKE_CONFIGURATION_TYPES, so we\n\n# need to add another entry for the CMAKE_BUILD_TYPE.  We also need to add the\n\n# standerd set of 4 build types (Debug, MinSizeRel, Release, and RelWithDebInfo)\n\n# for completeness.  We need run this loop in order to accomodate the addition\n\n# of extra configuration types.  Duplicate entries will be removed by\n\n# REMOVE_DUPLICATES.\n",
        "Line" : 539,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Locate CUDA, Set Build Type, etc.\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 553,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Make sure you run this before you unset CUDA_VERSION.\n",
        "Line" : 563,
        "CharPositionInLine" : 2
      },
      "36" : {
        "Text" : "# This only existed in the 3.0 version of the CUDA toolkit\n",
        "Line" : 565,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# Check to see if the CUDA_TOOLKIT_ROOT_DIR and CUDA_SDK_ROOT_DIR have changed,\n\n# if they have then clear the cache variables, so that will be detected again.\n",
        "Line" : 589,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#\n\n#  End of unset()\n\n#\n",
        "Line" : 602,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "#\n\n#  Start looking for things\n\n#\n",
        "Line" : 606,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Search for the cuda distribution.\n",
        "Line" : 610,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Search in the CUDA_BIN_PATH first.\n",
        "Line" : 612,
        "CharPositionInLine" : 2
      },
      "42" : {
        "Text" : "# Now search default paths\n",
        "Line" : 624,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# We need to force this back into the cache.\n",
        "Line" : 635,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "# Support for NVPACK\n",
        "Line" : 652,
        "CharPositionInLine" : 4
      },
      "45" : {
        "Text" : "# Support for arm cross compilation\n",
        "Line" : 655,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "# Support for aarch64 cross compilation\n",
        "Line" : 658,
        "CharPositionInLine" : 4
      },
      "47" : {
        "Text" : "# add known CUDA targetr root path to the set of directories we search for programs, libraries and headers\n",
        "Line" : 672,
        "CharPositionInLine" : 2
      },
      "48" : {
        "Text" : "# for non-cross-compile, find_host_program == find_program and CUDA_TOOLKIT_TARGET_DIR == CUDA_TOOLKIT_ROOT_DIR\n",
        "Line" : 678,
        "CharPositionInLine" : 2
      },
      "49" : {
        "Text" : "# CUDA_NVCC_EXECUTABLE\n",
        "Line" : 686,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 695,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Compute the version.\n",
        "Line" : 700,
        "CharPositionInLine" : 2
      },
      "52" : {
        "Text" : "# Need to set these based off of the cached value\n",
        "Line" : 707,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Always set this convenience variable\n",
        "Line" : 713,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# CUDA_TOOLKIT_INCLUDE\n",
        "Line" : 716,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Header included in toolkit\n",
        "Line" : 718,
        "CharPositionInLine" : 21
      },
      "56" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 725,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Set the user list of include dir to nothing to initialize it.\n",
        "Line" : 735,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need the new\n\n# and old paths.\n",
        "Line" : 741,
        "CharPositionInLine" : 4
      },
      "59" : {
        "Text" : "# CUDA 3.2+ on Windows moved the library directories, so we need to new\n\n# (lib/Win32) and the old path (lib).\n",
        "Line" : 745,
        "CharPositionInLine" : 2
      },
      "60" : {
        "Text" : "# Search default search paths, after we search our own set of paths.\n",
        "Line" : 757,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "# CUDA_LIBRARIES\n",
        "Line" : 775,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "# The cudartemu library only existed for the 3.0 version of CUDA.\n",
        "Line" : 778,
        "CharPositionInLine" : 2
      },
      "63" : {
        "Text" : "# If static cudart available, use it by default, but provide a user-visible option to disable it.\n",
        "Line" : 792,
        "CharPositionInLine" : 2
      },
      "64" : {
        "Text" : "# If not available, silently disable the option.\n",
        "Line" : 796,
        "CharPositionInLine" : 2
      },
      "65" : {
        "Text" : "# Check for the dependent libraries.  Here we look for pthreads.\n",
        "Line" : 807,
        "CharPositionInLine" : 4
      },
      "66" : {
        "Text" : "# Many of the FindXYZ CMake comes with makes use of try_compile with int main(){return 0;}\n\n# as the source file.  Unfortunately this causes a warning with -Wstrict-prototypes and\n\n# -Werror causes the try_compile to fail.  We will just temporarily disable other flags\n\n# when doing the find_package command here.\n",
        "Line" : 813,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "#On Linux, you must link against librt when using the static cuda runtime.\n",
        "Line" : 830,
        "CharPositionInLine" : 6
      },
      "68" : {
        "Text" : "# CUPTI library showed up in cuda toolkit 4.0\n",
        "Line" : 839,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# Set the CUDA_LIBRARIES variable.  This is the set of stuff to link against if you are\n\n# using the CUDA runtime.  For the dynamic version of the runtime, most of the\n\n# dependencies are brough in, but for the static version there are additional libraries\n\n# and linker commands needed.\n\n# Initialize to empty\n",
        "Line" : 845,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# If we are using emulation mode and we found the cudartemu library then use\n\n# that one instead of cudart.\n",
        "Line" : 852,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# We need to add the default path to the driver (libcuda.dylib) as an rpath, so that\n\n# the static cuda runtime can find it at runtime.\n",
        "Line" : 862,
        "CharPositionInLine" : 4
      },
      "72" : {
        "Text" : "# 1.1 toolkit on linux doesn't appear to have a separate library on\n\n# some platforms.\n",
        "Line" : 870,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "#######################\n\n# Look for some of the toolkit helper libraries\n",
        "Line" : 879,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "#######################\n\n# Disable emulation for v3.1 onward\n",
        "Line" : 886,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# Search for additional CUDA toolkit libraries.\n",
        "Line" : 894,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# Emulation libraries aren't available in version 3.1 onward.\n",
        "Line" : 896,
        "CharPositionInLine" : 2
      },
      "77" : {
        "Text" : "# cusparse showed up in version 3.2\n",
        "Line" : 903,
        "CharPositionInLine" : 2
      },
      "78" : {
        "Text" : "# In CUDA 9.2 cublas_device was deprecated\n",
        "Line" : 912,
        "CharPositionInLine" : 2
      },
      "79" : {
        "Text" : "# In CUDA 9.0 NPP was nppi was removed\n",
        "Line" : 917,
        "CharPositionInLine" : 2
      },
      "80" : {
        "Text" : "# In CUDA 5.5 NPP was split into 3 separate libraries.\n",
        "Line" : 932,
        "CharPositionInLine" : 2
      },
      "81" : {
        "Text" : "# cusolver showed up in version 7.0\n",
        "Line" : 941,
        "CharPositionInLine" : 2
      },
      "82" : {
        "Text" : "########################\n\n# Look for the SDK stuff.  As of CUDA 3.0 NVSDKCUDA_ROOT has been replaced with\n\n# NVSDKCOMPUTE_ROOT with the old CUDA C contents moved into the C subdirectory\n",
        "Line" : 954,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# Keep the CUDA_SDK_ROOT_DIR first in order to be able to override the\n\n# environment variables.\n",
        "Line" : 966,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# Example of how to find an include file from the CUDA_SDK_ROOT_DIR\n",
        "Line" : 978,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# find_path(CUDA_CUT_INCLUDE_DIR\n\n#   cutil.h\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   PATH_SUFFIXES \"common/inc\"\n\n#   DOC \"Location of cutil.h\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_path(CUDA_CUT_INCLUDE_DIR cutil.h DOC \"Location of cutil.h\")\n",
        "Line" : 980,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# mark_as_advanced(CUDA_CUT_INCLUDE_DIR)\n",
        "Line" : 990,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# Example of how to find a library in the CUDA_SDK_ROOT_DIR\n",
        "Line" : 993,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# # cutil library is called cutil64 for 64 bit builds on windows.  We don't want\n\n# # to get these confused, so we are setting the name based on the word size of\n\n# # the build.\n",
        "Line" : 995,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# if(CMAKE_SIZEOF_VOID_P EQUAL 8)\n\n#   set(cuda_cutil_name cutil64)\n\n# else()\n\n#   set(cuda_cutil_name cutil32)\n\n# endif()\n",
        "Line" : 999,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# find_library(CUDA_CUT_LIBRARY\n\n#   NAMES cutil ${cuda_cutil_name}\n\n#   PATHS ${CUDA_SDK_SEARCH_PATH}\n\n#   # The new version of the sdk shows up in common/lib, but the old one is in lib\n\n#   PATH_SUFFIXES \"common/lib\" \"lib\"\n\n#   DOC \"Location of cutil library\"\n\n#   NO_DEFAULT_PATH\n\n#   )\n\n# # Now search system paths\n\n# find_library(CUDA_CUT_LIBRARY NAMES cutil ${cuda_cutil_name} DOC \"Location of cutil library\")\n\n# mark_as_advanced(CUDA_CUT_LIBRARY)\n\n# set(CUDA_CUT_LIBRARIES ${CUDA_CUT_LIBRARY})\n",
        "Line" : 1005,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "#############################\n\n# Check for required components\n",
        "Line" : 1020,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Macros\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1045,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "###############################################################################\n\n# Add include directories to pass to the nvcc command.\n",
        "Line" : 1051,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "##############################################################################\n",
        "Line" : 1060,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "##############################################################################\n\n# Separate the OPTIONS out from the sources\n\n#\n",
        "Line" : 1066,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# Assume this is a file\n",
        "Line" : 1090,
        "CharPositionInLine" : 8
      },
      "97" : {
        "Text" : "##############################################################################\n\n# Parse the OPTIONS from ARGN and set the variables prefixed by _option_prefix\n\n#\n",
        "Line" : 1097,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "# Determine if we are dealing with a perconfiguration flag\n",
        "Line" : 1103,
        "CharPositionInLine" : 4
      },
      "99" : {
        "Text" : "# Set arg to nothing to keep it from being processed further\n",
        "Line" : 1108,
        "CharPositionInLine" : 8
      },
      "100" : {
        "Text" : "##############################################################################\n\n# Helper to add the include directory for CUDA only once\n",
        "Line" : 1119,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "# If SHARED, MODULE, or STATIC aren't already in the list of arguments, then\n\n# add SHARED or STATIC based on the value of BUILD_SHARED_LIBS.\n",
        "Line" : 1138,
        "CharPositionInLine" : 2
      },
      "102" : {
        "Text" : "##############################################################################\n\n# Helper to avoid clashes of files with the same basename but different paths.\n\n# This doesn't attempt to do exactly what CMake internals do, which is to only\n\n# add this path when there is a conflict, since by the time a second collision\n\n# in names is detected it's already too late to fix the first one.  For\n\n# consistency sake the relative path will be added to all files.\n",
        "Line" : 1157,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "#message(\"CUDA_COMPUTE_BUILD_PATH([${path}] ${build_path})\")\n\n# Only deal with CMake style paths from here on out\n",
        "Line" : 1164,
        "CharPositionInLine" : 2
      },
      "104" : {
        "Text" : "# Absolute paths are generally unnessary, especially if something like\n\n# file(GLOB_RECURSE) is used to pick up the files.\n",
        "Line" : 1168,
        "CharPositionInLine" : 4
      },
      "105" : {
        "Text" : "# This recipe is from cmLocalGenerator::CreateSafeUniqueObjectFileName in the\n\n# CMake source.\n",
        "Line" : 1179,
        "CharPositionInLine" : 2
      },
      "106" : {
        "Text" : "# Remove leading /\n",
        "Line" : 1182,
        "CharPositionInLine" : 2
      },
      "107" : {
        "Text" : "# Avoid absolute paths by removing ':'\n",
        "Line" : 1184,
        "CharPositionInLine" : 2
      },
      "108" : {
        "Text" : "# Avoid relative paths that go up the tree\n",
        "Line" : 1186,
        "CharPositionInLine" : 2
      },
      "109" : {
        "Text" : "# Avoid spaces\n",
        "Line" : 1188,
        "CharPositionInLine" : 2
      },
      "110" : {
        "Text" : "# Strip off the filename.  I wait until here to do it, since removin the\n\n# basename can make a path that looked like path/../basename turn into\n\n# path/.. (notice the trailing slash).\n",
        "Line" : 1191,
        "CharPositionInLine" : 2
      },
      "111" : {
        "Text" : "#message(\"${build_path} = ${bpath}\")\n",
        "Line" : 1197,
        "CharPositionInLine" : 2
      },
      "112" : {
        "Text" : "##############################################################################\n\n# This helper macro populates the following variables and setups up custom\n\n# commands and targets to invoke the nvcc compiler to generate C or PTX source\n\n# dependent upon the format parameter.  The compiler is invoked once with -M\n\n# to generate a dependency file and a second time with -cuda or -ptx to generate\n\n# a .cpp or .ptx file.\n\n# INPUT:\n\n#   cuda_target         - Target name\n\n#   format              - PTX, CUBIN, FATBIN or OBJ\n\n#   FILE1 .. FILEN      - The remaining arguments are the sources to be wrapped.\n\n#   OPTIONS             - Extra options to NVCC\n\n# OUTPUT:\n\n#   generated_files     - List of generated files\n\n##############################################################################\n\n##############################################################################\n",
        "Line" : 1200,
        "CharPositionInLine" : 0
      },
      "113" : {
        "Text" : "# Put optional arguments in list.\n",
        "Line" : 1218,
        "CharPositionInLine" : 2
      },
      "114" : {
        "Text" : "# If one of the given optional arguments is \"PHONY\", make a note of it, then\n\n# remove it from the list.\n",
        "Line" : 1220,
        "CharPositionInLine" : 2
      },
      "115" : {
        "Text" : "# If CMake doesn't support separable compilation, complain\n",
        "Line" : 1230,
        "CharPositionInLine" : 2
      },
      "116" : {
        "Text" : "# Set up all the command line flags here, so that they can be overridden on a per target basis.\n",
        "Line" : 1235,
        "CharPositionInLine" : 2
      },
      "117" : {
        "Text" : "# Emulation if the card isn't present.\n",
        "Line" : 1239,
        "CharPositionInLine" : 2
      },
      "118" : {
        "Text" : "# Emulation.\n",
        "Line" : 1241,
        "CharPositionInLine" : 4
      },
      "119" : {
        "Text" : "# Device mode.  No flags necessary.\n",
        "Line" : 1244,
        "CharPositionInLine" : 4
      },
      "120" : {
        "Text" : "# This needs to be passed in at this stage, because VS needs to fill out the\n\n# value of VCInstallDir from within VS.  Note that CCBIN is only used if\n\n# -ccbin or --compiler-bindir isn't used and CUDA_HOST_COMPILER matches\n\n# $(VCInstallDir)/bin.\n",
        "Line" : 1270,
        "CharPositionInLine" : 2
      },
      "121" : {
        "Text" : "# Figure out which configure we will use and pass that in as an argument to\n\n# the script.  We need to defer the decision until compilation time, because\n\n# for VS projects we won't know if we are making a debug or release build\n\n# until build time.\n",
        "Line" : 1280,
        "CharPositionInLine" : 2
      },
      "122" : {
        "Text" : "# Initialize our list of includes with the user ones followed by the CUDA system ones.\n",
        "Line" : 1290,
        "CharPositionInLine" : 2
      },
      "123" : {
        "Text" : "# If the passed in target name isn't a real target (i.e., this is from a call to one of the\n\n# cuda_compile_* functions), need to query directory properties to get include directories\n\n# and compile definitions.\n",
        "Line" : 1293,
        "CharPositionInLine" : 4
      },
      "124" : {
        "Text" : "# Append the include directories for this target via generator expression, which is\n\n# expanded by the FILE(GENERATE) call below.  This generator expression captures all\n\n# include dirs set by the user, whether via directory properties or target properties\n",
        "Line" : 1302,
        "CharPositionInLine" : 4
      },
      "125" : {
        "Text" : "# Do the same thing with compile definitions\n",
        "Line" : 1307,
        "CharPositionInLine" : 4
      },
      "126" : {
        "Text" : "# Reset these variables\n",
        "Line" : 1312,
        "CharPositionInLine" : 2
      },
      "127" : {
        "Text" : "# Figure out if we are building a shared library.  BUILD_SHARED_LIBS is\n\n# respected in CUDA_ADD_LIBRARY.\n",
        "Line" : 1322,
        "CharPositionInLine" : 2
      },
      "128" : {
        "Text" : "# SHARED, MODULE\n",
        "Line" : 1325,
        "CharPositionInLine" : 2
      },
      "129" : {
        "Text" : "# STATIC\n",
        "Line" : 1331,
        "CharPositionInLine" : 2
      },
      "130" : {
        "Text" : "# CUDA_HOST_FLAGS\n",
        "Line" : 1337,
        "CharPositionInLine" : 2
      },
      "131" : {
        "Text" : "# If we are setting up code for a shared library, then we need to add extra flags for\n\n# compiling objects for shared libraries.\n",
        "Line" : 1339,
        "CharPositionInLine" : 4
      },
      "132" : {
        "Text" : "# Only add the CMAKE_{C,CXX}_FLAGS if we are propagating host flags.  We\n\n# always need to set the SHARED_FLAGS, though.\n",
        "Line" : 1345,
        "CharPositionInLine" : 2
      },
      "133" : {
        "Text" : "# Loop over all the configuration types to generate appropriate flags for run_nvcc.cmake\n",
        "Line" : 1354,
        "CharPositionInLine" : 2
      },
      "134" : {
        "Text" : "# CMAKE_FLAGS are strings and not lists.  By not putting quotes around CMAKE_FLAGS\n\n# we convert the strings to lists (like we want).\n",
        "Line" : 1357,
        "CharPositionInLine" : 4
      },
      "135" : {
        "Text" : "# nvcc chokes on -g3 in versions previous to 3.0, so replace it with -g\n",
        "Line" : 1361,
        "CharPositionInLine" : 6
      },
      "136" : {
        "Text" : "# Note that if we ever want CUDA_NVCC_FLAGS_<CONFIG> to be string (instead of a list\n\n# like it is currently), we can remove the quotes around the\n\n# ${CUDA_NVCC_FLAGS_${config_upper}} variable like the CMAKE_HOST_FLAGS_<CONFIG> variable.\n",
        "Line" : 1381,
        "CharPositionInLine" : 4
      },
      "137" : {
        "Text" : "# Process the C++11 flag.  If the host sets the flag, we need to add it to nvcc and\n\n# remove it from the host. This is because -Xcompile -std=c++ will choke nvcc (it uses\n\n# the C preprocessor).  In order to get this to work correctly, we need to use nvcc's\n\n# specific c++11 flag.\n",
        "Line" : 1387,
        "CharPositionInLine" : 2
      },
      "138" : {
        "Text" : "# Add the c++11 flag to nvcc if it isn't already present.  Note that we only look at\n\n# the main flag instead of the configuration specific flags.\n",
        "Line" : 1392,
        "CharPositionInLine" : 4
      },
      "139" : {
        "Text" : "# Reset the output variable\n",
        "Line" : 1404,
        "CharPositionInLine" : 2
      },
      "140" : {
        "Text" : "# Iterate over the macro arguments and create custom\n\n# commands for all the .cu files.\n",
        "Line" : 1407,
        "CharPositionInLine" : 2
      },
      "141" : {
        "Text" : "# Ignore any file marked as a HEADER_FILE_ONLY\n",
        "Line" : 1410,
        "CharPositionInLine" : 4
      },
      "142" : {
        "Text" : "# Allow per source file overrides of the format.  Also allows compiling non-.cu files.\n",
        "Line" : 1412,
        "CharPositionInLine" : 4
      },
      "143" : {
        "Text" : "# If file isn't a .cu file, we need to tell nvcc to treat it as such.\n",
        "Line" : 1419,
        "CharPositionInLine" : 6
      },
      "144" : {
        "Text" : "# Don't use any of the host compilation flags for PTX targets.\n",
        "Line" : 1442,
        "CharPositionInLine" : 8
      },
      "145" : {
        "Text" : "# Determine output directory\n",
        "Line" : 1450,
        "CharPositionInLine" : 6
      },
      "146" : {
        "Text" : "# Add a custom target to generate a c or ptx file. ######################\n",
        "Line" : 1463,
        "CharPositionInLine" : 6
      },
      "147" : {
        "Text" : "# Set all of our file names.  Make sure that whatever filenames that have\n\n# generated_file_path in them get passed in through as a command line\n\n# argument, so that the ${CMAKE_CFG_INTDIR} gets expanded at run time\n\n# instead of configure time.\n",
        "Line" : 1481,
        "CharPositionInLine" : 6
      },
      "148" : {
        "Text" : "# Setup properties for obj files:\n",
        "Line" : 1492,
        "CharPositionInLine" : 6
      },
      "149" : {
        "Text" : "# This is an object file not to be compiled, but only be linked.\n",
        "Line" : 1496,
        "CharPositionInLine" : 31
      },
      "150" : {
        "Text" : "# Don't add CMAKE_CURRENT_SOURCE_DIR if the path is already an absolute path.\n",
        "Line" : 1500,
        "CharPositionInLine" : 6
      },
      "151" : {
        "Text" : "# Bring in the dependencies.  Creates a variable CUDA_NVCC_DEPEND #######\n",
        "Line" : 1512,
        "CharPositionInLine" : 6
      },
      "152" : {
        "Text" : "# Convience string for output ###########################################\n",
        "Line" : 1515,
        "CharPositionInLine" : 6
      },
      "153" : {
        "Text" : "# Build the NVCC made dependency file ###################################\n",
        "Line" : 1522,
        "CharPositionInLine" : 6
      },
      "154" : {
        "Text" : "# Configure the build script\n",
        "Line" : 1530,
        "CharPositionInLine" : 6
      },
      "155" : {
        "Text" : "# So if a user specifies the same cuda file as input more than once, you\n\n# can have bad things happen with dependencies.  Here we check an option\n\n# to see if this is the behavior they want.\n",
        "Line" : 1537,
        "CharPositionInLine" : 6
      },
      "156" : {
        "Text" : "# Create up the comment string\n",
        "Line" : 1554,
        "CharPositionInLine" : 6
      },
      "157" : {
        "Text" : "# Build the generated file and dependency file ##########################\n",
        "Line" : 1567,
        "CharPositionInLine" : 6
      },
      "158" : {
        "Text" : "# These output files depend on the source_file and the contents of cmake_dependency_file\n",
        "Line" : 1570,
        "CharPositionInLine" : 8
      },
      "159" : {
        "Text" : "# Make sure the output directory exists before trying to write to it.\n",
        "Line" : 1574,
        "CharPositionInLine" : 8
      },
      "160" : {
        "Text" : "# Make sure the build system knows the file is generated.\n",
        "Line" : 1588,
        "CharPositionInLine" : 6
      },
      "161" : {
        "Text" : "# Add the other files that we want cmake to clean on a cleanup ##########\n",
        "Line" : 1593,
        "CharPositionInLine" : 6
      },
      "162" : {
        "Text" : "# Set the return parameter\n",
        "Line" : 1601,
        "CharPositionInLine" : 2
      },
      "163" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# Separable Compilation Link\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1616,
        "CharPositionInLine" : 0
      },
      "164" : {
        "Text" : "# Compute the filename to be used by CUDA_LINK_SEPARABLE_COMPILATION_OBJECTS\n",
        "Line" : 1622,
        "CharPositionInLine" : 0
      },
      "165" : {
        "Text" : "# Setup the build rule for the separable compilation intermediate link file.\n",
        "Line" : 1634,
        "CharPositionInLine" : 0
      },
      "166" : {
        "Text" : "# This is an object file not to be compiled, but only\n\n# be linked.\n\n# This file is generated during the build\n",
        "Line" : 1640,
        "CharPositionInLine" : 27
      },
      "167" : {
        "Text" : "# For now we are ignoring all the configuration specific flags.\n",
        "Line" : 1645,
        "CharPositionInLine" : 4
      },
      "168" : {
        "Text" : "# If -ccbin, --compiler-bindir has been specified, don't do anything.  Otherwise add it here.\n",
        "Line" : 1653,
        "CharPositionInLine" : 4
      },
      "169" : {
        "Text" : "# Match VERBATIM check below.\n",
        "Line" : 1657,
        "CharPositionInLine" : 6
      },
      "170" : {
        "Text" : "# Create a list of flags specified by CUDA_NVCC_FLAGS_${CONFIG} and CMAKE_${CUDA_C_OR_CXX}_FLAGS*\n",
        "Line" : 1665,
        "CharPositionInLine" : 4
      },
      "171" : {
        "Text" : "# Add config specific flags\n",
        "Line" : 1670,
        "CharPositionInLine" : 6
      },
      "172" : {
        "Text" : "# Add CMAKE_${CUDA_C_OR_CXX}_FLAGS\n",
        "Line" : 1680,
        "CharPositionInLine" : 4
      },
      "173" : {
        "Text" : "# Add our general CUDA_NVCC_FLAGS with the configuration specifig flags\n",
        "Line" : 1687,
        "CharPositionInLine" : 4
      },
      "174" : {
        "Text" : "# Some generators don't handle the multiple levels of custom command\n\n# dependencies correctly (obj1 depends on file1, obj2 depends on obj1), so\n\n# we work around that issue by compiling the intermediate link object as a\n\n# pre-link custom command in that situation.\n",
        "Line" : 1692,
        "CharPositionInLine" : 4
      },
      "175" : {
        "Text" : "# VS 2010 and 2012 have this problem.\n",
        "Line" : 1698,
        "CharPositionInLine" : 6
      },
      "176" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD LIBRARY\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1730,
        "CharPositionInLine" : 0
      },
      "177" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1739,
        "CharPositionInLine" : 2
      },
      "178" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1742,
        "CharPositionInLine" : 2
      },
      "179" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\n\n# compilation.\n",
        "Line" : 1747,
        "CharPositionInLine" : 2
      },
      "180" : {
        "Text" : "# Add the library.\n",
        "Line" : 1751,
        "CharPositionInLine" : 2
      },
      "181" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\n\n# variable will have been defined.\n",
        "Line" : 1758,
        "CharPositionInLine" : 2
      },
      "182" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1773,
        "CharPositionInLine" : 2
      },
      "183" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# ADD EXECUTABLE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1783,
        "CharPositionInLine" : 0
      },
      "184" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1792,
        "CharPositionInLine" : 2
      },
      "185" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1794,
        "CharPositionInLine" : 2
      },
      "186" : {
        "Text" : "# Compute the file name of the intermedate link file used for separable\n\n# compilation.\n",
        "Line" : 1797,
        "CharPositionInLine" : 2
      },
      "187" : {
        "Text" : "# Add the library.\n",
        "Line" : 1801,
        "CharPositionInLine" : 2
      },
      "188" : {
        "Text" : "# Add a link phase for the separable compilation if it has been enabled.  If\n\n# it has been enabled then the ${cuda_target}_SEPARABLE_COMPILATION_OBJECTS\n\n# variable will have been defined.\n",
        "Line" : 1808,
        "CharPositionInLine" : 2
      },
      "189" : {
        "Text" : "# We need to set the linker language based on what the expected generated file\n\n# would be. CUDA_C_OR_CXX is computed based on CUDA_HOST_COMPILATION_CPP.\n",
        "Line" : 1817,
        "CharPositionInLine" : 2
      },
      "190" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# (Internal) helper for manually added cuda source files with specific targets\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1827,
        "CharPositionInLine" : 0
      },
      "191" : {
        "Text" : "# Update a counter in this directory, to keep phony target names unique.\n",
        "Line" : 1833,
        "CharPositionInLine" : 2
      },
      "192" : {
        "Text" : "# Separate the sources from the options\n",
        "Line" : 1844,
        "CharPositionInLine" : 2
      },
      "193" : {
        "Text" : "# Create custom commands and targets for each file.\n",
        "Line" : 1847,
        "CharPositionInLine" : 2
      },
      "194" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1855,
        "CharPositionInLine" : 0
      },
      "195" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE PTX\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1864,
        "CharPositionInLine" : 0
      },
      "196" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE FATBIN\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1873,
        "CharPositionInLine" : 0
      },
      "197" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA COMPILE CUBIN\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1882,
        "CharPositionInLine" : 0
      },
      "198" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUFFT TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1892,
        "CharPositionInLine" : 0
      },
      "199" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA ADD CUBLAS TO TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1905,
        "CharPositionInLine" : 0
      },
      "200" : {
        "Text" : "###############################################################################\n\n###############################################################################\n\n# CUDA BUILD CLEAN TARGET\n\n###############################################################################\n\n###############################################################################\n",
        "Line" : 1918,
        "CharPositionInLine" : 0
      },
      "201" : {
        "Text" : "# Call this after you add all your CUDA targets, and you will get a convience\n\n# target.  You should also make clean after running this target to get the\n\n# build system to generate all the code again.\n",
        "Line" : 1924,
        "CharPositionInLine" : 2
      },
      "202" : {
        "Text" : "# Clear out the variable, so the next time we configure it will be empty.\n\n# This is useful so that the files won't persist in the list after targets\n\n# have been removed.\n",
        "Line" : 1935,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 203
    },
    "cmake/Modules/FindCUDA/make2cmake.cmake" : {
      "ObjectId" : "7b5389ec51fdad7df760df0666809105e3239c09",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# This converts a file written in makefile syntax into one that can be included\n\n# by CMake.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\n\n#\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\n\n#                          ON : Extra output\n\n#\n\n# input_file:FILEPATH=<>   Path to dependecy file in makefile format\n\n#\n\n# output_file:FILEPATH=<>  Path to file with dependencies in CMake readable variable\n\n#\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# message(\"FOUND DEPENDS\")\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# This works for the nvcc -M generated dependency files.\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# OK, now if we had a UNC path, nvcc has a tendency to only output the first '/'\n\n# instead of '//'.  Here we will test to see if the file exists, if it doesn't then\n\n# try to prepend another '/' to the path and test again.  If it still fails remove the\n\n# path.\n",
        "Line" : 66,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Make sure we check to see if we have a file, before asking if it is not a directory.\n\n# if(NOT IS_DIRECTORY \"\") will return TRUE.\n",
        "Line" : 82,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# If softlinks start to matter, we should change this to REALPATH.  For now we need\n\n# to flatten paths, because nvcc can generate stuff like /bin/../include instead of\n\n# just /include.\n",
        "Line" : 85,
        "CharPositionInLine" : 6
      },
      "9" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 95,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# Remove the duplicate entries and sort them.\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "cmake/Modules/FindCUDA/parse_cubin.cmake" : {
      "ObjectId" : "626c8a2e47d3c76afd74a8ea11de98eb5ff240f2",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#  Abe Stephens, SCI Institute -- http://www.sci.utah.edu/~abe/FindCuda.html\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  Copyright (c) 2007-2009\n\n#  Scientific Computing and Imaging Institute, University of Utah\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n\n#\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#######################################################################\n\n# Parses a .cubin file produced by nvcc and reports statistics about the file.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Only look at \"code { }\" blocks.\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Break into individual lines.\n",
        "Line" : 52,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# Extract kernel names.\n",
        "Line" : 57,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Check to see if the kernel name starts with \"_\"\n",
        "Line" : 61,
        "CharPositionInLine" : 10
      },
      "7" : {
        "Text" : "# if (${entry} MATCHES \"^_\")\n",
        "Line" : 63,
        "CharPositionInLine" : 10
      },
      "8" : {
        "Text" : "# Skip the rest of this block.\n\n# message(\"Skipping ${entry}\")\n\n# set(skip TRUE)\n",
        "Line" : 64,
        "CharPositionInLine" : 12
      },
      "9" : {
        "Text" : "# else ()\n",
        "Line" : 67,
        "CharPositionInLine" : 10
      },
      "10" : {
        "Text" : "# endif ()\n",
        "Line" : 69,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# Skip the rest of the block if necessary\n",
        "Line" : 73,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# Registers\n",
        "Line" : 76,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# Local memory\n",
        "Line" : 82,
        "CharPositionInLine" : 10
      },
      "14" : {
        "Text" : "# Shared memory\n",
        "Line" : 88,
        "CharPositionInLine" : 10
      },
      "15" : {
        "Text" : "# message(\"FOUND NO DEPENDS\")\n",
        "Line" : 108,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 16
    },
    "cmake/Modules/FindCUDA/run_nvcc.cmake" : {
      "ObjectId" : "28cc1e99ead5fd01707161d7ba6d72b2464e7a70",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#  James Bigler, NVIDIA Corp (nvidia.com - jbigler)\n\n#\n\n#  Copyright (c) 2008 - 2009 NVIDIA Corporation.  All rights reserved.\n\n#\n\n#  This code is licensed under the MIT License.  See the FindCUDA.cmake script\n\n#  for the text of the license.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# The MIT License\n\n#\n\n# License for the specific language governing rights and limitations under\n\n# Permission is hereby granted, free of charge, to any person obtaining a\n\n# copy of this software and associated documentation files (the \"Software\"),\n\n# to deal in the Software without restriction, including without limitation\n\n# the rights to use, copy, modify, merge, publish, distribute, sublicense,\n\n# and/or sell copies of the Software, and to permit persons to whom the\n\n# Software is furnished to do so, subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be included\n\n# in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n\n# DEALINGS IN THE SOFTWARE.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################\n\n# This file runs the nvcc commands to produce the desired output file along with\n\n# the dependency file needed by CMake to compute dependencies.  In addition the\n\n# file checks the output of each command and if the command fails it deletes the\n\n# output files.\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Input variables\n\n#\n\n# verbose:BOOL=<>          OFF: Be as quiet as possible (default)\n\n#                          ON : Describe each step\n\n#\n\n# build_configuration:STRING=<> Typically one of Debug, MinSizeRel, Release, or\n\n#                               RelWithDebInfo, but it should match one of the\n\n#                               entries in CUDA_HOST_FLAGS. This is the build\n\n#                               configuration used when compiling the code.  If\n\n#                               blank or unspecified Debug is assumed as this is\n\n#                               what CMake does.\n\n#\n\n# generated_file:STRING=<> File to generate.  This argument must be passed in.\n\n#\n\n# generated_cubin_file:STRING=<> File to generate.  This argument must be passed\n\n#                                                   in if build_cubin is true.\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set these up as variables to make reading the generated file easier\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# path\n",
        "Line" : 58,
        "CharPositionInLine" : 37
      },
      "6" : {
        "Text" : "# path\n",
        "Line" : 59,
        "CharPositionInLine" : 33
      },
      "7" : {
        "Text" : "# path\n",
        "Line" : 60,
        "CharPositionInLine" : 71
      },
      "8" : {
        "Text" : "# path\n",
        "Line" : 61,
        "CharPositionInLine" : 53
      },
      "9" : {
        "Text" : "# path\n",
        "Line" : 62,
        "CharPositionInLine" : 41
      },
      "10" : {
        "Text" : "# path\n",
        "Line" : 63,
        "CharPositionInLine" : 43
      },
      "11" : {
        "Text" : "# bool\n",
        "Line" : 64,
        "CharPositionInLine" : 31
      },
      "12" : {
        "Text" : "# path\n",
        "Line" : 65,
        "CharPositionInLine" : 47
      },
      "13" : {
        "Text" : "# We won't actually use these variables for now, but we need to set this, in\n\n# order to force this file to be run again if it changes.\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# path\n",
        "Line" : 68,
        "CharPositionInLine" : 49
      },
      "15" : {
        "Text" : "# path\n",
        "Line" : 69,
        "CharPositionInLine" : 48
      },
      "16" : {
        "Text" : "# path\n",
        "Line" : 70,
        "CharPositionInLine" : 60
      },
      "17" : {
        "Text" : "# path\n",
        "Line" : 72,
        "CharPositionInLine" : 51
      },
      "18" : {
        "Text" : "# list\n",
        "Line" : 73,
        "CharPositionInLine" : 72
      },
      "19" : {
        "Text" : "# list\n",
        "Line" : 75,
        "CharPositionInLine" : 29
      },
      "20" : {
        "Text" : "# list (needs to be in quotes to handle spaces properly).\n",
        "Line" : 76,
        "CharPositionInLine" : 55
      },
      "21" : {
        "Text" : "# list (needs to be in quotes to handle spaces properly).\n",
        "Line" : 77,
        "CharPositionInLine" : 69
      },
      "22" : {
        "Text" : "# string\n",
        "Line" : 78,
        "CharPositionInLine" : 33
      },
      "23" : {
        "Text" : "# list\n",
        "Line" : 79,
        "CharPositionInLine" : 45
      },
      "24" : {
        "Text" : "# Clean up list of include directories and add -I flags\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 85,
        "CharPositionInLine" : 2
      },
      "26" : {
        "Text" : "# Clean up list of compile definitions, add -D flags, and append to nvcc_flags\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# This is the list of host compilation flags.  It C or CXX should already have\n\n# been chosen by FindCUDA.cmake.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Take the compiler flags and package them up to be sent to the compiler via -Xcompiler\n",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# If we weren't given a build_configuration, use Debug.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "#message(\"CUDA_NVCC_HOST_COMPILER_FLAGS = ${CUDA_NVCC_HOST_COMPILER_FLAGS}\")\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Extra quotes are added around each flag to help nvcc parse out flags with spaces.\n",
        "Line" : 112,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "#message(\"nvcc_host_compiler_flags = \\\"${nvcc_host_compiler_flags}\\\"\")\n\n# Add the build specific configuration flags\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Any -ccbin existing in CUDA_NVCC_FLAGS gets highest priority\n",
        "Line" : 122,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# cuda_execute_process - Executes a command with optional command echo and status message.\n\n#\n\n#   status  - Status message to print if verbose is true\n\n#   command - COMMAND argument from the usual execute_process argument structure\n\n#   ARGN    - Remaining arguments are the command with arguments\n\n#\n\n#   CUDA_result - return value from running the command\n\n#\n\n# Make this a macro instead of a function, so that things like RESULT_VARIABLE\n\n# and other return variables are present after executing the process.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Now we need to build up our command string.  We are accounting for quotes\n\n# and spaces, anything else is left up to the user to fix if they want to\n\n# copy and paste a runnable command line.\n",
        "Line" : 150,
        "CharPositionInLine" : 4
      },
      "36" : {
        "Text" : "# If there are quotes, excape them, so they come through.\n",
        "Line" : 155,
        "CharPositionInLine" : 6
      },
      "37" : {
        "Text" : "# Args with spaces need quotes around them to get them to be parsed as a single argument.\n",
        "Line" : 157,
        "CharPositionInLine" : 6
      },
      "38" : {
        "Text" : "# Echo the command\n",
        "Line" : 164,
        "CharPositionInLine" : 4
      },
      "39" : {
        "Text" : "# Run the command\n",
        "Line" : 167,
        "CharPositionInLine" : 2
      },
      "40" : {
        "Text" : "# Delete the target file\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# For CUDA 2.3 and below, -G -M doesn't work, so remove the -G flag\n\n# for dependency generation and hope for the best.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# CMake policy 0007 NEW states that empty list elements are not\n\n# ignored.  I'm just setting it to avoid the warning that's printed.\n",
        "Line" : 183,
        "CharPositionInLine" : 2
      },
      "43" : {
        "Text" : "# Note that this will remove all occurances of -G.\n",
        "Line" : 186,
        "CharPositionInLine" : 2
      },
      "44" : {
        "Text" : "# nvcc doesn't define __CUDACC__ for some reason when generating dependency files.  This\n\n# can cause incorrect dependencies when #including files based on this macro which is\n\n# defined in the generating passes of nvcc invokation.  We will go ahead and manually\n\n# define this for now until a future version fixes this bug.\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Generate the dependency file\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Generate the cmake readable dependency file to a temp file.  Don't put the\n\n# quotes just around the filenames for the input_file and output_file variables.\n\n# CMake will pass the quotes through and not be able to find the file.\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Copy the file if it is different\n",
        "Line" : 233,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Delete the temporary file\n",
        "Line" : 243,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Generate the code\n",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Since nvcc can sometimes leave half done files make sure that we delete the output file.\n",
        "Line" : 269,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Cubin resource report commands.\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Run with -cubin to produce resource usage report.\n",
        "Line" : 283,
        "CharPositionInLine" : 2
      },
      "53" : {
        "Text" : "# Execute the parser script.\n",
        "Line" : 298,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 54
    },
    "cmake/Modules/FindCUDA/select_compute_arch.cmake" : {
      "ObjectId" : "5d129b7a78fb9e6d520542dea820a32d0aa1570f",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Synopsis:\n\n#   CUDA_SELECT_NVCC_ARCH_FLAGS(out_variable [target_CUDA_architectures])\n\n#   -- Selects GPU arch flags for nvcc based on target_CUDA_architectures\n\n#      target_CUDA_architectures : Auto | Common | All | LIST(ARCH_AND_PTX ...)\n\n#       - \"Auto\" detects local machine GPU compute arch at runtime.\n\n#       - \"Common\" and \"All\" cover common and entire subsets of architectures\n\n#      ARCH_AND_PTX : NAME | NUM.NUM | NUM.NUM(NUM.NUM) | NUM.NUM+PTX\n\n#      NAME: Fermi Kepler Maxwell Kepler+Tegra Kepler+Tesla Maxwell+Tegra Pascal\n\n#      NUM: Any number. Only those pairs are currently accepted by NVCC though:\n\n#            2.0 2.1 3.0 3.2 3.5 3.7 5.0 5.2 5.3 6.0 6.2\n\n#      Returns LIST of flags to be added to CUDA_NVCC_FLAGS in ${out_variable}\n\n#      Additionally, sets ${out_variable}_readable to the resulting numeric list\n\n#      Example:\n\n#       CUDA_SELECT_NVCC_ARCH_FLAGS(ARCH_FLAGS 3.0 3.5+PTX 5.2(5.0) Maxwell)\n\n#        LIST(APPEND CUDA_NVCC_FLAGS ${ARCH_FLAGS})\n\n#\n\n#      More info on CUDA architectures: https://en.wikipedia.org/wiki/CUDA\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This list will be used for CUDA_ARCH_NAME = All option\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# This list will be used for CUDA_ARCH_NAME = Common option (enabled by default)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "################################################################################################\n\n# A function for automatic detection of GPUs installed  (if autodetection is enabled)\n\n# Usage:\n\n#   CUDA_DETECT_INSTALLED_GPUS(OUT_VARIABLE)\n\n#\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "################################################################################################\n\n# Function for selecting GPU arch flags for nvcc based on CUDA architectures from parameter list\n\n# Usage:\n\n#   SELECT_NVCC_ARCH_FLAGS(out_variable [list of CUDA compute archs])\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Now process the list and look for names\n",
        "Line" : 113,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Check to see if we are compiling PTX\n",
        "Line" : 120,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Look for it in our list of known architectures\n",
        "Line" : 129,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# remove dots and convert to lists\n",
        "Line" : 166,
        "CharPositionInLine" : 2
      },
      "9" : {
        "Text" : "# Tell NVCC to add binaries for the specified GPUs\n",
        "Line" : 182,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# User explicitly specified ARCH for the concrete CODE\n",
        "Line" : 185,
        "CharPositionInLine" : 6
      },
      "11" : {
        "Text" : "# User didn't explicitly specify ARCH for the concrete CODE, we assume ARCH=CODE\n",
        "Line" : 189,
        "CharPositionInLine" : 6
      },
      "12" : {
        "Text" : "# Tell NVCC to add PTX intermediate code for the specified architectures\n",
        "Line" : 195,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 13
    },
    "cmake/Modules/FindNCCL.cmake" : {
      "ObjectId" : "c8845934102602aa9b9e6d02e696057b26a72f76",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/Modules/FindOpenBabel2.cmake" : {
      "ObjectId" : "f8abd6da8f38e600f3cb93606416844947b34b6d",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindOpenBabel.cmake\n\n# Try to find Open Babel headers and libraries\n\n# Defines:\n\n#\n\n#  OPENBABEL2_FOUND - system has Open Babel\n\n#  OPENBABEL2_INCLUDE_DIR - the Open Babel include directory\n\n#  OPENBABEL2_LIBRARIES - Link these to use Open Babel\n\n#  IF OPENBABEL_DIR is defined, will look there first\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already or user-specified\n",
        "Line" : 11,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindPackageHandleStandardArgs.cmake" : {
      "ObjectId" : "b77925dc37321e8ab0e679f77b06b0b67166d280",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#[=======================================================================[.rst:\nFindPackageHandleStandardArgs\n-----------------------------\n\nThis module provides a function intended to be used in :ref:`Find Modules`\nimplementing :command:`find_package(<PackageName>)` calls.  It handles the\n``REQUIRED``, ``QUIET`` and version-related arguments of ``find_package``.\nIt also sets the ``<PackageName>_FOUND`` variable.  The package is\nconsidered found if all variables listed contain valid results, e.g.\nvalid filepaths.\n\n.. command:: find_package_handle_standard_args\n\n  There are two signatures::\n\n    find_package_handle_standard_args(<PackageName>\n      (DEFAULT_MSG|<custom-failure-message>)\n      <required-var>...\n      )\n\n    find_package_handle_standard_args(<PackageName>\n      [FOUND_VAR <result-var>]\n      [REQUIRED_VARS <required-var>...]\n      [VERSION_VAR <version-var>]\n      [HANDLE_COMPONENTS]\n      [CONFIG_MODE]\n      [FAIL_MESSAGE <custom-failure-message>]\n      )\n\n  The ``<PackageName>_FOUND`` variable will be set to ``TRUE`` if all\n  the variables ``<required-var>...`` are valid and any optional\n  constraints are satisfied, and ``FALSE`` otherwise.  A success or\n  failure message may be displayed based on the results and on\n  whether the ``REQUIRED`` and/or ``QUIET`` option was given to\n  the :command:`find_package` call.\n\n  The options are:\n\n  ``(DEFAULT_MSG|<custom-failure-message>)``\n    In the simple signature this specifies the failure message.\n    Use ``DEFAULT_MSG`` to ask for a default message to be computed\n    (recommended).  Not valid in the full signature.\n\n  ``FOUND_VAR <result-var>``\n    Obsolete.  Specifies either ``<PackageName>_FOUND`` or\n    ``<PACKAGENAME>_FOUND`` as the result variable.  This exists only\n    for compatibility with older versions of CMake and is now ignored.\n    Result variables of both names are always set for compatibility.\n\n  ``REQUIRED_VARS <required-var>...``\n    Specify the variables which are required for this package.\n    These may be named in the generated failure message asking the\n    user to set the missing variable values.  Therefore these should\n    typically be cache entries such as ``FOO_LIBRARY`` and not output\n    variables like ``FOO_LIBRARIES``.\n\n  ``VERSION_VAR <version-var>``\n    Specify the name of a variable that holds the version of the package\n    that has been found.  This version will be checked against the\n    (potentially) specified required version given to the\n    :command:`find_package` call, including its ``EXACT`` option.\n    The default messages include information about the required\n    version and the version which has been actually found, both\n    if the version is ok or not.\n\n  ``HANDLE_COMPONENTS``\n    Enable handling of package components.  In this case, the command\n    will report which components have been found and which are missing,\n    and the ``<PackageName>_FOUND`` variable will be set to ``FALSE``\n    if any of the required components (i.e. not the ones listed after\n    the ``OPTIONAL_COMPONENTS`` option of :command:`find_package`) are\n    missing.\n\n  ``CONFIG_MODE``\n    Specify that the calling find module is a wrapper around a\n    call to ``find_package(<PackageName> NO_MODULE)``.  This implies\n    a ``VERSION_VAR`` value of ``<PackageName>_VERSION``.  The command\n    will automatically check whether the package configuration file\n    was found.\n\n  ``FAIL_MESSAGE <custom-failure-message>``\n    Specify a custom failure message instead of using the default\n    generated message.  Not recommended.\n\nExample for the simple signature:\n\n.. code-block:: cmake\n\n  find_package_handle_standard_args(LibXml2 DEFAULT_MSG\n    LIBXML2_LIBRARY LIBXML2_INCLUDE_DIR)\n\nThe ``LibXml2`` package is considered to be found if both\n``LIBXML2_LIBRARY`` and ``LIBXML2_INCLUDE_DIR`` are valid.\nThen also ``LibXml2_FOUND`` is set to ``TRUE``.  If it is not found\nand ``REQUIRED`` was used, it fails with a\n:command:`message(FATAL_ERROR)`, independent whether ``QUIET`` was\nused or not.  If it is found, success will be reported, including\nthe content of the first ``<required-var>``.  On repeated CMake runs,\nthe same message will not be printed again.\n\nExample for the full signature:\n\n.. code-block:: cmake\n\n  find_package_handle_standard_args(LibArchive\n    REQUIRED_VARS LibArchive_LIBRARY LibArchive_INCLUDE_DIR\n    VERSION_VAR LibArchive_VERSION)\n\nIn this case, the ``LibArchive`` package is considered to be found if\nboth ``LibArchive_LIBRARY`` and ``LibArchive_INCLUDE_DIR`` are valid.\nAlso the version of ``LibArchive`` will be checked by using the version\ncontained in ``LibArchive_VERSION``.  Since no ``FAIL_MESSAGE`` is given,\nthe default messages will be printed.\n\nAnother example for the full signature:\n\n.. code-block:: cmake\n\n  find_package(Automoc4 QUIET NO_MODULE HINTS /opt/automoc4)\n  find_package_handle_standard_args(Automoc4  CONFIG_MODE)\n\nIn this case, a ``FindAutmoc4.cmake`` module wraps a call to\n``find_package(Automoc4 NO_MODULE)`` and adds an additional search\ndirectory for ``automoc4``.  Then the call to\n``find_package_handle_standard_args`` produces a proper success/failure\nmessage.\n#]=======================================================================]",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# internal helper macro\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# internal helper macro to generate the failure message when used in CONFIG_MODE:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# <name>_CONFIG is set, but FOUND is false, this means that some other of the REQUIRED_VARS was not found:\n",
        "Line" : 148,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# If _CONSIDERED_CONFIGS is set, the config-file has been found, but no suitable version.\n\n# List them all in the error message:\n",
        "Line" : 152,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Simple case: No Config-file was found at all:\n",
        "Line" : 169,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "# set up the arguments for CMAKE_PARSE_ARGUMENTS and check whether we are in\n\n# new extended or in the \"old\" mode:\n",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# now that we collected all arguments, process them\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# In config-mode, we rely on the variable <package>_CONFIG, which is set by find_package()\n\n# when it successfully found the config-file, including version checking:\n",
        "Line" : 209,
        "CharPositionInLine" : 2
      },
      "10" : {
        "Text" : "# collect all variables which were not found, so they can be printed, so the\n\n# user knows better what went wrong (#6375)\n",
        "Line" : 236,
        "CharPositionInLine" : 2
      },
      "11" : {
        "Text" : "# check if all passed variables are valid\n",
        "Line" : 240,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# component handling\n",
        "Line" : 258,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# version handling:\n",
        "Line" : 289,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# check with DEFINED here as the requested or found version may be \"0\"\n",
        "Line" : 294,
        "CharPositionInLine" : 2
      },
      "15" : {
        "Text" : "# exact version required\n",
        "Line" : 298,
        "CharPositionInLine" : 44
      },
      "16" : {
        "Text" : "# count the dots in the version string\n",
        "Line" : 299,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# add one dot because there is one dot more than there are components\n",
        "Line" : 301,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# Because of the C++ implementation of find_package() ${_NAME}_FIND_VERSION_COUNT\n\n# is at most 4 here. Therefore a simple lookup table is used.\n",
        "Line" : 304,
        "CharPositionInLine" : 10
      },
      "19" : {
        "Text" : "# minimum version specified:\n",
        "Line" : 334,
        "CharPositionInLine" : 17
      },
      "20" : {
        "Text" : "# if the package was not found, but a version was given, add that to the output:\n",
        "Line" : 345,
        "CharPositionInLine" : 6
      },
      "21" : {
        "Text" : "# print the result:\n",
        "Line" : 366,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 22
    },
    "cmake/Modules/FindPackageMessage.cmake" : {
      "ObjectId" : "6821cee4f77a9d84c74f2c140870a2163ae5a5f0",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Distributed under the OSI-approved BSD 3-Clause License.  See accompanying\n\n# file Copyright.txt or https://cmake.org/licensing for details.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#.rst:\n\n# FindPackageMessage\n\n# ------------------\n\n#\n\n#\n\n#\n\n# FIND_PACKAGE_MESSAGE(<name> \"message for user\" \"find result details\")\n\n#\n\n# This macro is intended to be used in FindXXX.cmake modules files.  It\n\n# will print a message once for each unique find result.  This is useful\n\n# for telling the user where a package was found.  The first argument\n\n# specifies the name (XXX) of the package.  The second argument\n\n# specifies the message to display.  The third argument lists details\n\n# about the find result so that if they change the message will be\n\n# displayed again.  The macro also obeys the QUIET argument to the\n\n# find_package command.\n\n#\n\n# Example:\n\n#\n\n# ::\n\n#\n\n#   if(X11_FOUND)\n\n#     FIND_PACKAGE_MESSAGE(X11 \"Found X11: ${X11_X11_LIB}\"\n\n#       \"[${X11_X11_LIB}][${X11_INCLUDE_DIR}]\")\n\n#   else()\n\n#    ...\n\n#   endif()\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Avoid printing a message repeatedly for the same find result.\n",
        "Line" : 33,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# The message has not yet been printed.\n",
        "Line" : 38,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Save the find details in the cache to avoid printing the same\n\n# message again.\n",
        "Line" : 41,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 5
    },
    "cmake/Modules/FindRDKit.cmake" : {
      "ObjectId" : "26f705bf6e655242ce2e79a171ae2e8e5f0eea75",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FindRDKit.cmake\n\n# Placed in the public domain by NextMove Software in 2013\n\n# Try to find RDKit headers and libraries\n\n# Defines:\n\n#\n\n#  RDKIT_FOUND - system has RDKit\n\n#  RDKIT_INCLUDE_DIR - the RDKit include directory\n\n#  RDKIT_LIBRARIES - Link these to use RDKit\n\n#\n\n# References:\n\n#  \n\n#  http://nextmovesoftware.com/blog/2013/02/04/looking-for-a-c-cheminformatics-toolkit/\n\n#  https://github.com/timvdm/MolDB/blob/master/cmake/modules/FindRDKit.cmake\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in cache already or user-specified\n",
        "Line" : 18,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#ignore default path, so search starts with above paths\n",
        "Line" : 70,
        "CharPositionInLine" : 7
      },
      "3" : {
        "Text" : "#run with default paths this time\n",
        "Line" : 74,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# Note that the order of the following libraries is significant!!\n",
        "Line" : 81,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "#jhochuli - additional libraries for gninavis\n",
        "Line" : 93,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 6
    },
    "gninasrc/CMakeLists.txt" : {
      "ObjectId" : "2798994124933b486fe1f2c37b35cbcae2ff478d",
      "LastModified" : "2019-03-06T19:32:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# need to use eigen 3.2 until CUDA fixes are released\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#lib\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#test\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# MESSAGE(STATUS \"variable is: \" ${NVCC_FLAGS_EXTRA})\n",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#cuda_add_library(gninalib_static STATIC ${LIB_SRCS} OPTIONS ${NVCC_FLAGS_EXTRA})\n\n#set_target_properties(gninalib_static PROPERTIES OUTPUT_NAME gnina)\n\n#target_link_libraries(gninalib_static caffe ${Boost_LIBRARIES} ${OPENBABEL2_LIBRARIES})\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# compile in libgnina - there are enough dependencies to deal with\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "gninasrc/gninaserver/CMakeLists.txt" : {
      "ObjectId" : "f3ad7082346bcd9414f07a49d884297fd16bf91a",
      "LastModified" : "2018-06-05T23:40:14Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 84,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 2679
}