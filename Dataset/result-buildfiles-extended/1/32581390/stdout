{
  "Repository" : "32581390",
  "Revision" : "HEAD",
  "ObjectId" : "adc22e7f0d2ed4e1663f41a4646b5f3829976161",
  "CommitTime" : "2019-04-12T06:26:56Z",
  "Files" : {
    "pom.xml" : {
      "ObjectId" : "e09830889be6791c6b3ce50ab3fa0a857c816c3e",
      "LastModified" : "2019-04-08T08:46:55Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " =============================================================================== ",
        "Line" : 99,
        "CharPositionInLine" : 93
      },
      "1" : {
        "Text" : " Doesn't work with guava which contains newer versions of utilities ",
        "Line" : 152,
        "CharPositionInLine" : 84
      },
      "2" : {
        "Text" : " =============================================================================== ",
        "Line" : 185,
        "CharPositionInLine" : 93
      },
      "3" : {
        "Text" : " \"release\" profiles used for deploying with fabric8 ",
        "Line" : 443,
        "CharPositionInLine" : 64
      },
      "4" : {
        "Text" : " Enable JaCoCo Test ",
        "Line" : 530,
        "CharPositionInLine" : 32
      },
      "5" : {
        "Text" : " JaCoCo runtime must be in classpath for offline mode ",
        "Line" : 539,
        "CharPositionInLine" : 70
      },
      "6" : {
        "Text" : " JaCoCo runtime must know where to dump coverage: ",
        "Line" : 580,
        "CharPositionInLine" : 74
      },
      "CommentCount" : 7
    },
    "samples/cargo-jolokia/pom.xml" : {
      "ObjectId" : "a2c589f26d9dd453d6db67b01a14956a6fd948b4",
      "LastModified" : "2019-04-08T09:10:15Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n  Integration test demo which makes some small tests for Jolokia\n\n  Call it with: 'mvn verify'\n\n  The test does the following:\n\n  * Creates a Docker data container with 'jolokia.war' and 'jolokia-it.war' as described in\n    assembly descriptor src/main/docker-assembly.xml\n  * Starts (and optionally pull) the jolokia/tomcat-7.0 container with the data container linked to it\n  * Waits until Tomcat is up (i.e. until it is reachable via an HTTP request)\n  * Runs an integration test via maven-failsafe-plugin, using rest-assured for accessing the deployed app.\n  * Prints out some version information about the container running (in order prove that's not a fake ;-)\n  * Stops and removes the containers.\n\n  ",
        "Line" : 20,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " Dependencies with their version which are referenced from the\n       src/main/docker-assembly.xml descriptor. These are the WAR files which gets\n       stored in the data docker container which then is linked into tomcat container for\n       deployment ",
        "Line" : 47,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : " Jolokia Agent ",
        "Line" : 48,
        "CharPositionInLine" : 27
      },
      "3" : {
        "Text" : " ======================================================================================  ",
        "Line" : 56,
        "CharPositionInLine" : 101
      },
      "4" : {
        "Text" : " Used for the integration tests ",
        "Line" : 57,
        "CharPositionInLine" : 44
      },
      "5" : {
        "Text" : " Port mappings: Container internal port (which must be exposed) will be\n                 dynamically mapped and this (random) port will be assigned to the maven variable\n                 ${tomcat.port}. Multiple port mapping can be specified here",
        "Line" : 93,
        "CharPositionInLine" : 80
      },
      "6" : {
        "Text" : " The plugin waits until this URL is reachable via HTTP ... ",
        "Line" : 97,
        "CharPositionInLine" : 85
      },
      "7" : {
        "Text" : " ... but at max 10 seconds ",
        "Line" : 101,
        "CharPositionInLine" : 53
      },
      "8" : {
        "Text" : " Use Tomcat 7 as server ",
        "Line" : 116,
        "CharPositionInLine" : 42
      },
      "9" : {
        "Text" : " Server specific configuration ",
        "Line" : 122,
        "CharPositionInLine" : 49
      },
      "10" : {
        "Text" : " This is the port chosen by Docker ",
        "Line" : 128,
        "CharPositionInLine" : 57
      },
      "11" : {
        "Text" : " User as configured in the Docker image ",
        "Line" : 131,
        "CharPositionInLine" : 62
      },
      "12" : {
        "Text" : " Deploy a Jolokia agent ",
        "Line" : 138,
        "CharPositionInLine" : 44
      },
      "13" : {
        "Text" : " fails-safe-plugin should be used instead of surefire so that the container gets stopped even\n           when the tests fail ",
        "Line" : 162,
        "CharPositionInLine" : 35
      },
      "14" : {
        "Text" : " Needs to be repeated here (the following two lines strangely doesn't work when the next line is omitted although)\n                 Maven, you little sneaky beast ... ",
        "Line" : 169,
        "CharPositionInLine" : 56
      },
      "15" : {
        "Text" : " Map maven variables to system properties which in turn can be used in the test classes ",
        "Line" : 172,
        "CharPositionInLine" : 108
      },
      "CommentCount" : 16
    },
    "samples/custom-net/pom.xml" : {
      "ObjectId" : "6f687a8ce8767d6d978def7fbe5256288a54d62a",
      "LastModified" : "2019-04-08T09:10:15Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n  Sample project for demonstrating the custom network mode\n\n  Call it with 'mvn install'.\n  It will automatically create the custom network \"test-network\" and create two automatically named containers that can\n  talk to each other via their netAlias names.\n  ",
        "Line" : 11,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 1
    },
    "samples/data-jolokia/pom.xml" : {
      "ObjectId" : "561ebf6ba0426919e1925f1ca3f6cc34eff163cf",
      "LastModified" : "2019-04-08T09:10:15Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n  Integration test demo which makes some small tests for Jolokia\n\n  Call it with: 'mvn verify'\n\n  The test does the following:\n\n  * Creates a Docker data container with 'jolokia.war' and 'jolokia-it.war' as described in\n    assembly descriptor src/main/docker-assembly.xml\n  * Starts (and optionally pull) the jolokia/tomcat-7.0 container with the data container linked to it\n  * Waits until Tomcat is up (i.e. until it is reachable via an HTTP request)\n  * Runs an integration test via maven-failsafe-plugin, using rest-assured for accessing the deployed app.\n  * Prints out some version information about the contaner running (in order prove that's not a fake ;-)\n  * Stops and removes the containers.\n\n  ",
        "Line" : 20,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " add custom lifecycle ",
        "Line" : 31,
        "CharPositionInLine" : 32
      },
      "2" : {
        "Text" : " Dependencies with their version which are referenced from the\n       src/main/docker-assembly.xml descriptor. These are the WAR files which gets\n       stored in the data docker container which then is linked into tomcat container for\n       deployment ",
        "Line" : 49,
        "CharPositionInLine" : 22
      },
      "3" : {
        "Text" : " Jolokia Agent ",
        "Line" : 50,
        "CharPositionInLine" : 27
      },
      "4" : {
        "Text" : " Jolokia Integration Test Setup (registers some Test MBeans) ",
        "Line" : 57,
        "CharPositionInLine" : 73
      },
      "5" : {
        "Text" : " ======================================================================================  ",
        "Line" : 65,
        "CharPositionInLine" : 101
      },
      "6" : {
        "Text" : " Used for the integration tests ",
        "Line" : 66,
        "CharPositionInLine" : 44
      },
      "7" : {
        "Text" : " enables using 'docker' packaging above ",
        "Line" : 85,
        "CharPositionInLine" : 86
      },
      "8" : {
        "Text" : " Docker Image to use ",
        "Line" : 93,
        "CharPositionInLine" : 41
      },
      "9" : {
        "Text" : " App-Server Image ",
        "Line" : 95,
        "CharPositionInLine" : 40
      },
      "10" : {
        "Text" : " Base starts jolokia by default. With this, it can be disabled ",
        "Line" : 107,
        "CharPositionInLine" : 89
      },
      "11" : {
        "Text" : " Port mappings: Container internal port (which must be exposed) will be\n                 dynamically mapped and this (random) port will be assigned to the maven variable\n                 ${jolokia.port}. Multiple port mappings can be specified here",
        "Line" : 115,
        "CharPositionInLine" : 82
      },
      "12" : {
        "Text" : " The plugin waits until this URL is reachable via HTTP ... ",
        "Line" : 119,
        "CharPositionInLine" : 85
      },
      "13" : {
        "Text" : " Artifact Image",
        "Line" : 153,
        "CharPositionInLine" : 37
      },
      "14" : {
        "Text" : " The assembly descriptor prepares the \"/maven\" directory in the temporary data\n                   container which will be made available to the specified container. The startup script in the\n                   container (fabric8/tomcat-8) should check for files in this directory and use them\n                   for deploying them. I.e. this image has a script 'deploy-and-run.sh' which exactly\n                   does this. ",
        "Line" : 163,
        "CharPositionInLine" : 34
      },
      "15" : {
        "Text" : " fails-safe-plugin should be used instead of surefire so that the container gets stopped even\n           when the tests fail ",
        "Line" : 182,
        "CharPositionInLine" : 35
      },
      "16" : {
        "Text" : " Needs to be repeated here (the following two lines strangely doesn't work when the next line is omitted although)\n                 Maven, you little sneaky beast ... ",
        "Line" : 189,
        "CharPositionInLine" : 56
      },
      "17" : {
        "Text" : " Map maven variables to system properties which in turn can be used in the test classes ",
        "Line" : 192,
        "CharPositionInLine" : 108
      },
      "18" : {
        "Text" : " Artifact Image",
        "Line" : 242,
        "CharPositionInLine" : 41
      },
      "19" : {
        "Text" : " Port mappings: Container internal port (which must be exposed) will be\n                         dynamically mapped and this (random) port will be assigned to the maven variable\n                         ${tomcat.port}. Multiple port mapping can be specified here",
        "Line" : 263,
        "CharPositionInLine" : 88
      },
      "20" : {
        "Text" : " The plugin waits until this URL is reachable via HTTP ... ",
        "Line" : 270,
        "CharPositionInLine" : 89
      },
      "21" : {
        "Text" : " Artifact Image",
        "Line" : 305,
        "CharPositionInLine" : 41
      },
      "22" : {
        "Text" : " The plugin waits until this URL is reachable via HTTP ... ",
        "Line" : 341,
        "CharPositionInLine" : 89
      },
      "23" : {
        "Text" : " Artifact Image",
        "Line" : 371,
        "CharPositionInLine" : 41
      },
      "24" : {
        "Text" : " The plugin waits until this URL is reachable via HTTP ... ",
        "Line" : 385,
        "CharPositionInLine" : 89
      },
      "25" : {
        "Text" : " Artifact Image",
        "Line" : 443,
        "CharPositionInLine" : 41
      },
      "26" : {
        "Text" : " The plugin waits until this URL is reachable via HTTP ... ",
        "Line" : 458,
        "CharPositionInLine" : 89
      },
      "CommentCount" : 27
    },
    "samples/docker-compose/pom.xml" : {
      "ObjectId" : "a3c5fe98a862d64aebebaf59384fe4e9ac680599",
      "LastModified" : "2019-04-08T09:10:15Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n  Integration test demo which makes some small tests for Jolokia\n\n  Call it with: 'mvn verify'\n\n  The test does the following:\n\n  * Creates a Docker data container with 'jolokia.war' and 'jolokia-it.war' as described in\n    assembly descriptor src/main/docker-assembly.xml\n  * Starts (and optionally pull) the jolokia/tomcat-7.0 container with the data container linked to it\n  * Waits until Tomcat is up (i.e. until it is reachable via an HTTP request)\n  * Runs an integration test via maven-failsafe-plugin, using rest-assured for accessing the deployed app.\n  * Prints out some version information about the contaner running (in order prove that's not a fake ;-)\n  * Stops and removes the containers.\n\n  ",
        "Line" : 20,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " Data image containing jolokia.war ",
        "Line" : 56,
        "CharPositionInLine" : 57
      },
      "2" : {
        "Text" : " <build> the image",
        "Line" : 58,
        "CharPositionInLine" : 40
      },
      "3" : {
        "Text" : " The <run> part is taken from compose ",
        "Line" : 75,
        "CharPositionInLine" : 60
      },
      "CommentCount" : 4
    },
    "samples/dockerfile/pom.xml" : {
      "ObjectId" : "858e2edca4ab7b3b6ca64f0d929f69679713e98a",
      "LastModified" : "2019-04-08T09:10:15Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n  Simple sample program including Java code.\n\n  This helloworld exactly has been taken over mostly from https://github.com/arun-gupta/docker-java-sample.git\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : " filter>@</filter",
        "Line" : 60,
        "CharPositionInLine" : 41
      },
      "CommentCount" : 2
    },
    "samples/dockerignore/pom.xml" : {
      "ObjectId" : "6ffd3e2cc1a921ad5ab8c701c4c22cbddf9d2b45",
      "LastModified" : "2019-04-08T09:10:15Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n  Sample project for showing a vanilla Dockerfile\n  usage from the top-level directory\n  ",
        "Line" : 8,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 1
    },
    "samples/healthcheck/pom.xml" : {
      "ObjectId" : "75e2ff7d0e7fdf7edd37c570d9a330a20fb90903",
      "LastModified" : "2019-04-08T09:10:15Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n  Sample project for demonstrating the health check feature\n\n  Call it with 'mvn install'.\n\n  ",
        "Line" : 10,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 1
    },
    "samples/helloworld/pom.xml" : {
      "ObjectId" : "418c27b6609d102e6def1ba423bcf75c55d77d01",
      "LastModified" : "2019-04-08T09:10:15Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n  Simple sample program including Java code.\n\n  This helloworld exactly has been taken over mostly from https://github.com/arun-gupta/docker-java-sample.git\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "samples/log/pom.xml" : {
      "ObjectId" : "536d72b6dce86ff9049c3ef9c0023d46bbb489d4",
      "LastModified" : "2019-04-08T09:10:15Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n  Sample project for demonstrating the custom network mode\n\n  Call it with 'mvn install'.\n  It will automatically create the custom network \"test-network\" and create two automatically named containers that can\n  talk to each other via their netAlias names.\n  ",
        "Line" : 11,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 1
    },
    "samples/multi-wait/pom.xml" : {
      "ObjectId" : "d519fa223cc3fe645e23479acd9c09841e16adf0",
      "LastModified" : "2019-04-08T09:10:15Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : " Sample exhibiting connection error described in https://github.com/fabric8io/docker-maven-plugin/issues/574 ",
        "Line" : 7,
        "CharPositionInLine" : 119
      },
      "CommentCount" : 1
    },
    "samples/net/pom.xml" : {
      "ObjectId" : "ef2a647dc169f9bfe82e33d8c06c412108be0400",
      "LastModified" : "2019-04-08T09:10:15Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n  Sample project for demonstrating the various network modes\n\n  Call it with 'mvn install' and one of the following profiles:\n\n  * \"container\" : Container connecting to another container's network\n  * \"bridge\"    : Bridge mode\n  * \"host\"      : Host mode\n  * \"custom\"    : Custom network 'test-network' (must be created with 'docker network create test-network' in advance)\n  ",
        "Line" : 14,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " \"box1\" connects to the network of \"box2\" which is bridged ",
        "Line" : 28,
        "CharPositionInLine" : 73
      },
      "2" : {
        "Text" : " Both images in \"bridge\" mode ",
        "Line" : 38,
        "CharPositionInLine" : 44
      },
      "3" : {
        "Text" : " Both images in \"host\" mode ",
        "Line" : 47,
        "CharPositionInLine" : 42
      },
      "4" : {
        "Text" : " Both images with no networking ",
        "Line" : 56,
        "CharPositionInLine" : 46
      },
      "5" : {
        "Text" : " Both images in a custom network 'test-network' which needs to be created beforehand ",
        "Line" : 65,
        "CharPositionInLine" : 99
      },
      "CommentCount" : 6
    },
    "samples/pom.xml" : {
      "ObjectId" : "7e60a5b42e076bdabd13dbeeac630216f28bf77f",
      "LastModified" : "2019-04-08T09:10:15Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n  Integration test demo which makes some small tests for Jolokia\n\n  Call it with: 'mvn verify'\n\n  The test does the following:\n\n  * Creates a Docker data container with 'jolokia.war' and 'jolokia-it.war' as described in\n    assembly descriptor src/main/docker-assembly.xml\n  * Starts (and optionally pull) the jolokia/tomcat-7.0 container with the data container linked to it\n  * Waits until Tomcat is up (i.e. until it is reachable via an HTTP request)\n  * Runs an integration test via maven-failsafe-plugin, using rest-assured for accessing the deployed app.\n  * Prints out some version information about the contaner running (in order prove that's not a fake ;-)\n  * Stops and removes the containers.\n\n  ",
        "Line" : 20,
        "CharPositionInLine" : 6
      },
      "1" : {
        "Text" : " Should this reference the outer directory as a parent pom instead?  ",
        "Line" : 29,
        "CharPositionInLine" : 79
      },
      "CommentCount" : 2
    },
    "samples/properties/pom.xml" : {
      "ObjectId" : "42e573ef50695c18955197823f739b3ab5d1fe08",
      "LastModified" : "2019-04-08T09:10:15Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n  Sample project for showing a vanilla Dockerfile\n  usage from the top-level directory\n  ",
        "Line" : 8,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 1
    },
    "samples/run-java/pom.xml" : {
      "ObjectId" : "20740e9fda90f440513a75e5208d814c7f118d84",
      "LastModified" : "2019-04-08T09:10:15Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "samples/smallest/pom.xml" : {
      "ObjectId" : "fb2f11507109b717a1c02673593f3a8ec7311aa2",
      "LastModified" : "2019-04-08T09:10:15Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    },
    "samples/volume/pom.xml" : {
      "ObjectId" : "23ce71565875626bd7637765ab0ad82569fad50c",
      "LastModified" : "2019-04-08T09:10:15Z",
      "FileType" : "MAVEN",
      "0" : {
        "Text" : "\n  Sample project for demonstrating the volume creation feature\n\n\n  Call it with 'mvn docker:create-volume'.\n  or\n  Call it with 'mvn docker:verify'\n  It will create the volume \"newVolume\"\n  ",
        "Line" : 13,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 1
    },
    "samples/zero-config/pom.xml" : {
      "ObjectId" : "6b7deffe7bed2a8e709386c834fc2fb572b80763",
      "LastModified" : "2019-04-08T09:10:15Z",
      "FileType" : "MAVEN",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "MAVEN" : 18
  },
  "ElapsedTime" : 1405
}