{
  "Repository" : "3697",
  "Revision" : "HEAD",
  "ObjectId" : "85ec647932a9c7ec3c84f12e6da8ebe935e70de8",
  "CommitTime" : "2019-04-15T19:35:24Z",
  "Files" : {
    "libdnet-stripped/Makefile.am" : {
      "ObjectId" : "1e5ffbffec39950387293b1eb65d49eeb925b9c3",
      "LastModified" : "2009-08-06T21:45:19Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## $Id: Makefile.am 618 2006-01-15 06:42:19Z dugsong $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libdnet-stripped/include/Makefile.am" : {
      "ObjectId" : "e8b43358bb39e60c716c9d0a31e1d2c357d113e0",
      "LastModified" : "2008-09-19T06:12:25Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## $Id: Makefile.am 294 2002-02-20 19:05:08Z dugsong $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libdnet-stripped/include/dnet/Makefile.am" : {
      "ObjectId" : "3ff1070f939764d6461237be8fe5e7418681eb3f",
      "LastModified" : "2009-08-06T21:45:19Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## $Id: Makefile.am 525 2004-09-10 02:35:51Z dugsong $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "libdnet-stripped/src/Makefile.am" : {
      "ObjectId" : "2f14d98c3c62435bcf1f1b2f75528e2230ce35ce",
      "LastModified" : "2008-09-19T06:12:25Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "## $Id: Makefile.am 625 2006-01-19 06:11:01Z dugsong $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "liblinear/Makefile" : {
      "ObjectId" : "40af81a6702208c06e7061e2e0c15a27da5bfd45",
      "LastModified" : "2011-09-23T21:15:09Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#LIBS = -lblas\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "liblinear/blas/Makefile" : {
      "ObjectId" : "255d574d5d6cab4ce7ca8f597c5f8b51bdb15db5",
      "LastModified" : "2012-01-08T21:21:22Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "liblua/Makefile" : {
      "ObjectId" : "64c78f775ba0eddb6e3a98c74bfebb2252f382ac",
      "LastModified" : "2018-10-17T00:30:14Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Makefile for building Lua\n\n# See ../doc/readme.html for installation and customization instructions.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# == CHANGE THE SETTINGS BELOW TO SUIT YOUR ENVIRONMENT =======================\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Your platform. See PLATS for possible values.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# == END OF USER SETTINGS -- NO NEED TO CHANGE ANYTHING BELOW THIS LINE =======\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Targets start here.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Convenience targets for popular platforms\n",
        "Line" : 84,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# list targets that do not create files (but not all makes understand .PHONY)\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# DO NOT DELETE\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# (end of Makefile)\n",
        "Line" : 197,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "libpcap/CMakeLists.txt" : {
      "ObjectId" : "905ba61aaee76530cc1f8a606e322d7686855431",
      "LastModified" : "2019-03-30T03:24:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Apple doesn't build with an install_name starting with @rpath, and\n\n# neither do we with autotools; don't do so with CMake, either, and\n\n# suppress warnings about that.\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#\n\n# Try to enable as many C99 features as we can.\n\n# At minimum, we want C++/C99-style // comments.\n\n#\n\n# Newer versions of compilers might default to supporting C99, but older\n\n# versions may require a special flag.\n\n#\n\n# Prior to CMake 3.1, setting CMAKE_C_STANDARD will not have any effect,\n\n# so, unless and until we require CMake 3.1 or later, we have to do it\n\n# ourselves on pre-3.1 CMake, so we just do it ourselves on all versions\n\n# of CMake.\n\n#\n\n# Note: with CMake 3.1 through 3.5, the only compilers for which CMake\n\n# handles CMAKE_C_STANDARD are GCC and Clang.  3.6 adds support only\n\n# for Intel C; 3.9 adds support for PGI C, Sun C, and IBM XL C, and\n\n# 3.10 adds support for Cray C and IAR C, but no version of CMake has\n\n# support for HP C.  Therefore, even if we use CMAKE_C_STANDARD with\n\n# compilers for which CMake supports it, we may still have to do it\n\n# ourselves on other compilers.\n\n#\n\n# See the CMake documentation for the CMAKE_<LANG>_COMPILER_ID variables\n\n# for a list of compiler IDs.\n\n#\n\n# We don't worry about MSVC; it doesn't have such a flag - either it\n\n# doesn't support the C99 features we need at all, or it supports them\n\n# regardless of the compiler flag.\n\n#\n\n# XXX - this just tests whether the option works and adds it if it does.\n\n# We don't test whether it's necessary in order to get the C99 features\n\n# that we use; if we ever have a user who tries to compile with a compiler\n\n# that can't be made to support those features, we can add a test to make\n\n# sure we actually *have* C99 support.\n\n#\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# We want support for extensions picked up for GNU C compatibility,\n\n# so we use -qlanglvl=extc99.\n\n#\n",
        "Line" : 65,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "#\n\n# Build all runtimes in the top-level binary directory; that way,\n\n# on Windows, the executables will be in the same directory as\n\n# the DLLs, so the system will find pcap.dll when any of the\n\n# executables are run.\n\n#\n",
        "Line" : 78,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "###################################################################\n\n#   Parameters\n\n###################################################################\n",
        "Line" : 86,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#\n\n# On Windows, allow the library name to be overridden, for the\n\n# benefit of projects that combine libpcap with their own\n\n# kernel-mode code to support capturing.\n\n#\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#\n\n# On UN*X, it's always been libpcap.\n\n#\n",
        "Line" : 98,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# To pacify those who hate the protochain instruction\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#\n\n# Start out with the capture mechanism type unspecified; the user\n\n# can explicitly specify it and, if they don't, we'll pick an\n\n# appropriate one.\n\n#\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#\n\n# Default to having remote capture support on Windows and, for now, to\n\n# not having it on UN*X.\n\n#\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#\n\n# By default, build universal with the appropriate set of architectures\n\n# for the OS on which we're doing the build.\n\n#\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#\n\n# Get the major version of Darwin.\n\n#\n",
        "Line" : 143,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "#\n\n# Pre-Tiger.  Build only for 32-bit PowerPC.\n\n#\n",
        "Line" : 149,
        "CharPositionInLine" : 8
      },
      "13" : {
        "Text" : "#\n\n# Tiger.  Is this prior to, or with, Intel support?\n\n#\n\n# Get the minor version of Darwin.\n\n#\n",
        "Line" : 154,
        "CharPositionInLine" : 8
      },
      "14" : {
        "Text" : "#\n\n# Prior to Intel support.  Build for 32-bit\n\n# PowerPC and 64-bit PowerPC, with 32-bit PowerPC\n\n# first.  (I'm guessing that's what Apple does.)\n\n#\n",
        "Line" : 162,
        "CharPositionInLine" : 12
      },
      "15" : {
        "Text" : "#\n\n# With Intel support but prior to x86-64 support.\n\n# Build for 32-bit PowerPC, 64-bit PowerPC, and x86,\n\n# with 32-bit PowerPC first.\n\n# (I'm guessing that's what Apple does.)\n\n#\n",
        "Line" : 169,
        "CharPositionInLine" : 12
      },
      "16" : {
        "Text" : "#\n\n# With Intel support including x86-64 support.\n\n# Build for 32-bit PowerPC, 64-bit PowerPC, x86,\n\n# and x86-64, with 32-bit PowerPC first.\n\n# (I'm guessing that's what Apple does.)\n\n#\n",
        "Line" : 177,
        "CharPositionInLine" : 12
      },
      "17" : {
        "Text" : "#\n\n# Leopard.  Build for 32-bit PowerPC, 64-bit\n\n# PowerPC, x86, and x86-64, with 32-bit PowerPC\n\n# first.  (That's what Apple does.)\n\n#\n",
        "Line" : 186,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "#\n\n# Snow Leopard.  Build for x86-64, x86, and\n\n# 32-bit PowerPC, with x86-64 first.  (That's\n\n# what Apple does, even though Snow Leopard\n\n# doesn't run on PPC, so PPC libpcap runs under\n\n# Rosetta, and Rosetta doesn't support BPF\n\n# ioctls, so PPC programs can't do live\n\n# captures.)\n\n#\n",
        "Line" : 193,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "#\n\n# Post-Snow Leopard.  Build for x86-64 and\n\n# x86, with x86-64 first.  (That's probably what\n\n# Apple does, given that Rosetta is gone.)\n\n# XXX - update if and when Apple drops support\n\n# for 32-bit x86 code.\n\n#\n",
        "Line" : 204,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "#\n\n# Additional capture modules.\n\n#\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#\n\n# We don't support D-Bus sniffing on macOS; see\n\n#\n\n# https://bugs.freedesktop.org/show_bug.cgi?id=74029\n\n#\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "#\n\n# Debugging options.\n\n#\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "###################################################################\n\n#   Versioning\n\n###################################################################\n",
        "Line" : 248,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Get, parse, format and set pcap's version string from [pcap_root]/VERSION\n\n# for later use.\n",
        "Line" : 252,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Get MAJOR, MINOR, PATCH & SUFFIX\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Read only the first line\n",
        "Line" : 258,
        "CharPositionInLine" : 18
      },
      "27" : {
        "Text" : "# Get \"just\" MAJOR\n",
        "Line" : 261,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Get MAJOR, MINOR & PATCH\n",
        "Line" : 264,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Convert PCAP_VERSION_NOSUFFIX to Windows preferred version format\n",
        "Line" : 268,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Append NANO (used for Windows internal versioning) to PCAP_VERSION_PREDLL\n\n# 0 means unused.\n",
        "Line" : 271,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "######################################\n\n# Project settings\n\n######################################\n",
        "Line" : 279,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#\n\n# Check whether we have the NPcap PacketIsLoopbackAdapter()\n\n# function.\n\n#\n",
        "Line" : 303,
        "CharPositionInLine" : 8
      },
      "33" : {
        "Text" : "###################################################################\n\n#   Detect available platform features\n\n###################################################################\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#\n\n# Header files.\n\n#\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#\n\n# Check for various PF actions.\n\n#\n",
        "Line" : 366,
        "CharPositionInLine" : 8
      },
      "36" : {
        "Text" : "#\n\n# linux/if_bonding.h requires sys/socket.h.\n\n#\n",
        "Line" : 386,
        "CharPositionInLine" : 8
      },
      "37" : {
        "Text" : "#\n\n# Functions.\n\n#\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#\n\n# These tests are for network applications that need socket functions\n\n# and getaddrinfo()/getnameinfo()-ish functions.  We now require\n\n# getaddrinfo() and getnameinfo().  On UN*X systems, we also prefer\n\n# versions of recvmsg() that conform to the Single UNIX Specification,\n\n# so that we can check whether a datagram received with recvmsg() was\n\n# truncated when received due to the buffer being too small.\n\n#\n\n# On Windows, getaddrinfo() is in the ws2_32 library.\n",
        "Line" : 405,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# On most UN*X systems, they're available in the system library.\n\n#\n\n# Under Solaris, we need to link with libsocket and libnsl to get\n\n# getaddrinfo() and getnameinfo() and, if we have libxnet, we need to\n\n# link with libxnet before libsocket to get a version of recvmsg()\n\n# that conforms to the Single UNIX Specification.\n\n#\n\n# We use getaddrinfo() because we want a portable thread-safe way\n\n# of getting information for a host name or port; there exist _r\n\n# versions of gethostbyname() and getservbyname() on some platforms,\n\n# but not on all platforms.\n\n#\n\n# NOTE: if you hand check_library_exists as its last argument a variable\n\n# that's been set, it skips the test, so we need different variables.\n\n#\n",
        "Line" : 415,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "#\n\n# We need winsock2.h and ws2tcpip.h.\n\n#\n",
        "Line" : 434,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "#\n\n# UN*X.  First try the system libraries, then try the libraries\n\n# for Solaris and possibly other systems that picked up the\n\n# System V library split.\n\n#\n",
        "Line" : 447,
        "CharPositionInLine" : 4
      },
      "42" : {
        "Text" : "#\n\n# Not found in the standard system libraries.\n\n# Try libsocket, which requires libnsl.\n\n#\n",
        "Line" : 454,
        "CharPositionInLine" : 8
      },
      "43" : {
        "Text" : "#\n\n# OK, we found it in libsocket.\n\n#\n",
        "Line" : 463,
        "CharPositionInLine" : 12
      },
      "44" : {
        "Text" : "#\n\n# We didn't find it.\n\n#\n",
        "Line" : 468,
        "CharPositionInLine" : 12
      },
      "45" : {
        "Text" : "#\n\n# OK, do we have recvmsg() in libxnet?\n\n# We also link with libsocket and libnsl.\n\n#\n",
        "Line" : 474,
        "CharPositionInLine" : 8
      },
      "46" : {
        "Text" : "#\n\n# Yes - link with it as well.\n\n#\n",
        "Line" : 483,
        "CharPositionInLine" : 12
      },
      "47" : {
        "Text" : "# DLPI needs putmsg under HPUX so test for -lstr while we're at it\n",
        "Line" : 490,
        "CharPositionInLine" : 4
      },
      "48" : {
        "Text" : "#\n\n# Check for reentrant versions of getnetbyname_r(), as provided by\n\n# Linux (glibc), Solaris/IRIX, and AIX (with three different APIs!).\n\n# If we don't find one, we just use getnetbyname(), which uses\n\n# thread-specific data on many platforms, but doesn't use it on\n\n# NetBSD or OpenBSD, and may not use it on older versions of other\n\n# platforms.\n\n#\n\n# Only do the check if we have a declaration of getnetbyname_r();\n\n# without it, we can't check which API it has.  (We assume that\n\n# if there's a declaration, it has a prototype, so that the API\n\n# can be checked.)\n\n#\n",
        "Line" : 500,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "#\n\n# Check for reentrant versions of getprotobyname_r(), as provided by\n\n# Linux (glibc), Solaris/IRIX, and AIX (with three different APIs!).\n\n# If we don't find one, we just use getprotobyname(), which uses\n\n# thread-specific data on many platforms, but doesn't use it on\n\n# NetBSD or OpenBSD, and may not use it on older versions of other\n\n# platforms.\n\n#\n\n# Only do the check if we have a declaration of getprotobyname_r();\n\n# without it, we can't check which API it has.  (We assume that\n\n# if there's a declaration, it has a prototype, so that the API\n\n# can be checked.)\n\n#\n",
        "Line" : 565,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "#\n\n# Data types.\n\n#\n\n# XXX - there's no check_type() macro that's like check_type_size()\n\n# except that it only checks for the existence of the structure type,\n\n# so we use check_type_size() and ignore the size.\n\n#\n",
        "Line" : 629,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "#\n\n# Structure fields.\n\n#\n",
        "Line" : 646,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "#\n\n# Do we have ffs(), and is it declared in <strings.h>?\n\n#\n",
        "Line" : 655,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "#\n\n# OK, we have ffs().  Is it declared in <strings.h>?\n\n#\n\n# This test fails if we don't have <strings.h> or if we do\n\n# but it doesn't declare ffs().\n\n#\n",
        "Line" : 660,
        "CharPositionInLine" : 4
      },
      "54" : {
        "Text" : "#\n\n# This requires the libraries that we require, as ether_hostton might be\n\n# in one of those libraries.  That means we have to do this after\n\n# we check for those libraries.\n\n#\n\n# You are in a twisty little maze of UN*Xes, all different.\n\n# Some might not have ether_hostton().\n\n# Some might have it and declare it in <net/ethernet.h>.\n\n# Some might have it and declare it in <netinet/ether.h>\n\n# Some might have it and declare it in <sys/ethernet.h>.\n\n# Some might have it and declare it in <arpa/inet.h>.\n\n# Some might have it and declare it in <netinet/if_ether.h>.\n\n# Some might have it and not declare it in any header file.\n\n#\n\n# Before you is a C compiler.\n\n#\n",
        "Line" : 669,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "#\n\n# OK, we have ether_hostton().  Is it declared in <net/ethernet.h>?\n\n#\n\n# This test fails if we don't have <net/ethernet.h> or if we do\n\n# but it doesn't declare ether_hostton().\n\n#\n",
        "Line" : 689,
        "CharPositionInLine" : 4
      },
      "56" : {
        "Text" : "#\n\n# Yes - we have it declared.\n\n#\n",
        "Line" : 697,
        "CharPositionInLine" : 8
      },
      "57" : {
        "Text" : "#\n\n# Did that succeed?\n\n#\n",
        "Line" : 702,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "#\n\n# No - how about <netinet/ether.h>, as on Linux?\n\n#\n\n# This test fails if we don't have <netinet/ether.h>\n\n# or if we do but it doesn't declare ether_hostton().\n\n#\n",
        "Line" : 706,
        "CharPositionInLine" : 8
      },
      "59" : {
        "Text" : "#\n\n# Yes - we have it declared.\n\n#\n",
        "Line" : 714,
        "CharPositionInLine" : 12
      },
      "60" : {
        "Text" : "#\n\n# Did that succeed?\n\n#\n",
        "Line" : 720,
        "CharPositionInLine" : 4
      },
      "61" : {
        "Text" : "#\n\n# No - how about <sys/ethernet.h>, as on Solaris 10 and later?\n\n#\n\n# This test fails if we don't have <sys/ethernet.h>\n\n# or if we do but it doesn't declare ether_hostton().\n\n#\n",
        "Line" : 724,
        "CharPositionInLine" : 8
      },
      "62" : {
        "Text" : "#\n\n# Yes - we have it declared.\n\n#\n",
        "Line" : 732,
        "CharPositionInLine" : 12
      },
      "63" : {
        "Text" : "#\n\n# Did that succeed?\n\n#\n",
        "Line" : 738,
        "CharPositionInLine" : 4
      },
      "64" : {
        "Text" : "#\n\n# No, how about <arpa/inet.h>, as on AIX?\n\n#\n\n# This test fails if we don't have <arpa/inet.h>\n\n# or if we do but it doesn't declare ether_hostton().\n\n#\n",
        "Line" : 742,
        "CharPositionInLine" : 8
      },
      "65" : {
        "Text" : "#\n\n# Yes - we have it declared.\n\n#\n",
        "Line" : 750,
        "CharPositionInLine" : 12
      },
      "66" : {
        "Text" : "#\n\n# Did that succeed?\n\n#\n",
        "Line" : 756,
        "CharPositionInLine" : 4
      },
      "67" : {
        "Text" : "#\n\n# No, how about <netinet/if_ether.h>?\n\n# On some platforms, it requires <net/if.h> and\n\n# <netinet/in.h>, and we always include it with\n\n# both of them, so test it with both of them.\n\n#\n\n# This test fails if we don't have <netinet/if_ether.h>\n\n# and the headers we include before it, or if we do but\n\n# <netinet/if_ether.h> doesn't declare ether_hostton().\n\n#\n",
        "Line" : 760,
        "CharPositionInLine" : 8
      },
      "68" : {
        "Text" : "#\n\n# Yes - we have it declared.\n\n#\n",
        "Line" : 772,
        "CharPositionInLine" : 12
      },
      "69" : {
        "Text" : "#\n\n# After all that, is ether_hostton() declared?\n\n#\n",
        "Line" : 778,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "#\n\n# No, we'll have to declare it ourselves.\n\n# Do we have \"struct ether_addr\" if we include <netinet/if_ether.h>?\n\n#\n\n# XXX - there's no check_type() macro that's like check_type_size()\n\n# except that it only checks for the existence of the structure type,\n\n# so we use check_type_size() and ignore the size.\n\n#\n",
        "Line" : 782,
        "CharPositionInLine" : 8
      },
      "71" : {
        "Text" : "#\n\n# Large file support on UN*X, a/k/a LFS.\n\n#\n",
        "Line" : 798,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "#\n\n# Add the required #defines.\n\n#\n",
        "Line" : 804,
        "CharPositionInLine" : 4
      },
      "73" : {
        "Text" : "#\n\n# Check for fseeko as well.\n\n#\n",
        "Line" : 810,
        "CharPositionInLine" : 2
      },
      "74" : {
        "Text" : "#\n\n# Add the required #defines.\n\n#\n",
        "Line" : 817,
        "CharPositionInLine" : 4
      },
      "75" : {
        "Text" : "#\n\n# Pthreads.\n\n# We might need them, because some libraries we use might use them,\n\n# but we don't necessarily need them.\n\n# That's only on UN*X; on Windows, if they use threads, we assume\n\n# they're native Windows threads.\n\n#\n",
        "Line" : 828,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "#\n\n# If it's not pthreads, we won't use it; we use it for libraries\n\n# that require it.\n\n#\n",
        "Line" : 839,
        "CharPositionInLine" : 4
      },
      "77" : {
        "Text" : "######################################\n\n# Input files\n\n######################################\n",
        "Line" : 847,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "#\n\n# Determine the main pcap-XXX.c file to use, and the libraries with\n\n# which we need to link libpcap, if any.\n\n#\n",
        "Line" : 878,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "#\n\n# Windows.\n\n#\n\n# Has the user explicitly specified a capture type?\n\n#\n",
        "Line" : 883,
        "CharPositionInLine" : 4
      },
      "80" : {
        "Text" : "#\n\n# The user didn't explicitly specify a capture mechanism.\n\n# Check whether we have packet.dll.\n\n#\n",
        "Line" : 889,
        "CharPositionInLine" : 8
      },
      "81" : {
        "Text" : "#\n\n# We have packet.dll.\n\n# Set the capture type to NPF.\n\n#\n",
        "Line" : 894,
        "CharPositionInLine" : 12
      },
      "82" : {
        "Text" : "#\n\n# We don't have any capture type we know about, so just use\n\n# the null capture type, and only support reading (and writing)\n\n# capture files.\n\n#\n",
        "Line" : 900,
        "CharPositionInLine" : 12
      },
      "83" : {
        "Text" : "#\n\n# UN*X.\n\n#\n\n# Figure out what type of packet capture mechanism we have, and\n\n# what libraries we'd need to link libpcap with, if any.\n\n#\n",
        "Line" : 909,
        "CharPositionInLine" : 4
      },
      "84" : {
        "Text" : "#\n\n# Has the user explicitly specified a capture type?\n\n#\n",
        "Line" : 916,
        "CharPositionInLine" : 4
      },
      "85" : {
        "Text" : "#\n\n# Check for a bunch of headers for various packet capture mechanisms.\n\n#\n",
        "Line" : 920,
        "CharPositionInLine" : 8
      },
      "86" : {
        "Text" : "#\n\n# Does it define BIOCSETIF?\n\n# I.e., is it a header for an LBL/BSD-style capture\n\n# mechanism, or is it just a header for a BPF filter\n\n# engine?  Some versions of Arch Linux, for example,\n\n# have a net/bpf.h that doesn't define BIOCSETIF;\n\n# as it's a Linux, it should use packet sockets,\n\n# instead.\n\n#\n\n#\n\n# We need:\n\n#\n\n#  sys/types.h, because FreeBSD 10's net/bpf.h\n\n#  requires that various BSD-style integer types\n\n#  be defined;\n\n#\n\n#  sys/ioctl.h and, if we have it, sys/ioccom.h,\n\n#  because net/bpf.h defines ioctls;\n\n#\n\n#  net/if.h, because it defines some structures\n\n#  used in ioctls defined by net/bpf.h;\n\n#\n\n#  sys/socket.h, because OpenBSD 5.9's net/bpf.h\n\n#  defines some structure fields as being\n\n#  struct sockaddrs;\n\n#\n\n# and net/bpf.h doesn't necessarily include all\n\n# of those headers itself.\n\n#\n",
        "Line" : 925,
        "CharPositionInLine" : 12
      },
      "87" : {
        "Text" : "#\n\n# BPF.\n\n# Check this before DLPI, so that we pick BPF on\n\n# Solaris 11 and later.\n\n#\n",
        "Line" : 969,
        "CharPositionInLine" : 12
      },
      "88" : {
        "Text" : "#\n\n# No prizes for guessing this one.\n\n#\n",
        "Line" : 976,
        "CharPositionInLine" : 12
      },
      "89" : {
        "Text" : "#\n\n# DEC OSF/1, Digital UNIX, Tru64 UNIX\n\n#\n",
        "Line" : 981,
        "CharPositionInLine" : 12
      },
      "90" : {
        "Text" : "#\n\n# Stanford Enetfilter.\n\n#\n",
        "Line" : 986,
        "CharPositionInLine" : 12
      },
      "91" : {
        "Text" : "#\n\n# SunOS 4.x STREAMS NIT.\n\n#\n",
        "Line" : 991,
        "CharPositionInLine" : 12
      },
      "92" : {
        "Text" : "#\n\n# Pre-SunOS 4.x non-STREAMS NIT.\n\n#\n",
        "Line" : 996,
        "CharPositionInLine" : 12
      },
      "93" : {
        "Text" : "#\n\n# IRIX snoop.\n\n#\n",
        "Line" : 1001,
        "CharPositionInLine" : 12
      },
      "94" : {
        "Text" : "#\n\n# DLPI on pre-Solaris 11 SunOS 5, HP-UX, possibly others.\n\n#\n",
        "Line" : 1006,
        "CharPositionInLine" : 12
      },
      "95" : {
        "Text" : "#\n\n# Nothing we support.\n\n#\n",
        "Line" : 1011,
        "CharPositionInLine" : 12
      },
      "96" : {
        "Text" : "#\n\n# Do capture-mechanism-dependent tests.\n\n#\n",
        "Line" : 1020,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "#\n\n# Link with packet.dll before WinSock2.\n\n#\n",
        "Line" : 1025,
        "CharPositionInLine" : 8
      },
      "98" : {
        "Text" : "#\n\n# Needed for common functions used by pcap-[dlpi,libdlpi].c\n\n#\n",
        "Line" : 1035,
        "CharPositionInLine" : 8
      },
      "99" : {
        "Text" : "#\n\n# Checks for some header files.\n\n#\n",
        "Line" : 1040,
        "CharPositionInLine" : 8
      },
      "100" : {
        "Text" : "#\n\n# Checks to see if Solaris has the public libdlpi(3LIB) library.\n\n# Note: The existence of /usr/include/libdlpi.h does not mean it is the\n\n# public libdlpi(3LIB) version. Before libdlpi was made public, a\n\n# private version also existed, which did not have the same APIs.\n\n# Due to a gcc bug, the default search path for 32-bit libraries does\n\n# not include /lib, we add it explicitly here.\n\n# [http://bugs.opensolaris.org/view_bug.do?bug_id=6619485].\n\n# Also, due to the bug above applications that link to libpcap with\n\n# libdlpi will have to add \"-L/lib\" option to \"configure\".\n\n#\n",
        "Line" : 1046,
        "CharPositionInLine" : 8
      },
      "101" : {
        "Text" : "#\n\n# XXX - add -L/lib\n\n#\n",
        "Line" : 1063,
        "CharPositionInLine" : 12
      },
      "102" : {
        "Text" : "#\n\n# This check is for Solaris with DLPI support for passive modes.\n\n# See dlpi(7P) for more details.\n\n#\n\n# XXX - there's no check_type() macro that's like check_type_size()\n\n# except that it only checks for the existence of the structure type,\n\n# so we use check_type_size() and ignore the size.\n\n#\n",
        "Line" : 1070,
        "CharPositionInLine" : 8
      },
      "103" : {
        "Text" : "#\n\n# Do we have the wireless extensions?\n\n# linux/wireless.h requires sys/socket.h.\n\n#\n",
        "Line" : 1083,
        "CharPositionInLine" : 8
      },
      "104" : {
        "Text" : "#\n\n# Do we have libnl?\n\n#\n",
        "Line" : 1089,
        "CharPositionInLine" : 8
      },
      "105" : {
        "Text" : "#\n\n# Try libnl 3.x first.\n\n#\n",
        "Line" : 1093,
        "CharPositionInLine" : 12
      },
      "106" : {
        "Text" : "#\n\n# Yes, we have libnl 3.x.\n\n#\n",
        "Line" : 1101,
        "CharPositionInLine" : 16
      },
      "107" : {
        "Text" : "#\n\n# Try libnl 2.x.\n\n#\n",
        "Line" : 1110,
        "CharPositionInLine" : 16
      },
      "108" : {
        "Text" : "#\n\n# Yes, we have libnl 2.x.\n\n#\n",
        "Line" : 1118,
        "CharPositionInLine" : 20
      },
      "109" : {
        "Text" : "#\n\n# No, we don't; do we have libnl 1.x?\n\n#\n",
        "Line" : 1126,
        "CharPositionInLine" : 20
      },
      "110" : {
        "Text" : "#\n\n# Checks to see if tpacket_stats is defined in linux/if_packet.h\n\n# If so then pcap-linux.c can use this to report proper statistics.\n\n#\n\n# XXX - there's no check_type() macro that's like check_type_size()\n\n# except that it only checks for the existence of the structure type,\n\n# so we use check_type_size() and ignore the size.\n\n#\n",
        "Line" : 1142,
        "CharPositionInLine" : 8
      },
      "111" : {
        "Text" : "#\n\n# Check whether we have the *BSD-style ioctls.\n\n#\n",
        "Line" : 1157,
        "CharPositionInLine" : 8
      },
      "112" : {
        "Text" : "#\n\n# Check whether we have struct BPF_TIMEVAL.\n\n#\n\n# XXX - there's no check_type() macro that's like check_type_size()\n\n# except that it only checks for the existence of the structure type,\n\n# so we use check_type_size() and ignore the size.\n\n#\n",
        "Line" : 1162,
        "CharPositionInLine" : 8
      },
      "113" : {
        "Text" : "#\n\n# Now figure out how we get a list of interfaces and addresses,\n\n# if we support capturing.  Don't bother if we don't support\n\n# capturing.\n\n#\n",
        "Line" : 1186,
        "CharPositionInLine" : 0
      },
      "114" : {
        "Text" : "#\n\n# UN*X - figure out what type of interface list mechanism we\n\n# have.\n\n#\n\n# If the capture type is null, that means we can't capture,\n\n# so we can't open any capture devices, so we won't return\n\n# any interfaces.\n\n#\n",
        "Line" : 1192,
        "CharPositionInLine" : 4
      },
      "115" : {
        "Text" : "#\n\n# It's not in the libraries that, at this point, we've\n\n# found we need to link libpcap with.\n\n#\n\n# It's in libsocket on Solaris and possibly other OSes;\n\n# as long as we're not linking with libxnet, check there.\n\n#\n\n# NOTE: if you hand check_library_exists as its last\n\n# argument a variable that's been set, it skips the test,\n\n# so we need different variables.\n\n#\n",
        "Line" : 1206,
        "CharPositionInLine" : 12
      },
      "116" : {
        "Text" : "#\n\n# We have \"getifaddrs()\"; make sure we have <ifaddrs.h>\n\n# as well, just in case some platform is really weird.\n\n# It may require that sys/types.h be included first,\n\n# so include it first.\n\n#\n",
        "Line" : 1226,
        "CharPositionInLine" : 12
      },
      "117" : {
        "Text" : "#\n\n# We have the header, so we use \"getifaddrs()\" to\n\n# get the list of interfaces.\n\n#\n",
        "Line" : 1234,
        "CharPositionInLine" : 16
      },
      "118" : {
        "Text" : "#\n\n# We don't have the header - give up.\n\n# XXX - we could also fall back on some other\n\n# mechanism, but, for now, this'll catch this\n\n# problem so that we can at least try to figure\n\n# out something to do on systems with \"getifaddrs()\"\n\n# but without \"ifaddrs.h\", if there is something\n\n# we can do on those systems.\n\n#\n",
        "Line" : 1240,
        "CharPositionInLine" : 16
      },
      "119" : {
        "Text" : "#\n\n# Well, we don't have \"getifaddrs()\", at least not with the\n\n# libraries with which we've decided we need to link\n\n# libpcap with, so we have to use some other mechanism.\n\n#\n\n# Note that this may happen on Solaris, which has\n\n# getifaddrs(), but in -lsocket, not in -lxnet, so we\n\n# won't find it if we link with -lxnet, which we want\n\n# to do for other reasons.\n\n#\n\n# For now, we use either the SIOCGIFCONF ioctl or the\n\n# SIOCGLIFCONF ioctl, preferring the latter if we have\n\n# it; the latter is a Solarisism that first appeared\n\n# in Solaris 8.  (Solaris's getifaddrs() appears to\n\n# be built atop SIOCGLIFCONF; using it directly\n\n# avoids a not-all-that-useful middleman.)\n\n#\n",
        "Line" : 1252,
        "CharPositionInLine" : 12
      },
      "120" : {
        "Text" : "# Check for hardware timestamp support.\n",
        "Line" : 1281,
        "CharPositionInLine" : 0
      },
      "121" : {
        "Text" : "#\n\n# Check for additional native sniffing capabilities.\n\n#\n",
        "Line" : 1286,
        "CharPositionInLine" : 0
      },
      "122" : {
        "Text" : "# Check for USB sniffing support on Linux.\n\n# On FreeBSD, it uses BPF, so we don't need to do anything special here.\n",
        "Line" : 1290,
        "CharPositionInLine" : 0
      },
      "123" : {
        "Text" : "#\n\n# Do we have a version of <linux/compiler.h> available?\n\n# If so, we might need it for <linux/usbdevice_fs.h>.\n\n#\n",
        "Line" : 1297,
        "CharPositionInLine" : 8
      },
      "124" : {
        "Text" : "#\n\n# Yes - include it when testing for <linux/usbdevice_fs.h>.\n\n#\n",
        "Line" : 1303,
        "CharPositionInLine" : 12
      },
      "125" : {
        "Text" : "#\n\n# OK, does it define bRequestType?  Older versions of the kernel\n\n# define fields with names like \"requesttype, \"request\", and\n\n# \"value\", rather than \"bRequestType\", \"bRequest\", and\n\n# \"wValue\".\n\n#\n",
        "Line" : 1311,
        "CharPositionInLine" : 12
      },
      "126" : {
        "Text" : "# Check for netfilter sniffing support.\n",
        "Line" : 1326,
        "CharPositionInLine" : 0
      },
      "127" : {
        "Text" : "#\n\n# Life's too short to deal with trying to get this to compile\n\n# if you don't get the right types defined with\n\n# __KERNEL_STRICT_NAMES getting defined by some other include.\n\n#\n\n# Check whether the includes Just Work.  If not, don't turn on\n\n# netfilter support.\n\n#\n",
        "Line" : 1328,
        "CharPositionInLine" : 4
      },
      "128" : {
        "Text" : "# Check for netmap sniffing support.\n",
        "Line" : 1359,
        "CharPositionInLine" : 0
      },
      "129" : {
        "Text" : "#\n\n# Check whether net/netmap_user.h is usable if NETMAP_WITH_LIBS is\n\n# defined; it's not usable on DragonFly BSD 4.6 if NETMAP_WITH_LIBS\n\n# is defined, for example, as it includes a non-existent malloc.h\n\n# header.\n\n#\n",
        "Line" : 1361,
        "CharPositionInLine" : 4
      },
      "130" : {
        "Text" : "# Check for Bluetooth sniffing support\n",
        "Line" : 1383,
        "CharPositionInLine" : 0
      },
      "131" : {
        "Text" : "#\n\n# OK, does struct sockaddr_hci have an hci_channel\n\n# member?\n\n#\n",
        "Line" : 1390,
        "CharPositionInLine" : 12
      },
      "132" : {
        "Text" : "#\n\n# OK, is HCI_CHANNEL_MONITOR defined?\n\n#\n",
        "Line" : 1396,
        "CharPositionInLine" : 16
      },
      "133" : {
        "Text" : "#\n\n# Yes, so we can also support Bluetooth monitor\n\n# sniffing.\n\n#\n",
        "Line" : 1412,
        "CharPositionInLine" : 19
      },
      "134" : {
        "Text" : "# Check for Bluetooth sniffing support\n",
        "Line" : 1423,
        "CharPositionInLine" : 0
      },
      "135" : {
        "Text" : "#\n\n# We don't support D-Bus sniffing on macOS; see\n\n#\n\n# https://bugs.freedesktop.org/show_bug.cgi?id=74029\n\n#\n",
        "Line" : 1425,
        "CharPositionInLine" : 4
      },
      "136" : {
        "Text" : "# Check for RDMA sniffing support\n",
        "Line" : 1443,
        "CharPositionInLine" : 0
      },
      "137" : {
        "Text" : "#\n\n# Check for sniffing capabilities using third-party APIs.\n\n#\n",
        "Line" : 1458,
        "CharPositionInLine" : 0
      },
      "138" : {
        "Text" : "# Check for Endace DAG card support.\n",
        "Line" : 1462,
        "CharPositionInLine" : 0
      },
      "139" : {
        "Text" : "#\n\n# Try to find the DAG header file and library.\n\n#\n",
        "Line" : 1464,
        "CharPositionInLine" : 4
      },
      "140" : {
        "Text" : "#\n\n# Did we succeed?\n\n#\n",
        "Line" : 1469,
        "CharPositionInLine" : 4
      },
      "141" : {
        "Text" : "#\n\n# Yes.\n\n# Check for various DAG API functions.\n\n#\n",
        "Line" : 1473,
        "CharPositionInLine" : 8
      },
      "142" : {
        "Text" : "# Check for Septel card support.\n",
        "Line" : 1504,
        "CharPositionInLine" : 0
      },
      "143" : {
        "Text" : "#\n\n# Do we have the msg.h header?\n\n#\n",
        "Line" : 1507,
        "CharPositionInLine" : 4
      },
      "144" : {
        "Text" : "#\n\n# Yes.\n\n#\n",
        "Line" : 1516,
        "CharPositionInLine" : 8
      },
      "145" : {
        "Text" : "# Check for Myricom SNF support.\n",
        "Line" : 1526,
        "CharPositionInLine" : 0
      },
      "146" : {
        "Text" : "#\n\n# Try to find the SNF header file and library.\n\n#\n",
        "Line" : 1528,
        "CharPositionInLine" : 4
      },
      "147" : {
        "Text" : "#\n\n# Did we succeed?\n\n#\n",
        "Line" : 1533,
        "CharPositionInLine" : 4
      },
      "148" : {
        "Text" : "#\n\n# Yes.\n\n#\n",
        "Line" : 1537,
        "CharPositionInLine" : 8
      },
      "149" : {
        "Text" : "# Check for Riverbed TurboCap support.\n",
        "Line" : 1547,
        "CharPositionInLine" : 0
      },
      "150" : {
        "Text" : "#\n\n# Try to find the TurboCap header file and library.\n\n#\n",
        "Line" : 1549,
        "CharPositionInLine" : 4
      },
      "151" : {
        "Text" : "#\n\n# Did we succeed?\n\n#\n",
        "Line" : 1554,
        "CharPositionInLine" : 4
      },
      "152" : {
        "Text" : "#\n\n# Yes.\n\n#\n",
        "Line" : 1558,
        "CharPositionInLine" : 8
      },
      "153" : {
        "Text" : "#\n\n# Remote capture support.\n\n#\n",
        "Line" : 1568,
        "CharPositionInLine" : 0
      },
      "154" : {
        "Text" : "#\n\n# Check for various members of struct msghdr.\n\n# We need to include ftmacros.h on some platforms, to make sure we\n\n# get the POSIX/Single USER Specification version of struct msghdr,\n\n# which has those members, rather than the backwards-compatible\n\n# version, which doesn't.  That's not a system header file, and\n\n# at least some versions of CMake include it as <ftmacros.h>, which\n\n# won't check the current directory, so we add the top-level\n\n# source directory to the list of include directories when we do\n\n# the check.\n\n#\n",
        "Line" : 1573,
        "CharPositionInLine" : 4
      },
      "155" : {
        "Text" : "###################################################################\n\n#   Warning options\n\n###################################################################\n",
        "Line" : 1593,
        "CharPositionInLine" : 0
      },
      "156" : {
        "Text" : "#\n\n# Check and add warning options if we have a .devel file.\n\n#\n",
        "Line" : 1597,
        "CharPositionInLine" : 0
      },
      "157" : {
        "Text" : "#\n\n# Warning options.\n\n#\n",
        "Line" : 1601,
        "CharPositionInLine" : 4
      },
      "158" : {
        "Text" : "#\n\n# MSVC, with Microsoft's front end and code generator.\n\n# \"MSVC\" is also set for Microsoft's compiler with a Clang\n\n# front end and their code generator (\"Clang/C2\"), so we\n\n# check for clang.exe and treat that differently.\n\n#\n",
        "Line" : 1605,
        "CharPositionInLine" : 8
      },
      "159" : {
        "Text" : "#\n\n# Disable some pointless warnings that /Wall turns on.\n\n#\n\n# Unfortunately, MSVC does not appear to have an equivalent\n\n# to \"__attribute__((unused))\" to mark a particular function\n\n# parameter as being known to be unused, so that the compiler\n\n# won't warn about it (for example, the function might have\n\n# that parameter because a pointer to it is being used, and\n\n# the signature of that function includes that parameter).\n\n# C++ lets you give a parameter a type but no name, but C\n\n# doesn't have that.\n\n#\n",
        "Line" : 1612,
        "CharPositionInLine" : 8
      },
      "160" : {
        "Text" : "#\n\n# In theory, we care whether somebody uses f() rather than\n\n# f(void) to declare a function with no arguments, but, in\n\n# practice, there are places in the Windows header files\n\n# that appear to do that, so we squelch that warning.\n\n#\n",
        "Line" : 1625,
        "CharPositionInLine" : 8
      },
      "161" : {
        "Text" : "#\n\n# Windows FD_SET() generates this, so we suppress it.\n\n#\n",
        "Line" : 1632,
        "CharPositionInLine" : 8
      },
      "162" : {
        "Text" : "#\n\n# Perhaps testing something #defined to be 0 with #ifdef is an\n\n# error, and it should be tested with #if, but perhaps it's\n\n# not, and Microsoft does that in its headers, so we squelch\n\n# that warning.\n\n#\n",
        "Line" : 1636,
        "CharPositionInLine" : 8
      },
      "163" : {
        "Text" : "#\n\n# The Windows headers also test not-defined values in #if, so\n\n# we don't want warnings about that, either.\n\n#\n",
        "Line" : 1643,
        "CharPositionInLine" : 8
      },
      "164" : {
        "Text" : "#\n\n# We do *not* care whether some function is, or isn't, going to be\n\n# expanded inline.\n\n#\n",
        "Line" : 1648,
        "CharPositionInLine" : 8
      },
      "165" : {
        "Text" : "#\n\n# We do *not* care whether we're adding padding bytes after\n\n# structure members.\n\n#\n",
        "Line" : 1654,
        "CharPositionInLine" : 8
      },
      "166" : {
        "Text" : "#\n\n# Other compilers, including MSVC with a Clang front end and\n\n# Microsoft's code generator.  We currently treat them as if\n\n# they might support GCC-style -W options.\n\n#\n",
        "Line" : 1660,
        "CharPositionInLine" : 8
      },
      "167" : {
        "Text" : "# Warns about safeguards added in case the enums are extended\n\n# check_and_add_compiler_option(-Wcovered-switch-default)\n",
        "Line" : 1675,
        "CharPositionInLine" : 8
      },
      "168" : {
        "Text" : "#\n\n# Suppress some warnings we get with MSVC even without /Wall.\n\n#\n",
        "Line" : 1684,
        "CharPositionInLine" : 0
      },
      "169" : {
        "Text" : "#\n\n# Yes, we have some functions that never return but that\n\n# have a non-void return type.  That's because, on some\n\n# platforms, they *do* return values but, on other\n\n# platforms, including Windows, they just fail and\n\n# longjmp out by calling bpf_error().\n\n#\n",
        "Line" : 1688,
        "CharPositionInLine" : 4
      },
      "170" : {
        "Text" : "#\n\n# Try to have the compiler default to hiding symbols, so that only\n\n# symbols explicitly exported with PCAP_API will be visible outside\n\n# (shared) libraries.\n\n#\n\n# Not necessary with MSVC, as that's the default.\n\n#\n\n# XXX - we don't use ADD_COMPILER_EXPORT_FLAGS, because, as of CMake\n\n# 2.8.12.2, it doesn't know about Sun C/Oracle Studio, and, as of\n\n# CMake 2.8.6, it only sets the C++ compiler flags, rather than\n\n# allowing an arbitrary variable to be set with the \"hide symbols\n\n# not explicitly exported\" flag.\n\n#\n",
        "Line" : 1703,
        "CharPositionInLine" : 0
      },
      "171" : {
        "Text" : "#\n\n# Sun C/Oracle Studio.\n\n#\n",
        "Line" : 1718,
        "CharPositionInLine" : 8
      },
      "172" : {
        "Text" : "#\n\n# Try this for all other compilers; it's what GCC uses,\n\n# and a number of other compilers, such as Clang and Intel C,\n\n# use it as well.\n\n#\n",
        "Line" : 1723,
        "CharPositionInLine" : 8
      },
      "173" : {
        "Text" : "#\n\n# Flex/Lex and YACC/Berkeley YACC/Bison.\n\n# From a mail message to the CMake mailing list by Andy Cedilnik of\n\n# Kitware.\n\n#\n",
        "Line" : 1732,
        "CharPositionInLine" : 0
      },
      "174" : {
        "Text" : "#\n\n# Try to find Flex, a Windows version of Flex, or Lex.\n\n#\n",
        "Line" : 1738,
        "CharPositionInLine" : 0
      },
      "175" : {
        "Text" : "#\n\n# Since scanner.c does not exist yet when cmake is run, mark\n\n# it as generated.\n\n#\n\n# Since scanner.c includes grammar.h, mark that as a dependency.\n\n#\n",
        "Line" : 1754,
        "CharPositionInLine" : 0
      },
      "176" : {
        "Text" : "#\n\n# Add scanner.c to the list of sources.\n\n#\n\n#set(PROJECT_SOURCE_LIST_C ${PROJECT_SOURCE_LIST_C} ${CMAKE_CURRENT_BINARY_DIR}/scanner.c)\n",
        "Line" : 1765,
        "CharPositionInLine" : 0
      },
      "177" : {
        "Text" : "#\n\n# Try to find YACC or Bison.\n\n#\n",
        "Line" : 1770,
        "CharPositionInLine" : 0
      },
      "178" : {
        "Text" : "#\n\n# Create custom command for the scanner.\n\n# Find out whether it's Bison or not by looking at the last component\n\n# of the path (without a .exe extension, if this is Windows).\n\n#\n",
        "Line" : 1779,
        "CharPositionInLine" : 0
      },
      "179" : {
        "Text" : "#\n\n# Since grammar.c does not exists yet when cmake is run, mark\n\n# it as generated.\n\n#\n",
        "Line" : 1795,
        "CharPositionInLine" : 0
      },
      "180" : {
        "Text" : "#\n\n# Add grammar.c to the list of sources.\n\n#\n\n#set(PROJECT_SOURCE_LIST_C ${PROJECT_SOURCE_LIST_C} ${CMAKE_CURRENT_BINARY_DIR}/grammar.c)\n",
        "Line" : 1804,
        "CharPositionInLine" : 0
      },
      "181" : {
        "Text" : "#\n\n# Assume, by default, no support for shared libraries and V7/BSD\n\n# convention for man pages (file formats in section 5, miscellaneous\n\n# info in section 7, administrative commands and daemons in section 8).\n\n# Individual cases can override this.\n\n#\n",
        "Line" : 1809,
        "CharPositionInLine" : 0
      },
      "182" : {
        "Text" : "# Workaround to enable certain features\n",
        "Line" : 1819,
        "CharPositionInLine" : 4
      },
      "183" : {
        "Text" : "#\n\n# If we're using BPF, we need libodm and libcfg, as\n\n# we use them to load the BPF module.\n\n#\n",
        "Line" : 1822,
        "CharPositionInLine" : 8
      },
      "184" : {
        "Text" : "#\n\n# HP-UX 9.x.\n\n#\n",
        "Line" : 1830,
        "CharPositionInLine" : 8
      },
      "185" : {
        "Text" : "#\n\n# HP-UX 10.0.\n\n#\n",
        "Line" : 1835,
        "CharPositionInLine" : 8
      },
      "186" : {
        "Text" : "#\n\n# HP-UX 10.1.\n\n#\n",
        "Line" : 1839,
        "CharPositionInLine" : 8
      },
      "187" : {
        "Text" : "#\n\n# HP-UX 10.20 and later.\n\n#\n",
        "Line" : 1843,
        "CharPositionInLine" : 8
      },
      "188" : {
        "Text" : "#\n\n# Use System V conventions for man pages.\n\n#\n",
        "Line" : 1849,
        "CharPositionInLine" : 4
      },
      "189" : {
        "Text" : "#\n\n# Use IRIX conventions for man pages; they're the same as the\n\n# System V conventions, except that they use section 8 for\n\n# administrative commands and daemons.\n\n#\n",
        "Line" : 1856,
        "CharPositionInLine" : 4
      },
      "190" : {
        "Text" : "#\n\n# DEC OSF/1, a/k/a Digial UNIX, a/k/a Tru64 UNIX.\n\n# Use Tru64 UNIX conventions for man pages; they're the same as the\n\n# System V conventions except that they use section 8 for\n\n# administrative commands and daemons.\n\n#\n",
        "Line" : 1864,
        "CharPositionInLine" : 4
      },
      "191" : {
        "Text" : "#\n\n# SunOS 5.x.\n\n#\n",
        "Line" : 1873,
        "CharPositionInLine" : 4
      },
      "192" : {
        "Text" : "#\n\n# Make sure errno is thread-safe, in case we're called in\n\n# a multithreaded program.  We don't guarantee that two\n\n# threads can use the *same* pcap_t safely, but the\n\n# current version does guarantee that you can use different\n\n# pcap_t's in different threads, and even that pcap_compile()\n\n# is thread-safe (it wasn't thread-safe in some older versions).\n\n#\n",
        "Line" : 1877,
        "CharPositionInLine" : 4
      },
      "193" : {
        "Text" : "#\n\n# Use System V conventions for man pages.\n\n#\n",
        "Line" : 1889,
        "CharPositionInLine" : 8
      },
      "194" : {
        "Text" : "#\n\n# Add pcap-dll.rc to the list of sources.\n\n#\n",
        "Line" : 1902,
        "CharPositionInLine" : 4
      },
      "195" : {
        "Text" : "#\n\n# Add subdirectories after we've set various variables, so they pick up\n\n# pick up those variables.\n\n#\n",
        "Line" : 1908,
        "CharPositionInLine" : 0
      },
      "196" : {
        "Text" : "######################################\n\n# Register targets\n\n######################################\n",
        "Line" : 1917,
        "CharPositionInLine" : 0
      },
      "197" : {
        "Text" : "#\n\n# Special target to serialize the building of the generated source.\n\n#\n\n# See\n\n#\n\n#  http://public.kitware.com/pipermail/cmake/2013-August/055510.html\n\n#\n",
        "Line" : 1921,
        "CharPositionInLine" : 0
      },
      "198" : {
        "Text" : "# only MAJOR and MINOR are needed\n",
        "Line" : 1962,
        "CharPositionInLine" : 48
      },
      "199" : {
        "Text" : "# XXX For DLLs, the TARGET_PDB_FILE generator expression can be used to locate\n\n# its PDB file's output directory for installation.\n\n# cmake doesn't offer a generator expression for PDB files generated by the\n\n# compiler (static libraries).\n\n# So instead of considering any possible output there is (there are many),\n\n# this will search for the PDB file in the compiler's initial output directory,\n\n# which is always ${CMAKE_CURRENT_BINARY_DIR}/CMakeFiles\\wpcap_static.dir\n\n# regardless of architecture, build generator etc.\n\n# Quite hackish indeed.\n",
        "Line" : 1966,
        "CharPositionInLine" : 8
      },
      "200" : {
        "Text" : "#\n\n# For compatibility, build the shared library without the \"lib\" prefix on\n\n# MinGW as well.\n\n#\n",
        "Line" : 1981,
        "CharPositionInLine" : 8
      },
      "201" : {
        "Text" : "# UN*X\n",
        "Line" : 1993,
        "CharPositionInLine" : 12
      },
      "202" : {
        "Text" : "######################################\n\n# Write out the config.h file\n\n######################################\n",
        "Line" : 2023,
        "CharPositionInLine" : 0
      },
      "203" : {
        "Text" : "######################################\n\n# Install pcap library, include files, and man pages\n\n######################################\n",
        "Line" : 2029,
        "CharPositionInLine" : 0
      },
      "204" : {
        "Text" : "#\n\n# \"Define GNU standard installation directories\", which actually\n\n# are also defined, to some degree, by autotools, and at least\n\n# some of which are general UN*X conventions.\n\n#\n",
        "Line" : 2033,
        "CharPositionInLine" : 0
      },
      "205" : {
        "Text" : "#\n\n# Install 64-bit code built with MSVC in the amd64 subdirectories,\n\n# as that's where it expects it to be.\n\n#\n",
        "Line" : 2146,
        "CharPositionInLine" : 8
      },
      "206" : {
        "Text" : "#\n\n# Install 32-bit code, and 64-bit code not built with MSVC\n\n# in the top-level directories, as those are where they\n\n# expect it to be.\n\n#\n",
        "Line" : 2163,
        "CharPositionInLine" : 8
      },
      "207" : {
        "Text" : "# On UN*X, and on Windows when not using MSVC, generate libpcap.pc and\n\n# pcap-config and process man pages and arrange that they be installed.\n",
        "Line" : 2190,
        "CharPositionInLine" : 0
      },
      "208" : {
        "Text" : "#\n\n# Platforms where the linker is the GNU linker\n\n# or accepts command-line arguments like\n\n# those the GNU linker accepts.\n\n#\n",
        "Line" : 2204,
        "CharPositionInLine" : 8
      },
      "209" : {
        "Text" : "#\n\n# SunOS 5.x.\n\n#\n\n# XXX - this assumes GCC is using the Sun linker,\n\n# rather than the GNU linker.\n\n#\n",
        "Line" : 2211,
        "CharPositionInLine" : 8
      },
      "210" : {
        "Text" : "#\n\n# No option needed to set the RPATH.\n\n#\n",
        "Line" : 2219,
        "CharPositionInLine" : 8
      },
      "211" : {
        "Text" : "#\n\n# Man pages.\n\n#\n\n# For each section of the manual for which we have man pages\n\n# that require macro expansion, do the expansion.\n\n#\n",
        "Line" : 2233,
        "CharPositionInLine" : 4
      },
      "212" : {
        "Text" : "# uninstall target\n",
        "Line" : 2289,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 213
    },
    "libpcap/cmake/Modules/FindDAG.cmake" : {
      "ObjectId" : "ef13528445585663cf927b02e77113556ec495b1",
      "LastModified" : "2019-03-30T03:24:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find the Endace DAG library.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Try to find the header\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\n\n# Try to find the libraries\n\n#\n\n# We assume that if we have libdag we have libdagconf, as they're\n\n# installed at the same time from the same package.\n\n#\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "libpcap/cmake/Modules/FindFseeko.cmake" : {
      "ObjectId" : "ca53a5a6142513f93ae6e9e22c3d55aaf19ccab2",
      "LastModified" : "2019-03-30T03:24:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake support for fseeko\n\n#\n\n# Based on FindLFS.cmake by\n\n# Copyright (C) 2016 Julian Andres Klode <jak@debian.org>.\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation files\n\n# (the \"Software\"), to deal in the Software without restriction,\n\n# including without limitation the rights to use, copy, modify, merge,\n\n# publish, distribute, sublicense, and/or sell copies of the Software,\n\n# and to permit persons to whom the Software is furnished to do so,\n\n# subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n\n# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n\n#\n\n# This defines the following variables\n\n#\n\n# FSEEKO_DEFINITIONS - List of definitions to pass to add_definitions()\n\n# FSEEKO_COMPILE_OPTIONS - List of definitions to pass to add_compile_options()\n\n# FSEEKO_LIBRARIES - List of libraries and linker flags\n\n# FSEEKO_FOUND - If there is Large files support\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Check for the availability of fseeko()\n\n# The cases handled are:\n\n#\n\n#  * Native fseeko()\n\n#  * Preprocessor flag -D_LARGEFILE_SOURCE\n\n#\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# See if it's available with _LARGEFILE_SOURCE.\n",
        "Line" : 60,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 3
    },
    "libpcap/cmake/Modules/FindLFS.cmake" : {
      "ObjectId" : "be5f0d4875a805255b8c5a021c066d56e456b917",
      "LastModified" : "2019-03-30T03:24:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake support for large files\n\n#\n\n# Copyright (C) 2016 Julian Andres Klode <jak@debian.org>.\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation files\n\n# (the \"Software\"), to deal in the Software without restriction,\n\n# including without limitation the rights to use, copy, modify, merge,\n\n# publish, distribute, sublicense, and/or sell copies of the Software,\n\n# and to permit persons to whom the Software is furnished to do so,\n\n# subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n\n# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n\n#\n\n# This defines the following variables\n\n#\n\n# LFS_DEFINITIONS - List of definitions to pass to add_definitions()\n\n# LFS_COMPILE_OPTIONS - List of definitions to pass to add_compile_options()\n\n# LFS_LIBRARIES - List of libraries and linker flags\n\n# LFS_FOUND - If there is Large files support\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Test program to check for LFS. Requires that off_t has at least 8 byte large\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Check if the given options are needed\n\n#\n\n# This appends to the variables _lfs_cppflags, _lfs_cflags, and _lfs_ldflags,\n\n# it also sets LFS_FOUND to 1 if it works.\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Check for the availability of LFS.\n\n# The cases handled are:\n\n#\n\n#  * Native LFS\n\n#  * Output of getconf LFS_CFLAGS; getconf LFS_LIBS; getconf LFS_LDFLAGS\n\n#  * Preprocessor flag -D_FILE_OFFSET_BITS=64\n\n#  * Preprocessor flag -D_LARGE_FILES\n\n#\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Check using getconf. If getconf fails, don't worry, the check in\n\n# _lfs_check_compiler_option will fail as well.\n",
        "Line" : 98,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# Move -D flags to the place they are supposed to be\n",
        "Line" : 117,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "# Check if the flags we received (if any) produce working LFS support\n",
        "Line" : 126,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# IRIX stuff\n",
        "Line" : 133,
        "CharPositionInLine" : 23
      },
      "8" : {
        "Text" : "# Linux and friends\n",
        "Line" : 136,
        "CharPositionInLine" : 23
      },
      "9" : {
        "Text" : "# AIX\n",
        "Line" : 139,
        "CharPositionInLine" : 23
      },
      "CommentCount" : 10
    },
    "libpcap/cmake/Modules/FindPacket.cmake" : {
      "ObjectId" : "1311cdb94f1523ddb89ca7bf785306d43b437fac",
      "LastModified" : "2019-03-30T03:24:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Copyright (C) 2017 Ali Abdulkadir <autostart.ini@gmail.com>.\n\n#\n\n# Permission is hereby granted, free of charge, to any person\n\n# obtaining a copy of this software and associated documentation files\n\n# (the \"Software\"), to deal in the Software without restriction,\n\n# including without limitation the rights to use, copy, modify, merge,\n\n# publish, distribute, sub-license, and/or sell copies of the Software,\n\n# and to permit persons to whom the Software is furnished to do so,\n\n# subject to the following conditions:\n\n#\n\n# The above copyright notice and this permission notice shall be\n\n# included in all copies or substantial portions of the Software.\n\n#\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n\n# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n\n# SOFTWARE.\n\n#\n\n# FindPacket\n\n# ==========\n\n#\n\n# Find the Packet library and include files.\n\n#\n\n# This module defines the following variables:\n\n#\n\n# PACKET_INCLUDE_DIR     - absolute path to the directory containing Packet32.h.\n\n#\n\n# PACKET_LIBRARY         - relative or absolute path to the Packet library to\n\n#                          link with. An absolute path is will be used if the\n\n#                          Packet library is not located in the compiler's\n\n#                          default search path. See e.g. PACKET_DLL_DIR\n\n#                          variable below.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# PACKET_FOUND           - TRUE if the Packet library *and* header are found.\n\n#\n\n# Hints and Backward Compatibility\n\n# ================================\n\n#\n\n# To tell this module where to look, a user may set the environment variable\n\n# PACKET_DLL_DIR to point cmake to the *root* of a directory with include and\n\n# lib subdirectories for packet.dll (e.g WpdPack/npcap-sdk).\n\n# Alternatively, PACKET_DLL_DIR may also be set from cmake command line or GUI\n\n# (e.g cmake -DPACKET_DLL_DIR=/path/to/packet [...])\n\n#\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The 64-bit Packet.lib is located under /x64\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Find the header\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Find the library\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set PACKET_FOUND to TRUE if PACKET_INCLUDE_DIR and PACKET_LIBRARY are TRUE.\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "libpcap/cmake/Modules/FindSNF.cmake" : {
      "ObjectId" : "76dcced417fea7fdf95164118b69f386738f92a2",
      "LastModified" : "2019-03-30T03:24:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find the Myricom SNF library.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Try to find the header\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Try to find the library\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "libpcap/cmake/Modules/FindTC.cmake" : {
      "ObjectId" : "bb24c6671aa3c3ec34ddaf0bb0f7873b47cdbb08",
      "LastModified" : "2019-03-30T03:24:44Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Try to find the Riverbed TurboCap library.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Try to find the header\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Try to find the library\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "libpcap/testprogs/CMakeLists.txt" : {
      "ObjectId" : "b8ef9b7d0510f3e0bea1451b931145e8c402e0c0",
      "LastModified" : "2019-03-30T03:24:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "libssh2/CMakeLists.txt" : {
      "ObjectId" : "ae5594289251d4fb2c44ce7ea3b25bd39d1b04f8",
      "LastModified" : "2019-03-30T03:24:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014, 2015  Alexander Lamaison <alexander.lamaison@gmail.com>\n\n#\n\n# Redistribution and use in source and binary forms,\n\n# with or without modification, are permitted provided\n\n# that the following conditions are met:\n\n#\n\n#   Redistributions of source code must retain the above\n\n#   copyright notice, this list of conditions and the\n\n#   following disclaimer.\n\n#\n\n#   Redistributions in binary form must reproduce the above\n\n#   copyright notice, this list of conditions and the following\n\n#   disclaimer in the documentation and/or other materials\n\n#   provided with the distribution.\n\n#\n\n#   Neither the name of the copyright holder nor the names\n\n#   of any other contributors may be used to endorse or\n\n#   promote products derived from this software without\n\n#   specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n\n# CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n\n# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n\n# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n\n# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n\n# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n\n# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n\n# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\n\n# OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Parse version\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "libssh2/Makefile.am" : {
      "ObjectId" : "07eb81bc49e193f07182dc9e89075968c72a6c76",
      "LastModified" : "2019-03-30T03:24:50Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "#SUBDIRS = src tests docs\n\n#if BUILD_EXAMPLES\n\n#SUBDIRS += example\n\n#endif\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Code Coverage\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# DSP/VCPROJ generation adapted from libcurl\n\n# only OpenSSL and WinCNG are supported with this build system\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Makefile.inc provides the CSOURCES and HHEADERS defines\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4,
      "Errorlog" : "line 141:32 token recognition error at: '\\s'\nline 147:32 token recognition error at: '\\s'\n"
    },
    "libssh2/cmake/CheckFunctionExistsMayNeedLibrary.cmake" : {
      "ObjectId" : "8ac61abe5ee76dfdf499a374489de6e18a9f4c15",
      "LastModified" : "2019-03-30T03:24:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014 Alexander Lamaison <alexander.lamaison@gmail.com>\n\n#\n\n# Redistribution and use in source and binary forms,\n\n# with or without modification, are permitted provided\n\n# that the following conditions are met:\n\n#\n\n#   Redistributions of source code must retain the above\n\n#   copyright notice, this list of conditions and the\n\n#   following disclaimer.\n\n#\n\n#   Redistributions in binary form must reproduce the above\n\n#   copyright notice, this list of conditions and the following\n\n#   disclaimer in the documentation and/or other materials\n\n#   provided with the distribution.\n\n#\n\n#   Neither the name of the copyright holder nor the names\n\n#   of any other contributors may be used to endorse or\n\n#   promote products derived from this software without\n\n#   specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n\n# CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n\n# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n\n# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n\n# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n\n# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n\n# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n\n# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\n\n# OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - check_function_exists_maybe_need_library(<function> <var> [lib1 ... libn])\n\n#\n\n# Check if function is available for linking, first without extra libraries, and\n\n# then, if not found that way, linking in each optional library as well.  This\n\n# function is similar to autotools AC_SEARCH_LIBS.\n\n#\n\n# If the function if found, this will define <var>.\n\n#\n\n# If the function was only found by linking in an additional library, this\n\n# will define NEED_LIB_LIBX, where LIBX is the one of lib1 to libn that\n\n# makes the function available, in uppercase.\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n\n#  CMAKE_REQUIRED_LIBRARIES = list of libraries to link\n\n#\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Use new variable to prevent cache from previous step shortcircuiting\n\n# new test\n",
        "Line" : 68,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 3
    },
    "libssh2/cmake/CheckNonblockingSocketSupport.cmake" : {
      "ObjectId" : "74f4776a689f1be329aa6e94380961636e665288",
      "LastModified" : "2019-03-30T03:24:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - check_nonblocking_socket_support()\n\n#\n\n# Check for how to set a socket to non-blocking state. There seems to exist\n\n# four known different ways, with the one used almost everywhere being POSIX\n\n# and XPG3, while the other different ways for different systems (old BSD,\n\n# Windows and Amiga).\n\n#\n\n# One of the following variables will be set indicating the supported\n\n# method (if any):\n\n#   HAVE_O_NONBLOCK\n\n#   HAVE_FIONBIO\n\n#   HAVE_IOCTLSOCKET\n\n#   HAVE_IOCTLSOCKET_CASE\n\n#   HAVE_SO_NONBLOCK\n\n#   HAVE_DISABLED_NONBLOCKING\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n\n#  CMAKE_REQUIRED_LIBRARIES = list of libraries to link\n\n#\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# There are two known platforms (AIX 3.x and SunOS 4.1.x) where the\n\n# O_NONBLOCK define is found but does not work.\n",
        "Line" : 28,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# No non-blocking socket method found\n",
        "Line" : 112,
        "CharPositionInLine" : 5
      },
      "CommentCount" : 3
    },
    "libssh2/cmake/CopyRuntimeDependencies.cmake" : {
      "ObjectId" : "083f762686b29c2a425acb123d095741ee6ba1a9",
      "LastModified" : "2019-03-30T03:24:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014 Alexander Lamaison <alexander.lamaison@gmail.com>\n\n#\n\n# Redistribution and use in source and binary forms,\n\n# with or without modification, are permitted provided\n\n# that the following conditions are met:\n\n#\n\n#   Redistributions of source code must retain the above\n\n#   copyright notice, this list of conditions and the\n\n#   following disclaimer.\n\n#\n\n#   Redistributions in binary form must reproduce the above\n\n#   copyright notice, this list of conditions and the following\n\n#   disclaimer in the documentation and/or other materials\n\n#   provided with the distribution.\n\n#\n\n#   Neither the name of the copyright holder nor the names\n\n#   of any other contributors may be used to endorse or\n\n#   promote products derived from this software without\n\n#   specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n\n# CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n\n# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n\n# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n\n# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n\n# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n\n# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n\n# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\n\n# OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Using a custom target to drive custom commands stops multiple\n\n# parallel builds trying to kick off the commands at the same time\n",
        "Line" : 49,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Make directory first otherwise file is copied in place of\n\n# directory instead of into it\n",
        "Line" : 62,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 3
    },
    "libssh2/cmake/FindLibgcrypt.cmake" : {
      "ObjectId" : "44a79873d654441d70f9e5df8abb5cd2beb4da57",
      "LastModified" : "2019-03-30T03:24:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014 Alexander Lamaison <alexander.lamaison@gmail.com>\n\n#\n\n# Redistribution and use in source and binary forms,\n\n# with or without modification, are permitted provided\n\n# that the following conditions are met:\n\n#\n\n#   Redistributions of source code must retain the above\n\n#   copyright notice, this list of conditions and the\n\n#   following disclaimer.\n\n#\n\n#   Redistributions in binary form must reproduce the above\n\n#   copyright notice, this list of conditions and the following\n\n#   disclaimer in the documentation and/or other materials\n\n#   provided with the distribution.\n\n#\n\n#   Neither the name of the copyright holder nor the names\n\n#   of any other contributors may be used to endorse or\n\n#   promote products derived from this software without\n\n#   specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n\n# CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n\n# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n\n# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n\n# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n\n# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n\n# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n\n# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\n\n# OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Try to find Libgcrypt\n\n# This will define all or none of:\n\n#  LIBGCRYPT_FOUND - if Libgcrypt headers and library was found\n\n#  LIBGCRYPT_INCLUDE_DIRS - The Libgcrypt include directories\n\n#  LIBGCRYPT_LIBRARIES - The libraries needed to use Libgcrypt\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "libssh2/cmake/FindmbedTLS.cmake" : {
      "ObjectId" : "2f4adbc51981c3e844ff01141121d85221c1bd23",
      "LastModified" : "2019-03-30T03:24:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find mbedTLS\n\n# Once done this will define\n\n#\n\n# Read-Only variables\n\n#  MBEDTLS_FOUND - system has mbedTLS\n\n#  MBEDTLS_INCLUDE_DIR - the mbedTLS include directory\n\n#  MBEDTLS_LIBRARY_DIR - the mbedTLS library directory\n\n#  MBEDTLS_LIBRARIES - Link these to use mbedTLS\n\n#  MBEDTLS_LIBRARY - path to mbedTLS library\n\n#  MBEDX509_LIBRARY - path to mbedTLS X.509 library\n\n#  MBEDCRYPTO_LIBRARY - path to mbedTLS Crypto library\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 16,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# split mbedTLS into -L and -l linker options, so we can set them for pkg-config\n",
        "Line" : 29,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "libssh2/cmake/SocketLibraries.cmake" : {
      "ObjectId" : "bfbbd711e34316600d6e2a8e80c7a61dde8ef9af",
      "LastModified" : "2019-03-30T03:24:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014 Alexander Lamaison <alexander.lamaison@gmail.com>\n\n#\n\n# Redistribution and use in source and binary forms,\n\n# with or without modification, are permitted provided\n\n# that the following conditions are met:\n\n#\n\n#   Redistributions of source code must retain the above\n\n#   copyright notice, this list of conditions and the\n\n#   following disclaimer.\n\n#\n\n#   Redistributions in binary form must reproduce the above\n\n#   copyright notice, this list of conditions and the following\n\n#   disclaimer in the documentation and/or other materials\n\n#   provided with the distribution.\n\n#\n\n#   Neither the name of the copyright holder nor the names\n\n#   of any other contributors may be used to endorse or\n\n#   promote products derived from this software without\n\n#   specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n\n# CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n\n# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n\n# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n\n# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n\n# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n\n# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n\n# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\n\n# OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Some systems have their socket functions in a library.\n\n# (Solaris -lsocket/-lnsl, Windows -lws2_32).  This macro appends those\n\n# libraries to the given list\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# x86 Windows uses STDCALL for these functions, so their names are mangled,\n\n# meaning the platform checks don't work. Hardcoding these until we get\n\n# a better solution.\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "libssh2/cmake/Toolchain-Linux-32.cmake" : {
      "ObjectId" : "6aad9b1e2d6f190446fcdb48145b9a2cf666ae1d",
      "LastModified" : "2019-03-30T03:24:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014 Alexander Lamaison <alexander.lamaison@gmail.com>\n\n#\n\n# Redistribution and use in source and binary forms,\n\n# with or without modification, are permitted provided\n\n# that the following conditions are met:\n\n#\n\n#   Redistributions of source code must retain the above\n\n#   copyright notice, this list of conditions and the\n\n#   following disclaimer.\n\n#\n\n#   Redistributions in binary form must reproduce the above\n\n#   copyright notice, this list of conditions and the following\n\n#   disclaimer in the documentation and/or other materials\n\n#   provided with the distribution.\n\n#\n\n#   Neither the name of the copyright holder nor the names\n\n#   of any other contributors may be used to endorse or\n\n#   promote products derived from this software without\n\n#   specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n\n# CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n\n# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n\n# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n\n# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n\n# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n\n# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n\n# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\n\n# OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Cross-compile 32-bit binary on 64-bit linux host\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "libssh2/cmake/max_warnings.cmake" : {
      "ObjectId" : "b176d302d3a66909fd45893be9a38f917365db74",
      "LastModified" : "2019-03-30T03:24:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Use the highest warning level for visual studio.\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Disable broken warnings\n",
        "Line" : 14,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "libssh2/src/CMakeLists.txt" : {
      "ObjectId" : "6401acff24cf369f707c54db3c39870afd8165ea",
      "LastModified" : "2019-03-30T03:24:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014 Alexander Lamaison <alexander.lamaison@gmail.com>\n\n#\n\n# Redistribution and use in source and binary forms,\n\n# with or without modification, are permitted provided\n\n# that the following conditions are met:\n\n#\n\n#   Redistributions of source code must retain the above\n\n#   copyright notice, this list of conditions and the\n\n#   following disclaimer.\n\n#\n\n#   Redistributions in binary form must reproduce the above\n\n#   copyright notice, this list of conditions and the following\n\n#   disclaimer in the documentation and/or other materials\n\n#   provided with the distribution.\n\n#\n\n#   Neither the name of the copyright holder nor the names\n\n#   of any other contributors may be used to endorse or\n\n#   promote products derived from this software without\n\n#   specific prior written permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND\n\n# CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\n\n# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\n\n# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n\n# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n\n# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n\n# BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n\n# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n\n# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n\n# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE\n\n# USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\n\n# OF SUCH DAMAGE.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Cryptography backend choice\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If the crypto backend was given, rather than searching for the first\n\n# we are able to find, the find_package commands must abort configuration\n\n# and report to the user.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Statically linking to OpenSSL requires crypt32 for some Windows APIs.\n\n# This should really be handled by FindOpenSSL.cmake.\n",
        "Line" : 74,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# Not all OpenSSL have AES-CTR functions.\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# The check actually compiles the header.  This requires windows.h.\n",
        "Line" : 126,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# Reading keys from files is optional and depends on Wincrypt\n",
        "Line" : 141,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "## Library definition\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# we want it to be called libssh2 on all platforms\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Options\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Enable debugging logging by default if the user configured a debug build\n",
        "Line" : 269,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Platform checks\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Try _strtoi64 if strtoll isn't available\n",
        "Line" : 311,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# poll() does not work on these platforms\n\n#\n\n# Interix: \"does provide poll(), but the implementing developer must\n\n# have been in a bad mood, because poll() only works on the /proc\n\n# filesystem here\"\n\n#\n\n# Mac OS X's poll has funny behaviors, like:\n\n# not being able to do poll on no fildescriptors (10.3?)\n\n# not being able to poll on some files (like anything in /dev)\n\n# not having reliable timeout support\n\n# inconsistent return of POLLHUP where other implementations give POLLIN\n",
        "Line" : 318,
        "CharPositionInLine" : 2
      },
      "14" : {
        "Text" : "# Non-blocking socket support tests.  Must be after after library tests to\n\n# link correctly\n",
        "Line" : 336,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# to find generated header\n",
        "Line" : 346,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Check for the OS.\n\n# Daniel's note: this should not be necessary and we need to work to\n\n# get this removed.\n",
        "Line" : 349,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Fall back to over-linking dependencies\n",
        "Line" : 359,
        "CharPositionInLine" : 2
      },
      "18" : {
        "Text" : "## Installation\n",
        "Line" : 365,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Package config\n",
        "Line" : 386,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## During package installation, install Libssh2Config.cmake\n",
        "Line" : 388,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## During build, register directly from build tree\n\n# create Libssh2Config.cmake\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# register it\n",
        "Line" : 396,
        "CharPositionInLine" : 24
      },
      "23" : {
        "Text" : "## Export a .pc file for client projects not using CMaek\n",
        "Line" : 398,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "## Versioning\n",
        "Line" : 410,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 25
    },
    "libssh2/src/Makefile.am" : {
      "ObjectId" : "c14dc7cb3dc0a5c39278ed55a4c3125692d62d68",
      "LastModified" : "2019-03-30T03:24:50Z",
      "FileType" : "AUTOMAKE",
      "0" : {
        "Text" : "# $Id: Makefile.am,v 1.21 2009/05/07 17:21:56 bagder Exp $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Get the CRYPTO_CSOURCES and CRYPTO_HHEADERS defines\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Makefile.inc provides the CSOURCES and HHEADERS defines\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# srcdir/include for the shipped headers\n\n# builddir/src for the generated config header when building out of the source\n\n# tree\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# This flag accepts an argument of the form current[:revision[:age]]. So,\n\n# passing -version-info 3:12:1 sets current to 3, revision to 12, and age to\n\n# 1.\n\n#\n\n# If either revision or age are omitted, they default to 0. Also note that age\n\n# must be less than or equal to the current interface number.\n\n#\n\n# Here are a set of rules to help you update your library version information:\n\n#\n\n# 1.Start with version information of 0:0:0 for each libtool library.\n\n#\n\n# 2.Update the version information only immediately before a public release of\n\n# your software. More frequent updates are unnecessary, and only guarantee\n\n# that the current interface number gets larger faster.\n\n#\n\n# 3.If the library source code has changed at all since the last update, then\n\n# increment revision (c:r+1:a)\n\n#\n\n# 4.If any interfaces have been added, removed, or changed since the last\n\n# update, increment current, and set revision to 0. (c+1:r=0:a)\n\n#\n\n# 5.If any interfaces have been added since the last public release, then\n\n# increment age. (c:r:a+1)\n\n#\n\n# 6.If any interfaces have been removed since the last public release, then\n\n# set age to 0. (c:r:a=0)\n\n#\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "libz/CMakeLists.txt" : {
      "ObjectId" : "0fe939df689306f1d0c7c657cb64dd0f0dedc134",
      "LastModified" : "2019-03-30T03:24:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\n\n# Check to see if we have large file support\n\n#\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# We add these other definitions here because CheckTypeSize.cmake\n\n# in CMake 2.4.x does not automatically do so and we want\n\n# compatibility with CMake 2.4.x.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# clear variable\n",
        "Line" : 47,
        "CharPositionInLine" : 32
      },
      "3" : {
        "Text" : "#\n\n# Check for fseeko\n\n#\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#\n\n# Check for unistd.h\n\n#\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# If we're doing an out of source build and the user has a zconf.h\n\n# in their source tree...\n",
        "Line" : 70,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "#============================================================================\n\n# zlib\n\n#============================================================================\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# If present will override custom build rule below.\n",
        "Line" : 128,
        "CharPositionInLine" : 23
      },
      "8" : {
        "Text" : "# parse the full version number from zlib.h and include in ZLIB_FULL_VERSION\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# This gets us DLL resource information when compiling on MinGW.\n",
        "Line" : 171,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# This property causes shared libraries on Linux to have the full version\n\n# encoded into their final filename.  We disable this on Cygwin because\n\n# it causes cygz-${ZLIB_FULL_VERSION}.dll to be created when cygz.dll\n\n# seems to be the default.\n\n#\n\n# This has no effect with MSVC, on that platform the version info for\n\n# the DLL comes from the resource file win32/zlib1.rc\n",
        "Line" : 192,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# On unix-like platforms the library is almost always called libz\n",
        "Line" : 203,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# Creates zlib1.dll when building shared library version\n",
        "Line" : 209,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "#============================================================================\n\n# Example binaries\n\n#============================================================================\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 14
    },
    "libz/contrib/minizip/Makefile.am" : {
      "ObjectId" : "d343011ebc3b3fd78d2bc3a29801a083c038cf0c",
      "LastModified" : "2019-03-30T03:24:50Z",
      "FileType" : "AUTOMAKE",
      "CommentCount" : 0
    },
    "macosx/Makefile" : {
      "ObjectId" : "7ce02fd06a63c0a69169aa0dff2a55f7861fb8a4",
      "LastModified" : "2019-03-30T03:24:50Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# This makefile builds a disk image (.dmg) containing the installer for Nmap,\n\n# Zenmap, Ncat, and Ndiff.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Extra distribution file names\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Flags for building universal binaries. See\n\n# http://developer.apple.com/documentation/Porting/Conceptual/PortingUnix/compiling/chapter_4_section_3.html.\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Setting ARCHFLAGS separately is required. distutils.util.get_platform\n\n# sniffs it to determine whether to return a universal architecture\n\n# (\"fat\" or \"universal\") or a single one (\"i386\" or \"ppc\"). py2app in\n\n# turn uses the arch value to decide which of its bootstrappers to\n\n# install.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# https://stackoverflow.com/questions/19637164/c-linking-error-after-upgrading-to-mac-os-x-10-9-xcode-5-0-1/19637199#19637199\n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Mac OS options for libraries used by nmap-update\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Jhbuild static libraries\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# These are the positions used by the createdmg.sh and check_test.sh scripts\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Create the dmg disk image and convert it to read only disk\n",
        "Line" : 122,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# Check the created disk image for the sizes, backgrounds and icons presence and positions\n",
        "Line" : 124,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# Create packages (.pkg) for all the components to install in the installer (.mpkg)\n",
        "Line" : 135,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# Produce a .xml with packages information\n",
        "Line" : 143,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Make a new file and add background and title attributes\n",
        "Line" : 153,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# This line is for adding a background image to the .mpkg\n",
        "Line" : 156,
        "CharPositionInLine" : 1
      },
      "14" : {
        "Text" : "# Build the .mpkg according to the final .xml file (and so all the .pkg)\n",
        "Line" : 160,
        "CharPositionInLine" : 1
      },
      "15" : {
        "Text" : "# Using @BASE discards local changes.\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# LIB* is libssh2's name for *_LIBS\n",
        "Line" : 176,
        "CharPositionInLine" : 1
      },
      "17" : {
        "Text" : "# make-bundle.sh uses these to build its authorization wrapper.\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Use the license formatter from the Windows installer.\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19,
      "Errorlog" : "line 4:101 token recognition error at: '\\1'\nline 5:109 token recognition error at: '\\1'\n"
    },
    "mswin32/Makefile" : {
      "ObjectId" : "690a58f142561ac3a411c5fb3d8853e5658ed641",
      "LastModified" : "2019-03-30T03:24:50Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# VCExpress.exe is devenv.com with the commercial Visual Studio suite instead of VC++ Express\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# escape quotes for NSIS\n\n# escape for right side of sed regex replace\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#\"$(VCEXPRESS)\" nmap.sln /build release /project nmap-update /out $(LOGLOC)\n",
        "Line" : 21,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "# Use \"cmd /c copy\" rather than \"cp\" to preserve Windows ACLs. Using\n\n# \"cp\" means that the copied DLLs don't have the same ACL and cause an\n\n# error on startup: 0xc0000022.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#cp ../nmap-update/Release/nmap-update.exe nmap-$(NMAP_VERSION)\n",
        "Line" : 48,
        "CharPositionInLine" : 1
      },
      "5" : {
        "Text" : "# Install the ndiff batch file wrapper in the zip distribution.\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# TODO: evaluate whether we should also sign the Python stuff for Zenmap, Ndiff\n",
        "Line" : 59,
        "CharPositionInLine" : 1
      },
      "7" : {
        "Text" : "# Make sure NPcap is present\n",
        "Line" : 86,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 8,
      "Errorlog" : "line 5:108 token recognition error at: '\\1'\nline 6:116 token recognition error at: '\\1'\nline 7:84 token recognition error at: '\\1'\n"
    },
    "nsock/examples/Makefile" : {
      "ObjectId" : "de40593ddb8eb24524d2e2f72b3d69ab45f2bbb9",
      "LastModified" : "2019-03-30T03:24:50Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "zenmap/share/zenmap/locale/Makefile" : {
      "ObjectId" : "43b5a715c6ed4599b6d0f0baa3adc6941f0c6f80",
      "LastModified" : "2019-03-30T03:24:50Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 19,
    "MAKEFILE" : 7,
    "AUTOMAKE" : 7
  },
  "ElapsedTime" : 7938
}