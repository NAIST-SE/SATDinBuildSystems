{
  "Repository" : "18431619",
  "Revision" : "HEAD",
  "ObjectId" : "f04192aac2426cf596135d49e6387ba9a14bd549",
  "CommitTime" : "2019-02-11T14:21:35Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "0c59e8c2ac1733562eb8043449ea8faecee0b4cf",
      "LastModified" : "2019-02-06T19:29:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The name of our project is \"APEX\". CMakeLists files in this project can\n\n# refer to the root source directory of the project as ${APEX_SOURCE_DIR} and\n\n# to the root binary directory of the project as ${APEX_BINARY_DIR}.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set the project name\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#if (${CMAKE_MAJOR_VERSION} GREATER 2)\n\n#    if (${CMAKE_MAJOR_VERSION} GREATER 1)\n\n#        cmake_policy(SET CMP0054 OLD)\n\n#    endif()\n\n#endif()\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if the user didn't specify, set the installation directory.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# check if we are building for Kitten / LXK, and force some settings.\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "################################################################################\n\n# Set the RPATH to make sure executables always work without \"make install\"\n\n################################################################################\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# use, i.e. don't skip the full RPATH for the build tree\n",
        "Line" : 46,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# when building, don't use the install RPATH already\n\n# (but later on when installing)\n",
        "Line" : 49,
        "CharPositionInLine" : 4
      },
      "8" : {
        "Text" : "# add the automatically determined parts of the RPATH\n\n# which point to directories outside the build tree to the install RPATH\n",
        "Line" : 55,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# the RPATH to be used when installing, but only if it's not a system directory\n",
        "Line" : 59,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "################################################################################\n\n# Build type (needs to be handled before project command below)\n\n################################################################################\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#add_definitions(-DAPEX_DEBUG)\n",
        "Line" : 78,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# they will still be configured, but excluded from \"all\"\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# set(APEX_BUILD_TYPE \"${CMAKE_BUILD_TYPE}\" CACHE STRING \"Configuration type (one of Debug, RelWithDebInfo, Release, MinSizeRel)\" FORCE)\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Always force CMAKE_CONFIGURATION_TYPES to be the same as CMAKE_BUILD_TYPE\n\n# (at least for now, until we figure out how to use multiple build types in\n\n# the same project).\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# If TAU is used, don't allow throttling - it can potentially lead to\n\n# overlapping timer errors in TAU.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# include additional macro definitions\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "################################################################################\n\n# Get the GIT version of the code\n\n################################################################################\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Get the current working branch\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Get the current working tag\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Get the latest abbreviated commit hash of the working branch\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#add_definitions(\"-DGIT_COMMIT_HASH=${GIT_COMMIT_HASH}\")\n\n#add_definitions(\"-DGIT_BRANCH=${GIT_BRANCH}\")\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "################################################################################\n\n# Hostname detection code\n\n################################################################################\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "################################################################################\n\n# Compiler detection code\n\n################################################################################\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# SET SANITIZE OPTIONS, IF DESIRED\n",
        "Line" : 188,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# defaults\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# memory, other\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# race conditions\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# set debug options\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# using Clang\n",
        "Line" : 208,
        "CharPositionInLine" : 2
      },
      "30" : {
        "Text" : "# using GCC\n",
        "Line" : 214,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# -march=native is broken on sandybridge architectures.\n",
        "Line" : 223,
        "CharPositionInLine" : 2
      },
      "32" : {
        "Text" : "# message(STATUS \"CPU Model: ${CPUMODEL}\")\n",
        "Line" : 229,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# using Intel C++\n",
        "Line" : 240,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# using Visual Studio C++\n",
        "Line" : 247,
        "CharPositionInLine" : 2
      },
      "35" : {
        "Text" : "# The version number.\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# add_definitions(-std=c++11)\n",
        "Line" : 254,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# By the way, GCC lies.  It accepts the flag, but doesn't have the support.\n",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Check if architecture is x86 or not\n",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# If not x86, don't use RDTSC\n",
        "Line" : 303,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# use PIC for shared objects\n",
        "Line" : 323,
        "CharPositionInLine" : 4
      },
      "41" : {
        "Text" : "################################################################################\n\n# Boost configuration\n\n################################################################################\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# BOOST IS NOW ONLY REQUIRED FOR INTEL XEON MIC/PHI SUPPORT!\n",
        "Line" : 333,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# reconfigure Boost library information if configuration type has been\n\n# changed since last configure\n",
        "Line" : 335,
        "CharPositionInLine" : 4
      },
      "44" : {
        "Text" : "################################################################################\n\n# MPI configuration\n\n################################################################################\n",
        "Line" : 369,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Prevent errors from Cmake by stripping whitespace\n",
        "Line" : 379,
        "CharPositionInLine" : 4
      },
      "46" : {
        "Text" : "################################################################################\n\n# RCR configuration\n\n################################################################################\n",
        "Line" : 385,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# RCR is NOT required.\n",
        "Line" : 389,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "#if(EXISTS \"/sys/cray/pm_counter/power\")\n",
        "Line" : 402,
        "CharPositionInLine" : 4
      },
      "49" : {
        "Text" : "#add_definitions(-fPIC)\n",
        "Line" : 405,
        "CharPositionInLine" : 8
      },
      "50" : {
        "Text" : "################################################################################\n\n# OMPT configuration\n\n################################################################################\n",
        "Line" : 418,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# just in case, disable all ompt\n",
        "Line" : 425,
        "CharPositionInLine" : 4
      },
      "52" : {
        "Text" : "# Just in case, to prevent concurrent builds\n",
        "Line" : 452,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "################################################################################\n\n# PROC configuration\n\n################################################################################\n",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "################################################################################\n\n# JE/TCMalloc configuration\n\n################################################################################\n",
        "Line" : 468,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "################################################################################\n\n# LM Sensors configuration\n\n################################################################################\n",
        "Line" : 496,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "################################################################################\n\n# ActiveHarmony configuration\n\n################################################################################\n",
        "Line" : 511,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# just in case, disable all Active Harmony\n",
        "Line" : 516,
        "CharPositionInLine" : 4
      },
      "58" : {
        "Text" : "# Just in case, to prevent concurrent builds\n",
        "Line" : 536,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "################################################################################\n\n# PAPI configuration\n\n################################################################################\n",
        "Line" : 539,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "################################################################################\n\n# OTF2 configuration\n\n################################################################################\n",
        "Line" : 554,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# just in case, disable\n",
        "Line" : 559,
        "CharPositionInLine" : 4
      },
      "62" : {
        "Text" : "# add_definitions(-DAPEX_USE_CLOCK_TIMESTAMP=1)\n",
        "Line" : 573,
        "CharPositionInLine" : 8
      },
      "63" : {
        "Text" : "# Just in case, to prevent concurrent builds\n",
        "Line" : 584,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "################################################################################\n\n# MSR configuration\n\n################################################################################\n",
        "Line" : 587,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "################################################################################\n\n# Binutils configuration\n\n################################################################################\n",
        "Line" : 604,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Just in case, to prevent concurrent builds\n",
        "Line" : 635,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "################################################################################\n\n# Standard Library configuration\n\n################################################################################\n",
        "Line" : 677,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# checking for pthread the correct way is broken for MIC.\n",
        "Line" : 681,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# add_definitions(-D_MSC_VER=1)\n",
        "Line" : 690,
        "CharPositionInLine" : 4
      },
      "70" : {
        "Text" : "# set(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -pthread\")\n\n# set(CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} -pthread\")\n\n# set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -pthread\")\n",
        "Line" : 696,
        "CharPositionInLine" : 4
      },
      "71" : {
        "Text" : "# apparently, we need to make sure libm is last.\n",
        "Line" : 710,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "#message(${LIBS})\n",
        "Line" : 713,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "################################################################################\n",
        "Line" : 720,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# configure a header file to pass some of the CMake settings\n\n# to the source code\n",
        "Line" : 722,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# message(INFO \" configuring pkgconfig with ${LIBS}\")\n",
        "Line" : 733,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# needed for apex.pc.in\n",
        "Line" : 735,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# message(INFO \" configuring pkgconfig with ${MY_LIBS}\")\n",
        "Line" : 758,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# absorb the spaces first\n",
        "Line" : 768,
        "CharPositionInLine" : 4
      },
      "79" : {
        "Text" : "#SET(extralibs \"${TMP_LINKFLAGS} ${TMP_LIBS} ${CMAKE_EXE_LINKER_FLAGS}\")\n",
        "Line" : 772,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# how many cores at our disposal?\n",
        "Line" : 790,
        "CharPositionInLine" : 24
      },
      "81" : {
        "Text" : "# turn on \"make test\" support\n",
        "Line" : 795,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# Recurse into the \"Apex\" and \"Demo\" subdirectories. This does not actually\n\n# cause another cmake executable to run. The same process will walk through\n\n# the project's entire directory structure.\n",
        "Line" : 798,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# don't run the MPI examples on nersc head nodes - the admins get angry.\n",
        "Line" : 819,
        "CharPositionInLine" : 8
      },
      "84" : {
        "Text" : "#add_subdirectory (src/unit_tests/C EXCLUDE_FROM_ALL)\n\n#add_subdirectory (src/unit_tests/C++ EXCLUDE_FROM_ALL)\n",
        "Line" : 834,
        "CharPositionInLine" : 4
      },
      "85" : {
        "Text" : "#add_subdirectory (src/examples EXCLUDE_FROM_ALL)\n",
        "Line" : 842,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 86
    },
    "cmake/Modules/APEX_Compile.cmake" : {
      "ObjectId" : "a8a54f044f82cd1fa3675f45bb8c0b1edfc054ae",
      "LastModified" : "2014-08-26T20:46:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2011 Bryce Lelbach\n\n#\n\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/APEX_CompilerFlags.cmake" : {
      "ObjectId" : "567d8617c40fa2145377b416f5ff256ab1a8aa11",
      "LastModified" : "2014-08-26T20:46:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2011 Bryce Lelbach\n\n#\n\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# C++ is the only language tested by default\n",
        "Line" : 73,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "#else()\n\n#  apex_warn(\"use_flag_if_available\" \"${flag} is unavailable for ${language}\")\n",
        "Line" : 114,
        "CharPositionInLine" : 6
      },
      "CommentCount" : 3
    },
    "cmake/Modules/APEX_Distclean.cmake" : {
      "ObjectId" : "e87184f8f762719dcb3a74753c3ca1099e43d6d3",
      "LastModified" : "2014-08-26T20:46:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2011 Bryce Lelbach\n\n# Copyright (c) 2003 Jan Woetzel\n\n#\n\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n\n# cleans and removes cmake generated files etc.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/APEX_GCCVersion.cmake" : {
      "ObjectId" : "d5124825abc9e278478c642baac7d19dbcca99e1",
      "LastModified" : "2014-08-26T20:46:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2011 Bryce Lelbach\n\n#\n\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "################################################################################\n\n# Compiler detection code\n\n################################################################################\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# C++\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/APEX_GetIncludeDirectory.cmake" : {
      "ObjectId" : "0db6bb8f3115e6683385576308ff33fc9d28a122",
      "LastModified" : "2014-08-26T20:46:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2011 Bryce Lelbach\n\n#\n\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "###############################################################################\n\n# prevent undefined variables from messing up the compilation flags\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/APEX_Include.cmake" : {
      "ObjectId" : "4372fd98d43644a083a3af9ccbed4d7891b73d6a",
      "LastModified" : "2014-08-26T20:46:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2011 Bryce Lelbach\n\n#\n\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/APEX_ListContains.cmake" : {
      "ObjectId" : "4257089992f7abcfcfc5209bec584dbc2aeb2bfd",
      "LastModified" : "2014-08-26T20:46:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2007-2012 Hartmut Kaiser\n\n# Copyright (c) 2011      Bryce Lelbach\n\n# Copyright (c) 2010-2011 Alexander Neundorf\n\n#\n\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/APEX_Message.cmake" : {
      "ObjectId" : "800bd62e9af9b932e7b679913b7c84bc2d8967a4",
      "LastModified" : "2014-08-26T20:46:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2011 Bryce Lelbach\n\n#\n\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/APEX_Option.cmake" : {
      "ObjectId" : "e39ed8c0369515ff86be18c8565620c23400fb86",
      "LastModified" : "2014-08-26T20:46:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2011 Bryce Lelbach\n\n#\n\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# FIXME: Use parse arg.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/APEX_ParseArguments.cmake" : {
      "ObjectId" : "dc40078193ba9a14be44f16014918c6aa269ebd1",
      "LastModified" : "2014-08-26T20:46:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2007-2012 Hartmut Kaiser\n\n# Copyright (c) 2011      Bryce Lelbach\n\n# Copyright (c) 2010-2011 Alexander Neundorf\n\n#\n\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/APEX_Utils.cmake" : {
      "ObjectId" : "ef26d1ceee066a534b9a1ac90be4e8cebc1f960b",
      "LastModified" : "2014-08-26T20:46:47Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## force out of tree build\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/Modules/ExternalProjectBoost.cmake" : {
      "ObjectId" : "ea4097a749792885457ead07a48e6765f27df13c",
      "LastModified" : "2016-01-29T23:14:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#---------------------------------------------------------------------------\n\n# Get and build boost\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#URL \"http://sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.bz2/download\"\n\n#URL \"http://sourceforge.net/projects/boost/files/boost/1.59.0/boost_1_59_0.tar.bz2/download\"\n",
        "Line" : 22,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindActiveHarmony.cmake" : {
      "ObjectId" : "a8a3412a97e98d8eb457d61b10ec49d5425dc4d1",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find LibACTIVEHARMONY\n\n# Once done this will define\n\n#  ACTIVEHARMONY_FOUND - System has ACTIVEHARMONY\n\n#  ACTIVEHARMONY_INCLUDE_DIRS - The ACTIVEHARMONY include directories\n\n#  ACTIVEHARMONY_LIBRARIES - The libraries needed to use ACTIVEHARMONY\n\n#  ACTIVEHARMONY_DEFINITIONS - Compiler switches required for using ACTIVEHARMONY\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set ACTIVEHARMONY_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# --------- DOWNLOAD AND BUILD THE EXTERNAL PROJECT! ------------ #\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# LOG_CONFIGURE 1\n\n# LOG_BUILD 1\n\n# LOG_INSTALL 1\n",
        "Line" : 47,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "#ExternalProject_Get_Property(project_activeharmony install_dir)\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set ACTIVEHARMONY_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 57,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# --------- DOWNLOAD AND BUILD THE EXTERNAL PROJECT! ------------ #\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/Modules/FindBFD.cmake" : {
      "ObjectId" : "83ee7191b1a6d25af6d60c7414f7f6c3fb761a2d",
      "LastModified" : "2016-06-13T17:01:22Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find LibBFD\n\n# Once done this will define\n\n#  BFD_FOUND - System has BFD\n\n#  BFD_INCLUDE_DIRS - The BFD include directories\n\n#  BFD_LIBRARIES - The libraries needed to use BFD\n\n#  BFD_DEFINITIONS - Compiler switches required for using BFD\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This if statement is specific to BFD, and should not be copied into other\n\n# Find cmake scripts.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set BFD_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# --------- DOWNLOAD AND BUILD THE EXTERNAL PROJECT! ------------ #\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set BFD_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 72,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# this tells the FindDemangle module that we are building it\n",
        "Line" : 77,
        "CharPositionInLine" : 25
      },
      "6" : {
        "Text" : "# --------- DOWNLOAD AND BUILD THE EXTERNAL PROJECT! ------------ #\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/Modules/FindDemangle.cmake" : {
      "ObjectId" : "99a70b20bb0607d741ba764f99238d0012609e71",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find LibDEMANGLE\n\n# Once done this will define\n\n#  DEMANGLE_FOUND - System has DEMANGLE\n\n#  DEMANGLE_INCLUDE_DIRS - The DEMANGLE include directories\n\n#  DEMANGLE_LIBRARIES - The libraries needed to use DEMANGLE\n\n#  DEMANGLE_DEFINITIONS - Compiler switches required for using DEMANGLE\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This if statement is specific to DEMANGLE, and should not be copied into other\n\n# Find cmake scripts.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set DEMANGLE_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# --------- DOWNLOAD AND BUILD THE EXTERNAL PROJECT! ------------ #\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set DEMANGLE_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 67,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# --------- DOWNLOAD AND BUILD THE EXTERNAL PROJECT! ------------ #\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cmake/Modules/FindJEmalloc.cmake" : {
      "ObjectId" : "c461d38138505a7da065a9a41807065819aafad3",
      "LastModified" : "2016-01-29T23:14:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find JEmalloc\n\n# Find the native JEmalloc includes and library\n\n#\n\n#  JEmalloc_INCLUDE_DIR - where to find JEmalloc.h, etc.\n\n#  JEmalloc_LIBRARIES   - List of libraries when using JEmalloc.\n\n#  JEmalloc_FOUND       - True if JEmalloc found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindLMSensors.cmake" : {
      "ObjectId" : "2bbf000ac13d42189e743da0ba02a7ac9ba87ef5",
      "LastModified" : "2016-01-29T23:14:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find LM_SENSORS\n\n# Find the native LM_SENSORS includes and library\n\n#\n\n#  LM_SENSORS_INCLUDE_DIR - where to find LM_SENSORS.h, etc.\n\n#  LM_SENSORS_LIBRARIES   - List of libraries when using LM_SENSORS.\n\n#  LM_SENSORS_FOUND       - True if LM_SENSORS found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindMSR.cmake" : {
      "ObjectId" : "8d4a3a867a4eee0adf958900f947e752724fad62",
      "LastModified" : "2016-03-01T22:16:36Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find libmsr\n\n# Once done this will define\n\n#  MSR_FOUND - System has MSR\n\n#  MSR_INCLUDE_DIRS - The MSR include directories\n\n#  MSR_LIBRARIES - The libraries needed to use MSR\n\n#  MSR_DEFINITIONS - Compiler switches required for using MSR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set MSR_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/Modules/FindOMPT.cmake" : {
      "ObjectId" : "fe63704148940d3e1806ea53353ec6af26eaa138",
      "LastModified" : "2018-07-26T23:43:20Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find LibOMPT\n\n# Once done this will define\n\n#  OMPT_FOUND - System has OMPT\n\n#  OMPT_INCLUDE_DIRS - The OMPT include directories\n\n#  OMPT_LIBRARIES - The libraries needed to use OMPT\n\n#  OMPT_DEFINITIONS - Compiler switches required for using OMPT\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This if statement is specific to OMPT, and should not be copied into other\n\n# Find cmake scripts.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OMPT_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# --------- DOWNLOAD AND BUILD THE EXTERNAL PROJECT! ------------ #\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#GIT_REPOSITORY https://github.com/khuck/LLVM-openmp.git\n",
        "Line" : 42,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "#ExternalProject_Get_Property(project_ompt install_dir)\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OMPT_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 61,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# --------- DOWNLOAD AND BUILD THE EXTERNAL PROJECT! ------------ #\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cmake/Modules/FindOTF2.cmake" : {
      "ObjectId" : "4a3747ef1979e91344834fd7c69ff8b7dd32c384",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find LibOTF2\n\n# Once done this will define\n\n#  OTF2_FOUND - System has OTF2\n\n#  OTF2_INCLUDE_DIRS - The OTF2 include directories\n\n#  OTF2_LIBRARIES - The libraries needed to use OTF2\n\n#  OTF2_DEFINITIONS - Compiler switches required for using OTF2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# message(\"   env OTF2_ROOT is defined as $ENV{OTF2_ROOT}\")\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OTF2_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# --------- DOWNLOAD AND BUILD THE EXTERNAL PROJECT! ------------ #\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#ExternalProject_Get_Property(project_otf2 install_dir)\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set OTF2_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# --------- DOWNLOAD AND BUILD THE EXTERNAL PROJECT! ------------ #\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cmake/Modules/FindPAPI.cmake" : {
      "ObjectId" : "b3e706454e26e097a5cf39df7e42d4e3406ad173",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find LibPAPI\n\n# Once done this will define\n\n#  PAPI_FOUND - System has PAPI\n\n#  PAPI_INCLUDE_DIRS - The PAPI include directories\n\n#  PAPI_LIBRARIES - The libraries needed to use PAPI\n\n#  PAPI_DEFINITIONS - Compiler switches required for using PAPI\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# message(\"   env PAPI_ROOT is defined as $ENV{PAPI_ROOT}\")\n",
        "Line" : 10,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set PAPI_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindRCR.cmake" : {
      "ObjectId" : "e6d4e49ccd73313f1234d82ccd7164d83feedebf",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Try to find LibRCR\n\n# Once done this will define\n\n#  RCR_FOUND - System has RCR\n\n#  RCR_INCLUDE_DIRS - The RCR include directories\n\n#  RCR_LIBRARIES - The libraries needed to use RCR\n\n#  RCR_DEFINITIONS - Compiler switches required for using RCR\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# This if statement is specific to RCR, and should not be copied into other\n\n# Find cmake scripts.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set RCR_FOUND to TRUE\n\n# if all listed variables are TRUE\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/Modules/FindTcmalloc.cmake" : {
      "ObjectId" : "21e725d0008c75d5879f5f8f67ed2c9899af2ba9",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find Tcmalloc\n\n# Find the native Tcmalloc includes and library\n\n#\n\n#  Tcmalloc_INCLUDE_DIR - where to find Tcmalloc.h, etc.\n\n#  Tcmalloc_LIBRARIES   - List of libraries when using Tcmalloc.\n\n#  Tcmalloc_FOUND       - True if Tcmalloc found.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Already in cache, be silent\n",
        "Line" : 10,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cmake/Modules/GitExternal.cmake" : {
      "ObjectId" : "9eb87d6f368095103a5a73bfbbdeaf3f86ed03cb",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014-2015 John Biddiscombe\n\n# Copyright (c) 2014-2015 Daniel Nachbaur\n\n# Copyright (c) 2013-2015 Stefan Eileman\n\n#\n\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# configures an external git repository\n\n# Usage:\n\n#  * Automatically reads, parses and updates a .gitexternals file if it only\n\n#    contains lines in the form \"# <directory> <giturl> <gittag>\".\n\n#    This function parses the file for this pattern and then calls\n\n#    git_external on each found entry. Additionally it provides an\n\n#    update target to bump the tag to the master revision by\n\n#    recreating .gitexternals.\n\n#  * Provides function\n\n#    git_external(<directory> <giturl> <gittag> [NO_UPDATE, VERBOSE] [RESET <files>])\n\n#  git_external_manage(<file>)\n\n#\n\n# [optional] Flags which control behaviour\n\n#  NO_UPDATE\n\n#    When set, GitExternal will not change a repo that has already been checked out. \n\n#    The purpose of this is to allow one to set a default branch to be checked out, \n\n#    but stop GitExternal from changing back to that branch if the user has checked \n\n#    out and is working on another.\n\n#  VERBOSE \n\n#    When set, displays information about git commands that are executed  \n\n#\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# nothing to do\n",
        "Line" : 65,
        "CharPositionInLine" : 34
      },
      "3" : {
        "Text" : "# reset generated files\n",
        "Line" : 69,
        "CharPositionInLine" : 6
      },
      "4" : {
        "Text" : "# fetch latest update\n",
        "Line" : 83,
        "CharPositionInLine" : 6
      },
      "5" : {
        "Text" : "# checkout requested tag\n",
        "Line" : 92,
        "CharPositionInLine" : 6
      },
      "6" : {
        "Text" : "# update tag\n",
        "Line" : 103,
        "CharPositionInLine" : 6
      },
      "7" : {
        "Text" : "#      GIT_EXTERNAL_MESSAGE(\"git rebase FETCH_HEAD\")\n\n#      execute_process(COMMAND ${GIT_EXECUTABLE} rebase FETCH_HEAD\n\n#        RESULT_VARIABLE RESULT OUTPUT_VARIABLE OUTPUT ERROR_VARIABLE OUTPUT\n\n#        WORKING_DIRECTORY \"${DIR}\")\n\n#      if(RESULT)\n\n#        message(STATUS \"git rebase failed, aborting ${DIR} merge\")\n\n#        execute_process(COMMAND ${GIT_EXECUTABLE} rebase --abort\n\n#          WORKING_DIRECTORY \"${DIR}\")\n\n#      endif()\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Create a unique, flat name\n",
        "Line" : 141,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# not done\n",
        "Line" : 144,
        "CharPositionInLine" : 64
      },
      "10" : {
        "Text" : "# pull in identified external\n",
        "Line" : 145,
        "CharPositionInLine" : 10
      },
      "11" : {
        "Text" : "# Create update script and target to bump external spec\n",
        "Line" : 148,
        "CharPositionInLine" : 10
      },
      "12" : {
        "Text" : "# Create a unique, flat name\n",
        "Line" : 158,
        "CharPositionInLine" : 10
      },
      "13" : {
        "Text" : "# Flattens a git external repository into its parent repo:\n\n# * Clean any changes from external\n\n# * Unlink external from git: Remove external/.git and .gitexternals\n\n# * Add external directory to parent\n\n# * Commit with flattened repo and tag info\n\n# - Depend on release branch checked out\n",
        "Line" : 196,
        "CharPositionInLine" : 10
      },
      "CommentCount" : 14
    },
    "cmake/Modules/LibFindMacros.cmake" : {
      "ObjectId" : "69975c51be3f9c5e0ff372a4424f8de3b580ee88",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Works the same as find_package, but forwards the \"REQUIRED\" and \"QUIET\" arguments\n\n# used for the current package. For this to work, the first parameter must be the\n\n# prefix of the current package, then the prefix of the new package etc, which are\n\n# passed to find_package.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# CMake developers made the UsePkgConfig system deprecated in the same release (2.6)\n\n# where they added pkg_check_modules. Consequently I need to support both in my scripts\n\n# to avoid those deprecated warnings. Here's a helper that does just that.\n\n# Works identically to pkg_check_modules, except that no checks are needed prior to use.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Do the final processing once the paths have been detected.\n\n# If include dirs are needed, ${PREFIX}_PROCESS_INCLUDES should be set to contain\n\n# all the variables, each of which contain one include directory.\n\n# Ditto for ${PREFIX}_PROCESS_LIBS and library files.\n\n# Will set ${PREFIX}_FOUND, ${PREFIX}_INCLUDE_DIRS and ${PREFIX}_LIBRARIES.\n\n# Also handles errors in case library detection was required, etc.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Skip processing if already processed during this run\n",
        "Line" : 39,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# Start with the assumption that the library was found\n",
        "Line" : 41,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Process all includes and set _FOUND to false if any are missing\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# Process all libraries and set _FOUND to false if any are missing\n",
        "Line" : 54,
        "CharPositionInLine" : 4
      },
      "7" : {
        "Text" : "# Print message and/or exit on fatal error\n",
        "Line" : 64,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 8
    },
    "cmake/Modules/ProcessorCount.cmake" : {
      "ObjectId" : "4323dee3b02093e10fbf4f953869034ed446b781",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Unknown:\n",
        "Line" : 2,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Linux:\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "2" : {
        "Text" : "# Mac:\n",
        "Line" : 12,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# Windows:\n",
        "Line" : 21,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 4
    },
    "cmake/Modules/intel_mic_toolchain.cmake" : {
      "ObjectId" : "5f13d7679b1540197ab3f18729e0fea9681adb44",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# specify the cross compiler\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# where is the target environment \n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set a variable for us to use\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "21ff7374009a639baa4030f11684c44aff5cdf45",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add a target to generate API documentation with Doxygen\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_dependencies(doc refman.pdf)\n",
        "Line" : 30,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "src/ITTNotify/CMakeLists.txt" : {
      "ObjectId" : "6bed7888f739a8e6c78fbdd1e46c71975c5ea6be",
      "LastModified" : "2018-10-23T22:57:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014-2018 Kevin Huck\n\n# Copyright (c) 2014-2018 University of Oregon\n\n#\n\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/apex/CMakeLists.txt" : {
      "ObjectId" : "ec8cd7d893cdbed97b69f03b56c20f68ec8764fc",
      "LastModified" : "2018-10-23T22:57:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2014-2018 Kevin Huck\n\n# Copyright (c) 2014-2018 University of Oregon\n\n#\n\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/comm/CMakeLists.txt" : {
      "ObjectId" : "7b7f6b8a38f53d3f78fdbcd629b5d54c89e6d2d2",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# install the header.\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/comm/mpi/CMakeLists.txt" : {
      "ObjectId" : "0ae87094b2c1879ff59ef59234d29bc5498c8389",
      "LastModified" : "2018-10-23T22:57:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure that spaces in linker lines don't cause CMake errors\n\n#if (POLICY CMP0004)\n\n#  cmake_policy(SET CMP0004 OLD)\n\n#endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Create a library called \"apex_mpi\" which includes the source file\n\n# \"apex_global_mpi.c\". \n\n# The extension is already found. Any number of sources could be listed here. \n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# add the binary tree to the search path for include files\n\n# so that we will find ittnotify.h\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/examples/CMakeLists.txt" : {
      "ObjectId" : "60f357a514f75de28b28b9462e0e555729448547",
      "LastModified" : "2018-10-23T22:57:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory (PthreadWrapper)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add a test program which actually uses the CPU\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#add_subdirectory (MPIGlobalTest)  \n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# does the application run\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Run the test program which actually uses the CPU\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Run the test program which tests the ITT interface\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Run the test program which tests the threads interface\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Run the test program which tests the yielding\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Run the test program which tests the overhead in the threads interface\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# TEst the policy engine support\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# TEst the policy engine support\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Test the resetting of counters and timers\n",
        "Line" : 90,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Test the power/energy support\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Test the throttling support\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Run the test program which tests the mpi interface\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#add_test (ExampleMPIGlobalTest ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} 2\n\n#${MPIEXEC_PREFLAGS} MPIGlobalTest/mpi_global_test ${MPIEXEC_POSTFLAGS})  \n\n#set_tests_properties(ExampleMPIGlobalTest PROPERTIES ENVIRONMENT \"APEX_POLICY=1\")\n\n#set_property(TEST ExampleMPIGlobalTest APPEND PROPERTY ENVIRONMENT \"APEX_THROTTLE_ENERGY=1\")\n\n#set_property(TEST ExampleMPIGlobalTest APPEND PROPERTY ENVIRONMENT \"APEX_THROTTLE_CONCURRENCY=1\")\n",
        "Line" : 143,
        "CharPositionInLine" : 2
      },
      "16" : {
        "Text" : "#  add_test (ExampleLuleshMPI ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} 8\n\n#    ${MPIEXEC_PREFLAGS} LuleshMPI/lulesh_MPI_2.0 -s 15 ${MPIEXEC_POSTFLAGS})  \n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#    add_test (ExampleLuleshMPIOpenMP ${MPIEXEC} ${MPIEXEC_NUMPROC_FLAG} 8\n\n#      ${MPIEXEC_PREFLAGS} LuleshMPIOpenMP/lulesh_MPI_OpenMP_2.0\n\n#      -s 15 ${MPIEXEC_POSTFLAGS})  \n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "#  add_test (ExampleLuleshOpenMP LuleshOpenMP/lulesh_OpenMP_2.0 -s 15)\n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 19
    },
    "src/examples/CountCalls/CMakeLists.txt" : {
      "ObjectId" : "f3acf87e58f0d41794f511671128dc82700f0e71",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add executable called \"count_calls\" that is built from the source file\n\n# \"count_calls.cpp\". The extensions are automatically found. \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/examples/CustomTuning/CMakeLists.txt" : {
      "ObjectId" : "6d13a947c38204e3c0c113e5eb1415188155f645",
      "LastModified" : "2018-10-23T22:57:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add executable called \"custom_tuning\" that is built from the source file\n\n# \"custom_tuning.cpp\". The extensions are automatically found. \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}\")\n\n# set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}\")\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/examples/DemoC/CMakeLists.txt" : {
      "ObjectId" : "8c43414b489a24132f5a42026ae811c4a06bbf9b",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add executable called \"apexCDemo\" that is built from the source file\n\n# \"demo.c\". The extensions are automatically found. \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/examples/DemoCpp/CMakeLists.txt" : {
      "ObjectId" : "6bd1e580c1b0f8b7e1099c0c61b847af94796179",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add executable called \"apexCppDemo\" that is built from the source file\n\n# \"demo.cpp\". The extensions are automatically found. \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/examples/LuleshMPI/CMakeLists.txt" : {
      "ObjectId" : "14c26a2967cabecfce04848b6ab4420628958ac5",
      "LastModified" : "2018-10-23T22:57:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure that spaces in linker lines don't cause CMake errors\n\n#if (POLICY CMP0004)\n\n#  cmake_policy(SET CMP0004 OLD)\n\n#endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add executable called \"lulesh_MPI_2.0\" that is built from the source file\n\n# \"lulesh.cc\". The extensions are automatically found. \n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/examples/LuleshMPIOpenMP/CMakeLists.txt" : {
      "ObjectId" : "126a21813ea801361fabda3a2b5fd9c8cce9202b",
      "LastModified" : "2018-10-23T22:57:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure that spaces in linker lines don't cause CMake errors\n\n#if (POLICY CMP0004)\n\n#  cmake_policy(SET CMP0004 OLD)\n\n#endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add executable called \"lulesh_MPI_OpenMP_2.0\" that is built from the source file\n\n# \"lulesh.cc\". The extensions are automatically found. \n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/examples/LuleshOpenMP/CMakeLists.txt" : {
      "ObjectId" : "7a8757765845477bb2170d5211115220439453fc",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add executable called \"lulesh_OpenMP_2.0\" that is built from the source file\n\n# \"lulesh.cc\". The extensions are automatically found. \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# can't exceed this, for math reasons.\n",
        "Line" : 13,
        "CharPositionInLine" : 34
      },
      "4" : {
        "Text" : "# can't exceed this, for math reasons.\n",
        "Line" : 14,
        "CharPositionInLine" : 36
      },
      "5" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/examples/MPIAutoBalance/CMakeLists.txt" : {
      "ObjectId" : "1c08e7e58fdd87a8396ded52214b2d619838bfc0",
      "LastModified" : "2018-10-23T22:57:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure that spaces in linker lines don't cause CMake errors\n\n#if (POLICY CMP0004)\n\n#  cmake_policy(SET CMP0004 OLD)\n\n#endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add executable called \"mpi_auto_balance\" that is built from the source file\n\n# \"mpi_auto_balance.cpp\". The extensions are automatically found. \n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link the executable to the Apex library. \n\n# Note: that stupid -lapex_pthread_wrapper is required on the buildbot system.\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "## Compiler flags\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "src/examples/MPIGlobalTest/CMakeLists.txt" : {
      "ObjectId" : "0482e4926b3691291cad9ee80211e75d55f30d3c",
      "LastModified" : "2018-10-23T22:57:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure that spaces in linker lines don't cause CMake errors\n\n#if (POLICY CMP0004)\n\n#  cmake_policy(SET CMP0004 OLD)\n\n#endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add executable called \"mpi_global_test\" that is built from the source file\n\n# \"mpi_test.cpp\". The extensions are automatically found. \n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/examples/MPIImbalancePolicy/CMakeLists.txt" : {
      "ObjectId" : "1d572b82474d046e97258743aa8df54fd01f90ca",
      "LastModified" : "2018-10-23T22:57:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure that spaces in linker lines don't cause CMake errors\n\n#if (POLICY CMP0004)\n\n#  cmake_policy(SET CMP0004 OLD)\n\n#endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add executable called \"mpi_imbalance_test\" that is built from the source file\n\n# \"mpi_test.cpp\". The extensions are automatically found. \n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/examples/MPITest/CMakeLists.txt" : {
      "ObjectId" : "b0b5db1addc29f2cc91f9b9c140635aaf54ea75d",
      "LastModified" : "2018-10-23T22:57:15Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure that spaces in linker lines don't cause CMake errors\n\n#if (POLICY CMP0004)\n\n#  cmake_policy(SET CMP0004 OLD)\n\n#endif()\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Add executable called \"mpi_test\" that is built from the source file\n\n# \"mpi_test.cpp\". The extensions are automatically found. \n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/examples/Matmult/CMakeLists.txt" : {
      "ObjectId" : "a56524954a915a6469d5e9e10ac8d5dff7b8ffab",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add executable called \"apexCDemo\" that is built from the source file\n\n# \"demo.c\". The extensions are automatically found. \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/examples/OpenMPOverhead/CMakeLists.txt" : {
      "ObjectId" : "6468d58dee38f73dbeaef398e9af7c8c3916ded6",
      "LastModified" : "2019-02-06T19:29:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add executable called \"openmp_overhead\" that is built from the source file\n\n# \"openmp_overhead.cpp\". The extensions are automatically found. \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/examples/OpenMP_1D_stencil/CMakeLists.txt" : {
      "ObjectId" : "e5e6129e9b06f324263d55491d39488cecc08743",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add executable called \"1d_stencil\" that is built from the source file\n\n# \"1d_stencil.cpp\". The extensions are automatically found. \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/examples/OpenMP_Policy/CMakeLists.txt" : {
      "ObjectId" : "1f097226afc6de8f931f2838cfa65bc3d377d65a",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copyright (c) 2015 University of Oregon\n\n#\n\n# Distributed under the Boost Software License, Version 1.0. (See accompanying\n\n# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/examples/Overhead/CMakeLists.txt" : {
      "ObjectId" : "cb9ffab706e5d529ec96cd1afa802e6dd447a4f7",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add executable called \"testOverhead\" that is built from the source file\n\n# \"testOverhead.cpp\". The extensions are automatically found. \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/examples/PolicyEngineCppExample/CMakeLists.txt" : {
      "ObjectId" : "74a7cdc772a3122c60a4fbc5c1a499f75c5fcb8b",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add executable called \"testPolicyEngine\" that is built from the source file\n\n# \"testPolicyEngine.cpp\". The extensions are automatically found. \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/examples/PolicyEngineExample/CMakeLists.txt" : {
      "ObjectId" : "41f31ed7888d28afadd9a8b511039ce096cf35cf",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add executable called \"testPolicyEngine\" that is built from the source file\n\n# \"testPolicyEngine.c\". The extensions are automatically found. \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/examples/PolicyUnitTest/CMakeLists.txt" : {
      "ObjectId" : "acb146d65ecf654930e10cb0a12dedfdc28fbdc1",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add executable called \"policyUnitTest\" that is built from the source file\n\n# \"policyUnitTest.c\". The extensions are automatically found. \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/examples/PthreadWrapper/CMakeLists.txt" : {
      "ObjectId" : "a20e8ccb845b22f8ef021c29314d5a77db7fd39d",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# add example executable\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/examples/TestGetPower/CMakeLists.txt" : {
      "ObjectId" : "24e18d2c9a85a234af31029a612dc7c25605b2b0",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add executable called \"testpower\" that is built from the source file\n\n# \"getpower.cpp\". The extensions are automatically found. \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/examples/TestITT/CMakeLists.txt" : {
      "ObjectId" : "51fb788876808622b20123ff92222910088093be",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add executable called \"testITT\" that is built from the source file\n\n# \"testITT.cpp\". The extensions are automatically found. \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/examples/TestOpenMP/CMakeLists.txt" : {
      "ObjectId" : "b614079ef8b4d318f97fc56edc3cdf98e5fd62de",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add executable called \"openmp_test\" that is built from the source file\n\n# \"openmp_test.cpp\". The extensions are automatically found. \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/examples/TestReset/CMakeLists.txt" : {
      "ObjectId" : "5a3177056bff806432152269f0a2b5332d29c85b",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add executable called \"testReset\" that is built from the source file\n\n# \"reset.cpp\". The extensions are automatically found. \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/examples/TestThreads/CMakeLists.txt" : {
      "ObjectId" : "015a94e6d4ae49a92f440df6ae74b654667972be",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add executable called \"testThreads\" that is built from the source file\n\n# \"testThreads.cpp\". The extensions are automatically found. \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/examples/Throttling/CMakeLists.txt" : {
      "ObjectId" : "750f7f243eea6de4c36713c9e96c09ec161e13ad",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add executable called \"testThrottling\" that is built from the source file\n\n# \"testThrottling.c\". The extensions are automatically found. \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/examples/ThrottlingActiveHarmony/CMakeLists.txt" : {
      "ObjectId" : "663d0db4451e4b9d9ad18ec43f117882ab2a3b46",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add executable called \"testThrottlingActiveHarmony\" that is built from the source file\n\n# \"testThrottlingActiveHarmony.c\". The extensions are automatically found. \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/examples/ThrottlingCpp/CMakeLists.txt" : {
      "ObjectId" : "74072a6d07af7776a340f32b3d41ab66c28543ec",
      "LastModified" : "2017-01-09T22:30:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add executable called \"testThrottlingCpp\" that is built from the source file\n\n# \"testThrottling.cpp\". The extensions are automatically found. \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "src/examples/TuningRequest/CMakeLists.txt" : {
      "ObjectId" : "5c52c91d64e5744242079492ff805eb4d2a44ec8",
      "LastModified" : "2019-02-06T19:29:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add executable called \"tuning_request\" that is built from the source file\n\n# \"tuning_request.cpp\". The extensions are automatically found. \n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set (CMAKE_C_FLAGS \"${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}\")\n\n#set (CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}\")\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Link the executable to the Apex library. \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "src/openmp/CMakeLists.txt" : {
      "ObjectId" : "c60063f9c7de20d04784c35cecab43433e21931b",
      "LastModified" : "2019-02-06T19:29:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#link_directories (${APEX_BINARY_DIR}/src/apex_pthread_wrapper) \n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/scripts/CMakeLists.txt" : {
      "ObjectId" : "04b8e4357f3789ad0066e719360c487ce4b81318",
      "LastModified" : "2019-02-06T19:29:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#INSTALL_FILES(bin FILES ${CMAKE_BINARY_DIR}/src/scripts/apex_exec)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "src/unit_tests/C++/CMakeLists.txt" : {
      "ObjectId" : "0dfac138919a464d8982f851b06519e7e41df0c8",
      "LastModified" : "2019-02-06T19:29:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#link_directories (${APEX_BINARY_DIR}/src/apex_pthread_wrapper) \n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#apex_set_thread_cap\n\n#apex_setup_power_cap_throttling\n\n#apex_setup_custom_tuning\n\n#get_tunable_params\n",
        "Line" : 43,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# std::threads crash when linked statically. :(\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# install(TARGETS \"${example_program}_cpp\" RUNTIME DESTINATION \"bin/apex_unit_tests\" OPTIONAL)\n",
        "Line" : 80,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "#set_target_properties(apex_fibonacci_std_async_cpp PROPERTIES LINK_FLAGS \"-fsplit-stack\")\n\n#target_link_libraries (apex_fibonacci_std_async_cpp apex_pthread_wrapper)        \n\n#add_dependencies (apex_fibonacci_std_async_cpp apex_pthread_wrapper)    \n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "src/unit_tests/C/CMakeLists.txt" : {
      "ObjectId" : "07a8c0c079ae5921d5b63cb4dcbba3e6dca3f59f",
      "LastModified" : "2019-02-06T19:29:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#link_directories (${APEX_BINARY_DIR}/src/apex_pthread_wrapper) \n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#    apex_setup_power_cap_throttling\n\n#    apex_setup_throughput_tuning\n\n#    apex_set_thread_cap\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(example_programs \"${example_programs};apex_cross_thread_timing\")\n",
        "Line" : 45,
        "CharPositionInLine" : 2
      },
      "5" : {
        "Text" : "#if (OPENMP_FOUND)\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#set(example_programs \"${example_programs} apex_setup_throughput_tuning\")\n",
        "Line" : 55,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "#endif (OPENMP_FOUND)\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# install(TARGETS ${example_program} RUNTIME DESTINATION \"bin/apex_unit_tests\" OPTIONAL)\n",
        "Line" : 71,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 9
    },
    "src/utils/CMakeLists.txt" : {
      "ObjectId" : "65329a8f0c2c32942ae50510eaa38bedf4b97005",
      "LastModified" : "2019-02-06T19:29:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#link_directories (${APEX_BINARY_DIR}/src/apex_pthread_wrapper) \n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "src/wrappers/CMakeLists.txt" : {
      "ObjectId" : "a1194d9f3fa93fc69a4bb54e4e3c5d69afa3d378",
      "LastModified" : "2019-02-06T19:29:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Make sure the compiler can find include files from our Apex library. \n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Make sure the linker can find the Apex library once it is built. \n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add library called \"testOverhead\" that is built from the source file\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    }
  },
  "FileTypes" : {
    "CMAKE" : 69
  },
  "ElapsedTime" : 1116
}