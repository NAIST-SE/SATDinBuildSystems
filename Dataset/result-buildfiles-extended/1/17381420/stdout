{
  "Repository" : "17381420",
  "Revision" : "HEAD",
  "ObjectId" : "ebb387fa230dcecf1170cf663e76cc93a48f16f2",
  "CommitTime" : "2019-04-15T19:09:50Z",
  "Files" : {
    "Makefile" : {
      "ObjectId" : "e13010b62e62114d50c2fef9ac68ce2afbf31404",
      "LastModified" : "2019-04-15T12:19:58Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "## In CI environment, we should change some configuration\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1,
      "Errorlog" : "line 31:95 token recognition error at: '\"\\0'\nline 31:109 token recognition error at: '\\0'\nline 31:121 token recognition error at: '\", $$1, $$2}'\\n\\t@exit 1\\n\\n\\n###########################\\n# Clean\\n###########################\\nCLEAN_TARGETS := \\\\n\\tdist \\\\n\\ttest_cache \\\\n\\ttype_test \\\\n\\ttmp_mjs \\\\n\\n.PHONY: clean\\nclean: $(addprefix clean_, $(CLEAN_TARGETS))\\n\\n.PHONY: clean_dist\\nclean_dist:\\n\\t$(NPM_BIN)/del $(DIST_DIR)\\n\\n.PHONY: clean_test_cache\\nclean_test_cache:\\n\\t$(NPM_BIN)/del $(TEST_CACHE_DIR)\\n\\n.PHONY: clean_type_test\\nclean_type_test:\\n\\t$(NPM_BIN)/del $(TYPE_TEST_DIR)\\n\\n.PHONY: clean_tmp_mjs\\nclean_tmp_mjs:\\n\\t$(NPM_BIN)/del $(TMP_MJS_DIR)\\n\\n\\n###########################\\n# Build\\n###########################\\n.PHONY: distribution\\ndistribution: build cp_docs cp_changelog cp_license cp_readme cp_manifest\\n\\n.PHONY: build\\nbuild: build_cjs build_esm build_mixedlib ## Build all targets.\\n\\n.PHONY: build_cjs\\nbuild_cjs: build_cjs_js build_cjs_type_definition build_cjs_ts ## Build `cjs/`.\\n\\n.PHONY: build_cjs_js\\nbuild_cjs_js: clean_dist\\n\\t$(NPM_BIN)/babel $(SRC_DIR) \\\\n    --out-dir $(DIST_COMMONJS_DIR) \\\\n    --extensions .js \\\\n    --no-babelrc \\\\n    --config-file $(CURDIR)/tools/babel/babelrc.cjs.js\\n\\n.PHONY: build_cjs_type_definition\\nbuild_cjs_type_definition: clean_dist\\n\\t$(NPM_BIN)/cpx '$(SRC_DIR)/**/*.d.ts' $(DIST_COMMONJS_DIR) --preserve\\n\\n.PHONY: build_cjs_ts\\nbuild_cjs_ts: clean_dist\\n\\t$(NPM_BIN)/tsc --project $(CURDIR)/tsconfig_cjs.json --outDir $(DIST_COMMONJS_DIR)\\n\\n.PHONY: build_esm\\nbuild_esm: build_esm_js build_esm_ts build_mjs_cp_mjs_to_esm ## Build `esm/`.\\n\\n.PHONY: build_esm_js\\nbuild_esm_js: build_esm_js_call_cpx build_esm_js_call_babel\\n\\n.PHONY: build_esm_js_call_cpx\\nbuild_esm_js_call_cpx: clean_dist\\n\\t$(NPM_BIN)/cpx '$(SRC_DIR)/**/*.d.ts' $(DIST_ESM_DIR) --preserve\\n\\n.PHONY: build_esm_js_call_babel\\nbuild_esm_js_call_babel: clean_dist\\n\\t$(NPM_BIN)/babel $(SRC_DIR) --out-dir $(DIST_ESM_DIR) --extensions=.js --no-babelrc --config-file $(CURDIR)/tools/babel/babelrc.esm.js\\n\\n.PHONY: build_esm_ts\\nbuild_esm_ts: clean_dist\\n\\t$(NPM_BIN)/tsc --project $(CURDIR)/tsconfig_esm.json --outDir $(DIST_ESM_DIR)\\n\\n.PHONY: build_mjs_cp_mjs_to_esm\\nbuild_mjs_cp_mjs_to_esm: build_mjs_rename_js_to_mjs clean_dist\\n\\t$(NPM_BIN)/cpx '$(TMP_MJS_DIR)/**/*.mjs' $(DIST_ESM_DIR) --preserve\\n\\n.PHONY: build_mjs_rename_js_to_mjs\\nbuild_mjs_rename_js_to_mjs: build_mjs_create_tmp_mjs\\n\\t$(NPM_BIN)/rename '$(TMP_MJS_DIR)/**/*.js' '{{f}}.mjs'\\n\\n.PHONY: build_mjs_create_tmp_mjs\\nbuild_mjs_create_tmp_mjs: build_mjs_create_tmp_mjs_call_tsc build_mjs_create_tmp_mjs_call_babel\\n\\n.PHONY: build_mjs_create_tmp_mjs_call_tsc\\nbuild_mjs_create_tmp_mjs_call_tsc: clean_tmp_mjs\\n\\t$(NPM_BIN)/tsc --project $(CURDIR)/tsconfig_esm.json --outDir $(TMP_MJS_DIR) --declaration false\\n\\n.PHONY: build_mjs_create_tmp_mjs_call_babel\\nbuild_mjs_create_tmp_mjs_call_babel: clean_tmp_mjs\\n\\t$(NPM_BIN)/babel $(SRC_DIR) --out-dir $(TMP_MJS_DIR) --extensions=.js --no-babelrc --config-file $(CURDIR)/tools/babel/babelrc.esm.js\\n\\n\\n.PHONY: build_mixedlib\\nbuild_mixedlib: build_mixedlib_cp_mjs build_mixedlib_cp_cjs build_mixedlib_cp_dts ## Build `lib/`.\\n\\n.PHONY: build_mixedlib_cp_mjs\\nbuild_mixedlib_cp_mjs: build_esm clean_dist\\n\\t$(NPM_BIN)/cpx '$(DIST_ESM_DIR)/**/*.mjs' $(DIST_MIXED_LIB_DIR) --preserve\\n\\n.PHONY: build_mixedlib_cp_cjs\\nbuild_mixedlib_cp_cjs: build_cjs clean_dist\\n\\t$(NPM_BIN)/cpx '$(DIST_COMMONJS_DIR)/**/*.js' $(DIST_MIXED_LIB_DIR) --preserve\\n\\n.PHONY: build_mixedlib_cp_dts\\nbuild_mixedlib_cp_dts: build_esm clean_dist\\n\\t$(NPM_BIN)/cpx '$(DIST_ESM_DIR)/**/*.d.ts' $(DIST_MIXED_LIB_DIR) --preserve\\n\\n.PHONY: cp_docs\\ncp_docs: clean_dist\\n\\t$(NPM_BIN)/cpx '$(DOCS_DIR)/**/*' $(DIST_DOCS_DIR)\\n\\n.PHONY: cp_changelog\\ncp_changelog: clean_dist\\n\\t$(NPM_BIN)/cpx '$(CURDIR)/CHANGELOG.md' $(DIST_DIR)\\n\\n.PHONY: cp_license\\ncp_license: clean_dist\\n\\t$(NPM_BIN)/cpx '$(CURDIR)/LICENSE.MIT' $(DIST_DIR)\\n\\n.PHONY: cp_readme\\ncp_readme: clean_dist\\n\\t$(NPM_BIN)/cpx '$(CURDIR)/README.md' $(DIST_DIR)\\n\\n.PHONY: cp_manifest\\ncp_manifest: clean_dist\\n\\t$(NPM_BIN)/cpx '$(CURDIR)/package.json' $(DIST_DIR)\\n\\n\\n###########################\\n# Lint\\n###########################\\n.PHONY: lint\\nlint: eslint ## Run all lints\\n\\n.PHONY: eslint\\neslint:\\n\\t$(NPM_BIN)/eslint $(CURDIR) '$(CURDIR)/**/.eslintrc.js' --ext=.js,.jsx,.mjs,.ts,.tsx\\n\\n\\n###########################\\n# Test\\n###########################\\n.PHONY: test\\ntest: lint build run_ava mocha tscheck test_distribution_contain_all ## Run all tests\\n\\n.PHONY: tscheck\\ntscheck: clean_type_test build ## Test check typing consistency.\\n\\t$(NPM_BIN)/tsc --project $(CURDIR)/tsconfig_test.json --noEmit\\n\\n.PHONY: test_preprocess\\ntest_preprocess: clean_test_cache\\n\\t$(NPM_BIN)/babel $(SRC_TEST_DIR) --out-dir $(TEST_CACHE_DIR) --extensions .js --no-babelrc --config-file $(CURDIR)/tools/babel/babelrc.power_assert.js\\n\\n.PHONY: mocha\\nmocha: test_preprocess build\\n\\t$(MAKE) run_mocha_with_power_assert -C $(CURDIR)\\n\\n.PHONY: run_mocha_with_power_assert\\nrun_mocha_with_power_assert:\\n\\t$(NPM_BIN)/mocha --recursive '$(TEST_CACHE_DIR)/**/test_*.js' --reporter $(MOCHA_REPORTER)\\n\\n.PHONY: run_mocha\\nrun_mocha: ## Run mocha without any transforms.\\n\\t$(NPM_BIN)/mocha --recursive '$(SRC_TEST_DIR)/**/test_*.js' --reporter $(MOCHA_REPORTER)\\n\\n.PHONY: run_ava\\nrun_ava: build\\n\\t$(MAKE) run_ava_only -C $(CURDIR)\\n\\n.PHONY: run_ava_only\\nrun_ava_only: ## Run ava only.\\n\\t$(NPM_BIN)/ava\\n\\n.PHONY: git_diff\\ngit_diff: ## Test whether there is no committed changes.\\n\\tgit diff --exit-code\\n\\n.PHONY: test_distribution_contain_all\\ntest_distribution_contain_all: distribution\\n\\t$(MAKE) run_test_distribution_contain_all\\n\\n.PHONY: run_test_distribution_contain_all\\nrun_test_distribution_contain_all:\\n\\tOUTDIR=$(DIST_DIR) $(NODE_BIN) $(CURDIR)/tools/pkg_files_tester.js\\n\\n\\n###########################\\n# CI\\n###########################\\n.PHONY: ci\\nci:\\n\\t$(MAKE) clean\\n\\t$(MAKE) test\\n\\t$(MAKE) git_diff\\n\\n\\n###########################\\n# Tools\\n###########################\\n.PHONY: fmt\\nfmt: eslint_fmt ## Apply all formatters\\n\\n.PHONY: eslint_fmt\\neslint_fmt: \\n\\t$(NPM_BIN)/eslint $(CURDIR) $(CURDIR)/**/.eslintrc.js --ext .js --fix\\n\\n\\n.PHONY: prepublish\\nprepublish: ## Run some commands for 'npm run prepublish'\\n\\t$(MAKE) clean -C $(CURDIR)\\n\\t$(MAKE) distribution -C $(CURDIR)\\n\\t$(MAKE) test_distribution_contain_all -C $(CURDIR)\\n\\n.PHONY: publish\\npublish: prepublish ## Run some commands for 'npm publish'\\n\\tcd $(DIST_DIR) && npm publish\\n\u0000'\n"
    }
  },
  "FileTypes" : {
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 636
}