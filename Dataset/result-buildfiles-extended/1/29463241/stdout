{
  "Repository" : "29463241",
  "Revision" : "HEAD",
  "ObjectId" : "b55434b26515ea2e270ff4be05cf4e13aed17367",
  "CommitTime" : "2019-04-12T14:44:44Z",
  "Files" : {
    "cpp/Builds/OCL/CMakeLists.txt" : {
      "ObjectId" : "10cac40c1b91e00d0749496a16f901152de3d143",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ==== FLAGS\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET( AXULIARY_COMPILE_FLAGS \"-w -O3\") \n\n# -O3 and -Ofast does not work for SDL2_net\n\n#SET( AXULIARY_COMPILE_FLAGS \"-w -O2 -fPIC\")\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ==== DIRS\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#${COMMON_SDL_SRCS}/SDL2OGL3\n",
        "Line" : 35,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# ==== BUILD TARGETS\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#add_subdirectory( ${MY_SRC_DIR}/common   ${MY_BIN_SHARE}/common    )\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#add_subdirectory( ${MY_SRC_DIR}/libs         ${MY_BIN_SHARE}/libs    )\n\n#add_subdirectory( ${MY_SOURCE_DIR}/sketches    )   # currently empty\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ---- these need SDL\n\n#add_subdirectory( ${MY_SRC_DIR}/common_SDL   ${MY_BIN_SHARE}/common_SDL   )\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#add_subdirectory( ${MY_SRC_DIR}/libs_SDL     ${MY_BIN_SHARE}/libs_SDL    )\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#add_subdirectory( ${MY_SRC_DIR}/engines      ${MY_BIN_SHARE}/engines     )\n\n#add_subdirectory( ${MY_SRC_DIR}/apps         ${MY_BIN_SHARE}/apps        )\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 10
    },
    "cpp/Builds/all/CMakeLists.txt" : {
      "ObjectId" : "7973a720582f22b26675a9e8436ee556cc23ccf6",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ==== FLAGS\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET( AXULIARY_COMPILE_FLAGS \"-w -O3\") \n\n# -O3 and -Ofast does not work for SDL2_net\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ==== DIRS\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#${MY_SRC_DIR}/engines\n",
        "Line" : 35,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# ==== BUILD TARGETS\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# currently empty\n",
        "Line" : 44,
        "CharPositionInLine" : 69
      },
      "6" : {
        "Text" : "# ---- these need SDL\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#add_subdirectory( ${MY_SRC_DIR}/engines      ${MY_BIN_SHARE}/engines      )\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cpp/Builds/apps/CMakeLists.txt" : {
      "ObjectId" : "2b6a53ecedd8a0b8600825e2cfcf6ad631514e82",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ==== FLAGS\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET( AXULIARY_COMPILE_FLAGS \"-w -O3\") \n\n# -O3 and -Ofast does not work for SDL2_net\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ==== DIRS\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#${MY_SRC_DIR}/engines\n",
        "Line" : 35,
        "CharPositionInLine" : 8
      },
      "4" : {
        "Text" : "# ==== BUILD TARGETS\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#add_subdirectory( ${MY_SRC_DIR}/libs     ${MY_BIN_SHARE}/libs    )\n\n#add_subdirectory( ${MY_SOURCE_DIR}/sketches    )   # currently empty\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# ---- these need SDL\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#add_subdirectory( ${MY_SRC_DIR}/libs_SDL     ${MY_BIN_SHARE}/libs_SDL     )\n\n#add_subdirectory( ${MY_SRC_DIR}/sketches_SDL ${MY_BIN_SHARE}/sketches_SDL )\n\n#add_subdirectory( ${MY_SRC_DIR}/engines      ${MY_BIN_SHARE}/engines      )\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cpp/Builds/libs/CMakeLists.txt" : {
      "ObjectId" : "d0f2dd54a1f3585111b9012469919ad999608ead",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ==== FLAGS\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET( AXULIARY_COMPILE_FLAGS \"-w -O3\") \n\n# -O3 and -Ofast does not work for SDL2_net\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ==== DIRS\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#${COMMON_SDL_SRCS}\n",
        "Line" : 29,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#${COMMON_SDL_SRCS}/network\n\n#${COMMON_SDL_SRCS}/SDL2\n\n#${COMMON_SDL_SRCS}/SDL2OGL\n\n#${COMMON_SDL_SRCS}/SDL2OGL3\n\n#${MY_SRC_DIR}/engines\n",
        "Line" : 30,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# ==== BUILD TARGETS\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#add_subdirectory( ${MY_SOURCE_DIR}/sketches    )   # currently empty\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# ---- these need SDL\n\n#add_subdirectory( ${MY_SRC_DIR}/common_SDL   ${MY_BIN_SHARE}/common_SDL   )\n\n#add_subdirectory( ${MY_SRC_DIR}/libs_SDL     ${MY_BIN_SHARE}/libs_SDL     )\n\n#add_subdirectory( ${MY_SRC_DIR}/sketches_SDL ${MY_BIN_SHARE}/sketches_SDL )\n\n#add_subdirectory( ${MY_SRC_DIR}/engines      ${MY_BIN_SHARE}/engines      )\n\n#add_subdirectory( ${MY_SRC_DIR}/apps         ${MY_BIN_SHARE}/apps         )\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cpp/Builds/libs_SDL/CMakeLists.txt" : {
      "ObjectId" : "36411ffac49b48b09e06f479fa111bd83d568b40",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ==== FLAGS\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET( AXULIARY_COMPILE_FLAGS \"-w -O3\") \n\n# -O3 and -Ofast does not work for SDL2_net\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ==== DIRS\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ==== BUILD TARGETS\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#add_subdirectory( ${MY_SRC_DIR}/libs     ${MY_BIN_SHARE}/libs    )\n\n#add_subdirectory( ${MY_SOURCE_DIR}/sketches    )   # currently empty\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ---- these need SDL\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#add_subdirectory( ${MY_SRC_DIR}/sketches_SDL ${MY_BIN_SHARE}/sketches_SDL )\n\n#add_subdirectory( ${MY_SRC_DIR}/engines      ${MY_BIN_SHARE}/engines      )\n\n#add_subdirectory( ${MY_SRC_DIR}/apps         ${MY_BIN_SHARE}/apps         )\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 7
    },
    "cpp/Builds/sketches_OCL/CMakeLists.txt" : {
      "ObjectId" : "7f522dcc7dc0ae5d12d6b814951271cb91fc9c32",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ==== FLAGS\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET( AXULIARY_COMPILE_FLAGS \"-w -O3\") \n\n# -O3 and -Ofast does not work for SDL2_net\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ==== DIRS\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ==== BUILD TARGETS\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#add_subdirectory( ${MY_SRC_DIR}/libs     ${MY_BIN_SHARE}/libs    )\n\n#add_subdirectory( ${MY_SOURCE_DIR}/sketches    )   # currently empty\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ---- these need SDL\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#add_subdirectory( ${MY_SRC_DIR}/libs_SDL     ${MY_BIN_SHARE}/libs_SDL     )\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#add_subdirectory( ${MY_SRC_DIR}/engines      ${MY_BIN_SHARE}/engines      )\n\n#add_subdirectory( ${MY_SRC_DIR}/apps         ${MY_BIN_SHARE}/apps         )\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cpp/Builds/sketches_SDL/CMakeLists.txt" : {
      "ObjectId" : "c6c5e2ba8a544d2f065dc4c5265b3b666bae8690",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ==== FLAGS\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET( AXULIARY_COMPILE_FLAGS \"-w -O3\") \n\n# -O3 and -Ofast does not work for SDL2_net\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ==== DIRS\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# ==== BUILD TARGETS\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#add_subdirectory( ${MY_SRC_DIR}/libs     ${MY_BIN_SHARE}/libs    )\n\n#add_subdirectory( ${MY_SOURCE_DIR}/sketches    )   # currently empty\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# ---- these need SDL\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#add_subdirectory( ${MY_SRC_DIR}/libs_SDL     ${MY_BIN_SHARE}/libs_SDL     )\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "#add_subdirectory( ${MY_SRC_DIR}/apps         ${MY_BIN_SHARE}/apps         )\n",
        "Line" : 51,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cpp/Builds/tests/CMakeLists.txt" : {
      "ObjectId" : "f6e5c8216301f9c153168b1aacbf0ccb0addda9c",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ==== FLAGS\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#SET( AXULIARY_COMPILE_FLAGS \"-w -O3\") \n\n# -O3 and -Ofast does not work for SDL2_net\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ==== DIRS\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#${COMMON_SDL_SRCS}\n",
        "Line" : 29,
        "CharPositionInLine" : 1
      },
      "4" : {
        "Text" : "#${COMMON_SDL_SRCS}/network\n\n#${COMMON_SDL_SRCS}/SDL2\n\n#${COMMON_SDL_SRCS}/SDL2OGL\n\n#${COMMON_SDL_SRCS}/SDL2OGL3\n\n#${MY_SRC_DIR}/engines\n",
        "Line" : 30,
        "CharPositionInLine" : 8
      },
      "5" : {
        "Text" : "# ==== BUILD TARGETS\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#add_subdirectory( ${MY_SRC_DIR}/libs    ${MY_BIN_SHARE}/libs      )\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# currently empty\n",
        "Line" : 43,
        "CharPositionInLine" : 71
      },
      "CommentCount" : 8
    },
    "cpp/CMakeLists.txt" : {
      "ObjectId" : "d4b40c01c7c046e8981feeffb8aa306c582ff88e",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ==== FLAGS\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# https://stackoverflow.com/questions/7724569/debug-vs-release-in-cmake\n\n#message ( \"CMAKE_CXX_FLAGS_DEBUG   ${CMAKE_CXX_FLAGS_DEBUG}  \" )\n\n#message ( \"CMAKE_CXX_FLAGS_RELEASE ${CMAKE_CXX_FLAGS_RELEASE}\" )\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#if (  (CMAKE_BUILD_TYPE) AND (CMAKE_BUILD_TYPE MATCHES Debug))\n\n#    message(\"debug mode FFLAGS : \" )\n\n#    SET( AXULIARY_COMPILE_FLAGS \"-Wall -g -Og -fPIC \")\n\n#else ()\n\n#    message(\"release mode FFLAGS : \" )\n\n#    SET( AXULIARY_COMPILE_FLAGS \"-w -O2 -fPIC -march=native \")\n\n#endif ()\n\n# -O3 and -Ofast does not work for SDL2_net\n\n#SET( AXULIARY_COMPILE_FLAGS \"-w -O3\") \n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#SET( AXULIARY_COMPILE_FLAGS \"-w -g -Og -fPIC \")\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# ==== DIRS\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#${COMMON_SRCS}/optimization\n",
        "Line" : 47,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : "#${MY_SRC_DIR}/engines\n",
        "Line" : 56,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "#file (GLOB_RECURSE _ALL_SRCS_ *.h *.cpp *.c )\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# ==== BUILD TARGETS\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# currently empty\n",
        "Line" : 70,
        "CharPositionInLine" : 45
      },
      "10" : {
        "Text" : "# ---- these need SDL\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "#add_subdirectory( ${MY_SRC_DIR}/engines      )\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 12
    },
    "cpp/apps/AeroCombat/CMakeLists.txt" : {
      "ObjectId" : "c979a153af4e33f87d69d4027263e9b78a1cf689",
      "LastModified" : "2018-08-20T07:27:48Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/apps/BlockHouseTactics/CMakeLists.txt" : {
      "ObjectId" : "e35391f5b9e9852bab0635941a23993583744db2",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#file( COPY ${CMAKE_CURRENT_SOURCE_DIR}/data DESTINATION ${CMAKE_CURRENT_BINARY_DIR} )\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cpp/apps/CMakeLists.txt" : {
      "ObjectId" : "6c7bc612b344cf775e4de69c1cdc8de2ef952230",
      "LastModified" : "2018-09-05T14:18:37Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/apps/CastleBuilder/CMakeLists.txt" : {
      "ObjectId" : "233668e2244c6ba36aa2864be2db90b3c33ec228",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#file( COPY ${CMAKE_CURRENT_SOURCE_DIR}/data DESTINATION ${CMAKE_CURRENT_BINARY_DIR} )\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cpp/apps/DemoCrat/CMakeLists.txt" : {
      "ObjectId" : "2ca3f5e352b9768b67b32ef30ea0e648fbe5d8f1",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#target_compile_options( ${NAME}_main -rdynamic )\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cpp/apps/FormationTactics/CMakeLists.txt" : {
      "ObjectId" : "c85a3715667465f7034aea456ca16af71f0107d1",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/apps/LandCraft/CMakeLists.txt" : {
      "ObjectId" : "7cc068d75f1a516ed1f083093e493f87a4d7d8e4",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#LCWorld.cpp #LTFaction.cpp LTUnit.cpp LTUnitType.cpp LTcommon.h\n",
        "Line" : 5,
        "CharPositionInLine" : 18
      },
      "1" : {
        "Text" : "#$<TARGET_OBJECTS:Body2D> \n",
        "Line" : 6,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#$<TARGET_OBJECTS:TerrainCubic> \n\n#$<TARGET_OBJECTS:TiledView> \n",
        "Line" : 10,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#file(GLOB math_HEADERS_ *.h )\n\n#add_custom_target(math_headers SOURCES ${math_HEADERS_} )\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#file( COPY ${CMAKE_CURRENT_SOURCE_DIR}/data DESTINATION ${CMAKE_CURRENT_BINARY_DIR} )\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_SOURCE_DIR}/common_resources ${CMAKE_CURRENT_BINARY_DIR}/common_resources\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 6
    },
    "cpp/apps/LandTactics/CMakeLists.txt" : {
      "ObjectId" : "3a212e9f396581ff88de6ed8c00790dea36638fa",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#$<TARGET_OBJECTS:TerrainCubic> \n\n#$<TARGET_OBJECTS:TiledView> \n",
        "Line" : 10,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#file(GLOB math_HEADERS_ *.h )\n\n#add_custom_target(math_headers SOURCES ${math_HEADERS_} )\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#file( COPY ${CMAKE_CURRENT_SOURCE_DIR}/data DESTINATION ${CMAKE_CURRENT_BINARY_DIR} )\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_SOURCE_DIR}/common_resources ${CMAKE_CURRENT_BINARY_DIR}/common_resources\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cpp/apps/MinimalTactics/CMakeLists.txt" : {
      "ObjectId" : "62198839d32b5d265d68b756ba990510ed0a15c1",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#file(GLOB math_HEADERS_ *.h )\n\n#add_custom_target(math_headers SOURCES ${math_HEADERS_} )\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#file( COPY ${CMAKE_CURRENT_SOURCE_DIR}/data DESTINATION ${CMAKE_CURRENT_BINARY_DIR} )\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_SOURCE_DIR}/common_resources ${CMAKE_CURRENT_BINARY_DIR}/common_resources\n",
        "Line" : 21,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "cpp/apps/MolecularEditor/CMakeLists.txt" : {
      "ObjectId" : "3f2bf65e5234dae6e5b31c8aa3bb659a0ccf9760",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#find_package( SDL2_image REQUIRED )\n\n#find_package( SDL2_ttf   REQUIRED )\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_library( MolecularEngine OBJECT MolecularWorld.cpp MoleculeType.cpp AtomTypes.cpp  )\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#$<TARGET_OBJECTS:Body> \n",
        "Line" : 13,
        "CharPositionInLine" : 1
      },
      "3" : {
        "Text" : "#COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_SOURCE_DIR}/common_resources ${CMAKE_CURRENT_BINARY_DIR}/common_resource\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "cpp/apps/MolecularEditor2/CMakeLists.txt" : {
      "ObjectId" : "8d836183a0bec3dfdff1f4e968bce4a76859408b",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#$<TARGET_OBJECTS:MolecularEngine>  \n",
        "Line" : 8,
        "CharPositionInLine" : 1
      },
      "1" : {
        "Text" : "#$<TARGET_OBJECTS:MolecularEngine>  \n",
        "Line" : 16,
        "CharPositionInLine" : 1
      },
      "2" : {
        "Text" : "#add_executable( test_reset \ttest_reset.cpp \t$<TARGET_OBJECTS:DynamicOpt> \t$<TARGET_OBJECTS:SDL2OGL>   )\n\n#target_link_libraries( test_reset ${OpenGL_LIBRARIES} ${GLU_LIBRARY} ${SDL2_LIBRARY} )\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cpp/apps/MultiFight3D/CMakeLists.txt" : {
      "ObjectId" : "969823f34436e547c7e8a87a2da44d1d6c999bc8",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#Warrior3D.cpp Projectile3D.cpp \n",
        "Line" : 5,
        "CharPositionInLine" : 35
      },
      "1" : {
        "Text" : "#file( COPY ${CMAKE_CURRENT_SOURCE_DIR}/data DESTINATION ${CMAKE_CURRENT_BINARY_DIR} )\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cpp/apps/NavalBattle/CMakeLists.txt" : {
      "ObjectId" : "d5b881b8a48acc8a3ade95d7745e697a14953253",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#\t$<TARGET_OBJECTS:Shooter>\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_SOURCE_DIR}/common_resources ${CMAKE_CURRENT_BINARY_DIR}/common_resources\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cpp/apps/NonInertial/CMakeLists.txt" : {
      "ObjectId" : "0e7c3b021e96ac71bc8a0b080c76db34178171f6",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#file( COPY ${CMAKE_CURRENT_SOURCE_DIR}/data DESTINATION ${CMAKE_CURRENT_BINARY_DIR} )\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cpp/apps/OrbitalWar/CMakeLists.txt" : {
      "ObjectId" : "946d7e6a2c6f345772e7d8905dcf1db3e450b655",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# === Lua # https://www.gamedev.net/forums/topic/681869-linking-lua-via-cmake/\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#include_directories( ${MY_SRC_DIR}/libs/KosmoSuite/cpp  ${COMMON_SDL_SRCS}/Lua )\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cpp/apps/SailWar/CMakeLists.txt" : {
      "ObjectId" : "27d65b0002f64116d72f04291d74a3e43ac76891",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_library( ${NAME}_objects OBJECT Frigate2D Yacht2D Projectile Gun GameWorld GameScreen )\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# === small test\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# === misc\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#file( COPY ${CMAKE_CURRENT_SOURCE_DIR}/data DESTINATION ${CMAKE_CURRENT_BINARY_DIR} )\n",
        "Line" : 33,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_SOURCE_DIR}/common_resources ${CMAKE_CURRENT_BINARY_DIR}/common_resources\n",
        "Line" : 36,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "cpp/apps/SailWar_Multi/CMakeLists.txt" : {
      "ObjectId" : "7e47bf92ddddd7140eed021ee42d0b0faf33e645",
      "LastModified" : "2018-08-07T08:02:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# === server\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# === client\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# === misc\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#file( COPY ${CMAKE_CURRENT_SOURCE_DIR}/data DESTINATION ${CMAKE_CURRENT_BINARY_DIR} )\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_SOURCE_DIR}/common_resources ${CMAKE_CURRENT_BINARY_DIR}/common_resources\n",
        "Line" : 45,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 5
    },
    "cpp/apps/SwordPlay/CMakeLists.txt" : {
      "ObjectId" : "66d772fd1f29bf8f6e0da6a1a2a82208f7ff5f79",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/apps/Tanks/CMakeLists.txt" : {
      "ObjectId" : "dd05a77a84689e72201929c4997b7d752fb92cf2",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/apps/temp/NBodyWorld/CMakeLists.txt" : {
      "ObjectId" : "6d642198de4593da73560658d062ed4498cc0e58",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#file( COPY ${CMAKE_CURRENT_SOURCE_DIR}/data DESTINATION ${CMAKE_CURRENT_BINARY_DIR} )\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cpp/apps/temp/SailWar_h_bak/CMakeLists.txt" : {
      "ObjectId" : "d6c25c6a8c686de17c2740839ff342a1d51e14ee",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/apps_OCL/CMakeLists.txt" : {
      "ObjectId" : "657b27960b3305fe54c4f406f709a065770db9a9",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/apps_OCL/MolecularEditorOCL/CMakeLists.txt" : {
      "ObjectId" : "c53821cc6ddcf1e0483a00b319481d6e3f92e9dc",
      "LastModified" : "2019-01-29T13:52:58Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_library( MolecularEngine OBJECT MolecularWorld.cpp MoleculeType.cpp AtomTypes.cpp  )\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_custom_target( ${NAME}_src_dep SOURCES ${MOLECULAR_EDITOR_SRCS} )\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cpp/cmake_utils/FindLua.cmake" : {
      "ObjectId" : "7fb7ca3f4f9de67e22efade7d6827f3ecdef6a51",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Lua library\n\n# This module defines\n\n#  LUA_EXECUTABLE, if found\n\n#  LUA_FOUND, if false, do not try to link to Lua \n\n#  LUA_LIBRARIES\n\n#  LUA_INCLUDE_DIR, where to find lua.h\n\n#  LUA_VERSION_STRING, the version of Lua found (since CMake 2.8.8)\n\n#\n\n# Note that the expected include convention is\n\n#  #include \"lua.h\"\n\n# and not\n\n#  #include <lua/lua.h>\n\n# This is because, the lua location is not standardized and may exist\n\n# in locations other than lua/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n# Modified to support Lua 5.2 by LuaDist 2012\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n\n#\n\n# The required version of Lua can be specified using the\n\n# standard syntax, e.g. FIND_PACKAGE(Lua 5.1)\n\n# Otherwise the module will search for any available Lua implementation\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Always search for non-versioned lua first (recommended)\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Determine possible naming suffixes (there is no standard for this)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set up possible search names and locations\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Find the lua executable\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Find the lua header\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Fink\n",
        "Line" : 68,
        "CharPositionInLine" : 6
      },
      "8" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 69,
        "CharPositionInLine" : 13
      },
      "9" : {
        "Text" : "# Blastwave\n",
        "Line" : 70,
        "CharPositionInLine" : 11
      },
      "10" : {
        "Text" : "# Find the lua library\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# include the math library for Unix\n",
        "Line" : 92,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# For Windows and Mac, don't need to explicitly include the math library\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "13" : {
        "Text" : "# Determine Lua version\n",
        "Line" : 102,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if \n\n# all listed variables are TRUE\n",
        "Line" : 111,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "cpp/cmake_utils/FindLua52.cmake" : {
      "ObjectId" : "3ec17c65c7e932c3118591de28320cbf7fbf5595",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate Lua library\n\n# This module defines\n\n#  LUA51_FOUND, if false, do not try to link to Lua\n\n#  LUA_LIBRARIES\n\n#  LUA_INCLUDE_DIR, where to find lua.h\n\n#  LUA_VERSION_STRING, the version of Lua found (since CMake 2.8.8)\n\n#\n\n# Note that the expected include convention is\n\n#  #include \"lua.h\"\n\n# and not\n\n#  #include <lua/lua.h>\n\n# This is because, the lua location is not standardized and may exist\n\n# in locations other than lua/\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2007-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 35,
        "CharPositionInLine" : 6
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 36,
        "CharPositionInLine" : 13
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 37,
        "CharPositionInLine" : 11
      },
      "5" : {
        "Text" : "# include the math library for Unix\n",
        "Line" : 56,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# For Windows and Mac, don't need to explicitly include the math library\n",
        "Line" : 60,
        "CharPositionInLine" : 2
      },
      "7" : {
        "Text" : "# handle the QUIETLY and REQUIRED arguments and set LUA_FOUND to TRUE if\n\n# all listed variables are TRUE\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cpp/cmake_utils/FindOpenGLES2.cmake" : {
      "ObjectId" : "cb878a4049445be0e6d438b5e15e1db64a7b41cc",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#-------------------------------------------------------------------\n\n# This file is stolen from part of the CMake build system for OGRE (Object-oriented Graphics Rendering Engine) http://www.ogre3d.org/\n\n#\n\n# The contents of this file are placed in the public domain. Feel\n\n# free to make use of it in any way you like.\n\n#-------------------------------------------------------------------\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# - Try to find OpenGLES and EGL\n\n# Once done this will define\n\n#\n\n#  OPENGLES2_FOUND        - system has OpenGLES\n\n#  OPENGLES2_INCLUDE_DIR  - the GL include directory\n\n#  OPENGLES2_LIBRARIES    - Link these to use OpenGLES\n\n#\n\n#  EGL_FOUND        - system has EGL\n\n#  EGL_INCLUDE_DIR  - the EGL include directory\n\n#  EGL_LIBRARIES    - Link these to use EGL\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Win32, Apple, and Android are not tested!\n\n# Linux tested and works\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO\n\n# set(OPENGLES_LIBRARY ${SOURCE_DIR}/Dependencies/lib/release/libGLESv2.lib CACHE STRING \"OpenGL ES 2.x library for win32\"\n",
        "Line" : 30,
        "CharPositionInLine" : 3
      },
      "4" : {
        "Text" : "#\tfind_library(OPENGLES1_gl_LIBRARY\n\n#\t\tNAMES GLESv1_CM\n\n#\t\tPATHS /opt/graphics/OpenGL/lib\n\n#\t\t\t/usr/openwin/lib\n\n#\t\t\t/usr/shlib /usr/X11R6/lib\n\n#\t\t\t/opt/vc/lib\n\n#\t\t\t/usr/lib/arm-linux-gnueabihf\n\n#\t\t\t/usr/lib\n\n#\t)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# On Unix OpenGL usually requires X11.\n\n# It doesn't require X11 on OSX.\n",
        "Line" : 87,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# ${OPENGLES1_gl_LIBRARY}\n",
        "Line" : 101,
        "CharPositionInLine" : 69
      },
      "7" : {
        "Text" : "#\tOPENGLES1_gl_LIBRARY\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "cpp/cmake_utils/FindSDL2.cmake" : {
      "ObjectId" : "236d6b4b9ceea2f12bcc81ca6f66e3649f5460cf",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2 library\n\n# This module defines\n\n# SDL2_LIBRARY, the name of the library to link against\n\n# SDL2_FOUND, if false, do not try to link to SDL2\n\n# SDL2_INCLUDE_DIR, where to find SDL.h\n\n#\n\n# This module responds to the the flag:\n\n# SDL2_BUILDING_LIBRARY\n\n# If this is defined, then no SDL2main will be linked in because\n\n# only applications need main().\n\n# Otherwise, it is assumed you are building an application and this\n\n# module will attempt to locate and set the the proper link flags\n\n# as part of the returned SDL2_LIBRARY variable.\n\n#\n\n# Don't forget to include SDLmain.h and SDLmain.m your project for the\n\n# OS X framework based version. (Other versions link to -lSDL2main which\n\n# this module will try to find on your behalf.) Also for OS X, this\n\n# module will automatically add the -framework Cocoa on your behalf.\n\n#\n\n#\n\n# Additional Note: If you see an empty SDL2_LIBRARY_TEMP in your configuration\n\n# and no SDL2_LIBRARY, it means CMake did not find your SDL2 library\n\n# (SDL2.dll, libsdl2.so, SDL2.framework, etc).\n\n# Set SDL2_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_LIBRARY\n\n# variable, but when these values are unset, SDL2_LIBRARY does not get created.\n\n#\n\n#\n\n# $SDL2DIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2DIR\n\n# used in building SDL2.\n\n# l.e.galup  9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 73,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 74,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 75,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# Non-OS X framework versions expect you to also dynamically link to\n\n# SDL2main. This is mainly for Windows and OS X. Other (Unix) platforms\n\n# seem to provide SDL2main for compatibility even though they don't\n\n# necessarily need it.\n",
        "Line" : 96,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# SDL2 may require threads on your system.\n\n# The Apple build may not need an explicit flag because one of the\n\n# frameworks may already provide it.\n\n# But for non-OSX systems, I will use the CMake Threads package.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# MinGW needs an additional library, mwindows\n\n# It's total link flags should look like -lmingw32 -lSDL2main -lSDL2 -lmwindows\n\n# (Actually on second look, I think it only needs one of the m* libraries.)\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# For SDL2main\n",
        "Line" : 126,
        "CharPositionInLine" : 1
      },
      "9" : {
        "Text" : "# For OS X, SDL2 uses Cocoa as a backend so it must link to Cocoa.\n\n# CMake doesn't display the -framework Cocoa string in the UI even\n\n# though it actually is there if I modify a pre-used variable.\n\n# I think it has something to do with the CACHE STRING.\n\n# So I use a temporary variable until the end so I can set the\n\n# \"real\" variable in one-shot.\n",
        "Line" : 133,
        "CharPositionInLine" : 1
      },
      "10" : {
        "Text" : "# For threads, as mentioned Apple doesn't need this.\n\n# In fact, there seems to be a problem if I used the Threads package\n\n# and try using this line, so I'm just skipping it entirely for OS X.\n",
        "Line" : 143,
        "CharPositionInLine" : 1
      },
      "11" : {
        "Text" : "# For MinGW library\n",
        "Line" : 150,
        "CharPositionInLine" : 1
      },
      "12" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 155,
        "CharPositionInLine" : 1
      },
      "13" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 157,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 14
    },
    "cpp/cmake_utils/FindSDL2_image.cmake" : {
      "ObjectId" : "78704cbeb1c52f8d166d17dc948b40a178b69880",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2_image library\n\n# This module defines\n\n# SDL2_IMAGE_LIBRARY, the name of the library to link against\n\n# SDL2_IMAGE_FOUND, if false, do not try to link to SDL2_image\n\n# SDL2_IMAGE_INCLUDE_DIR, where to find SDL_image.h\n\n#\n\n# Additional Note: If you see an empty SDL2_IMAGE_LIBRARY_TEMP in your configuration\n\n# and no SDL2_IMAGE_LIBRARY, it means CMake did not find your SDL2_Image library\n\n# (SDL2_image.dll, libsdl2_image.so, SDL2_image.framework, etc).\n\n# Set SDL2_IMAGE_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_IMAGE_LIBRARY\n\n# variable, but when these values are unset, SDL2_IMAGE_LIBRARY does not get created.\n\n#\n\n# $SDL2 is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2\n\n# used in building SDL2.\n\n# l.e.galup 9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL2 guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_IMAGE_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL2 convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n\n#\n\n# Ported by Johnny Patterson. This is a literal port for SDL2 of the FindSDL.cmake\n\n# module with the minor edit of changing \"SDL\" to \"SDL2\" where necessary. This\n\n# was not created for redistribution, and exists temporarily pending official\n\n# SDL2 CMake modules.\n\n# \n\n# Note that on windows this will only search for the 32bit libraries, to search\n\n# for 64bit change x86/i686-w64 to x64/x86_64-w64\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# CMake - Cross Platform Makefile Generator\n\n# Copyright 2000-2014 Kitware, Inc.\n\n# Copyright 2000-2011 Insight Software Consortium\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright\n\n# notice, this list of conditions and the following disclaimer.\n\n#\n\n# * Redistributions in binary form must reproduce the above copyright\n\n# notice, this list of conditions and the following disclaimer in the\n\n# documentation and/or other materials provided with the distribution.\n\n#\n\n# * Neither the names of Kitware, Inc., the Insight Software Consortium,\n\n# nor the names of their contributors may be used to endorse or promote\n\n# products derived from this software without specific prior written\n\n# permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\n# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n# License text for the above reference.)\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 104,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 105,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 106,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# Lookup the 64 bit libs on x64\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# On 32bit build find the 32bit libs\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 148,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 150,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 9
    },
    "cpp/cmake_utils/FindSDL2_net.cmake" : {
      "ObjectId" : "a1dd6a6ad4a554b83c705faaf315a7ac4e1dfacb",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Locate SDL2_net library\n\n# This module defines:\n\n#  SDL2_NET_LIBRARIES, the name of the library to link against\n\n#  SDL2_NET_INCLUDE_DIRS, where to find the headers\n\n#  SDL2_NET_FOUND, if false, do not try to link against\n\n#  SDL2_NET_VERSION_STRING - human-readable string containing the version of SDL2_net\n\n#\n\n# For backward compatiblity the following variables are also set:\n\n#  SDLNET_LIBRARY (same value as SDL2_NET_LIBRARIES)\n\n#  SDLNET_INCLUDE_DIR (same value as SDL2_NET_INCLUDE_DIRS)\n\n#  SDLNET_FOUND (same value as SDL2_NET_FOUND)\n\n#\n\n# $SDLDIR is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDLDIR\n\n# used in building SDL.\n\n#\n\n# Created by Eric Wing. This was influenced by the FindSDL.cmake\n\n# module, but with modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2005-2009 Kitware, Inc.\n\n# Copyright 2012 Benjamin Eikel\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# for backward compatiblity\n",
        "Line" : 83,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cpp/cmake_utils/FindSDL2_ttf.cmake" : {
      "ObjectId" : "9f38607e41b8c6a1ca0260f5128df42bea9ef015",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Locate SDL2_ttf library\n\n# This module defines\n\n# SDL2_TTF_LIBRARY, the name of the library to link against\n\n# SDL2_TTF_FOUND, if false, do not try to link to SDL2_ttf\n\n# SDL2_TTF_INCLUDE_DIR, where to find SDL_image.h\n\n#\n\n# Additional Note: If you see an empty SDL2_TTF_LIBRARY_TEMP in your configuration\n\n# and no SDL2_TTF_LIBRARY, it means CMake did not find your SDL2_Image library\n\n# (SDL2_ttf.dll, libsdl2_image.so, SDL2_ttf.framework, etc).\n\n# Set SDL2_TTF_LIBRARY_TEMP to point to your SDL2 library, and configure again.\n\n# Similarly, if you see an empty SDL2MAIN_LIBRARY, you should set this value\n\n# as appropriate. These values are used to generate the final SDL2_TTF_LIBRARY\n\n# variable, but when these values are unset, SDL2_TTF_LIBRARY does not get created.\n\n#\n\n# $SDL2 is an environment variable that would\n\n# correspond to the ./configure --prefix=$SDL2\n\n# used in building SDL2.\n\n# l.e.galup 9-20-02\n\n#\n\n# Modified by Eric Wing.\n\n# Added code to assist with automated building by using environmental variables\n\n# and providing a more controlled/consistent search behavior.\n\n# Added new modifications to recognize OS X frameworks and\n\n# additional Unix paths (FreeBSD, etc).\n\n# Also corrected the header search path to follow \"proper\" SDL2 guidelines.\n\n# Added a search for SDL2main which is needed by some platforms.\n\n# Added a search for threads which is needed by some platforms.\n\n# Added needed compile switches for MinGW.\n\n#\n\n# On OSX, this will prefer the Framework version (if found) over others.\n\n# People will have to manually change the cache values of\n\n# SDL2_TTF_LIBRARY to override this selection or set the CMake environment\n\n# CMAKE_INCLUDE_PATH to modify the search paths.\n\n#\n\n# Note that the header path has changed from SDL2/SDL.h to just SDL.h\n\n# This needed to change because \"proper\" SDL2 convention\n\n# is #include \"SDL.h\", not <SDL2/SDL.h>. This is done for portability\n\n# reasons because not all systems place things in SDL2/ (see FreeBSD).\n\n#\n\n# Ported by Johnny Patterson. This is a literal port for SDL2 of the FindSDL.cmake\n\n# module with the minor edit of changing \"SDL\" to \"SDL2\" where necessary. This\n\n# was not created for redistribution, and exists temporarily pending official\n\n# SDL2 CMake modules.\n\n# \n\n# Note that on windows this will only search for the 32bit libraries, to search\n\n# for 64bit change x86/i686-w64 to x64/x86_64-w64\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2009 Kitware, Inc.\n\n#\n\n# CMake - Cross Platform Makefile Generator\n\n# Copyright 2000-2014 Kitware, Inc.\n\n# Copyright 2000-2011 Insight Software Consortium\n\n# All rights reserved.\n\n#\n\n# Redistribution and use in source and binary forms, with or without\n\n# modification, are permitted provided that the following conditions\n\n# are met:\n\n#\n\n# * Redistributions of source code must retain the above copyright\n\n# notice, this list of conditions and the following disclaimer.\n\n#\n\n# * Redistributions in binary form must reproduce the above copyright\n\n# notice, this list of conditions and the following disclaimer in the\n\n# documentation and/or other materials provided with the distribution.\n\n#\n\n# * Neither the names of Kitware, Inc., the Insight Software Consortium,\n\n# nor the names of their contributors may be used to endorse or promote\n\n# products derived from this software without specific prior written\n\n# permission.\n\n#\n\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\n# \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n\n# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n\n# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n\n# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n\n# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n\n# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n\n# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\n# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n# License text for the above reference.)\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Fink\n",
        "Line" : 103,
        "CharPositionInLine" : 5
      },
      "3" : {
        "Text" : "# DarwinPorts\n",
        "Line" : 104,
        "CharPositionInLine" : 12
      },
      "4" : {
        "Text" : "# Blastwave\n",
        "Line" : 105,
        "CharPositionInLine" : 10
      },
      "5" : {
        "Text" : "# Lookup the 64 bit libs on x64\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# On 32bit build find the 32bit libs\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Set the final string here so the GUI reflects the final state.\n",
        "Line" : 147,
        "CharPositionInLine" : 1
      },
      "8" : {
        "Text" : "# Set the temp variable to INTERNAL so it is not seen in the CMake GUI\n",
        "Line" : 149,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 9
    },
    "cpp/common/CMakeLists.txt" : {
      "ObjectId" : "23ed649a7652580858c1eb27541effd160fd8bf0",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory (SDL2OGL)\n\n#add_subdirectory (SDL2OGL3)\n\n#add_subdirectory (network)\n\n#add_subdirectory (engines)",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cpp/common/OCL/CMakeLists.txt" : {
      "ObjectId" : "667d33a39d0412cb394d670807db896c3df6dc2c",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/common/algorithms/CMakeLists.txt" : {
      "ObjectId" : "075874f87fb9b20d115726ea1b684b0bfb35cdbe",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/common/dataStructures/CMakeLists.txt" : {
      "ObjectId" : "223ca624aefe0446b413c4a03b7c69662b6ff3f2",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/common/dynamics/CMakeLists.txt" : {
      "ObjectId" : "76b320faf211c8d3bbb3b0b62c0d785bd21d2824",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_library( MoleculeWorld2D OBJECT MoleculeWorld2D.cpp )\n\n#add_library( MolecularEngine OBJECT MolecularWorld.cpp MoleculeType.cpp AtomTypes.cpp  )\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cpp/common/dynamics/Molecular/CMakeLists.txt" : {
      "ObjectId" : "54f7dc4fe6a24f221f33027e3efe0efcbb140261",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/common/engine/CMakeLists.txt" : {
      "ObjectId" : "369fd17539745d8ff1ac63f6484bc3a7d8b6d9e8",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# would generate this error : http://stackoverflow.com/questions/19768267/relocation-r-x86-64-32s-against-linking-error\n\n#$<TARGET_OBJECTS:Body>\n\n#$<TARGET_OBJECTS:AeroSurf>\n\n#$<TARGET_OBJECTS:Collisions>\n\n#$<TARGET_OBJECTS:DynamicOpt>\n\n#$<TARGET_OBJECTS:SoftBody>\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#file(GLOB engine_HEADERS_ *.h )\n\n#add_custom_target(engine_headers SOURCES ${engine_HEADERS_} )\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cpp/common/maps/CMakeLists.txt" : {
      "ObjectId" : "681b05f6c0628ca050a442ff136f5f05ea122a7c",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#target_compile_options(mylib PRIVATE   -O3 --ffast-math )\n\n#target_compile_options(NBodyWorld2D PRIVATE   -Ofast )\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cpp/common/maps/temp/CMakeLists.txt" : {
      "ObjectId" : "2a1798929b74d304720984d17f658337bcb920e7",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/common/math/CMakeLists.txt" : {
      "ObjectId" : "6980e3b5cdb003add9737bed17b7f670080d48d7",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/common_SDL/CMakeLists.txt" : {
      "ObjectId" : "942e8d1f99fad10cb13bb6096e1e66675dd928f1",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory (algorithms)\n\n#add_subdirectory (math)\n\n#add_subdirectory (dynamics)\n\n#add_subdirectory (maps)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# currently there are only headers\n",
        "Line" : 12,
        "CharPositionInLine" : 31
      },
      "2" : {
        "Text" : "#add_subdirectory (engines)",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cpp/common_SDL/Lua/CMakeLists.txt" : {
      "ObjectId" : "90dbfc13e293f5031132b850d2f664e4d87a2e62",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/common_SDL/SDL2/CMakeLists.txt" : {
      "ObjectId" : "749647e1cfaa195edff67e447416d4b6eaec167f",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/common_SDL/SDL2OGL/CMakeLists.txt" : {
      "ObjectId" : "863d07bef58a10eeb927dd688d434893c707f191",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#$<TARGET_OBJECTS:Mesh> \n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_library( GUI      OBJECT GUI.cpp Draw2D.cpp Draw3D.cpp )\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cpp/common_SDL/SDL2OGL3/CMakeLists.txt" : {
      "ObjectId" : "8e8c4ada2c9c345b24b96c5e03c8c85907a03231",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/common_SDL/network/CMakeLists.txt" : {
      "ObjectId" : "2236121d3822d437858f70f35598d163ad9e1518",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/libs/CMakeLists.txt" : {
      "ObjectId" : "ab0c2c95702fc8d57fcada4a2090b8da4e628131",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# problem is that these libraries cannot be build from common objects .o; needs \"-fPIC\" to relocation\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_subdirectory (libSail)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#add_subdirectory (Vis3D)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cpp/libs/KosmoSuite/CMakeLists.txt" : {
      "ObjectId" : "180802e8aa3cf0e3155164a3f81b30d086497183",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/libs/KosmoSuite/cpp/CMakeLists.txt" : {
      "ObjectId" : "b035af864bbbf4bd9278e388168cfc8f983c81f8",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/libs/Molecular/CMakeLists.txt" : {
      "ObjectId" : "3cd29c5e4e858b5fe2fd188e643557def7af3468",
      "LastModified" : "2019-01-29T13:52:58Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/libs/Shock/CMakeLists.txt" : {
      "ObjectId" : "e84a7f123d308f14efee52a434e0798590580b3b",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/libs/libFlight/CMakeLists.txt" : {
      "ObjectId" : "03042c166cb7b5f57b3281a781092919bc733ffc",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#include_directories( ${COMMON_SRCS}/dynamics/Molecular )\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_library(Molecular SHARED Molecular.cpp $<TARGET_OBJECTS:MolecularEngine> $<TARGET_OBJECTS:DynamicOpt> )\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cpp/libs/libSail/CMakeLists.txt" : {
      "ObjectId" : "e74bb610f01e97106dbf407fec89274276a868ba",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/libs_SDL/CMakeLists.txt" : {
      "ObjectId" : "ac891bf477379ad2851daa32e7bc0e10bf7dde11",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# problem is that these libraries cannot be build from common objects .o; needs \"-fPIC\" to relocation\n\n#add_subdirectory (libSail)\n\n#add_subdirectory (Molecular)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_subdirectory (Shock)\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cpp/libs_SDL/FlightView/CMakeLists.txt" : {
      "ObjectId" : "d26acff5a4fe8323b19aa948ae59bdfc53e55541",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_library( FlightView SHARED FlightView.cpp $<TARGET_OBJECTS:SDL2OGL> ${OpenGL_LIBRARIES} ${GLU_LIBRARY} ${SDL2_LIBRARY} )\n\n#add_library(Flight SHARED libFlight.cpp $<TARGET_OBJECTS:Body> $<TARGET_OBJECTS:AeroSurf> $<TARGET_OBJECTS:AeroCraft> )\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cpp/libs_SDL/Vis3D/CMakeLists.txt" : {
      "ObjectId" : "bc4444ad7b7d418b445f14713e9336ea1cf85770",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/sketches_OCL/CMakeLists.txt" : {
      "ObjectId" : "7c5d652e7bfb6daf855b5f789087006cb6422be2",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_subdirectory (OCL)\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cpp/sketches_OCL/Grids/CMakeLists.txt" : {
      "ObjectId" : "d36c69bca82072302dc611dca6ddc74d2a4a626d",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_CURRENT_SOURCE_DIR}/py ${CMAKE_CURRENT_BINARY_DIR}/py\n\n#COMMAND ${CMAKE_COMMAND} -E create_symlink ${MY_SRC_DIR}/common_resources ${CMAKE_CURRENT_BINARY_DIR}/common_resources\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "cpp/sketches_OCL/NBody/CMakeLists.txt" : {
      "ObjectId" : "861af5165661dc0ab61ccb519994c1edb962d0e8",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_CURRENT_SOURCE_DIR}/py ${CMAKE_CURRENT_BINARY_DIR}/py\n\n#COMMAND ${CMAKE_COMMAND} -E create_symlink ${MY_SRC_DIR}/common_resources ${CMAKE_CURRENT_BINARY_DIR}/common_resources\n",
        "Line" : 14,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 1
    },
    "cpp/sketches_OCL/lingebra/CMakeLists.txt" : {
      "ObjectId" : "79547baf90ae449a4ea1bc6ec59d287621db8895",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_executable       ( test_mmul test_mmul.cpp $<TARGET_OBJECTS:SDL2OGL3> )\n\n#target_link_libraries( test_mmul ${OpenGL_LIBRARY} ${GLU_LIBRARY} ${GLEW_LIBRARY} ${SDL2_LIBRARY} )\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#COMMAND ${CMAKE_COMMAND} -E create_symlink ${MY_SRC_DIR}/common_resources ${CMAKE_CURRENT_BINARY_DIR}/common_resources\n",
        "Line" : 12,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cpp/sketches_SDL/2D/CMakeLists.txt" : {
      "ObjectId" : "9706d99f580ec5f81d934a49e4cb82d8a718f3d0",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#target_compile_options( test_TileTree2D PRIVATE \"-O2\")\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_executable       ( test_Plotting2D test_Plotting2D.cpp $<TARGET_OBJECTS:SDL2OGL> $<TARGET_OBJECTS:MoleculeWorld2D> $<TARGET_OBJECTS:DynamicOpt> $<TARGET_OBJECTS:Body2D> )\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#    COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_SOURCE_DIR}/common_resources ${CMAKE_CURRENT_BINARY_DIR}/common_resources\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cpp/sketches_SDL/3D/CMakeLists.txt" : {
      "ObjectId" : "b7f77fd044b11aaf8857f17c5d41ed3654ab6f2d",
      "LastModified" : "2019-04-12T11:50:17Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_executable       ( test_ShotHit test_ShotHit.cpp $<TARGET_OBJECTS:SDL2OGL> )\n\n#target_link_libraries( test_ShotHit ${OpenGL_LIBRARY} ${GLU_LIBRARY} ${SDL2_LIBRARY} )\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#COMMAND ln -sf ${CMAKE_SOURCE_DIR}/common_resources ${CMAKE_CURRENT_BINARY_DIR}/common_resources\n\n#COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_SOURCE_DIR}/common_resources ${CMAKE_CURRENT_BINARY_DIR}/common_resources\n",
        "Line" : 102,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cpp/sketches_SDL/CMakeLists.txt" : {
      "ObjectId" : "f84081aac62c87a462c657eb2285db019ddfc45a",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/sketches_SDL/OGL3/CMakeLists.txt" : {
      "ObjectId" : "cd9f520c389227c4a6b652c0c5839fd5e4bfe123",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#ADD_CUSTOM_TARGET( shaders ALL  COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_CURRENT_SOURCE_DIR}/shaders ${CMAKE_CURRENT_BINARY_DIR}/shaders )\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_executable       ( test_ScreenOGL3 test_ScreenOGL3.cpp $<TARGET_OBJECTS:SDL2OGL3> $<TARGET_OBJECTS:Body> )\n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_SOURCE_DIR}/common_resources ${CMAKE_CURRENT_BINARY_DIR}/common_resources\n",
        "Line" : 84,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# instead do softling manually\n\n#file( COPY ${CMAKE_CURRENT_SOURCE_DIR}/shaders DESTINATION ${CMAKE_CURRENT_BINARY_DIR} )\n\n#ADD_CUSTOM_TARGET(link_target ALL  COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_CURRENT_SOURCE_DIR}/shaders ${CMAKE_CURRENT_BINARY_DIR}/shaders )\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "cpp/sketches_SDL/Shooter/CMakeLists.txt" : {
      "ObjectId" : "6d8aea88f4b10fb37cf4cd5d27e156c063497787",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_executable       ( test_BroadPhase test_BroadPhase.cpp $<TARGET_OBJECTS:SDL2OGL> )\n\n#target_link_libraries( test_BroadPhase ${OpenGL_LIBRARY} ${GLU_LIBRARY} ${SDL2_LIBRARY} Shooter )\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#COMMAND ln -sf ${CMAKE_SOURCE_DIR}/common_resources ${CMAKE_CURRENT_BINARY_DIR}/common_resources\n\n#COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_SOURCE_DIR}/common_resources ${CMAKE_CURRENT_BINARY_DIR}/common_resources\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 2
    },
    "cpp/sketches_SDL/TEMP/Schroedinger1D/Makefile" : {
      "ObjectId" : "61537b33a75e959e0759bc89f76ecefc6d7e9dab",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#CFLAGS= -w -O3\n\n#CFLAGS= -w -Ofast\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cpp/sketches_SDL/TEMP/function_optimization/Makefile" : {
      "ObjectId" : "74ee5f9e6d5ad5bcc3df3a41ada4e283e43e992d",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "cpp/sketches_SDL/math/CMakeLists.txt" : {
      "ObjectId" : "887ce61b2de38e600e53c9ede4918462d3614be2",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cpp/sketches_SDL/network/CMakeLists.txt" : {
      "ObjectId" : "068731be24b0d2d9705f0fe2da22db76ad65db46",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(CMAKE_LIBRARY_PATH ${CMAKE_LIBRARY_PATH} /opt/local/lib)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#link_directories   ( /usr/local/lib )\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cpp/tests/CMakeLists.txt" : {
      "ObjectId" : "d98ee51ea3c56e696d84b623759b9fbc3d618182",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# in future there will be termina-based tests which are visualized by external python scripts\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cpp/tests/lua/CMakeLists.txt" : {
      "ObjectId" : "2701e4ef089f2289ce93da4c29d8bb7ad4f1b9b9",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# https://www.gamedev.net/forums/topic/681869-linking-lua-via-cmake/\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#FIND_PACKAGE(Lua 5.3 REQUIRED)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#        ${COMMON_SRCS}/math\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# put this after add_executable\n\n#target_link_libraries(PROJECT_NAME ${LUA_LIBRARY})\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#add_library(test_Lua SHARED test_Lua.cpp )\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#    COMMAND ${CMAKE_COMMAND} -E create_symlink ${MY_SRC_DIR}/common_resources ${CMAKE_CURRENT_BINARY_DIR}/common_resources\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "cpp/tests/math/CMakeLists.txt" : {
      "ObjectId" : "348d076dbe41814004502c27ef656ec36c7111c4",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#ADD_CUSTOM_TARGET( shaders ALL  COMMAND ${CMAKE_COMMAND} -E create_symlink ${CMAKE_CURRENT_SOURCE_DIR}/shaders ${CMAKE_CURRENT_BINARY_DIR}/shaders )\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#add_executable       ( test_Diagonalization test_Diagonalization.cpp )\n\n#target_link_libraries( test_Diagonalization )\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#    COMMAND ${CMAKE_COMMAND} -E create_symlink ${MY_SRC_DIR}/common_resources ${CMAKE_CURRENT_BINARY_DIR}/common_resources\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cpp/tests/parsing/CMakeLists.txt" : {
      "ObjectId" : "14d1b89b1447b7c1e02b83e9e28c1bcfa81a5ac7",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#    COMMAND ${CMAKE_COMMAND} -E create_symlink ${MY_SRC_DIR}/common_resources ${CMAKE_CURRENT_BINARY_DIR}/common_resources\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cppEngineConcept/CMakeLists.txt" : {
      "ObjectId" : "f815ed9580bef5ddcda9a5c00aed3c8edf550ec7",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#SET( AXULIARY_COMPILE_FLAGS \"-w -O3\") \n\n# -O3 and -Ofast does not work for SDL2_net\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set( CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/cmake_utils )\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#add_subdirectory( engine )\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cppEngineConcept/math/CMakeLists.txt" : {
      "ObjectId" : "fbef9d39606949afbf8d92e78baf1da24c04ca8f",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_library( Convex2d OBJECT Convex2d.cpp )\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cppEngineConcept/tests/CMakeLists.txt" : {
      "ObjectId" : "c4e3a9678c2024e0719ffc37ee7bb5f1301f9f7d",
      "LastModified" : "2019-01-21T14:53:32Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 83,
    "MAKEFILE" : 2
  },
  "ElapsedTime" : 1259
}