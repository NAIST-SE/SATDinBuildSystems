{
  "Repository" : "5855094",
  "Revision" : "HEAD",
  "ObjectId" : "903eae7975d9328c1b58b0f06d7c017cecb9b963",
  "CommitTime" : "2014-04-29T23:58:30Z",
  "Files" : {
    "VajraFramework/AndroidProject/workspace/VajraAndroidWrapper/build.xml" : {
      "ObjectId" : "afb5b45fe0803978e74169f3d26dcf2250c1cc62",
      "LastModified" : "2013-12-07T08:24:49Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked into\n         Version Control Systems. ",
        "Line" : 6,
        "CharPositionInLine" : 38
      },
      "1" : {
        "Text" : " The ant.properties file can be created by you. It is only edited by the\n         'android' tool to add properties to it.\n         This is the place to change some Ant specific build properties.\n         Here are some properties you may want to change/update:\n\n         source.dir\n             The name of the source directory. Default is 'src'.\n         out.dir\n             The name of the output directory. Default is 'bin'.\n\n         For other overridable properties, look at the beginning of the rules\n         files in the SDK, at tools/ant/build.xml\n\n         Properties related to the SDK location or the project target should\n         be updated using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems.\n\n         ",
        "Line" : 28,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : " if sdk.dir was not set from one of the property file, then\n         get it from the ANDROID_HOME env var.\n         This must be done before we load project.properties since\n         the proguard config can use sdk.dir ",
        "Line" : 34,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : " The project.properties file is created and updated by the 'android'\n         tool, as well as ADT.\n\n         This contains project specific properties such as project target, and library\n         dependencies. Lower level build properties are stored in ant.properties\n         (or in .classpath for Eclipse projects).\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems. ",
        "Line" : 48,
        "CharPositionInLine" : 77
      },
      "4" : {
        "Text" : " quick check on sdk.dir ",
        "Line" : 51,
        "CharPositionInLine" : 36
      },
      "5" : {
        "Text" : "\n        Import per project custom build rules if present at the root of the project.\n        This is the place to put custom intermediary targets such as:\n            -pre-build\n            -pre-compile\n            -post-compile (This is typically used for code obfuscation.\n                           Compiled code location: ${out.classes.absolute.dir}\n                           If this is not done in place, override ${out.dex.input.absolute.dir})\n            -post-package\n            -post-build\n            -pre-clean\n    ",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : " Import the actual build file.\n\n         To customize existing targets, there are two options:\n         - Customize only one target:\n             - copy/paste the target into this file, *before* the\n               <import> task.\n             - customize it to your needs.\n         - Customize the whole content of build.xml\n             - copy/paste the content of the rules files (minus the top node)\n               into this file, replacing the <import> task.\n             - customize to your needs.\n\n         ***********************\n         ****** IMPORTANT ******\n         ***********************\n         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,\n         in order to avoid having your file be overridden by tools such as \"android update project\"\n    ",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : " version-tag: 1 ",
        "Line" : 89,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 8
    },
    "VajraFramework/ExampleGame/AndroidProject/workspace/ExampleGame/build.xml" : {
      "ObjectId" : "178f19925a306bb0c38149533ab626a08e96e2ec",
      "LastModified" : "2013-12-07T08:24:49Z",
      "FileType" : "ANT",
      "0" : {
        "Text" : " The local.properties file is created and updated by the 'android' tool.\n         It contains the path to the SDK. It should *NOT* be checked into\n         Version Control Systems. ",
        "Line" : 6,
        "CharPositionInLine" : 38
      },
      "1" : {
        "Text" : " The ant.properties file can be created by you. It is only edited by the\n         'android' tool to add properties to it.\n         This is the place to change some Ant specific build properties.\n         Here are some properties you may want to change/update:\n\n         source.dir\n             The name of the source directory. Default is 'src'.\n         out.dir\n             The name of the output directory. Default is 'bin'.\n\n         For other overridable properties, look at the beginning of the rules\n         files in the SDK, at tools/ant/build.xml\n\n         Properties related to the SDK location or the project target should\n         be updated using the 'android' tool with the 'update' action.\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems.\n\n         ",
        "Line" : 28,
        "CharPositionInLine" : 13
      },
      "2" : {
        "Text" : " if sdk.dir was not set from one of the property file, then\n         get it from the ANDROID_HOME env var.\n         This must be done before we load project.properties since\n         the proguard config can use sdk.dir ",
        "Line" : 34,
        "CharPositionInLine" : 49
      },
      "3" : {
        "Text" : " The project.properties file is created and updated by the 'android'\n         tool, as well as ADT.\n\n         This contains project specific properties such as project target, and library\n         dependencies. Lower level build properties are stored in ant.properties\n         (or in .classpath for Eclipse projects).\n\n         This file is an integral part of the build system for your\n         application and should be checked into Version Control Systems. ",
        "Line" : 48,
        "CharPositionInLine" : 77
      },
      "4" : {
        "Text" : " quick check on sdk.dir ",
        "Line" : 51,
        "CharPositionInLine" : 36
      },
      "5" : {
        "Text" : "\n        Import per project custom build rules if present at the root of the project.\n        This is the place to put custom intermediary targets such as:\n            -pre-build\n            -pre-compile\n            -post-compile (This is typically used for code obfuscation.\n                           Compiled code location: ${out.classes.absolute.dir}\n                           If this is not done in place, override ${out.dex.input.absolute.dir})\n            -post-package\n            -post-build\n            -pre-clean\n    ",
        "Line" : 68,
        "CharPositionInLine" : 8
      },
      "6" : {
        "Text" : " Import the actual build file.\n\n         To customize existing targets, there are two options:\n         - Customize only one target:\n             - copy/paste the target into this file, *before* the\n               <import> task.\n             - customize it to your needs.\n         - Customize the whole content of build.xml\n             - copy/paste the content of the rules files (minus the top node)\n               into this file, replacing the <import> task.\n             - customize to your needs.\n\n         ***********************\n         ****** IMPORTANT ******\n         ***********************\n         In all cases you must update the value of version-tag below to read 'custom' instead of an integer,\n         in order to avoid having your file be overridden by tools such as \"android update project\"\n    ",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : " version-tag: 1 ",
        "Line" : 89,
        "CharPositionInLine" : 28
      },
      "CommentCount" : 8
    },
    "VajraFramework/Libraries/glm/CMakeLists.txt" : {
      "ObjectId" : "79a46074a77f1496731faa27889acabe8c66a3e5",
      "LastModified" : "2014-01-26T01:28:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#add_library(glm STATIC glm.cpp)\n\n#add_library(glm_shared SHARED glm.cpp)\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "VajraFramework/Libraries/openal-soft-1.15.1/CMakeLists.txt" : {
      "ObjectId" : "5389f1168b351a1439275ae2c417e925c0c8fc72",
      "LastModified" : "2013-12-07T08:24:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# CMake build file list for OpenAL\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Add definitions, compiler switches, etc.\n",
        "Line" : 110,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# ???\n",
        "Line" : 125,
        "CharPositionInLine" : 4
      },
      "3" : {
        "Text" : "# Set visibility/export options if available\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Yes GCC, really don't accept visibility modes you don't support\n",
        "Line" : 205,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# Some systems need libm for some of the following math functions to work\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Check for the dlopen API (for dynamicly loading backend libs)\n",
        "Line" : 348,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Check if we have Windows headers\n",
        "Line" : 359,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# We need pthreads outside of Windows\n",
        "Line" : 378,
        "CharPositionInLine" : 4
      },
      "9" : {
        "Text" : "# Some systems need pthread_np.h to get recursive mutexes\n",
        "Line" : 383,
        "CharPositionInLine" : 4
      },
      "10" : {
        "Text" : "# _GNU_SOURCE is needed on some systems for extra attributes\n",
        "Line" : 386,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# Check for a 64-bit type\n",
        "Line" : 401,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Windows needs winmm for timeGetTime, even if the backend is disabled\n",
        "Line" : 419,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Check for SSE support\n",
        "Line" : 460,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Check for ARM Neon support\n",
        "Line" : 477,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Default backends, always available\n",
        "Line" : 492,
        "CharPositionInLine" : 14
      },
      "16" : {
        "Text" : "# Check ALSA backend\n",
        "Line" : 511,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Check OSS backend\n",
        "Line" : 532,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Check Solaris backend\n",
        "Line" : 545,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Check SndIO backend\n",
        "Line" : 558,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Check for MMDevApi backend\n",
        "Line" : 575,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Check DSound/MMSystem backend\n",
        "Line" : 591,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Check PortAudio backend\n",
        "Line" : 627,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Check PulseAudio backend\n",
        "Line" : 648,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Check CoreAudio backend\n",
        "Line" : 669,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Some versions of OSX may need the AudioToolbox framework. Add it if\n\n# it's found.\n",
        "Line" : 680,
        "CharPositionInLine" : 8
      },
      "26" : {
        "Text" : "# Check for OpenSL (Android) backend\n",
        "Line" : 697,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Optionally enable the Wave Writer backend\n",
        "Line" : 714,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# This is always available\n",
        "Line" : 721,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Might be able to use earlier versions, but these definitely work\n",
        "Line" : 725,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# Needed for openal.pc.in\n",
        "Line" : 734,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# End configuration\n",
        "Line" : 742,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Build a library\n",
        "Line" : 751,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Add an install target here\n",
        "Line" : 763,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# Install alsoft.conf configuration file\n",
        "Line" : 797,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 35
    },
    "VajraFramework/Libraries/openal-soft-1.15.1/cmake/CheckCCompilerFlag.cmake" : {
      "ObjectId" : "8b2361aaff08dc70d20d59c7deaa947bf510b1ab",
      "LastModified" : "2013-12-07T08:24:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check if the C source code provided in the SOURCE argument compiles.\n\n# CHECK_C_SOURCE_COMPILES(SOURCE VAR)\n\n#\n\n#  FLAG   - compiler flag to check\n\n#  VAR    - variable to store whether the source code compiled\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n\n#  CMAKE_REQUIRED_LIBRARIES = list of libraries to link\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "VajraFramework/Libraries/openal-soft-1.15.1/cmake/CheckSharedFunctionExists.cmake" : {
      "ObjectId" : "4980effad4c2ab45c3782e89c352eb4989206247",
      "LastModified" : "2013-12-07T08:24:49Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Check if a symbol exists as a function, variable, or macro\n\n# CHECK_SYMBOL_EXISTS(<symbol> <files> <variable>)\n\n#\n\n# Check that the <symbol> is available after including given header\n\n# <files> and store the result in a <variable>.  Specify the list\n\n# of files in one argument as a semicolon-separated list.\n\n#\n\n# If the header files define the symbol as a macro it is considered\n\n# available and assumed to work.  If the header files declare the\n\n# symbol as a function or variable then the symbol must also be\n\n# available for linking.  If the symbol is a type or enum value\n\n# it will not be recognized (consider using CheckTypeSize or\n\n# CheckCSourceCompiles).\n\n#\n\n# The following variables may be set before calling this macro to\n\n# modify the way the check is run:\n\n#\n\n#  CMAKE_REQUIRED_FLAGS = string of compile command line flags\n\n#  CMAKE_REQUIRED_DEFINITIONS = list of macros to define (-DFOO=bar)\n\n#  CMAKE_REQUIRED_INCLUDES = list of include directories\n\n#  CMAKE_REQUIRED_LIBRARIES = list of libraries to link\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#=============================================================================\n\n# Copyright 2003-2011 Kitware, Inc.\n\n#\n\n# Distributed under the OSI-approved BSD License (the \"License\");\n\n# see accompanying file Copyright.txt for details.\n\n#\n\n# This software is distributed WITHOUT ANY WARRANTY; without even the\n\n# implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# See the License for more information.\n\n#=============================================================================\n\n# (To distribute this file outside of CMake, substitute the full\n\n#  License text for the above reference.)\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 4,
    "ANT" : 2
  },
  "ElapsedTime" : 2742
}