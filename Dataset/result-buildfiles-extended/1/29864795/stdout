{
  "Repository" : "29864795",
  "Revision" : "HEAD",
  "ObjectId" : "a27dbcf2240378706ceb2bca86444a985ad97d9c",
  "CommitTime" : "2019-01-13T12:42:43Z",
  "Files" : {
    "avr/ami-arduino-cmake/CMakeLists.txt" : {
      "ObjectId" : "9ba9b4948087ed5fb872f6ae3fad115d9f4c8915",
      "LastModified" : "2016-04-10T08:53:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this is the place where you can set configuration options\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the toolchain file (see https://github.com/ubirch/avr-arduino-cmake)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# project name and code types we use\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# adding our libraries, sources\n\n#add_libraries(lib)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# we don't need it now - ami\n\n#add_sources(src)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add the sketches directory (contains sketch directories and\n\n# a \"libraries\" dir where dependent libs are extracted\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "avr/ami-arduino-cmake/cmake/avr-arduino-toolchain.cmake" : {
      "ObjectId" : "4da62130f058b87e217daf3c51d9007c9b0ed04e",
      "LastModified" : "2016-05-10T17:26:53Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# AVR/Arduino CMake toolchain\n\n#\n\n# adds the toolchain and Arduino IDE libs\n\n#\n\n# @author Matthias L. Jugel <leo@ubirch.com>\n\n#\n\n# == LICENSE ==\n\n# Copyright 2015 ubirch GmbH\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#      http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find compiler and toolchain programs\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# toolchain settings\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Important project paths\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# necessary settings for the chip we use\n",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#ami: comment this. somehow it was adding 2kb to hex file.\n\n#set(CMAKE_EXE_LINKER_FLAGS \"-Wl,--relax -Wl,--gc-sections -Wl,-u,vfscanf -lscanf_min -Wl,-u,vfprintf -lprintf_min ${EXTRA_LIBS}\" CACHE STRING \"\")\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# some definitions that are common\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# we need a little function to add multiple targets\n",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# generate the .hex file\n",
        "Line" : 88,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# add a reset command using avrdude (only if it does not yet exist)\n",
        "Line" : 98,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# flash the produces binary\n",
        "Line" : 109,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# add all the libraries as possible library dependencies\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# add targets automatically from the src directory\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ====================================================================================================================\n\n# ARDUINO SKETCH FUNCTIONALITY\n\n# ====================================================================================================================\n\n# set the arduino sdk path from an environment variable if given\n",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# set the paths\n",
        "Line" : 159,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# find arduino-core sources\n",
        "Line" : 164,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "# setup the main arduino core target\n",
        "Line" : 169,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# configure all the additional libraries in the core\n",
        "Line" : 174,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "#ami removes ot\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "#file(GLOB CORE_DIRS ${ARDUINO_LIBRARIES_PATH}/*)\n",
        "Line" : 176,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# add some of the default definitions (TODO: identify from Arduino IDE)\n\n#ami: This is Arduino ide version. using 1.6.8\n",
        "Line" : 200,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# finally add all the sketches\n",
        "Line" : 211,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# add a sketch dependency by giving the target and a git url\n",
        "Line" : 227,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# try to install dependent libraries\n",
        "Line" : 231,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# clone dependency into libraries\n",
        "Line" : 234,
        "CharPositionInLine" : 12
      },
      "25" : {
        "Text" : "# now add a library target\n",
        "Line" : 247,
        "CharPositionInLine" : 12
      },
      "26" : {
        "Text" : "# go through list of sources and remove the examples\n",
        "Line" : 249,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 27
    },
    "avr/ami-arduino-cmake/config.cmake" : {
      "ObjectId" : "dc867808a94568b727cc5c33d5d899ccf59f4f46",
      "LastModified" : "2016-05-10T16:28:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# necessary settings for the chip we use\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#set(MCU atmega16)\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set the programmer and the device to use (default is to use simavr)\n\n#set(PROGRAMMER usbasp)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set(PROGRAMMER dragon_dw)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "#set(SERIAL_DEV /tmp/simavr-uart0)\n\n#set(SERIAL_DEV usb)\n\n# only needed if we do floating point math and want to print floats with printf\n\n#set(EXTRA_LIBS \"-lm -lprintf_flt\")\n\n# show a list of libs linked\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# if you want to compile Arduino sketches, set this to the Arduino SDK dir (1.6.5)\n\n#set(ARDUINO_SDK_PATH \"/Applications/Arduino.app/Contents/Java\" CACHE STRING \"Arduino SDK Path\")\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "avr/ami-arduino-cmake/lib/7segLed/CMakeLists.txt" : {
      "ObjectId" : "cf7158e9830eb57118c780f16c3f47b1f7dc1f4c",
      "LastModified" : "2016-05-10T16:28:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#target_include_directories(segdisplay PUBLIC ${CMAKE_CURRENT_SOURCE_DIR} ${ARDUINO_CORES_PATH} ${ARDUINO_VARIANTS_PATH} ${ARDUINO_VARIANTS_PATH})\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "avr/ami-arduino-cmake/lib/LiquidCrystal/CMakeLists.txt" : {
      "ObjectId" : "98c7ea423058b9e3eeb6de38e10b9cca83cd6b2a",
      "LastModified" : "2016-05-10T16:28:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#target_include_directories(segdisplay PUBLIC ${CMAKE_CURRENT_SOURCE_DIR} ${ARDUINO_CORES_PATH} ${ARDUINO_VARIANTS_PATH} ${ARDUINO_VARIANTS_PATH})\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "avr/ami-arduino-cmake/sketches/blink-cmake/CMakeLists.txt" : {
      "ObjectId" : "475e6a14ca9b3200b3c596c70aff5d3b34b39762",
      "LastModified" : "2016-05-10T16:28:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add a target and tell it what it's source files are\n\n#add_executable_avr(blink-avr Blink_AVR.c)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# tell the target, that it should use the arduino core libraries\n\n#target_link_libraries(blink-avr arduino-core)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "avr/ami-arduino-cmake/sketches/blink/CMakeLists.txt" : {
      "ObjectId" : "fba0a19cf0c5185ace6595da1ca1d2b38d955368",
      "LastModified" : "2016-05-10T16:28:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add a target and tell it what it's source files are\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# tell the target, that it should use the arduino core libraries\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "avr/ami-arduino-cmake/sketches/esp8266-temp-delhi/CMakeLists.txt" : {
      "ObjectId" : "7d43a6216096b23397645620a51728ccd6c19464",
      "LastModified" : "2016-05-10T16:28:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add a target and tell it what it's source files are\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# tell the target, that it should use the arduino core libraries\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "avr/ami-arduino-cmake/sketches/esp8266-thingspeak-plot/CMakeLists.txt" : {
      "ObjectId" : "a423a8867ef9fc6f1b2817fc5928d9bc6db62265",
      "LastModified" : "2016-05-10T16:28:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add a target and tell it what it's source files are\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# tell the target, that it should use the arduino core libraries\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "avr/ami-arduino-cmake/sketches/esp8266-thingspeak-temp-plot-no-lcd/CMakeLists.txt" : {
      "ObjectId" : "5529845bf188efcc3153379c694b47ba179f0acb",
      "LastModified" : "2016-05-10T16:28:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add a target and tell it what it's source files are\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# tell the target, that it should use the arduino core libraries\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "avr/ami-arduino-cmake/sketches/esp8266-wind-speed/CMakeLists.txt" : {
      "ObjectId" : "06db143a1df610214b33709a17696b4c9cde3006",
      "LastModified" : "2016-05-10T16:28:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add a target and tell it what it's source files are\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# tell the target, that it should use the arduino core libraries\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "avr/ami-arduino-cmake/sketches/kitchen_timer/CMakeLists.txt" : {
      "ObjectId" : "1554add5431c01229ec28b79f6de9327d00aca60",
      "LastModified" : "2016-05-10T16:28:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add a target and tell it what it's source files are\n\n#find_package(SEGDISPLAY REQUIRED)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#target_include_directories(display PUBLIC ${CMAKE_CURRENT_SOURCE_DIR} ${ARDUINO_CORES_PATH} ${ARDUINO_VARIANTS_PATH} ${ARDUINO_VARIANTS_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/lib/7segLed )\n\n# tell the target, that it should use the arduino core libraries\n\n#target_link_libraries(display )\n\n#target_link_libraries(display segdisplay)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "avr/ami-arduino-cmake/sketches/segdisplay/CMakeLists.txt" : {
      "ObjectId" : "1638049c19e8ae97d9d8de51c4bc8e9759fcdac1",
      "LastModified" : "2016-05-10T16:28:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add a target and tell it what it's source files are\n\n#find_package(SEGDISPLAY REQUIRED)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#target_include_directories(display PUBLIC ${CMAKE_CURRENT_SOURCE_DIR} ${ARDUINO_CORES_PATH} ${ARDUINO_VARIANTS_PATH} ${ARDUINO_VARIANTS_PATH} ${CMAKE_CURRENT_SOURCE_DIR}/lib/7segLed )\n\n# tell the target, that it should use the arduino core libraries\n\n#target_link_libraries(display )\n\n#target_link_libraries(display segdisplay)\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "avr/ami-atmega16-cmake/CMakeLists.txt" : {
      "ObjectId" : "9ba9b4948087ed5fb872f6ae3fad115d9f4c8915",
      "LastModified" : "2016-05-10T16:28:33Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#this is the place where you can set configuration options\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# the toolchain file (see https://github.com/ubirch/avr-arduino-cmake)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# project name and code types we use\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# adding our libraries, sources\n\n#add_libraries(lib)\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# we don't need it now - ami\n\n#add_sources(src)\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add the sketches directory (contains sketch directories and\n\n# a \"libraries\" dir where dependent libs are extracted\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "avr/ami-atmega16-cmake/Makefile" : {
      "ObjectId" : "6522cc1d558d5d10e3b6c14aec4589cf2340e4ad",
      "LastModified" : "2016-05-14T04:45:02Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# CMAKE generated file: DO NOT EDIT!\n\n# Generated by \"Unix Makefiles\" Generator, CMake Version 3.2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Default target executed when no arguments are given to make.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Allow only one \"make -f Makefile2\" at a time, but pass parallelism.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#=============================================================================\n\n# Special targets provided by cmake.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Disable implicit rules so canonical targets will work.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Remove some rules from gmake that .SUFFIXES does not remove.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Suppress display of executed commands.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# A target that is always out of date.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#=============================================================================\n\n# Set environment variables for the build.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The shell in which to execute make rules.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The CMake executable.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The command to remove a file.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Escaping for special characters.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# The top-level source directory on which CMake was run.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# The top-level build directory on which CMake was run.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#=============================================================================\n\n# Targets provided globally by CMake.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Special rule for the target edit_cache\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Special rule for the target edit_cache\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Special rule for the target rebuild_cache\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Special rule for the target rebuild_cache\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# The main all target\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# The main clean target\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# The main clean target\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Prepare targets for installation.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Prepare targets for installation.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# clear depends\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#=============================================================================\n\n# Target rules for targets named HID\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Build rule for target.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#=============================================================================\n\n# Target rules for targets named SPI\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Build rule for target.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#=============================================================================\n\n# Target rules for targets named Wire\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Build rule for target.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#=============================================================================\n\n# Target rules for targets named arduino-core\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Build rule for target.\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "#=============================================================================\n\n# Target rules for targets named segdisplay\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Build rule for target.\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 164,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "#=============================================================================\n\n# Target rules for targets named avr-reset\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Build rule for target.\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "#=============================================================================\n\n# Target rules for targets named blink\n",
        "Line" : 182,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Build rule for target.\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "#=============================================================================\n\n# Target rules for targets named blink-flash\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Build rule for target.\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "#=============================================================================\n\n# Target rules for targets named blink-monitor\n",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Build rule for target.\n",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 216,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "#=============================================================================\n\n# Target rules for targets named blink-strip\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Build rule for target.\n",
        "Line" : 224,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "#=============================================================================\n\n# Target rules for targets named kitchen_timer\n",
        "Line" : 234,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Build rule for target.\n",
        "Line" : 237,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 242,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "#=============================================================================\n\n# Target rules for targets named kitchen_timer-flash\n",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "# Build rule for target.\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 255,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "#=============================================================================\n\n# Target rules for targets named kitchen_timer-monitor\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "# Build rule for target.\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "#=============================================================================\n\n# Target rules for targets named kitchen_timer-strip\n",
        "Line" : 273,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Build rule for target.\n",
        "Line" : 276,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 281,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "# target to build an object file\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 297,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "# target to build an object file\n",
        "Line" : 313,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 321,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "# target to build an object file\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 345,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 353,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "# target to build an object file\n",
        "Line" : 361,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 369,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 377,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "# target to build an object file\n",
        "Line" : 385,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 401,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "# target to build an object file\n",
        "Line" : 409,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 417,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 425,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "# target to build an object file\n",
        "Line" : 433,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 441,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 449,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "# target to build an object file\n",
        "Line" : 457,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 465,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 473,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "# target to build an object file\n",
        "Line" : 481,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 489,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 497,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "# target to build an object file\n",
        "Line" : 505,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 513,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 521,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "# target to build an object file\n",
        "Line" : 529,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 537,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 545,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "# target to build an object file\n",
        "Line" : 553,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 561,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 569,
        "CharPositionInLine" : 0
      },
      "104" : {
        "Text" : "# target to build an object file\n",
        "Line" : 577,
        "CharPositionInLine" : 0
      },
      "105" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 585,
        "CharPositionInLine" : 0
      },
      "106" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 593,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "# target to build an object file\n",
        "Line" : 601,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 609,
        "CharPositionInLine" : 0
      },
      "109" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 617,
        "CharPositionInLine" : 0
      },
      "110" : {
        "Text" : "# target to build an object file\n",
        "Line" : 625,
        "CharPositionInLine" : 0
      },
      "111" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 633,
        "CharPositionInLine" : 0
      },
      "112" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 641,
        "CharPositionInLine" : 0
      },
      "113" : {
        "Text" : "# target to build an object file\n",
        "Line" : 649,
        "CharPositionInLine" : 0
      },
      "114" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 657,
        "CharPositionInLine" : 0
      },
      "115" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 665,
        "CharPositionInLine" : 0
      },
      "116" : {
        "Text" : "# target to build an object file\n",
        "Line" : 673,
        "CharPositionInLine" : 0
      },
      "117" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 681,
        "CharPositionInLine" : 0
      },
      "118" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 689,
        "CharPositionInLine" : 0
      },
      "119" : {
        "Text" : "# target to build an object file\n",
        "Line" : 697,
        "CharPositionInLine" : 0
      },
      "120" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 705,
        "CharPositionInLine" : 0
      },
      "121" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 713,
        "CharPositionInLine" : 0
      },
      "122" : {
        "Text" : "# target to build an object file\n",
        "Line" : 721,
        "CharPositionInLine" : 0
      },
      "123" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 729,
        "CharPositionInLine" : 0
      },
      "124" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 737,
        "CharPositionInLine" : 0
      },
      "125" : {
        "Text" : "# target to build an object file\n",
        "Line" : 745,
        "CharPositionInLine" : 0
      },
      "126" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 753,
        "CharPositionInLine" : 0
      },
      "127" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 761,
        "CharPositionInLine" : 0
      },
      "128" : {
        "Text" : "# target to build an object file\n",
        "Line" : 769,
        "CharPositionInLine" : 0
      },
      "129" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 777,
        "CharPositionInLine" : 0
      },
      "130" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 785,
        "CharPositionInLine" : 0
      },
      "131" : {
        "Text" : "# target to build an object file\n",
        "Line" : 793,
        "CharPositionInLine" : 0
      },
      "132" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 801,
        "CharPositionInLine" : 0
      },
      "133" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 809,
        "CharPositionInLine" : 0
      },
      "134" : {
        "Text" : "# target to build an object file\n",
        "Line" : 817,
        "CharPositionInLine" : 0
      },
      "135" : {
        "Text" : "# target to build an object file\n",
        "Line" : 825,
        "CharPositionInLine" : 0
      },
      "136" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 833,
        "CharPositionInLine" : 0
      },
      "137" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 841,
        "CharPositionInLine" : 0
      },
      "138" : {
        "Text" : "# target to build an object file\n",
        "Line" : 849,
        "CharPositionInLine" : 0
      },
      "139" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 857,
        "CharPositionInLine" : 0
      },
      "140" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 865,
        "CharPositionInLine" : 0
      },
      "141" : {
        "Text" : "# target to build an object file\n",
        "Line" : 873,
        "CharPositionInLine" : 0
      },
      "142" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 881,
        "CharPositionInLine" : 0
      },
      "143" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 889,
        "CharPositionInLine" : 0
      },
      "144" : {
        "Text" : "# target to build an object file\n",
        "Line" : 897,
        "CharPositionInLine" : 0
      },
      "145" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 905,
        "CharPositionInLine" : 0
      },
      "146" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 913,
        "CharPositionInLine" : 0
      },
      "147" : {
        "Text" : "# target to build an object file\n",
        "Line" : 921,
        "CharPositionInLine" : 0
      },
      "148" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 929,
        "CharPositionInLine" : 0
      },
      "149" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 937,
        "CharPositionInLine" : 0
      },
      "150" : {
        "Text" : "# target to build an object file\n",
        "Line" : 945,
        "CharPositionInLine" : 0
      },
      "151" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 953,
        "CharPositionInLine" : 0
      },
      "152" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 961,
        "CharPositionInLine" : 0
      },
      "153" : {
        "Text" : "# Help Target\n",
        "Line" : 966,
        "CharPositionInLine" : 0
      },
      "154" : {
        "Text" : "#=============================================================================\n\n# Special targets to cleanup operation of make.\n",
        "Line" : 1077,
        "CharPositionInLine" : 0
      },
      "155" : {
        "Text" : "# Special rule to run CMake to check the build system integrity.\n\n# No rule that depends on this can have commands that come from listfiles\n\n# because they might be regenerated.\n",
        "Line" : 1080,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 156
    },
    "avr/ami-atmega16-cmake/cmake/avr-arduino-toolchain.cmake" : {
      "ObjectId" : "5dc24963c0cf5d693a2c3423c52c9e7eb1a22ac6",
      "LastModified" : "2016-05-14T04:45:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# AVR/Arduino CMake toolchain\n\n#\n\n# adds the toolchain and Arduino IDE libs\n\n#\n\n# @author Matthias L. Jugel <leo@ubirch.com>\n\n#\n\n# == LICENSE ==\n\n# Copyright 2015 ubirch GmbH\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#      http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find compiler and toolchain programs\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# toolchain settings\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Important project paths\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# necessary settings for the chip we use\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#set(CMAKE_EXE_LINKER_FLAGS \"-Wl,--relax -Wl,--gc-sections -Wl,-u,vfscanf -lscanf_min -Wl,-u,vfprintf -lprintf_min ${EXTRA_LIBS}\" CACHE STRING \"\")\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# some definitions that are common\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# we need a little function to add multiple targets\n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# generate the .hex file\n",
        "Line" : 86,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# add a reset command using avrdude (only if it does not yet exist)\n",
        "Line" : 96,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# flash the produces binary\n",
        "Line" : 107,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# add all the libraries as possible library dependencies\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# add targets automatically from the src directory\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# ====================================================================================================================\n\n# ARDUINO SKETCH FUNCTIONALITY\n\n# ====================================================================================================================\n\n# set the arduino sdk path from an environment variable if given\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# set the paths\n",
        "Line" : 157,
        "CharPositionInLine" : 8
      },
      "15" : {
        "Text" : "# change this to atmega16A pin location\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#set(ARDUINO_VARIANTS_PATH ${ARDUINO_SDK_PATH}/hardware/arduino/avr/variants/standard CACHE STRING \"\")\n",
        "Line" : 160,
        "CharPositionInLine" : 8
      },
      "17" : {
        "Text" : "# find arduino-core sources\n",
        "Line" : 164,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# setup the main arduino core target\n",
        "Line" : 169,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# configure all the additional libraries in the core\n",
        "Line" : 174,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# add some of the default definitions (TODO: identify from Arduino IDE)\n\n#add_definitions(-DARDUINO=10605)\n\n#add_definitions(-DARDUINO_AVR_UNO)\n\n#add_definitions(-DARDUINO_ARCH_AVR)\n",
        "Line" : 199,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "# finally add all the sketches\n",
        "Line" : 209,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# add a sketch dependency by giving the target and a git url\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# try to install dependent libraries\n",
        "Line" : 229,
        "CharPositionInLine" : 8
      },
      "24" : {
        "Text" : "# clone dependency into libraries\n",
        "Line" : 232,
        "CharPositionInLine" : 12
      },
      "25" : {
        "Text" : "# now add a library target\n",
        "Line" : 245,
        "CharPositionInLine" : 12
      },
      "26" : {
        "Text" : "# go through list of sources and remove the examples\n",
        "Line" : 247,
        "CharPositionInLine" : 12
      },
      "CommentCount" : 27
    },
    "avr/ami-atmega16-cmake/config.cmake" : {
      "ObjectId" : "16552ecbf6f9ae6cd61f48cec246e6caa7e8cb75",
      "LastModified" : "2016-05-14T04:45:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# necessary settings for the chip we use\n\n#set(MCU atmega328p)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set the programmer and the device to use (default is to use simavr)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set(PROGRAMMER arduino)\n\n#set(PROGRAMMER dragon_dw)\n\n#set(SERIAL_DEV /dev/cu.SLAB_USBtoUART)\n\n#set(SERIAL_DEV /tmp/simavr-uart0)\n\n#set(SERIAL_DEV usb)\n\n# only needed if we do floating point math and want to print floats with printf\n\n#set(EXTRA_LIBS \"-lm -lprintf_flt\")\n\n# show a list of libs linked\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if you want to compile Arduino sketches, set this to the Arduino SDK dir (1.6.5)\n\n#set(ARDUINO_SDK_PATH \"/Applications/Arduino.app/Contents/Java\" CACHE STRING \"Arduino SDK Path\")\n\n# note: software serial libraries won't compile for atmega16a hence remove it from libraries/\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "avr/ami-atmega16-cmake/lib/7segLed/CMakeLists.txt" : {
      "ObjectId" : "cf7158e9830eb57118c780f16c3f47b1f7dc1f4c",
      "LastModified" : "2016-05-14T04:45:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#target_include_directories(segdisplay PUBLIC ${CMAKE_CURRENT_SOURCE_DIR} ${ARDUINO_CORES_PATH} ${ARDUINO_VARIANTS_PATH} ${ARDUINO_VARIANTS_PATH})\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "avr/ami-atmega16-cmake/sketches/blink/CMakeLists.txt" : {
      "ObjectId" : "fba0a19cf0c5185ace6595da1ca1d2b38d955368",
      "LastModified" : "2016-05-14T04:45:02Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add a target and tell it what it's source files are\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# tell the target, that it should use the arduino core libraries\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "avr/ami-atmega16-cmake/sketches/blink/Makefile" : {
      "ObjectId" : "7d92e0a2afa9ede7a22a303ab8bb5562f86aef8e",
      "LastModified" : "2016-05-14T04:45:02Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# CMAKE generated file: DO NOT EDIT!\n\n# Generated by \"Unix Makefiles\" Generator, CMake Version 3.2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Default target executed when no arguments are given to make.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Allow only one \"make -f Makefile2\" at a time, but pass parallelism.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#=============================================================================\n\n# Special targets provided by cmake.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Disable implicit rules so canonical targets will work.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Remove some rules from gmake that .SUFFIXES does not remove.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Suppress display of executed commands.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# A target that is always out of date.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#=============================================================================\n\n# Set environment variables for the build.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The shell in which to execute make rules.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The CMake executable.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The command to remove a file.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Escaping for special characters.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# The top-level source directory on which CMake was run.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# The top-level build directory on which CMake was run.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#=============================================================================\n\n# Targets provided globally by CMake.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Special rule for the target edit_cache\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Special rule for the target edit_cache\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Special rule for the target rebuild_cache\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Special rule for the target rebuild_cache\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# The main all target\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# The main clean target\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# The main clean target\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Prepare targets for installation.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Prepare targets for installation.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# clear depends\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Convenience name for target.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Convenience name for target.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Convenience name for target.\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Convenience name for target.\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Convenience name for target.\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Convenience name for target.\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Convenience name for target.\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Convenience name for target.\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Convenience name for target.\n",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Convenience name for target.\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# target to build an object file\n",
        "Line" : 177,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Help Target\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "#=============================================================================\n\n# Special targets to cleanup operation of make.\n",
        "Line" : 218,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Special rule to run CMake to check the build system integrity.\n\n# No rule that depends on this can have commands that come from listfiles\n\n# because they might be regenerated.\n",
        "Line" : 221,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 47
    },
    "avr/ami-atmega16-cmake/sketches/kitchen_timer/CMakeLists.txt" : {
      "ObjectId" : "4436f61cca02fb4520473378b1a34d5d57e431b3",
      "LastModified" : "2016-05-14T04:45:02Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "avr/ami-atmega16-cmake/sketches/kitchen_timer/Makefile" : {
      "ObjectId" : "67584f4a29da3856d78136346e08a99a3182015e",
      "LastModified" : "2016-05-14T04:45:02Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# CMAKE generated file: DO NOT EDIT!\n\n# Generated by \"Unix Makefiles\" Generator, CMake Version 3.2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Default target executed when no arguments are given to make.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Allow only one \"make -f Makefile2\" at a time, but pass parallelism.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#=============================================================================\n\n# Special targets provided by cmake.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Disable implicit rules so canonical targets will work.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Remove some rules from gmake that .SUFFIXES does not remove.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Suppress display of executed commands.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# A target that is always out of date.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#=============================================================================\n\n# Set environment variables for the build.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The shell in which to execute make rules.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The CMake executable.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The command to remove a file.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Escaping for special characters.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# The top-level source directory on which CMake was run.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# The top-level build directory on which CMake was run.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#=============================================================================\n\n# Targets provided globally by CMake.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Special rule for the target edit_cache\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Special rule for the target edit_cache\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Special rule for the target rebuild_cache\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Special rule for the target rebuild_cache\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# The main all target\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# The main clean target\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# The main clean target\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Prepare targets for installation.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Prepare targets for installation.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# clear depends\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Convenience name for target.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Convenience name for target.\n",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Convenience name for target.\n",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Convenience name for target.\n",
        "Line" : 123,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Convenience name for target.\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Convenience name for target.\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 141,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Convenience name for target.\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Convenience name for target.\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# target to build an object file\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 179,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Help Target\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#=============================================================================\n\n# Special targets to cleanup operation of make.\n",
        "Line" : 203,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Special rule to run CMake to check the build system integrity.\n\n# No rule that depends on this can have commands that come from listfiles\n\n# because they might be regenerated.\n",
        "Line" : 206,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 44
    },
    "avr/arduino-nano-cmake/CMakeLists.txt" : {
      "ObjectId" : "95d8e6b45d8b43a51c7c64e445f07122369785eb",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=====================================================================================\n\n# ubirch #1 cmake\n\n#=====================================================================================\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#this is the place where you can set configuration options\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# the toolchain file (see https://github.com/ubirch/avr-arduino-cmake)\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# project name and code types we use\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# adding our libraries, sources\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# add the sketches directory (contains sketch directories and\n\n# a \"libraries\" dir where dependent libs are extracted\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "avr/arduino-nano-cmake/cmake/avr-arduino-toolchain.cmake" : {
      "ObjectId" : "6ad8f42b7094d6fe43a1627f75be83eb8d2a446c",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# AVR/Arduino CMake toolchain\n\n#\n\n# adds the toolchain and Arduino IDE libs\n\n#\n\n# @author Matthias L. Jugel <leo@ubirch.com>\n\n#\n\n# == LICENSE ==\n\n# Copyright 2015 ubirch GmbH\n\n# Copyright 2016 Amitesh Singh \n\n#                    - Added support of target_sketch_libraryoffline()\n\n#\n\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n#      http://www.apache.org/licenses/LICENSE-2.0\n\n#\n\n# Unless required by applicable law or agreed to in writing, software\n\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\n# See the License for the specific language governing permissions and\n\n# limitations under the License.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# find compiler and toolchain programs\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#ami: \n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# toolchain settings\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Important project paths\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# necessary settings for the chip we use\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "#set(CMAKE_EXE_LINKER_FLAGS \"-Wl,--relax -Wl,--gc-sections -Wl,-u,vfscanf -lscanf_min -Wl,-u,vfprintf -lprintf_min ${EXTRA_LIBS}\" CACHE STRING \"\")\n\n#ami: Note: This reduces the size a bit (4-5 kb)\n\n#-Wl,--relax reduces size further but arduino ide does not use this option\n\n#according to guys at #avr:\n\n# I think it \"doesn't always work\", it makes the toolchain \"too optimistic\" sometimes. \n\n# However, super easy to add a new entry in (e.g.) boards.txt \"Optimized Uno\" (or whatever) that re-adds it for your project.\n\n#\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# some definitions that are common\n",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# we need a little function to add multiple targets\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# generate the .hex file\n",
        "Line" : 96,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# add a reset command using avrdude (only if it does not yet exist)\n",
        "Line" : 106,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# flash the produces binary\n",
        "Line" : 117,
        "CharPositionInLine" : 8
      },
      "12" : {
        "Text" : "# add all the libraries as possible library dependencies\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# add targets automatically from the src directory\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# ====================================================================================================================\n\n# ARDUINO SKETCH FUNCTIONALITY\n\n# ====================================================================================================================\n\n# set the arduino sdk path from an environment variable if given\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# set the paths\n",
        "Line" : 167,
        "CharPositionInLine" : 8
      },
      "16" : {
        "Text" : "#        set(ARDUINO_VARIANTS_PATH variants/atmega16a CACHE STRING \"\")\n",
        "Line" : 170,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# find arduino-core sources\n",
        "Line" : 173,
        "CharPositionInLine" : 8
      },
      "18" : {
        "Text" : "# setup the main arduino core target\n",
        "Line" : 178,
        "CharPositionInLine" : 8
      },
      "19" : {
        "Text" : "# configure all the additional libraries in the core\n",
        "Line" : 183,
        "CharPositionInLine" : 8
      },
      "20" : {
        "Text" : "# add some of the default definitions (TODO: identify from Arduino IDE)\n\n#ami: use arduino 1.6.10\n",
        "Line" : 208,
        "CharPositionInLine" : 8
      },
      "21" : {
        "Text" : "#add_definitions(-DARDUINO_AVR_UNO)\n",
        "Line" : 211,
        "CharPositionInLine" : 8
      },
      "22" : {
        "Text" : "# finally add all the sketches\n",
        "Line" : 220,
        "CharPositionInLine" : 8
      },
      "23" : {
        "Text" : "# add a sketch dependency by giving the target and a git url\n",
        "Line" : 236,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# try to install dependent libraries\n",
        "Line" : 240,
        "CharPositionInLine" : 8
      },
      "25" : {
        "Text" : "# clone dependency into libraries\n",
        "Line" : 243,
        "CharPositionInLine" : 12
      },
      "26" : {
        "Text" : "# now add a library target\n",
        "Line" : 256,
        "CharPositionInLine" : 12
      },
      "27" : {
        "Text" : "# go through list of sources and remove the examples\n",
        "Line" : 258,
        "CharPositionInLine" : 12
      },
      "28" : {
        "Text" : "# ----------------!..................................!--------------------------#\n\n#Added by Amitesh Singh\n",
        "Line" : 291,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# try to install dependent libraries\n",
        "Line" : 296,
        "CharPositionInLine" : 8
      },
      "30" : {
        "Text" : "# clone dependency into libraries\n",
        "Line" : 298,
        "CharPositionInLine" : 12
      },
      "31" : {
        "Text" : "# now add a library target\n",
        "Line" : 311,
        "CharPositionInLine" : 12
      },
      "32" : {
        "Text" : "# go through list of sources and remove the examples\n",
        "Line" : 313,
        "CharPositionInLine" : 12
      },
      "33" : {
        "Text" : "# ----------------!..................................!--------------------------#\n",
        "Line" : 342,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 34
    },
    "avr/arduino-nano-cmake/config.cmake" : {
      "ObjectId" : "4e37cff880c78c8c7b22969517a10362e3ba9954",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# necessary settings for the chip we use\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set the programmer and the device to use (default is to use simavr)\n\n#set(PROGRAMMER usbasp)\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set(PROGRAMMER dragon_dw)\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#set(SERIAL_DEV /tmp/simavr-uart0)\n\n#set(SERIAL_DEV usb)\n\n#set(SERIAL_DEV /dev/cu.usbserial-A96TDJ7N)\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# only needed if we do floating point math and want to print floats with printf\n\n#set(EXTRA_LIBS \"-lm -lprintf_flt\")\n\n# show a list of libs linked\n",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# if you want to compile Arduino sketches, set this to the Arduino SDK dir (1.6.5)\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "avr/arduino-nano-cmake/sketches/blink/CMakeLists.txt" : {
      "ObjectId" : "2281f42ab6c76de1a3a386d515a99dbe9d209138",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add a target and tell it what it's source files are\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# tell the target, that it should use the arduino core libraries\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#target_sketch_libraryoffline(blink arduino-api)\n\n#target_sketch_libraryoffline(blink arduinoLoRaWAN)\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "avr/arduino-nano-cmake/sketches/irsenddemo/CMakeLists.txt" : {
      "ObjectId" : "b0be52fff1c946b22352bb643c0c10c0391bf944",
      "LastModified" : "2016-12-25T07:48:31Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# add a target and tell it what it's source files are\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# tell the target, that it should use the arduino core libraries\n",
        "Line" : 3,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "avr/atmega16a/TFTs/st7735/fonts/Makefile" : {
      "ObjectId" : "371f382d3bec29981e513bbcc2196a71fdfe2985",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## An alias\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 149,
        "CharPositionInLine" : 34
      },
      "24" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 153,
        "CharPositionInLine" : 33
      },
      "25" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Generic \n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "avr/atmega16a/TFTs/st7735/movingblock/Makefile" : {
      "ObjectId" : "371f382d3bec29981e513bbcc2196a71fdfe2985",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## An alias\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 149,
        "CharPositionInLine" : 34
      },
      "24" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 153,
        "CharPositionInLine" : 33
      },
      "25" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Generic \n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "avr/atmega16a/TFTs/st7735/shapes/Makefile" : {
      "ObjectId" : "371f382d3bec29981e513bbcc2196a71fdfe2985",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## An alias\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 149,
        "CharPositionInLine" : 34
      },
      "24" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 153,
        "CharPositionInLine" : 33
      },
      "25" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Generic \n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "avr/atmega16a/adc/read/Makefile" : {
      "ObjectId" : "72dabdfdf83ead80926b8d7ffc61c615ddd33ea5",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/adc/soil-moisture/Makefile" : {
      "ObjectId" : "392198ea042f64f62edcab921bbf8b50a63f679a",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/blink-cmake/CMakeLists.txt" : {
      "ObjectId" : "dc6f1c00d955bcbe8eecf5b2f38a3390bebaf10b",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "avr/atmega16a/blink-cmake/Makefile" : {
      "ObjectId" : "2ac3a5068c087742d143a60ba241593b972de4bc",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# CMAKE generated file: DO NOT EDIT!\n\n# Generated by \"Unix Makefiles\" Generator, CMake Version 3.2\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Default target executed when no arguments are given to make.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Allow only one \"make -f Makefile2\" at a time, but pass parallelism.\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#=============================================================================\n\n# Special targets provided by cmake.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Disable implicit rules so canonical targets will work.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Remove some rules from gmake that .SUFFIXES does not remove.\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Suppress display of executed commands.\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# A target that is always out of date.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "#=============================================================================\n\n# Set environment variables for the build.\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# The shell in which to execute make rules.\n",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# The CMake executable.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# The command to remove a file.\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Escaping for special characters.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# The top-level source directory on which CMake was run.\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# The top-level build directory on which CMake was run.\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#=============================================================================\n\n# Targets provided globally by CMake.\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Special rule for the target edit_cache\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Special rule for the target edit_cache\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Special rule for the target rebuild_cache\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Special rule for the target rebuild_cache\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# The main all target\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# The main clean target\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# The main clean target\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# Prepare targets for installation.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# Prepare targets for installation.\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# clear depends\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "#=============================================================================\n\n# Target rules for targets named blink\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Build rule for target.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "#=============================================================================\n\n# Target rules for targets named blink-atmega32.elf\n",
        "Line" : 117,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Build rule for target.\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "#=============================================================================\n\n# Target rules for targets named disassemble_blink\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Build rule for target.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 138,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "#=============================================================================\n\n# Target rules for targets named upload_blink\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Build rule for target.\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# fast build rule for target.\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# target to build an object file\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# target to preprocess a source file\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# target to generate assembly for a file\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Help Target\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "#=============================================================================\n\n# Special targets to cleanup operation of make.\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Special rule to run CMake to check the build system integrity.\n\n# No rule that depends on this can have commands that come from listfiles\n\n# because they might be regenerated.\n",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 44
    },
    "avr/atmega16a/blink-cmake/config.cmake" : {
      "ObjectId" : "b5b928b5e072e9aea2afe964b822624072fa0fb8",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# necessary settings for the chip we use\n\n#set(MCU atmega328p)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# set the programmer and the device to use (default is to use simavr)\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "#set(PROGRAMMER arduino)\n\n#set(PROGRAMMER dragon_dw)\n\n#set(SERIAL_DEV /dev/cu.SLAB_USBtoUART)\n\n#set(SERIAL_DEV /tmp/simavr-uart0)\n\n#set(SERIAL_DEV usb)\n\n# only needed if we do floating point math and want to print floats with printf\n\n#set(EXTRA_LIBS \"-lm -lprintf_flt\")\n\n# show a list of libs linked\n",
        "Line" : 9,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# if you want to compile Arduino sketches, set this to the Arduino SDK dir (1.6.5)\n\n#set(ARDUINO_SDK_PATH \"/Applications/Arduino.app/Contents/Java\" CACHE STRING \"Arduino SDK Path\")\n\n# note: software serial libraries won't compile for atmega16a hence remove it from libraries/\n\n#set(ARDUINO_SDK_PATH \"/home/ami/Downloads/arduino-1.6.8-atmega16a\" CACHE STRING \"Arduino SDK Path\")\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "avr/atmega16a/blink-cmake/toolchain-avr-gcc.cmake" : {
      "ObjectId" : "603953391b02dae62d1142c3db8900f14c8760c6",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# XXX better use a seperate file for non toolchain stuff?\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# XXX\n",
        "Line" : 111,
        "CharPositionInLine" : 29
      },
      "CommentCount" : 2
    },
    "avr/atmega16a/blink/Makefile" : {
      "ObjectId" : "bf051e4c162296912c5f2d5c1764348a65e6a94b",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## An alias\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 149,
        "CharPositionInLine" : 34
      },
      "24" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 153,
        "CharPositionInLine" : 33
      },
      "25" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Generic \n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "avr/atmega16a/checkports16a/Makefile" : {
      "ObjectId" : "bacd83078627df445acee1643f5302a684450078",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/dc-motor/stepper/full-step/acw-motion/Makefile" : {
      "ObjectId" : "d37dc573bc09c8862551ddfb4507d70e2826945b",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll\n\n##  need to change this path to match.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Use short (8-bit) data types\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits,\n\n# or making sure the compiler does what you want.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally show how big the resulting program is\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## An alias\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## If you've got multiple programmers that you use,\n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 146,
        "CharPositionInLine" : 34
      },
      "22" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 150,
        "CharPositionInLine" : 33
      },
      "23" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Generic\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "avr/atmega16a/dc-motor/stepper/full-step/back-forth/Makefile" : {
      "ObjectId" : "f05e74abf60505a5196a2a97b8b2a3ada5386c62",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## An alias\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 146,
        "CharPositionInLine" : 34
      },
      "22" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 150,
        "CharPositionInLine" : 33
      },
      "23" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Generic \n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "avr/atmega16a/dc-motor/stepper/full-step/cw-motion/Makefile" : {
      "ObjectId" : "2dc79c320aa44b1e0fe8225b51aa288925584ad2",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## An alias\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 146,
        "CharPositionInLine" : 34
      },
      "22" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 150,
        "CharPositionInLine" : 33
      },
      "23" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Generic \n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "avr/atmega16a/dc-motor/stepper/half-step/cw/Makefile" : {
      "ObjectId" : "2dc79c320aa44b1e0fe8225b51aa288925584ad2",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## An alias\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 146,
        "CharPositionInLine" : 34
      },
      "22" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 150,
        "CharPositionInLine" : 33
      },
      "23" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Generic \n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "avr/atmega16a/digitalInput/buttonpress/Makefile" : {
      "ObjectId" : "efaac92d2578ca32d5cbf16632e21e3c13523651",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 146,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 150,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/digitalInput/digitalRead/Makefile" : {
      "ObjectId" : "42a9252b1677a49353944c6b4c6d7598ff223442",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 146,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 150,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/digitalInput/softwarebounce/Makefile" : {
      "ObjectId" : "efaac92d2578ca32d5cbf16632e21e3c13523651",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 146,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 150,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/eeprom/Makefile" : {
      "ObjectId" : "6a44f8c498ea94401c35a22bb315df5e7a9c8785",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 75,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "24" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "25" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "avr/atmega16a/interrupts/int0/Makefile" : {
      "ObjectId" : "000ea72d2002281c1322e41b47c9f8e626319fe6",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/interrupts/int0_led/Makefile" : {
      "ObjectId" : "000ea72d2002281c1322e41b47c9f8e626319fe6",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/interrupts/int1/Makefile" : {
      "ObjectId" : "000ea72d2002281c1322e41b47c9f8e626319fe6",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/interrupts/int2/Makefile" : {
      "ObjectId" : "000ea72d2002281c1322e41b47c9f8e626319fe6",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/interrupts/pcint0/Makefile" : {
      "ObjectId" : "e4ca25972ad346a46f8060aef9f320b07e95537c",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega16a\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/interrupts/pcint1/Makefile" : {
      "ObjectId" : "8aa4fff32f597d823f59ed3a33afc80bc81774ea",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega16a\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/interrupts/pcint2/Makefile" : {
      "ObjectId" : "20ef09319d1326d6c90f69131e73ddcfd6928c67",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega16a\n",
        "Line" : 8,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/lcd/8bit/Makefile" : {
      "ObjectId" : "4997d87f1febb02bd739ccb2ae4c4a9051786909",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 146,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 150,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/lcd/customchar/Makefile" : {
      "ObjectId" : "d3366681f526ad252adeaecaa2027fe77d54d03a",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll\n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits,\n\n# or making sure the compiler does what you want.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use,\n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 146,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 150,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/lcd/customchar2/Makefile" : {
      "ObjectId" : "d3366681f526ad252adeaecaa2027fe77d54d03a",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll\n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits,\n\n# or making sure the compiler does what you want.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use,\n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 146,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 150,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/lcd/gotoXY/Makefile" : {
      "ObjectId" : "3b63a5dfb309c22784f596c89c42b7cfcebbf6ff",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll\n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits,\n\n# or making sure the compiler does what you want.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use,\n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 146,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 150,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/lcd/x-ygame/Makefile" : {
      "ObjectId" : "3b63a5dfb309c22784f596c89c42b7cfcebbf6ff",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll\n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits,\n\n# or making sure the compiler does what you want.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use,\n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 146,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 150,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/lcd/x-ygame2/Makefile" : {
      "ObjectId" : "3b63a5dfb309c22784f596c89c42b7cfcebbf6ff",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll\n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits,\n\n# or making sure the compiler does what you want.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use,\n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 146,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 150,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic\n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/parkingsensor-powersave/Makefile" : {
      "ObjectId" : "7023f72f0050dd71384a030b277e7de39530252a",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## An alias\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 146,
        "CharPositionInLine" : 34
      },
      "22" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 150,
        "CharPositionInLine" : 33
      },
      "23" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Generic \n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "avr/atmega16a/parkingsensor/Makefile" : {
      "ObjectId" : "7023f72f0050dd71384a030b277e7de39530252a",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## An alias\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 146,
        "CharPositionInLine" : 34
      },
      "22" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 150,
        "CharPositionInLine" : 33
      },
      "23" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Generic \n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "avr/atmega16a/pwm/powersleep/Makefile" : {
      "ObjectId" : "e02f34e697dfc8eff40676b744249e8e766dcd28",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/pwm/powersleeptimer1/Makefile" : {
      "ObjectId" : "e02f34e697dfc8eff40676b744249e8e766dcd28",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/pwm/pwm-led-brigtness/Makefile" : {
      "ObjectId" : "7145e74d65849447145e616434c455aa119a1ee9",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/pwm/pwm/Makefile" : {
      "ObjectId" : "7145e74d65849447145e616434c455aa119a1ee9",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/pwm/usingctc/Makefile" : {
      "ObjectId" : "5299cc7ebb6e31d9e236db1a680dfcdedb2a5260",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/serial/CMakeLists.txt" : {
      "ObjectId" : "109785daac710a4810b1de98e6a11eddcb3eb2ae",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##################################################################################\n\n# \"THE ANY BEVERAGE-WARE LICENSE\" (Revision 42 - based on beer-ware\n\n# license):\n\n# <dev@layer128.net> wrote this file. As long as you retain this notice\n\n# you can do whatever you want with this stuff. If we meet some day, and\n\n# you think this stuff is worth it, you can buy me a be(ve)er(age) in\n\n# return. (I don't like beer much.)\n\n#\n\n# Matthias Kleemann\n\n##################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##################################################################################\n\n# Sample CMakeLists.txt for a simple AVR project based on the toolchain\n\n##################################################################################\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "### TOOLCHAIN SETUP AREA #################################################\n\n# Set any variables used in the toolchain prior project() call. In that\n\n# case they are already set and used.\n\n##########################################################################\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##################################################################################\n\n# tools to be used for programming the AVR\n\n##################################################################################\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# AVR and fuses needs to be set\n",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "#set(AVR_H_FUSE 0xd9)\n\n#set(AVR_L_FUSE 0xc3)\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "### END TOOLCHAIN SETUP AREA #############################################\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########################################################################\n\n# name your project\n\n##########################################################################\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "##################################################################################\n\n# status messages\n\n##################################################################################\n",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "#message(STATUS \"Current H_FUSE is set to: ${AVR_H_FUSE}\")\n\n#message(STATUS \"Current L_FUSE is set to: ${AVR_L_FUSE}\")\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "##################################################################################\n\n# set build type, if not already set at cmake command line\n\n##################################################################################\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "##################################################################################\n\n# needs to be defined for AVR toolchain\n\n##################################################################################\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "##################################################################################\n\n# some cmake cross-compile necessities\n\n##################################################################################\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# not added automatically, since CMAKE_SYSTEM_NAME is \"generic\"\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "##################################################################################\n\n# status messages for generating\n\n##################################################################################\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "##################################################################################\n\n# set compiler options for build types\n\n##################################################################################\n",
        "Line" : 98,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "##################################################################################\n\n# compiler options for all build types\n\n##################################################################################\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# http://gcc.gnu.org/onlinedocs/gcc-4.8.2/gcc/Alternate-Keywords.html#Alternate-Keywords\n\n# [...]-pedantic and other options cause warnings for many GNU C extensions. You can prevent such warnings within\n\n# one expression by writing __extension__ before the expression. __extension__ has no effect aside from this.[...] \n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "##################################################################################\n\n# add AVR executable\n\n##################################################################################\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##################################################################################\n\n# add AVR library\n\n##################################################################################\n\n#add_avr_library(\n\n#   <library-name>\n\n#   <sources> <headers>\n\n#)\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##################################################################################\n\n# link library to executable\n\n# NOTE: It needs to be the elf target.\n\n##################################################################################\n\n# target_link_libraries(<executable-name>-${AVR_MCU}.elf <library-name>-${AVR_MCU})\n\n# OR easier\n\n#target_link_libraries(<executable-name> <library-name> <some-external-libary>)\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 21
    },
    "avr/atmega16a/serial/generic-gcc-avr.cmake" : {
      "ObjectId" : "18bcb2adccd70c7a7b90d9c8b69154d37fbd8ced",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "##########################################################################\n\n# \"THE ANY BEVERAGE-WARE LICENSE\" (Revision 42 - based on beer-ware\n\n# license):\n\n# <dev@layer128.net> wrote this file. As long as you retain this notice\n\n# you can do whatever you want with this stuff. If we meet some day, and\n\n# you think this stuff is worth it, you can buy me a be(ve)er(age) in\n\n# return. (I don't like beer much.)\n\n#\n\n# Matthias Kleemann\n\n##########################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "##########################################################################\n\n# The toolchain requires some variables set.\n\n#\n\n# AVR_MCU (default: atmega8)\n\n#     the type of AVR the application is built for\n\n# AVR_L_FUSE (NO DEFAULT)\n\n#     the LOW fuse value for the MCU used\n\n# AVR_H_FUSE (NO DEFAULT)\n\n#     the HIGH fuse value for the MCU used\n\n# AVR_UPLOADTOOL (default: avrdude)\n\n#     the application used to upload to the MCU\n\n#     NOTE: The toolchain is currently quite specific about\n\n#           the commands used, so it needs tweaking.\n\n# AVR_UPLOADTOOL_PORT (default: usb)\n\n#     the port used for the upload tool, e.g. usb\n\n# AVR_PROGRAMMER (default: avrispmkII)\n\n#     the programmer hardware used, e.g. avrispmkII\n\n##########################################################################\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "##########################################################################\n\n# options\n\n##########################################################################\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##########################################################################\n\n# executables in use\n\n##########################################################################\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########################################################################\n\n# toolchain starts with defining mandatory variables\n\n##########################################################################\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##########################################################################\n\n# some necessary tools and variables for AVR builds, which may not\n\n# defined yet\n\n# - AVR_UPLOADTOOL\n\n# - AVR_UPLOADTOOL_PORT\n\n# - AVR_PROGRAMMER\n\n# - AVR_MCU\n\n# - AVR_SIZE_ARGS\n\n##########################################################################\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# default upload tool\n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# default upload tool port\n",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# default programmer (hardware)\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# default MCU (chip)\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#default avr-size args\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "##########################################################################\n\n# check build types:\n\n# - Debug\n\n# - Release\n\n# - RelWithDebInfo\n\n#\n\n# Release is chosen, because of some optimized functions in the\n\n# AVR toolchain, e.g. _delay_ms().\n\n##########################################################################\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "##########################################################################\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "##########################################################################\n\n# target file name add-on\n\n##########################################################################\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "##########################################################################\n\n# add_avr_executable\n\n# - IN_VAR: EXECUTABLE_NAME\n\n#\n\n# Creates targets and dependencies for AVR toolchain, building an\n\n# executable. Calls add_executable with ELF file as target name, so\n\n# any link dependencies need to be using that target, e.g. for\n\n# target_link_libraries(<EXECUTABLE_NAME>-${AVR_MCU}.elf ...).\n\n##########################################################################\n",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# set file names\n",
        "Line" : 153,
        "CharPositionInLine" : 3
      },
      "16" : {
        "Text" : "# elf file\n",
        "Line" : 159,
        "CharPositionInLine" : 3
      },
      "17" : {
        "Text" : "# eeprom\n",
        "Line" : 178,
        "CharPositionInLine" : 3
      },
      "18" : {
        "Text" : "# clean\n",
        "Line" : 200,
        "CharPositionInLine" : 3
      },
      "19" : {
        "Text" : "# upload - with avrdude\n",
        "Line" : 207,
        "CharPositionInLine" : 3
      },
      "20" : {
        "Text" : "# upload eeprom only - with avrdude\n\n# see also bug http://savannah.nongnu.org/bugs/?40142\n",
        "Line" : 217,
        "CharPositionInLine" : 3
      },
      "21" : {
        "Text" : "# get status\n",
        "Line" : 228,
        "CharPositionInLine" : 3
      },
      "22" : {
        "Text" : "# get fuses\n",
        "Line" : 235,
        "CharPositionInLine" : 3
      },
      "23" : {
        "Text" : "# set fuses\n",
        "Line" : 244,
        "CharPositionInLine" : 3
      },
      "24" : {
        "Text" : "# get oscillator calibration\n",
        "Line" : 253,
        "CharPositionInLine" : 3
      },
      "25" : {
        "Text" : "# set oscillator calibration\n",
        "Line" : 261,
        "CharPositionInLine" : 3
      },
      "26" : {
        "Text" : "# disassemble\n",
        "Line" : 269,
        "CharPositionInLine" : 3
      },
      "27" : {
        "Text" : "##########################################################################\n\n# add_avr_library\n\n# - IN_VAR: LIBRARY_NAME\n\n#\n\n# Calls add_library with an optionally concatenated name\n\n# <LIBRARY_NAME>${MCU_TYPE_FOR_FILENAME}.\n\n# This needs to be used for linking against the library, e.g. calling\n\n# target_link_libraries(...).\n\n##########################################################################\n",
        "Line" : 278,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "##########################################################################\n\n# avr_target_link_libraries\n\n# - IN_VAR: EXECUTABLE_TARGET\n\n# - ARGN  : targets and files to link to\n\n#\n\n# Calls target_link_libraries with AVR target names (concatenation,\n\n# extensions and so on.\n\n##########################################################################\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 29
    },
    "avr/atmega16a/shiftreg/hc165/bitbang/Makefile" : {
      "ObjectId" : "0dc691446a857a54ca87688c45f4e3b9b7714f64",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/shiftreg/hc165/spi/Makefile" : {
      "ObjectId" : "af40f39ed908b24ea260a144f32dfef09f7e30a9",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/shiftreg/hc595/bitbang/Makefile" : {
      "ObjectId" : "0dc691446a857a54ca87688c45f4e3b9b7714f64",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/shiftreg/hc595/spi/Makefile" : {
      "ObjectId" : "af40f39ed908b24ea260a144f32dfef09f7e30a9",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/spi/experiment/Makefile" : {
      "ObjectId" : "201e25c1d6b36431a8a423a9de7229a4a53b71f2",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/spi/master/Makefile" : {
      "ObjectId" : "d6440e4446aa4a81f30fd67550598690866b660c",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/spi/slave/Makefile" : {
      "ObjectId" : "d6440e4446aa4a81f30fd67550598690866b660c",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/timers/timer0/beep/Makefile" : {
      "ObjectId" : "c0351a44fa3d0e6cbc94f80462db53cc2c38d9b1",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/timers/timer0/ctc-hardware/Makefile" : {
      "ObjectId" : "5299cc7ebb6e31d9e236db1a680dfcdedb2a5260",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/timers/timer0/normal/basic/Makefile" : {
      "ObjectId" : "000ea72d2002281c1322e41b47c9f8e626319fe6",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/timers/timer0/normal/comp/Makefile" : {
      "ObjectId" : "5299cc7ebb6e31d9e236db1a680dfcdedb2a5260",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/timers/timer0/normal/overflow/Makefile" : {
      "ObjectId" : "44ad52239560ff9f2e17a16df8904558b7b25dcd",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/timers/timer0/normal/pwm0/Makefile" : {
      "ObjectId" : "7145e74d65849447145e616434c455aa119a1ee9",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/timers/timer0/normal/timer/Makefile" : {
      "ObjectId" : "8b6d48b28ccef80e504613af8c9b94ff5d975930",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/timers/timer0/pwm0/Makefile" : {
      "ObjectId" : "7145e74d65849447145e616434c455aa119a1ee9",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/timers/timer1/normal/basic/Makefile" : {
      "ObjectId" : "000ea72d2002281c1322e41b47c9f8e626319fe6",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/timers/timer1/normal/compA/Makefile" : {
      "ObjectId" : "5299cc7ebb6e31d9e236db1a680dfcdedb2a5260",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/timers/timer1/normal/compB/Makefile" : {
      "ObjectId" : "5299cc7ebb6e31d9e236db1a680dfcdedb2a5260",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/timers/timer1/normal/overflow/Makefile" : {
      "ObjectId" : "44ad52239560ff9f2e17a16df8904558b7b25dcd",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/timers/timer2/ctc-hardware/Makefile" : {
      "ObjectId" : "5299cc7ebb6e31d9e236db1a680dfcdedb2a5260",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/timers/timer2/normal/basic/Makefile" : {
      "ObjectId" : "000ea72d2002281c1322e41b47c9f8e626319fe6",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/timers/timer2/normal/comp/Makefile" : {
      "ObjectId" : "5299cc7ebb6e31d9e236db1a680dfcdedb2a5260",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/timers/timer2/normal/overflow/Makefile" : {
      "ObjectId" : "44ad52239560ff9f2e17a16df8904558b7b25dcd",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/timers/timer2/normal/timer/Makefile" : {
      "ObjectId" : "8b6d48b28ccef80e504613af8c9b94ff5d975930",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/timers/timer2/pwm0/Makefile" : {
      "ObjectId" : "7145e74d65849447145e616434c455aa119a1ee9",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega16a/vusb/CDC/simple/Makefile" : {
      "ObjectId" : "22942aa65c50040cb8d3a46d96f10e12a4541ec6",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 150,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "avr/atmega16a/vusb/bootloader-ami/Makefile" : {
      "ObjectId" : "1b2166f4bfc15722acb80889e8c7ca2fba658cca",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: AVRUSBBoot\n\n# Modified by: Thomas Fischl\n\n# Modified: 2006-06-25\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Original file by: Christian Starkjohann\n\n# Creation Date: 2004-12-29\n\n# Tabsize: 4\n\n# Copyright: (c) 2005 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: Proprietary, free under certain conditions. See Documentation.\n\n# This Revision: $Id: Makefile 147 2006-03-01 17:33:03Z cs $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The two lines above are for \"uisp\" and the AVR910 serial programmer connected\n\n# to a Keyspan USB to serial converter to a Mac running Mac OS X.\n\n# Choose your favorite programmer and interface.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-DDEBUG_LEVEL=2\n\n# NEVER compile the final product with debugging! Any debug output will\n\n# distort timing so that the specs can't be met.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Note that we link usbdrv.o first! This is required for correct alignment of\n\n# driver-internal global variables!\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Fuse low byte:\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n#\n\n# Fuse high byte:\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# only needed for attiny2313\n",
        "Line" : 74,
        "CharPositionInLine" : 15
      },
      "9" : {
        "Text" : "# file targets:\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# do the checksize script as our last action to allow successful compilation\n\n# on Windows with WinAVR where the Unix commands will fail.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "avr/atmega16a/vusb/bootloader-ami/client/Makefile" : {
      "ObjectId" : "3c0d69dd681f8d761eb72199af1e56ff917035fe",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#LIBUSB_CONFIG=libusb-config\n\n#CFLAGS+=-g -Wall -pedantic `$(LIBUSB_CONFIG) --cflags`\n\n#LFLAGS+=`$(LIBUSB_CONFIG) --libs` -lusb\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "avr/atmega16a/vusb/bootloader-check-pagesize/Makefile" : {
      "ObjectId" : "63cfebd73962c9862c0311e7face265e663a6931",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: AVRUSBBoot\n\n# Modified by: Thomas Fischl\n\n# Modified: 2006-06-25\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Original file by: Christian Starkjohann\n\n# Creation Date: 2004-12-29\n\n# Tabsize: 4\n\n# Copyright: (c) 2005 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: Proprietary, free under certain conditions. See Documentation.\n\n# This Revision: $Id: Makefile 147 2006-03-01 17:33:03Z cs $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The two lines above are for \"uisp\" and the AVR910 serial programmer connected\n\n# to a Keyspan USB to serial converter to a Mac running Mac OS X.\n\n# Choose your favorite programmer and interface.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-DDEBUG_LEVEL=2\n\n# NEVER compile the final product with debugging! Any debug output will\n\n# distort timing so that the specs can't be met.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Note that we link usbdrv.o first! This is required for correct alignment of\n\n# driver-internal global variables!\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Fuse low byte:\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n#\n\n# Fuse high byte:\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# only needed for attiny2313\n",
        "Line" : 74,
        "CharPositionInLine" : 15
      },
      "9" : {
        "Text" : "# file targets:\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# do the checksize script as our last action to allow successful compilation\n\n# on Windows with WinAVR where the Unix commands will fail.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "avr/atmega16a/vusb/bootloader/client/Makefile" : {
      "ObjectId" : "3c0d69dd681f8d761eb72199af1e56ff917035fe",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#LIBUSB_CONFIG=libusb-config\n\n#CFLAGS+=-g -Wall -pedantic `$(LIBUSB_CONFIG) --cflags`\n\n#LFLAGS+=`$(LIBUSB_CONFIG) --libs` -lusb\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "avr/atmega16a/vusb/bootloader/firmware/Makefile" : {
      "ObjectId" : "e29524c3b6f8583bd5c71a223d6883f35e10a134",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: AVRUSBBoot\n\n# Modified by: Thomas Fischl\n\n# Modified: 2006-06-25\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Original file by: Christian Starkjohann\n\n# Creation Date: 2004-12-29\n\n# Tabsize: 4\n\n# Copyright: (c) 2005 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: Proprietary, free under certain conditions. See Documentation.\n\n# This Revision: $Id: Makefile 147 2006-03-01 17:33:03Z cs $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The two lines above are for \"uisp\" and the AVR910 serial programmer connected\n\n# to a Keyspan USB to serial converter to a Mac running Mac OS X.\n\n# Choose your favorite programmer and interface.\n",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-DDEBUG_LEVEL=2\n\n# NEVER compile the final product with debugging! Any debug output will\n\n# distort timing so that the specs can't be met.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Note that we link usbdrv.o first! This is required for correct alignment of\n\n# driver-internal global variables!\n",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Fuse low byte:\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n#\n\n# Fuse high byte:\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# only needed for attiny2313\n",
        "Line" : 73,
        "CharPositionInLine" : 15
      },
      "9" : {
        "Text" : "# file targets:\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# do the checksize script as our last action to allow successful compilation\n\n# on Windows with WinAVR where the Unix commands will fail.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "avr/atmega16a/vusb/bootloader/test/Makefile" : {
      "ObjectId" : "d11d847a676e1af85816ff69246a59fa0554b0d8",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Hey Emacs, this is a -*- makefile -*-\r\n\n#\r\n\n# WinAVR makefile written by Eric B. Weddington, J�rg Wunsch, et al.\r\n\n# Released to the Public Domain\r\n\n# Please read the make user manual!\r\n\n#\r\n\n# Additional material for this makefile was submitted by:\r\n\n#  Tim Henigan\r\n\n#  Peter Fleury\r\n\n#  Reiner Patommel\r\n\n#  Sander Pool\r\n\n#  Frederik Rouleau\r\n\n#  Markus Pfaff\r\n\n#\r\n\n# On command line:\r\n\n#\r\n\n# make all = Make software.\r\n\n#\r\n\n# make clean = Clean out built project files.\r\n\n#\r\n\n# make coff = Convert ELF to AVR COFF (for use with AVR Studio 3.x or VMLAB).\r\n\n#\r\n\n# make extcoff = Convert ELF to AVR Extended COFF (for use with AVR Studio\r\n\n#                4.07 or greater).\r\n\n#\r\n\n# make program = Download the hex file to the device, using avrdude.  Please\r\n\n#                customize the avrdude settings below first!\r\n\n#\r\n\n# make filename.s = Just compile filename.c into the assembler code only\r\n\n#\r\n\n# To rebuild project do \"make clean\" then \"make all\".\r\n\n#\r\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# mth 2004/09 \r\n\n# Differences from WinAVR 20040720 sample:\r\n\n# - DEPFLAGS according to Eric Weddingtion's fix (avrfreaks/gcc-forum)\r\n\n# - F_OSC Define in CFLAGS and AFLAGS\r\n",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# MCU name\r\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Main Oscillator Frequency\r\n\n# This is only used to define F_OSC in all assembler and c-sources.\r\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Output format. (can be srec, ihex, binary)\r\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Target file name (without extension).\r\n",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# List C source files here. (C dependencies are automatically generated.)\r\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# List Assembler source files here.\r\n\n# Make them always end in a capital .S.  Files ending in a lowercase .s\r\n\n# will not be considered source files but generated files (assembler\r\n\n# output from the compiler), and will be deleted upon \"make clean\"!\r\n\n# Even though the DOS/Win* filesystem matches both .s and .S the same,\r\n\n# it will preserve the spelling of the filenames, and gcc itself does\r\n\n# care about how the name is spelled on its command-line.\r\n",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Optimization level, can be [0, 1, 2, 3, s]. \r\n\n# 0 = turn off optimization. s = optimize for size.\r\n\n# (Note: 3 is not always the best optimization level. See avr-libc FAQ.)\r\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Debugging format.\r\n\n# Native formats for AVR-GCC's -g are stabs [default], or dwarf-2.\r\n\n# AVR (extended) COFF requires stabs, plus an avr-objcopy run.\r\n\n#DEBUG = stabs\r\n\n#DEBUG = dwarf-2\r\n",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# List any extra directories to look for include files here.\r\n\n#     Each directory must be seperated by a space.\r\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# Compiler flag to set the C Standard level.\r\n\n# c89   - \"ANSI\" C\r\n\n# gnu89 - c89 plus GCC extensions\r\n\n# c99   - ISO C99 standard (not yet fully implemented)\r\n\n# gnu99 - c99 plus GCC extensions\r\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Place -D or -U options here\r\n",
        "Line" : 92,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# Place -I options here\r\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# Compiler flags.\r\n\n#  -g*:          generate debugging information\r\n\n#  -O*:          optimization level\r\n\n#  -f...:        tuning, see GCC manual and avr-libc documentation\r\n\n#  -Wall...:     warning level\r\n\n#  -Wa,...:      tell GCC to pass this to the assembler.\r\n\n#    -adhlns...: create assembler listing\r\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "#CFLAGS += -DF_CPU=3686400UL\r\n",
        "Line" : 116,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Assembler flags.\r\n\n#  -Wa,...:   tell GCC to pass this to the assembler.\r\n\n#  -ahlms:    create listing\r\n\n#  -gstabs:   have the assembler create line number information; note that\r\n\n#             for use in COFF files, additional information about filenames\r\n\n#             and function names needs to be present in the assembler source\r\n\n#             files -- see avr-libc docs [FIXME: not yet described there]\r\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "#Additional libraries.\r\n",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Minimalistic printf version\r\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Floating point printf version (requires MATH_LIB = -lm below)\r\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Minimalistic scanf version\r\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# Floating point + %[ scanf version (requires MATH_LIB = -lm below)\r\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# External memory options\r\n",
        "Line" : 150,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# 64 KB of external RAM, starting after internal RAM (ATmega128!),\r\n\n# used for variables (.data/.bss) and heap (malloc()).\r\n\n#EXTMEMOPTS = -Wl,-Tdata=0x801100,--defsym=__heap_end=0x80ffff\r\n",
        "Line" : 152,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# 64 KB of external RAM, starting after internal RAM (ATmega128!),\r\n\n# only used for heap (malloc()).\r\n\n#EXTMEMOPTS = -Wl,--defsym=__heap_start=0x801100,--defsym=__heap_end=0x80ffff\r\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "# Linker flags.\r\n\n#  -Wl,...:     tell GCC to pass this to linker.\r\n\n#    -Map:      create map file\r\n\n#    --cref:    add cross reference to  map file\r\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Programming support using avrdude. Settings and variables.\r\n",
        "Line" : 173,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# Programming hardware: alf avr910 avrisp bascom bsd \r\n\n# dt006 pavr picoweb pony-stk200 sp12 stk200 stk500\r\n\n#\r\n\n# Type: avrdude -c ?\r\n\n# to get a full listing.\r\n\n#\r\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# com1 = serial port. Use lpt1 to connect to parallel port.\r\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# programmer connected to serial device\r\n",
        "Line" : 184,
        "CharPositionInLine" : 31
      },
      "30" : {
        "Text" : "#AVRDUDE_WRITE_EEPROM = -U eeprom:w:$(TARGET).eep\r\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "# Uncomment the following if you want avrdude's erase cycle counter.\r\n\n# Note that this counter needs to be initialized first using -Yn,\r\n\n# see avrdude manual.\r\n\n#AVRDUDE_ERASE_COUNTER = -y\r\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Uncomment the following if you do /not/ wish a verification to be\r\n\n# performed after programming the device.\r\n\n#AVRDUDE_NO_VERIFY = -V\r\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "# Increase verbosity level.  Please use this when submitting bug\r\n\n# reports about avrdude. See <http://savannah.nongnu.org/projects/avrdude> \r\n\n# to submit bug reports.\r\n\n#AVRDUDE_VERBOSE = -v -v\r\n",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "#\r\n\n# Mega8 set to  internal 4mhz\r\n\n# avrdude -p atmega8 -P /dev/ttyUSB0  -c stk500v2 -U lfuse:w:0xe3:m \r\n\n#\r\n",
        "Line" : 209,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# ---------------------------------------------------------------------------\r\n",
        "Line" : 215,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# Define directories, if needed.\r\n",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "# Define programs and commands.\r\n",
        "Line" : 225,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# Define Messages\r\n\n# English\r\n",
        "Line" : 239,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "# Define all object files.\r\n",
        "Line" : 260,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Define all listing files.\r\n",
        "Line" : 263,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Compiler flags to generate dependency files.\r\n\n### GENDEPFLAGS = -Wp,-M,-MP,-MT,$(*F).o,-MF,.dep/$(@F).d\r\n",
        "Line" : 267,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Combine all necessary flags and optional flags.\r\n\n# Add target processor to flags.\r\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Default target.\r\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Eye candy.\r\n\n# AVR Studio 3.x does not check make's exit code but relies on\r\n\n# the following magic strings to be generated by the compile job.\r\n",
        "Line" : 293,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Display size of file.\r\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# Display compiler version information.\r\n",
        "Line" : 319,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Program the device.  \r\n",
        "Line" : 325,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Convert ELF to COFF for use in debugging / simulating in AVR Studio or VMLAB.\r\n",
        "Line" : 337,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Create final output files (.hex, .eep) from ELF output file.\r\n",
        "Line" : 358,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Create extended listing file from ELF output file.\r\n",
        "Line" : 370,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "# Create a symbol table from ELF output file.\r\n",
        "Line" : 376,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Link: create ELF output file from object files.\r\n",
        "Line" : 384,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Compile: create object files from C source files.\r\n",
        "Line" : 393,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Compile: create assembler files from C source files.\r\n",
        "Line" : 400,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Assemble: create object files from assembler source files.\r\n",
        "Line" : 405,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Target: clean project.\r\n",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Include the dependency files.\r\n",
        "Line" : 438,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "# Listing of phony targets.\r\n",
        "Line" : 442,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 59
    },
    "avr/atmega16a/vusb/custom-class-progmem/Makefile" : {
      "ObjectId" : "22942aa65c50040cb8d3a46d96f10e12a4541ec6",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 150,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "avr/atmega16a/vusb/custom-class-read-large-data/Makefile" : {
      "ObjectId" : "22942aa65c50040cb8d3a46d96f10e12a4541ec6",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 150,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "avr/atmega16a/vusb/hid-ctr-alt-del/Makefile" : {
      "ObjectId" : "22942aa65c50040cb8d3a46d96f10e12a4541ec6",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 150,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "avr/atmega16a/vusb/hid-mouse-random/Makefile" : {
      "ObjectId" : "f7051f295014995adbf4ab41284df8f25e8562ce",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 151,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "avr/atmega16a/vusb/hid-mouse-random2/Makefile" : {
      "ObjectId" : "f7051f295014995adbf4ab41284df8f25e8562ce",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 151,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "avr/atmega16a/vusb/led-custom-class/Makefile" : {
      "ObjectId" : "22942aa65c50040cb8d3a46d96f10e12a4541ec6",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 150,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "avr/atmega16a/vusb/template-hid-keyb/Makefile" : {
      "ObjectId" : "22942aa65c50040cb8d3a46d96f10e12a4541ec6",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 150,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "avr/atmega16a/vusb/usbaspbootloader/Makefile" : {
      "ObjectId" : "76e279694e365c3d5a7d6189a2b81943b6c0f817",
      "LastModified" : "2016-12-22T16:29:39Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: AVRUSBBoot\n\n# Modified by: Thomas Fischl\n\n# Modified: 2006-06-25\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Original file by: Christian Starkjohann\n\n# Creation Date: 2004-12-29\n\n# Tabsize: 4\n\n# Copyright: (c) 2005 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: Proprietary, free under certain conditions. See Documentation.\n\n# This Revision: $Id: Makefile 147 2006-03-01 17:33:03Z cs $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The two lines above are for \"uisp\" and the AVR910 serial programmer connected\n\n# to a Keyspan USB to serial converter to a Mac running Mac OS X.\n\n# Choose your favorite programmer and interface.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-DDEBUG_LEVEL=2\n\n# NEVER compile the final product with debugging! Any debug output will\n\n# distort timing so that the specs can't be met.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Note that we link usbdrv.o first! This is required for correct alignment of\n\n# driver-internal global variables!\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Fuse low byte:\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n#\n\n# Fuse high byte:\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# only needed for attiny2313\n",
        "Line" : 74,
        "CharPositionInLine" : 15
      },
      "9" : {
        "Text" : "# file targets:\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# do the checksize script as our last action to allow successful compilation\n\n# on Windows with WinAVR where the Unix commands will fail.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "avr/atmega328p/pwm/timer0/one-output/Makefile" : {
      "ObjectId" : "39c6e650d59cf227498929c6426d69fc2f8d5bfd",
      "LastModified" : "2017-02-19T20:09:50Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega328p/pwm/timer0/two-output/Makefile" : {
      "ObjectId" : "39c6e650d59cf227498929c6426d69fc2f8d5bfd",
      "LastModified" : "2017-02-19T20:09:50Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega328p/pwm/timer1/one-output/Makefile" : {
      "ObjectId" : "39c6e650d59cf227498929c6426d69fc2f8d5bfd",
      "LastModified" : "2017-02-24T18:10:20Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega328p/pwm/timer1/two-output/Makefile" : {
      "ObjectId" : "39c6e650d59cf227498929c6426d69fc2f8d5bfd",
      "LastModified" : "2017-02-24T18:13:25Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega328p/pwm/timer2/one-output/Makefile" : {
      "ObjectId" : "39c6e650d59cf227498929c6426d69fc2f8d5bfd",
      "LastModified" : "2017-02-24T18:37:15Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega328p/pwm/timer2/two-output/Makefile" : {
      "ObjectId" : "39c6e650d59cf227498929c6426d69fc2f8d5bfd",
      "LastModified" : "2017-02-24T18:37:15Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega328p/serial/Makefile" : {
      "ObjectId" : "021fc2a9efac4bc1ad0cab3fc4864667e06cb6e3",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 39,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 105,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 113,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## An alias\n",
        "Line" : 134,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 147,
        "CharPositionInLine" : 34
      },
      "23" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 151,
        "CharPositionInLine" : 33
      },
      "24" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 156,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 167,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Generic \n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 191,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 32
    },
    "avr/atmega328p/vusb/led-custom-class-20Mhz/Makefile" : {
      "ObjectId" : "54f4a37f30647e80fffb6929beb37a9b3742b000",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 150,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "avr/atmega8/i2c/hw/Makefile" : {
      "ObjectId" : "ce1e98eb388bdad777584747896d795bca357a6c",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## An alias\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 149,
        "CharPositionInLine" : 34
      },
      "24" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 153,
        "CharPositionInLine" : 33
      },
      "25" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Generic \n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "avr/atmega8/vusb/led-custom-class-20Mhz/Makefile" : {
      "ObjectId" : "8a334e0defcf709c6c394303e0f6d8e8dc4be3ac",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 150,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "avr/atmega8/vusb/led-custom-class/Makefile" : {
      "ObjectId" : "e3e029f845346fccb2f968985ebf5532543aaa1f",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 150,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "avr/atmega8/vusb/spi-test/Makefile" : {
      "ObjectId" : "e3e029f845346fccb2f968985ebf5532543aaa1f",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 150,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "avr/atmega8/vusb/usbaspbootloader/Makefile" : {
      "ObjectId" : "b7168ed96b6286fe511655c4e5bd1c5923868be1",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: AVRUSBBoot\n\n# Modified by: Thomas Fischl\n\n# Modified: 2006-06-25\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Original file by: Christian Starkjohann\n\n# Creation Date: 2004-12-29\n\n# Tabsize: 4\n\n# Copyright: (c) 2005 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: Proprietary, free under certain conditions. See Documentation.\n\n# This Revision: $Id: Makefile 147 2006-03-01 17:33:03Z cs $\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# The two lines above are for \"uisp\" and the AVR910 serial programmer connected\n\n# to a Keyspan USB to serial converter to a Mac running Mac OS X.\n\n# Choose your favorite programmer and interface.\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "#-DDEBUG_LEVEL=2\n\n# NEVER compile the final product with debugging! Any debug output will\n\n# distort timing so that the specs can't be met.\n",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Note that we link usbdrv.o first! This is required for correct alignment of\n\n# driver-internal global variables!\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 43,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Fuse low byte:\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n#\n\n# Fuse high byte:\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# only needed for attiny2313\n",
        "Line" : 74,
        "CharPositionInLine" : 15
      },
      "9" : {
        "Text" : "# file targets:\n",
        "Line" : 81,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# do the checksize script as our last action to allow successful compilation\n\n# on Windows with WinAVR where the Unix commands will fail.\n",
        "Line" : 89,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 11
    },
    "avr/attiny13a/asm/blink/Makefile" : {
      "ObjectId" : "4db208c8c1b467f243754b38940ad8e6915446b0",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "######################################################################\n\n#  Assembler bassert macro for ATtinyX\n\n#  Wed Oct 22 21:39:02 2014\tWarren W. Gay VE3WWG\n\n#  LICENSE: GPL\n\n######################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "avr/attiny13a/asm/blinkasm/Makefile" : {
      "ObjectId" : "4db208c8c1b467f243754b38940ad8e6915446b0",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "######################################################################\n\n#  Assembler bassert macro for ATtinyX\n\n#  Wed Oct 22 21:39:02 2014\tWarren W. Gay VE3WWG\n\n#  LICENSE: GPL\n\n######################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "avr/attiny13a/asm/gccasm/Makefile" : {
      "ObjectId" : "bae19ded1827ef24fb1b3c04a1ac5e1697ad50c3",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "#$(SOURCES:.S=.o)\n",
        "Line" : 58,
        "CharPositionInLine" : 19
      },
      "11" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## An alias\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 149,
        "CharPositionInLine" : 34
      },
      "25" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 153,
        "CharPositionInLine" : 33
      },
      "26" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Generic \n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 34
    },
    "avr/attiny13a/asm/mixasmc/Makefile" : {
      "ObjectId" : "cc4445b649f15a02284a21c210a3485dc45c89a1",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## An alias\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 149,
        "CharPositionInLine" : 34
      },
      "24" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 153,
        "CharPositionInLine" : 33
      },
      "25" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Generic \n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "avr/attiny13a/bicycleindicator/Makefile" : {
      "ObjectId" : "e7b91b455ab0e166ae91442e067d1bdc8e615ab6",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## An alias\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 149,
        "CharPositionInLine" : 34
      },
      "24" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 153,
        "CharPositionInLine" : 33
      },
      "25" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Generic \n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "avr/attiny13a/blink/Makefile" : {
      "ObjectId" : "e7b91b455ab0e166ae91442e067d1bdc8e615ab6",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## An alias\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 149,
        "CharPositionInLine" : 34
      },
      "24" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 153,
        "CharPositionInLine" : 33
      },
      "25" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Generic \n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "avr/attiny13a/i2c-master/Makefile" : {
      "ObjectId" : "e7b91b455ab0e166ae91442e067d1bdc8e615ab6",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## An alias\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 149,
        "CharPositionInLine" : 34
      },
      "24" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 153,
        "CharPositionInLine" : 33
      },
      "25" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Generic \n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "avr/attiny13a/i2cIN2A19/Makefile" : {
      "ObjectId" : "e7b91b455ab0e166ae91442e067d1bdc8e615ab6",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## An alias\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 149,
        "CharPositionInLine" : 34
      },
      "24" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 153,
        "CharPositionInLine" : 33
      },
      "25" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Generic \n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "avr/attiny13a/int0/Makefile" : {
      "ObjectId" : "e7b91b455ab0e166ae91442e067d1bdc8e615ab6",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## An alias\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 149,
        "CharPositionInLine" : 34
      },
      "24" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 153,
        "CharPositionInLine" : 33
      },
      "25" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Generic \n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "avr/attiny13a/pcint0/Makefile" : {
      "ObjectId" : "e7b91b455ab0e166ae91442e067d1bdc8e615ab6",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## An alias\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 149,
        "CharPositionInLine" : 34
      },
      "24" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 153,
        "CharPositionInLine" : 33
      },
      "25" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Generic \n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "avr/attiny13a/pcint1/Makefile" : {
      "ObjectId" : "e7b91b455ab0e166ae91442e067d1bdc8e615ab6",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## An alias\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 149,
        "CharPositionInLine" : 34
      },
      "24" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 153,
        "CharPositionInLine" : 33
      },
      "25" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Generic \n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "avr/attiny13a/timer0/compA/Makefile" : {
      "ObjectId" : "e7b91b455ab0e166ae91442e067d1bdc8e615ab6",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## An alias\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 149,
        "CharPositionInLine" : 34
      },
      "24" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 153,
        "CharPositionInLine" : 33
      },
      "25" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Generic \n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "avr/attiny13a/timer0/overflow/Makefile" : {
      "ObjectId" : "e7b91b455ab0e166ae91442e067d1bdc8e615ab6",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## An alias\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 149,
        "CharPositionInLine" : 34
      },
      "24" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 153,
        "CharPositionInLine" : 33
      },
      "25" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Generic \n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "avr/attiny13a/watchdog/Makefile" : {
      "ObjectId" : "e7b91b455ab0e166ae91442e067d1bdc8e615ab6",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## An alias\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 149,
        "CharPositionInLine" : 34
      },
      "24" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 153,
        "CharPositionInLine" : 33
      },
      "25" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Generic \n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "avr/attiny85/blink/Makefile" : {
      "ObjectId" : "71f0168c505bc8b0d3e419a1c73f36fd559f56d3",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## An alias\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 149,
        "CharPositionInLine" : 34
      },
      "24" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 153,
        "CharPositionInLine" : 33
      },
      "25" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Generic \n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "avr/attiny85/hc165n/Makefile" : {
      "ObjectId" : "68f4dc57d3bd7035f1b68288659977c1104ee370",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## An alias\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 149,
        "CharPositionInLine" : 34
      },
      "24" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 153,
        "CharPositionInLine" : 33
      },
      "25" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Generic \n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "avr/attiny85/overclocking/blink/Makefile" : {
      "ObjectId" : "3cdf8d9f83d047a2f52c17278fb1336dc2dc6028",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#MCU   = atmega168p\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 66,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 69,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 107,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "## An alias\n",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 149,
        "CharPositionInLine" : 34
      },
      "24" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 153,
        "CharPositionInLine" : 33
      },
      "25" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 165,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Generic \n",
        "Line" : 174,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 183,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 198,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 33
    },
    "avr/attiny85/timers/timer0/basic/Makefile" : {
      "ObjectId" : "457bd83581b42e8312a183fbc4ed9bc1d7b6dbfe",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## An alias\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 146,
        "CharPositionInLine" : 34
      },
      "22" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 150,
        "CharPositionInLine" : 33
      },
      "23" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Generic \n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "avr/attiny85/timers/timer1/basic/Makefile" : {
      "ObjectId" : "457bd83581b42e8312a183fbc4ed9bc1d7b6dbfe",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Project-specific Details                ##########\n\n##########    Check these every time you start a new project    ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "## Also try BAUD = 19200 or 38400 if you're feeling lucky.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "## A directory for common include files and the simple USART library.\n\n## If you move either the current folder or the Library folder, you'll \n\n##  need to change this path to match.\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                 Programmer Defaults                  ##########\n\n##########          Set up once, then forget about it           ##########\n\n##########        (Can override.  See bottom of file.)          ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# extra arguments to avrdude: baud rate, chip type, -F flag, etc.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                  Program Locations                   ##########\n\n##########     Won't need to change if they're in your PATH     ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########                   Makefile Magic!                    ##########\n\n##########         Summary:                                     ##########\n\n##########             We want a .hex file                      ##########\n\n##########        Compile source files into .elf                ##########\n\n##########        Convert .elf file into .hex                   ##########\n\n##########        You shouldn't need to edit below.             ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "## The name of your project (without the .c)\n\n# TARGET = blinkLED\n\n## Or name it automatically after the enclosing directory\n\n#TARGET = $(lastword $(subst /, ,$(CURDIR)))\n",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Object files: will find all .c/.h files in current directory\n\n#  and in LIBDIR.  If you have any other (sub-)directories with code,\n\n#  you can add them in to SOURCES below in the wildcard statement.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "## Compilation options, type man avr-gcc if you're curious.\n",
        "Line" : 60,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "## Use short (8-bit) data types \n",
        "Line" : 63,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "## Splits up object files per function\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "## Optional, but often ends up with smaller code\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "## Relax shrinks code even more, but makes disassembly messy\n\n## LDFLAGS += -Wl,--relax\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_flt -lm  ## for floating-point printf\n\n## LDFLAGS += -Wl,-u,vfprintf -lprintf_min      ## for smaller printf\n",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "## Explicit pattern rules:\n\n##  To make .o files from .c files \n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "## These targets don't have files named after them\n",
        "Line" : 93,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# Optionally create listing file from .elf\n\n# This creates approximate assembly-language equivalent of your code.\n\n# Useful for debugging time-sensitive bits, \n\n# or making sure the compiler does what you want.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Optionally show how big the resulting program is \n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########              Programmer-specific details             ##########\n\n##########           Flashing code to AVR using avrdude         ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 125,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## An alias\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "## If you've got multiple programmers that you use, \n\n## you can define them here so that it's easy to switch.\n\n## To invoke, use something like `make flash_arduinoISP`\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# USBTiny works with no further arguments\n",
        "Line" : 146,
        "CharPositionInLine" : 34
      },
      "22" : {
        "Text" : "# USBasp works with no further arguments\n",
        "Line" : 150,
        "CharPositionInLine" : 33
      },
      "23" : {
        "Text" : "## (for windows) flash_arduinoISP: PROGRAMMER_ARGS = -b 19200 -P com5\n",
        "Line" : 155,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "##########------------------------------------------------------##########\n\n##########       Fuse settings and suitable defaults            ##########\n\n##########------------------------------------------------------##########\n",
        "Line" : 162,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "## Mega 48, 88, 168, 328 default values\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "## Generic \n",
        "Line" : 171,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "## Called with no extra definitions, sets to defaults\n",
        "Line" : 180,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "## Set the fuse byte for full-speed mode\n\n## Note: can also be set in firmware for modern chips\n",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "## Set the EESAVE fuse byte to preserve EEPROM across flashes\n",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "## Clear the EESAVE fuse byte\n",
        "Line" : 195,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 31
    },
    "avr/attiny85/vusb/3-keys-keyboard/Makefile" : {
      "ObjectId" : "197a5c0d235ea48954bd34c633376a92cfe8dad0",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 151,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "avr/attiny85/vusb/custom-class/cdc/Makefile" : {
      "ObjectId" : "197a5c0d235ea48954bd34c633376a92cfe8dad0",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 151,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "avr/attiny85/vusb/custom-class2/Makefile" : {
      "ObjectId" : "197a5c0d235ea48954bd34c633376a92cfe8dad0",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 151,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "avr/attiny85/vusb/hid-mouse-move/Makefile" : {
      "ObjectId" : "197a5c0d235ea48954bd34c633376a92cfe8dad0",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 151,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "avr/attiny85/vusb/hid-mouse-random/Makefile" : {
      "ObjectId" : "197a5c0d235ea48954bd34c633376a92cfe8dad0",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 151,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "avr/attiny85/vusb/hid-mouse/Makefile" : {
      "ObjectId" : "197a5c0d235ea48954bd34c633376a92cfe8dad0",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 151,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "avr/attiny85/vusb/led-vusb-tiny85/Makefile" : {
      "ObjectId" : "197a5c0d235ea48954bd34c633376a92cfe8dad0",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 151,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "avr/attiny85/vusb/template-custom-class/Makefile" : {
      "ObjectId" : "197a5c0d235ea48954bd34c633376a92cfe8dad0",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 151,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "avr/attiny85/vusb/template-hid-joystick/Makefile" : {
      "ObjectId" : "197a5c0d235ea48954bd34c633376a92cfe8dad0",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 151,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "avr/attiny85/vusb/template-hid-keyb/Makefile" : {
      "ObjectId" : "197a5c0d235ea48954bd34c633376a92cfe8dad0",
      "LastModified" : "2018-06-25T09:24:28Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "# Name: Makefile\n\n# Project: hid-mouse example\n\n# Author: Christian Starkjohann\n\n# Creation Date: 2008-04-07\n\n# Tabsize: 4\n\n# Copyright: (c) 2008 by OBJECTIVE DEVELOPMENT Software GmbH\n\n# License: GNU GPL v2 (see License.txt), GNU GPL v3 or proprietary (CommercialLicense.txt)\n\n# This Revision: $Id: Makefile 692 2008-11-07 15:07:40Z cs $\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# in Hz\n",
        "Line" : 11,
        "CharPositionInLine" : 22
      },
      "2" : {
        "Text" : "##############################################################################\n\n# Fuse values for particular devices\n\n##############################################################################\n\n# If your device is not listed here, go to\n\n# http://palmavr.sourceforge.net/cgi-bin/fc.cgi\n\n# and choose options for external crystal clock and no clock divider\n\n#\n\n################################## ATMega8 ##################################\n\n# ATMega8 FUSE_L (Fuse low byte):\n\n# 0x9f = 1 0 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ BODEN (BrownOut Detector enabled)\n\n#        +-------------------- BODLEVEL (2.7V)\n\n# ATMega8 FUSE_H (Fuse high byte):\n\n# 0xc9 = 1 1 0 0   1 0 0 1 <-- BOOTRST (boot reset vector at 0x0000)\n\n#        ^ ^ ^ ^   ^ ^ ^------ BOOTSZ0\n\n#        | | | |   | +-------- BOOTSZ1\n\n#        | | | |   + --------- EESAVE (don't preserve EEPROM over chip erase)\n\n#        | | | +-------------- CKOPT (full output swing)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ WDTON (WDT not always on)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATMega48/88/168 ##############################\n\n# ATMega*8 FUSE_L (Fuse low byte):\n\n# 0xdf = 1 1 0 1   1 1 1 1\n\n#        ^ ^ \\ /   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (external >8M crystal)\n\n#        | |  +--------------- SUT 1..0 (crystal osc, BOD enabled)\n\n#        | +------------------ CKOUT (if 0: Clock output enabled)\n\n#        +-------------------- CKDIV8 (if 0: divide by 8)\n\n# ATMega*8 FUSE_H (Fuse high byte):\n\n# 0xde = 1 1 0 1   1 1 1 0\n\n#        ^ ^ ^ ^   ^ \\-+-/\n\n#        | | | |   |   +------ BODLEVEL 0..2 (110 = 1.8 V)\n\n#        | | | |   + --------- EESAVE (preserve EEPROM over chip erase)\n\n#        | | | +-------------- WDTON (if 0: watchdog always on)\n\n#        | | +---------------- SPIEN (allow serial programming)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (reset pin is enabled)\n\n#\n\n############################## ATTiny25/45/85 ###############################\n\n# ATMega*5 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATMega*5 FUSE_H (Fuse high byte):\n\n# 0xdd = 1 1 0 1   1 1 0 1\n\n#        ^ ^ ^ ^   ^ \\-+-/ \n\n#        | | | |   |   +------ BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | |   +---------- EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ DWEN (debug wire enable)\n\n#        +-------------------- RSTDISBL (disable external reset -> enabled)\n\n#\n\n################################ ATTiny2313 #################################\n\n# ATTiny2313 FUSE_L (Fuse low byte):\n\n# 0xef = 1 1 1 0   1 1 1 1\n\n#        ^ ^ \\+/   \\--+--/\n\n#        | |  |       +------- CKSEL 3..0 (clock selection -> crystal @ 12 MHz)\n\n#        | |  +--------------- SUT 1..0 (BOD enabled, fast rising power)\n\n#        | +------------------ CKOUT (clock output on CKOUT pin -> disabled)\n\n#        +-------------------- CKDIV8 (divide clock by 8 -> don't divide)\n\n# ATTiny2313 FUSE_H (Fuse high byte):\n\n# 0xdb = 1 1 0 1   1 0 1 1\n\n#        ^ ^ ^ ^   \\-+-/ ^\n\n#        | | | |     |   +---- RSTDISBL (disable external reset -> enabled)\n\n#        | | | |     +-------- BODLEVEL 2..0 (brownout trigger level -> 2.7V)\n\n#        | | | +-------------- WDTON (watchdog timer always on -> disable)\n\n#        | | +---------------- SPIEN (enable serial programming -> enabled)\n\n#        | +------------------ EESAVE (preserve EEPROM on Chip Erase -> not preserved)\n\n#        +-------------------- DWEN (debug wire enable)\n",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# symbolic targets:\n",
        "Line" : 101,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# rule for programming fuse bits:\n",
        "Line" : 114,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# rule for uploading firmware:\n",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# rule for deleting dependent files (those which can be built by Make):\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Generic rule for compiling C files:\n",
        "Line" : 128,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Generic rule for assembling Assembler source files:\n",
        "Line" : 132,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# \"-x assembler-with-cpp\" should not be necessary since this is the default\n\n# file type for the .S (with capital S) extension. However, upper case\n\n# characters are not always preserved on Windows. To ensure WinAVR\n\n# compatibility define the file type manually.\n",
        "Line" : 135,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# Generic rule for compiling C to assembler, used for debugging only.\n",
        "Line" : 140,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# file targets:\n",
        "Line" : 144,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# Since we don't want to ship the driver multipe times, we copy it into this project:\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# usbdrv dependency only needed because we copy it\n",
        "Line" : 151,
        "CharPositionInLine" : 28
      },
      "14" : {
        "Text" : "# debugging targets:\n",
        "Line" : 159,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 15
    },
    "esp/esp32/arduino-espidf/arduino-espidf-libtemplate/CMakeLists.txt" : {
      "ObjectId" : "eb3ddbed1bcd4a45950e996e3e2094fee385540f",
      "LastModified" : "2018-11-07T15:53:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The following lines of boilerplate have to be in your project's\n\n# CMakeLists in this exact order for cmake to work correctly\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "esp/esp32/arduino-espidf/arduino-espidf-libtemplate/Makefile" : {
      "ObjectId" : "9f2c32783bff6336da6ebe35d26cef24d914f5f7",
      "LastModified" : "2018-11-07T15:53:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# This is a project Makefile. It is assumed the directory this Makefile resides in is a\n\n# project subdirectory.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "esp/esp32/arduino-espidf/arduino-espidf-template/CMakeLists.txt" : {
      "ObjectId" : "eb3ddbed1bcd4a45950e996e3e2094fee385540f",
      "LastModified" : "2018-11-07T15:53:23Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The following lines of boilerplate have to be in your project's\n\n# CMakeLists in this exact order for cmake to work correctly\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "esp/esp32/arduino-espidf/arduino-espidf-template/Makefile" : {
      "ObjectId" : "9f2c32783bff6336da6ebe35d26cef24d914f5f7",
      "LastModified" : "2018-11-07T15:53:23Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# This is a project Makefile. It is assumed the directory this Makefile resides in is a\n\n# project subdirectory.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "esp/esp32/arduino-espidf/ov7670-camera/CMakeLists.txt" : {
      "ObjectId" : "eb3ddbed1bcd4a45950e996e3e2094fee385540f",
      "LastModified" : "2018-11-10T14:39:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The following lines of boilerplate have to be in your project's\n\n# CMakeLists in this exact order for cmake to work correctly\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "esp/esp32/arduino-espidf/ov7670-camera/Makefile" : {
      "ObjectId" : "9f2c32783bff6336da6ebe35d26cef24d914f5f7",
      "LastModified" : "2018-11-10T14:39:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# This is a project Makefile. It is assumed the directory this Makefile resides in is a\n\n# project subdirectory.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "esp/esp32/esp-idf/01_serial/Makefile" : {
      "ObjectId" : "0d1f5e687dfe3c7aafa7de551c620eb9f58ecf36",
      "LastModified" : "2018-11-10T14:39:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# This is a project Makefile. It is assumed the directory this Makefile resides in is a\n\n# project subdirectory.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "esp/esp32/esp-idf/02_blink/Makefile" : {
      "ObjectId" : "6f8b9fabe84197243d9f0aafc733db5bb3dcb3be",
      "LastModified" : "2018-11-10T14:39:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# This is a project Makefile. It is assumed the directory this Makefile resides in is a\n\n# project subdirectory.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "esp/esp32/esp-idf/2ledsblink/Makefile" : {
      "ObjectId" : "6f8b9fabe84197243d9f0aafc733db5bb3dcb3be",
      "LastModified" : "2018-11-10T14:39:12Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# This is a project Makefile. It is assumed the directory this Makefile resides in is a\n\n# project subdirectory.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "esp/esp32/esp-idf/esp-idf-template/CMakeLists.txt" : {
      "ObjectId" : "bda697784afd1138526fd6cdbdbbd4fcb89f0695",
      "LastModified" : "2018-11-18T14:28:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The following lines of boilerplate have to be in your project's\n\n# CMakeLists in this exact order for cmake to work correctly\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "esp/esp32/esp-idf/esp-idf-template/Makefile" : {
      "ObjectId" : "9f2c32783bff6336da6ebe35d26cef24d914f5f7",
      "LastModified" : "2018-11-18T14:28:52Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# This is a project Makefile. It is assumed the directory this Makefile resides in is a\n\n# project subdirectory.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "esp/esp32/esp-idf/esp-idf-template/main/CMakeLists.txt" : {
      "ObjectId" : "e6c20ac06e7cf9caa53bf50945146d53dae60a1c",
      "LastModified" : "2018-11-18T14:28:52Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Edit following two lines to set component requirements (see docs)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "esp/esp32/esp-idf/helloworld/CMakeLists.txt" : {
      "ObjectId" : "bda697784afd1138526fd6cdbdbbd4fcb89f0695",
      "LastModified" : "2018-11-18T16:56:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# The following lines of boilerplate have to be in your project's\n\n# CMakeLists in this exact order for cmake to work correctly\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "esp/esp32/esp-idf/helloworld/Makefile" : {
      "ObjectId" : "9f2c32783bff6336da6ebe35d26cef24d914f5f7",
      "LastModified" : "2018-11-18T16:56:16Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "#\n\n# This is a project Makefile. It is assumed the directory this Makefile resides in is a\n\n# project subdirectory.\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "esp/esp32/esp-idf/helloworld/main/CMakeLists.txt" : {
      "ObjectId" : "bd7253aa755fb9013dda43c2215fa4835a9c1d77",
      "LastModified" : "2018-11-18T16:56:16Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Edit following two lines to set component requirements (see docs)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "stm32/f1/blink/Makefile" : {
      "ObjectId" : "68cce59138a19d30ecd4c5cb525785ca9d2e9610",
      "LastModified" : "2018-11-18T16:56:16Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##\n\n## This file is part of the libopencm3 project.\n\n##\n\n## Copyright (C) 2009 Uwe Hermann <uwe@hermann-uwe.de>\n\n##\n\n## This library is free software: you can redistribute it and/or modify\n\n## it under the terms of the GNU Lesser General Public License as published by\n\n## the Free Software Foundation, either version 3 of the License, or\n\n## (at your option) any later version.\n\n##\n\n## This library is distributed in the hope that it will be useful,\n\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n## GNU Lesser General Public License for more details.\n\n##\n\n## You should have received a copy of the GNU Lesser General Public License\n\n## along with this library.  If not, see <http://www.gnu.org/licenses/>.\n\n##\n\n## Copied from:\n\n## https://github.com/libopencm3/libopencm3-examples/blob/master/examples/stm32/f1/other/timer_interrupt/Makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include ../../Makefile.include\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "stm32/f1/blink2/Makefile" : {
      "ObjectId" : "866d4acfd3fd94914a1392179a816bd133b511a7",
      "LastModified" : "2018-11-18T16:56:16Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##\n\n## This file is part of the libopencm3 project.\n\n##\n\n## Copyright (C) 2009 Uwe Hermann <uwe@hermann-uwe.de>\n\n##\n\n## This library is free software: you can redistribute it and/or modify\n\n## it under the terms of the GNU Lesser General Public License as published by\n\n## the Free Software Foundation, either version 3 of the License, or\n\n## (at your option) any later version.\n\n##\n\n## This library is distributed in the hope that it will be useful,\n\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n## GNU Lesser General Public License for more details.\n\n##\n\n## You should have received a copy of the GNU Lesser General Public License\n\n## along with this library.  If not, see <http://www.gnu.org/licenses/>.\n\n##\n\n## Copied from:\n\n## https://github.com/libopencm3/libopencm3-examples/blob/master/examples/stm32/f1/other/timer_interrupt/Makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include ../../Makefile.include\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "stm32/f1/echo/Makefile" : {
      "ObjectId" : "4df7f7c6357c5ecab487e990e52296dc19d7499c",
      "LastModified" : "2018-11-18T16:56:16Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##\n\n## This file is part of the libopencm3 project.\n\n##\n\n## Copyright (C) 2009 Uwe Hermann <uwe@hermann-uwe.de>\n\n##\n\n## This library is free software: you can redistribute it and/or modify\n\n## it under the terms of the GNU Lesser General Public License as published by\n\n## the Free Software Foundation, either version 3 of the License, or\n\n## (at your option) any later version.\n\n##\n\n## This library is distributed in the hope that it will be useful,\n\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n## GNU Lesser General Public License for more details.\n\n##\n\n## You should have received a copy of the GNU Lesser General Public License\n\n## along with this library.  If not, see <http://www.gnu.org/licenses/>.\n\n##\n\n## Copied from:\n\n## https://github.com/libopencm3/libopencm3-examples/blob/master/examples/stm32/f1/other/timer_interrupt/Makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include ../../Makefile.include\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "stm32/f1/skeleton/Makefile" : {
      "ObjectId" : "866d4acfd3fd94914a1392179a816bd133b511a7",
      "LastModified" : "2018-11-18T16:56:16Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##\n\n## This file is part of the libopencm3 project.\n\n##\n\n## Copyright (C) 2009 Uwe Hermann <uwe@hermann-uwe.de>\n\n##\n\n## This library is free software: you can redistribute it and/or modify\n\n## it under the terms of the GNU Lesser General Public License as published by\n\n## the Free Software Foundation, either version 3 of the License, or\n\n## (at your option) any later version.\n\n##\n\n## This library is distributed in the hope that it will be useful,\n\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n## GNU Lesser General Public License for more details.\n\n##\n\n## You should have received a copy of the GNU Lesser General Public License\n\n## along with this library.  If not, see <http://www.gnu.org/licenses/>.\n\n##\n\n## Copied from:\n\n## https://github.com/libopencm3/libopencm3-examples/blob/master/examples/stm32/f1/other/timer_interrupt/Makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include ../../Makefile.include\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "stm32/f1/switch_read/Makefile" : {
      "ObjectId" : "866d4acfd3fd94914a1392179a816bd133b511a7",
      "LastModified" : "2018-11-18T16:56:16Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##\n\n## This file is part of the libopencm3 project.\n\n##\n\n## Copyright (C) 2009 Uwe Hermann <uwe@hermann-uwe.de>\n\n##\n\n## This library is free software: you can redistribute it and/or modify\n\n## it under the terms of the GNU Lesser General Public License as published by\n\n## the Free Software Foundation, either version 3 of the License, or\n\n## (at your option) any later version.\n\n##\n\n## This library is distributed in the hope that it will be useful,\n\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n## GNU Lesser General Public License for more details.\n\n##\n\n## You should have received a copy of the GNU Lesser General Public License\n\n## along with this library.  If not, see <http://www.gnu.org/licenses/>.\n\n##\n\n## Copied from:\n\n## https://github.com/libopencm3/libopencm3-examples/blob/master/examples/stm32/f1/other/timer_interrupt/Makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include ../../Makefile.include\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "stm32/f1/timer/Makefile" : {
      "ObjectId" : "866d4acfd3fd94914a1392179a816bd133b511a7",
      "LastModified" : "2018-11-18T16:56:16Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##\n\n## This file is part of the libopencm3 project.\n\n##\n\n## Copyright (C) 2009 Uwe Hermann <uwe@hermann-uwe.de>\n\n##\n\n## This library is free software: you can redistribute it and/or modify\n\n## it under the terms of the GNU Lesser General Public License as published by\n\n## the Free Software Foundation, either version 3 of the License, or\n\n## (at your option) any later version.\n\n##\n\n## This library is distributed in the hope that it will be useful,\n\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n## GNU Lesser General Public License for more details.\n\n##\n\n## You should have received a copy of the GNU Lesser General Public License\n\n## along with this library.  If not, see <http://www.gnu.org/licenses/>.\n\n##\n\n## Copied from:\n\n## https://github.com/libopencm3/libopencm3-examples/blob/master/examples/stm32/f1/other/timer_interrupt/Makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include ../../Makefile.include\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "stm32/f1/uart-tx/Makefile" : {
      "ObjectId" : "866d4acfd3fd94914a1392179a816bd133b511a7",
      "LastModified" : "2018-11-18T16:56:16Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##\n\n## This file is part of the libopencm3 project.\n\n##\n\n## Copyright (C) 2009 Uwe Hermann <uwe@hermann-uwe.de>\n\n##\n\n## This library is free software: you can redistribute it and/or modify\n\n## it under the terms of the GNU Lesser General Public License as published by\n\n## the Free Software Foundation, either version 3 of the License, or\n\n## (at your option) any later version.\n\n##\n\n## This library is distributed in the hope that it will be useful,\n\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n## GNU Lesser General Public License for more details.\n\n##\n\n## You should have received a copy of the GNU Lesser General Public License\n\n## along with this library.  If not, see <http://www.gnu.org/licenses/>.\n\n##\n\n## Copied from:\n\n## https://github.com/libopencm3/libopencm3-examples/blob/master/examples/stm32/f1/other/timer_interrupt/Makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include ../../Makefile.include\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "stm32/f1/usart-printf/Makefile" : {
      "ObjectId" : "866d4acfd3fd94914a1392179a816bd133b511a7",
      "LastModified" : "2018-11-18T16:56:16Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##\n\n## This file is part of the libopencm3 project.\n\n##\n\n## Copyright (C) 2009 Uwe Hermann <uwe@hermann-uwe.de>\n\n##\n\n## This library is free software: you can redistribute it and/or modify\n\n## it under the terms of the GNU Lesser General Public License as published by\n\n## the Free Software Foundation, either version 3 of the License, or\n\n## (at your option) any later version.\n\n##\n\n## This library is distributed in the hope that it will be useful,\n\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n## GNU Lesser General Public License for more details.\n\n##\n\n## You should have received a copy of the GNU Lesser General Public License\n\n## along with this library.  If not, see <http://www.gnu.org/licenses/>.\n\n##\n\n## Copied from:\n\n## https://github.com/libopencm3/libopencm3-examples/blob/master/examples/stm32/f1/other/timer_interrupt/Makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include ../../Makefile.include\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "stm32/f1/usb_hid/Makefile" : {
      "ObjectId" : "866d4acfd3fd94914a1392179a816bd133b511a7",
      "LastModified" : "2018-11-18T16:56:16Z",
      "FileType" : "MAKEFILE",
      "0" : {
        "Text" : "##\n\n## This file is part of the libopencm3 project.\n\n##\n\n## Copyright (C) 2009 Uwe Hermann <uwe@hermann-uwe.de>\n\n##\n\n## This library is free software: you can redistribute it and/or modify\n\n## it under the terms of the GNU Lesser General Public License as published by\n\n## the Free Software Foundation, either version 3 of the License, or\n\n## (at your option) any later version.\n\n##\n\n## This library is distributed in the hope that it will be useful,\n\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n\n## GNU Lesser General Public License for more details.\n\n##\n\n## You should have received a copy of the GNU Lesser General Public License\n\n## along with this library.  If not, see <http://www.gnu.org/licenses/>.\n\n##\n\n## Copied from:\n\n## https://github.com/libopencm3/libopencm3-examples/blob/master/examples/stm32/f1/other/timer_interrupt/Makefile\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# include ../../Makefile.include\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "stm32/f4/systick/Makefile" : {
      "ObjectId" : "78daeeaefcf3a97462728dfc898ba552e856d826",
      "LastModified" : "2018-11-18T16:56:16Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "stm32/f4/systickat168MHz/Makefile" : {
      "ObjectId" : "78daeeaefcf3a97462728dfc898ba552e856d826",
      "LastModified" : "2018-11-18T16:56:16Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    }
  },
  "FileTypes" : {
    "CMAKE" : 36,
    "MAKEFILE" : 140
  },
  "ElapsedTime" : 2693
}