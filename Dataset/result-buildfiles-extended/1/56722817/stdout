{
  "Repository" : "56722817",
  "Revision" : "HEAD",
  "ObjectId" : "ac1e4ef09388376ea6fa7b460b6abe2ab3471624",
  "CommitTime" : "2019-04-18T19:36:53Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "4dbb006293883a9d766310ef0f46343d9a52f29a",
      "LastModified" : "2019-04-18T19:23:12Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#=====- CMakeLists.txt ---------------------------------------------------=====#\n\n#\n\n# This is the top-level CMakeLists.txt file for the LibOFP project.\n\n#\n\n#=====--------------------------------------------------------------------=====#\n\n#\n\n# If the build directory is named `Build+Debug`, cmake will build a debug\n\n# version. Alternatively, you can build a debug version explicitly:\n\n#\n\n#    cmake -DCMAKE_BUILD_TYPE=debug\n\n#\n\n# To build without the JSON-RPC server:\n\n#\n\n#    cmake -DLIBOFP_ENABLE_JSONRPC=false ..\n\n#\n\n# To build without libpcap:\n\n#\n\n#    cmake -DLIBOFP_ENABLE_LIBPCAP=false ..\n\n#\n\n# To build without openssl:\n\n#\n\n#    cmake -DLIBOFP_ENABLE_OPENSSL=false ..\n\n#\n\n# To build without memcheck tests:\n\n#\n\n#    cmake -DLIBOFP_ENABLE_MEMCHECK_TESTS=false ..\n\n#\n\n# To build with code coverage:\n\n#\n\n#    cmake -DLIBOFP_ENABLE_CODE_COVERAGE=true ..\n\n#\n\n# To enable asan/ubsan in release builds (clang-only):\n\n#\n\n#    cmake -DLIBOFP_ENABLE_SANITIZE=true ..\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# N.B. Trusty supports cmake 2.8.12 (unless you use cmake3 pkg).\n",
        "Line" : 37,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Required for boringssl. (See external/boringssl/CMakeLists.txt)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Include file check macros honor CMAKE_REQUIRED_LIBRARIES (cmake 3.12)\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Log version of cmake\n",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Add path for custom modules\n",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Set the version number of the library (use semantic versioning).\n",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Set version numbers for RPC API.\n",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# You can build oftr with or without the JSON-RPC server.\n",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "# You can build oftr without libpcap.\n",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "# You can build oftr without openssl.\n",
        "Line" : 96,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "# You can build with the system provided version of openssl.\n",
        "Line" : 104,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "# You can disable the valgrind memcheck tests.\n",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# You can enable code-coverage collection.\n",
        "Line" : 119,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# You can enable asan/ubsan sanitizers in release builds (clang-only). \n",
        "Line" : 126,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# Require out of source builds.\n",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Settings\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# Specify the set of warnings to enable. The philosophy of this project is to\n\n# compile with every clang warning enabled, then disable a few that don't add\n\n# anything except to clutter up the build logs. Put disabled warnings into\n\n# LIBOFP_WARNINGS_DISABLED.\n",
        "Line" : 146,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# LibOFP is a C++11-only project. Disable warnings about C++98 compatibility.\n",
        "Line" : 153,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# Specify include directories for third party headers. We use -isystem instead\n\n# of -I because we don't want to receive compiler warnings from these headers.\n",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# Specify additional definitions.\n",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "#set(LIBOFP_DEFINES \"${LIBOFP_DEFINES} -D ASIO_ENABLE_HANDLER_TRACKING\")\n",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# Specify the default set of compiler flags for all sources, including third\n\n# party libraries. Place flags that don't affect the preprocessor or warnings\n\n# here. This set of flags controls compiler output. It is important that all\n\n# source code be compiled with the same flags.\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "# hardening linker flags\n",
        "Line" : 207,
        "CharPositionInLine" : 51
      },
      "24" : {
        "Text" : "# Also, disable the -Wpsabi warning on ARM/GCC 7.0. (https://gcc.gnu.org/gcc-7/changes.html)\n",
        "Line" : 213,
        "CharPositionInLine" : 2
      },
      "25" : {
        "Text" : "# Add new library source files here. Add unittest source files to\n\n# test/CMakeLists.txt.\n",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "# Specify the config.h.in file.\n",
        "Line" : 401,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "# These source files are generated.\n",
        "Line" : 406,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "# Determine flags from basename of CMAKE_BINARY_DIR. If directory name contains\n\n# '+debug', set the build type to 'debug'.\n",
        "Line" : 413,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "# Specify our final warning set. Clang supports -Weverything, but GCC does not.\n",
        "Line" : 424,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "# Turn off Warnings for MSVC for now (FIXME).\n",
        "Line" : 434,
        "CharPositionInLine" : 2
      },
      "31" : {
        "Text" : "# Tell linker to remove dead code.\n",
        "Line" : 439,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "# Apple makes it easy.\n",
        "Line" : 442,
        "CharPositionInLine" : 2
      },
      "33" : {
        "Text" : "# Dead-strip the GCC build.\n",
        "Line" : 445,
        "CharPositionInLine" : 2
      },
      "34" : {
        "Text" : "# Enable Link Time Optimization in Release builds. After this step, these\n\n# external symbols must still be left in oftr executable (MacOS X):\n\n#\n\n#   $ nm -gU oftr\n\n#   0000000100000000 T __mh_execute_header\n\n#   0000000100020510 T _libofp_buffer_free\n\n#   00000001000201c0 T _libofp_decode\n\n#   000000010001ff60 T _libofp_encode\n\n#   000000010001fc80 T _libofp_version\n\n#\n\n# GCC also requires more changes to use gcc-ar, gcc-ranlib and possibly\n\n# -pthread, -Wno-error=odr options. (CURRENTLY DISABLE -FLTO)\n\n#\n\n#if(NOT CMAKE_BUILD_TYPE MATCHES \"Debug\")\n\n#  set(LIBOFP_C_FLAGS \"${LIBOFP_C_FLAGS} -pthread -flto\")\n\n#  set(LIBOFP_CXX_FLAGS \"${LIBOFP_CXX_FLAGS} -pthread -flto -Wno-error=odr\")\n\n#  set(CMAKE_EXE_LINKER_FLAGS \"${CMAKE_EXE_LINKER_FLAGS} -pthread -flto\")\n\n#  set(CMAKE_AR \"gcc-ar\")\n\n#  set(CMAKE_NM \"gcc-nm\")\n\n#  set(CMAKE_RANLIB \"gcc-ranlib\")\n\n#  set(CMAKE_C_ARCHIVE_CREATE \"<CMAKE_AR> qcs <TARGET> <LINK_FLAGS> <OBJECTS>\")\n\n#  set(CMAKE_C_ARCHIVE_FINISH true)\n\n#endif()\n",
        "Line" : 458,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "# Compile with code coverage support.\n",
        "Line" : 482,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "# But, disable ctest coverage support. Coverage will run separately.\n",
        "Line" : 486,
        "CharPositionInLine" : 2
      },
      "37" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Check system header files and symbols\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 492,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "# \"oftr decode\" optionally depends on libpcap for live/offline decoding of packet captures.\n",
        "Line" : 504,
        "CharPositionInLine" : 2
      },
      "39" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Build Library\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 525,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "# Prepare for testing. Subdirectories can add tests.\n",
        "Line" : 529,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "# Use pthreads.\n",
        "Line" : 539,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "# Call custom function to check for Python YAML module (optional for testing).\n",
        "Line" : 546,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "# Look up the specific git commits for libofp, asio, and boringssl. If we are\n\n# building from a tarball instead of a git repo, the git commits will be empty,\n\n# and they need to be loaded from the GIT-VERSION.cmake file.\n",
        "Line" : 552,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "# Specify auto-generated config.h file.\n",
        "Line" : 576,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "# Copy over the CTestCustom.cmake file into the build tree.\n",
        "Line" : 580,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "# DataTypes.h in yaml-io depends on having these set. These macros have no effect\n\n# in C++11.\n",
        "Line" : 584,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "# Add system includes.\n",
        "Line" : 589,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "# Set flags to use when compiling third party code. Basically, we just use our\n\n# project flags with `-Wall` warnings. If we apply a stricter set, we'll clutter\n\n# up the build log with warnings.\n",
        "Line" : 593,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "# Add subdirectories of third party projects.\n",
        "Line" : 600,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "# Boringssl uses the __FILE__ predefined macro in \"openssl/err.h\". Redefine\n\n# __FILE__ to __func__ just for boringssl. (TODO)\n\n# Some tests use alignas(64) which elicits a warning on GCC 7.0+/ARM.\n",
        "Line" : 603,
        "CharPositionInLine" : 2
      },
      "51" : {
        "Text" : "# Add coverage flags when compiling yaml-io (if coverage is enabled).\n",
        "Line" : 613,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "# Reset flags for compiling our code. Here, we change the warning flags to\n\n# our own super picky set (-Weverything minus a few).\n",
        "Line" : 619,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "# Set up the source include directory. N.B. Includes for third-party sources are\n\n# baked into CMAKE_CXX_FLAGS using -isystem.\n",
        "Line" : 629,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "# Before we can build libofp.a, we need to build oxmfields.h, oxmfields.cpp,\n\n# and oxmfieldsdata.cpp. Generated source files are built into directory 'oxm'\n\n# in the cmake binary directory.\n",
        "Line" : 634,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "# Tell CMake the oxm source files won't be available until build time.\n",
        "Line" : 640,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "# Build libofp.a.\n",
        "Line" : 644,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "# Make sure the source is generated before the executable builds.\n",
        "Line" : 653,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Build Examples\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 657,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Build Tool\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 671,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Test\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 677,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Documentation\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 683,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# CPack Installer Support\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 689,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Support for Running Cpplint\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 701,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Support for Running Clang-format\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 714,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "#-------------------------------------------------------------------------------\n\n# Support for Running Clang-tidy\n\n#-------------------------------------------------------------------------------\n",
        "Line" : 724,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "# Run unit tests for boringssl.\n\n# The unit tests require golang 1.11 or later.\n",
        "Line" : 737,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 67
    },
    "CTestConfig.cmake" : {
      "ObjectId" : "7686acd61940d2bac5645db443b043abe26e8f93",
      "LastModified" : "2017-12-22T01:29:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "## This file should be placed in the root directory of your project.\n\n## Then modify the CMakeLists.txt file in the root directory of your\n\n## project to incorporate the testing dashboard.\n\n##\n\n## # The following are required to submit to the CDash dashboard:\n\n##   ENABLE_TESTING()\n\n##   INCLUDE(CTest)\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "CTestCustom.cmake" : {
      "ObjectId" : "5258984f1c9168ea3903a71bafe85dd566df2d10",
      "LastModified" : "2017-12-22T01:29:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# This file needs to be in the cmake build tree. It is copied into the build\n\n# tree by 'configure_file'.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Specify tests to ignore during memcheck phase.\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Ignore build warnings on Mac OS X\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "cmake/FindPythonModule.cmake" : {
      "ObjectId" : "452b4e7981c041b62db77cdbc2ae6863dbddea97",
      "LastModified" : "2013-11-28T03:38:09Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Copied from:\n\n# http://www.cmake.org/pipermail/cmake/2011-January/041666.html\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# A module's location is usually a directory, but for binary modules\n\n# it's a .so file.\n",
        "Line" : 10,
        "CharPositionInLine" : 8
      },
      "2" : {
        "Text" : "# For some reason, PY_MODULE_FOUND doesn't get set in the parent scope\n\n# unless we set it explicitly. PY_MODULE does get set.\n",
        "Line" : 23,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 3
    },
    "docs/CMakeLists.txt" : {
      "ObjectId" : "84c78162d72de68b440ba5028e77bdb0a0344935",
      "LastModified" : "2017-12-22T01:29:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Install man pages.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "example/cbenchreply/CMakeLists.txt" : {
      "ObjectId" : "92be7332beb66a24db2bb3fc8cfc6be40b4c908b",
      "LastModified" : "2017-12-22T01:29:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build cbenchreply controller.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "example/controller/CMakeLists.txt" : {
      "ObjectId" : "4affcd9b734db6389ed0d49cb10a3ac48be675ef",
      "LastModified" : "2017-12-22T01:29:35Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "example/controller/test/CMakeLists.txt" : {
      "ObjectId" : "2563186e39e959a08dee024bebd4d5081338cf69",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Plaintext (no TLS)\n",
        "Line" : 2,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Mutual TLS.\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# TLS. Controller does not verify peer cert.\n",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TLS. Agent does not verify peer cert.\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 4
    },
    "example/ctypes/CMakeLists.txt" : {
      "ObjectId" : "dd20e37587b67f7e59dff98ebe37d4f5db4d1490",
      "LastModified" : "2018-09-14T06:00:30Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "example/flowbench/CMakeLists.txt" : {
      "ObjectId" : "2116e1bcc3a72743d438ae58cb4558b36f1f3b17",
      "LastModified" : "2017-12-22T01:29:35Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "example/nulldemo/CMakeLists.txt" : {
      "ObjectId" : "28c3d8ed18d73948933194e46c5e70b6ef356ec9",
      "LastModified" : "2017-12-22T01:29:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build nullagent and nullcontroller.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "example/nulldemo/test/CMakeLists.txt" : {
      "ObjectId" : "c2d3c0545395254f164b116fae8a0d417ea3e46a",
      "LastModified" : "2019-04-12T18:52:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "example/python/CMakeLists.txt" : {
      "ObjectId" : "552439ebc59da2aa7541cf0bd790eddbeb3fd2e0",
      "LastModified" : "1970-01-01T00:00:00Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "example/python/test/CMakeLists.txt" : {
      "ObjectId" : "c801486f207d0918d9b2b71b9e524e970d545170",
      "LastModified" : "2019-04-12T18:52:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "example/testagent/CMakeLists.txt" : {
      "ObjectId" : "5fd0493ea1fc38a2e3915492e9f0d12d084b2b29",
      "LastModified" : "2017-12-22T01:29:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Build testagent.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "example/testagent/test/CMakeLists.txt" : {
      "ObjectId" : "eab3e5af0fe333b616901e033a38d42d47485066",
      "LastModified" : "2019-04-12T18:52:08Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "external/yaml-io/CMakeLists.txt" : {
      "ObjectId" : "30c71a3ab114b0699a6e45a22af6589c25b9d191",
      "LastModified" : "2019-02-23T02:04:21Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#include(config-ix)\n",
        "Line" : 40,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Helper macros and functions (not used)\n\n# macro(add_cxx_include result files)\n\n#   set(${result} \"\")\n\n#   foreach (file_name ${files})\n\n#      set(${result} \"${${result}}#include<${file_name}>\\n\")\n\n#   endforeach()\n\n# endmacro(add_cxx_include files result)\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# function(check_type_exists type files variable)\n\n#   add_cxx_include(includes \"${files}\")\n\n#   CHECK_CXX_SOURCE_COMPILES(\"\n\n#     ${includes} ${type} typeVar;\n\n#     int main() {\n\n#         return 0;\n\n#     }\n\n#     \" ${variable})\n\n# endfunction()\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# set(headers \"sys/types.h\")\n",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# if (HAVE_INTTYPES_H)\n\n#   set(headers ${headers} \"inttypes.h\")\n\n# endif()\n",
        "Line" : 87,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# if (HAVE_STDINT_H)\n\n#   set(headers ${headers} \"stdint.h\")\n\n# endif()\n",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# check_type_exists(int64_t \"${headers}\" HAVE_INT64_T)\n\n# check_type_exists(uint64_t \"${headers}\" HAVE_UINT64_T)\n\n# check_type_exists(u_int64_t \"${headers}\" HAVE_U_INT64_T)\n",
        "Line" : 95,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# C++11 only; just assume they exist.\n",
        "Line" : 99,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "external/yaml-io/include/llvm/Config/abi-breaking.h.cmake" : {
      "ObjectId" : "7ae401e5b8a8c7df2826869e3569d6a4cb517642",
      "LastModified" : "2017-12-22T01:29:35Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*===------- llvm/Config/abi-breaking.h - llvm configuration -------*- C -*-===*/\n/*                                                                            */\n/*                     The LLVM Compiler Infrastructure                       */\n/*                                                                            */\n/* This file is distributed under the University of Illinois Open Source      */\n/* License. See LICENSE.TXT for details.                                      */\n/*                                                                            */\n/*===----------------------------------------------------------------------===*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* This file controls the C++ ABI break introduced in LLVM public header. */",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Define to enable checks that alter the LLVM C++ ABI */",
        "Line" : 15,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Define to enable reverse iteration of unordered llvm containers */",
        "Line" : 18,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Allow selectively disabling link-time mismatch checking so that header-only\n   ADT content from LLVM can be used without linking libSupport. */",
        "Line" : 21,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "// ABI_BREAKING_CHECKS protection: provides link-time failure when clients build\n// mismatch with LLVM",
        "Line" : 25,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "// Use pragma with MSVC",
        "Line" : 28,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "// FIXME: Implement checks without weak.",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 8
    },
    "external/yaml-io/include/llvm/Config/config.h.cmake" : {
      "ObjectId" : "03bbd74d6d325e1b42b095801eb9e2e3e7521c68",
      "LastModified" : "2019-02-23T02:04:21Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/* Exported configuration */",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Bug report URL. */",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Define to 1 to enable backtraces, and to 0 otherwise. */",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Define to 1 to enable crash overrides, and to 0 otherwise. */",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Define to 1 to enable crash memory dumps, and to 0 otherwise. */",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Define to 1 if you have the `backtrace' function. */",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Define to 1 if you have the <CrashReporterClient.h> header file. */",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* can use __crashreporter_info__ */",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* Define to 1 if you have the declaration of `arc4random', and to 0 if you\n   don't. */",
        "Line" : 30,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* Define to 1 if you have the declaration of `FE_ALL_EXCEPT', and to 0 if you\n   don't. */",
        "Line" : 34,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* Define to 1 if you have the declaration of `FE_INEXACT', and to 0 if you\n   don't. */",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* Define to 1 if you have the declaration of `strerror_s', and to 0 if you\n   don't. */",
        "Line" : 42,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* Define to 1 if you have the DIA SDK installed, and to 0 if you don't. */",
        "Line" : 46,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* Define to 1 if you have the <dlfcn.h> header file. */",
        "Line" : 49,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* Define if dlopen() is available on this platform. */",
        "Line" : 52,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Define if dladdr() is available on this platform. */",
        "Line" : 55,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Define to 1 if you have the <errno.h> header file. */",
        "Line" : 58,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Define to 1 if you have the <fcntl.h> header file. */",
        "Line" : 61,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Define to 1 if you have the <fenv.h> header file. */",
        "Line" : 64,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Define if libffi is available on this platform. */",
        "Line" : 67,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Define to 1 if you have the <ffi/ffi.h> header file. */",
        "Line" : 70,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Define to 1 if you have the <ffi.h> header file. */",
        "Line" : 73,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* Define to 1 if you have the `futimens' function. */",
        "Line" : 76,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Define to 1 if you have the `futimes' function. */",
        "Line" : 79,
        "CharPositionInLine" : 0
      },
      "24" : {
        "Text" : "/* Define to 1 if you have the `getpagesize' function. */",
        "Line" : 82,
        "CharPositionInLine" : 0
      },
      "25" : {
        "Text" : "/* Define to 1 if you have the `getrlimit' function. */",
        "Line" : 85,
        "CharPositionInLine" : 0
      },
      "26" : {
        "Text" : "/* Define to 1 if you have the `getrusage' function. */",
        "Line" : 88,
        "CharPositionInLine" : 0
      },
      "27" : {
        "Text" : "/* Define to 1 if you have the `isatty' function. */",
        "Line" : 91,
        "CharPositionInLine" : 0
      },
      "28" : {
        "Text" : "/* Define to 1 if you have the `edit' library (-ledit). */",
        "Line" : 94,
        "CharPositionInLine" : 0
      },
      "29" : {
        "Text" : "/* Define to 1 if you have the `pfm' library (-lpfm). */",
        "Line" : 97,
        "CharPositionInLine" : 0
      },
      "30" : {
        "Text" : "/* Define to 1 if you have the `psapi' library (-lpsapi). */",
        "Line" : 100,
        "CharPositionInLine" : 0
      },
      "31" : {
        "Text" : "/* Define to 1 if you have the `pthread' library (-lpthread). */",
        "Line" : 103,
        "CharPositionInLine" : 0
      },
      "32" : {
        "Text" : "/* Define to 1 if you have the `pthread_getname_np' function. */",
        "Line" : 106,
        "CharPositionInLine" : 0
      },
      "33" : {
        "Text" : "/* Define to 1 if you have the `pthread_setname_np' function. */",
        "Line" : 109,
        "CharPositionInLine" : 0
      },
      "34" : {
        "Text" : "/* Define to 1 if you have the `z' library (-lz). */",
        "Line" : 112,
        "CharPositionInLine" : 0
      },
      "35" : {
        "Text" : "/* Define to 1 if you have the <link.h> header file. */",
        "Line" : 115,
        "CharPositionInLine" : 0
      },
      "36" : {
        "Text" : "/* Define to 1 if you have the `lseek64' function. */",
        "Line" : 118,
        "CharPositionInLine" : 0
      },
      "37" : {
        "Text" : "/* Define to 1 if you have the <mach/mach.h> header file. */",
        "Line" : 121,
        "CharPositionInLine" : 0
      },
      "38" : {
        "Text" : "/* Define to 1 if you have the `mallctl' function. */",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "39" : {
        "Text" : "/* Define to 1 if you have the `mallinfo' function. */",
        "Line" : 127,
        "CharPositionInLine" : 0
      },
      "40" : {
        "Text" : "/* Define to 1 if you have the <malloc.h> header file. */",
        "Line" : 130,
        "CharPositionInLine" : 0
      },
      "41" : {
        "Text" : "/* Define to 1 if you have the <malloc/malloc.h> header file. */",
        "Line" : 133,
        "CharPositionInLine" : 0
      },
      "42" : {
        "Text" : "/* Define to 1 if you have the `malloc_zone_statistics' function. */",
        "Line" : 136,
        "CharPositionInLine" : 0
      },
      "43" : {
        "Text" : "/* Define to 1 if you have the `posix_fallocate' function. */",
        "Line" : 139,
        "CharPositionInLine" : 0
      },
      "44" : {
        "Text" : "/* Define to 1 if you have the `posix_spawn' function. */",
        "Line" : 142,
        "CharPositionInLine" : 0
      },
      "45" : {
        "Text" : "/* Define to 1 if you have the `pread' function. */",
        "Line" : 145,
        "CharPositionInLine" : 0
      },
      "46" : {
        "Text" : "/* Have pthread_getspecific */",
        "Line" : 148,
        "CharPositionInLine" : 0
      },
      "47" : {
        "Text" : "/* Define to 1 if you have the <pthread.h> header file. */",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "48" : {
        "Text" : "/* Have pthread_mutex_lock */",
        "Line" : 154,
        "CharPositionInLine" : 0
      },
      "49" : {
        "Text" : "/* Have pthread_rwlock_init */",
        "Line" : 157,
        "CharPositionInLine" : 0
      },
      "50" : {
        "Text" : "/* Define to 1 if you have the `realpath' function. */",
        "Line" : 160,
        "CharPositionInLine" : 0
      },
      "51" : {
        "Text" : "/* Define to 1 if you have the `sbrk' function. */",
        "Line" : 163,
        "CharPositionInLine" : 0
      },
      "52" : {
        "Text" : "/* Define to 1 if you have the `setenv' function. */",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "53" : {
        "Text" : "/* Define to 1 if you have the `sched_getaffinity' function. */",
        "Line" : 169,
        "CharPositionInLine" : 0
      },
      "54" : {
        "Text" : "/* Define to 1 if you have the `CPU_COUNT' macro. */",
        "Line" : 172,
        "CharPositionInLine" : 0
      },
      "55" : {
        "Text" : "/* Define to 1 if you have the `setrlimit' function. */",
        "Line" : 175,
        "CharPositionInLine" : 0
      },
      "56" : {
        "Text" : "/* Define to 1 if you have the `sigaltstack' function. */",
        "Line" : 178,
        "CharPositionInLine" : 0
      },
      "57" : {
        "Text" : "/* Define to 1 if you have the <signal.h> header file. */",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "58" : {
        "Text" : "/* Define to 1 if you have the `strerror' function. */",
        "Line" : 184,
        "CharPositionInLine" : 0
      },
      "59" : {
        "Text" : "/* Define to 1 if you have the `strerror_r' function. */",
        "Line" : 187,
        "CharPositionInLine" : 0
      },
      "60" : {
        "Text" : "/* Define to 1 if you have the `sysconf' function. */",
        "Line" : 190,
        "CharPositionInLine" : 0
      },
      "61" : {
        "Text" : "/* Define to 1 if you have the <sys/ioctl.h> header file. */",
        "Line" : 193,
        "CharPositionInLine" : 0
      },
      "62" : {
        "Text" : "/* Define to 1 if you have the <sys/mman.h> header file. */",
        "Line" : 196,
        "CharPositionInLine" : 0
      },
      "63" : {
        "Text" : "/* Define to 1 if you have the <sys/param.h> header file. */",
        "Line" : 199,
        "CharPositionInLine" : 0
      },
      "64" : {
        "Text" : "/* Define to 1 if you have the <sys/resource.h> header file. */",
        "Line" : 202,
        "CharPositionInLine" : 0
      },
      "65" : {
        "Text" : "/* Define to 1 if you have the <sys/stat.h> header file. */",
        "Line" : 205,
        "CharPositionInLine" : 0
      },
      "66" : {
        "Text" : "/* Define to 1 if you have the <sys/time.h> header file. */",
        "Line" : 208,
        "CharPositionInLine" : 0
      },
      "67" : {
        "Text" : "/* Define to 1 if stat struct has st_mtimespec member .*/",
        "Line" : 211,
        "CharPositionInLine" : 0
      },
      "68" : {
        "Text" : "/* Define to 1 if stat struct has st_mtim member. */",
        "Line" : 214,
        "CharPositionInLine" : 0
      },
      "69" : {
        "Text" : "/* Define to 1 if you have the <sys/types.h> header file. */",
        "Line" : 217,
        "CharPositionInLine" : 0
      },
      "70" : {
        "Text" : "/* Define if the setupterm() function is supported this platform. */",
        "Line" : 220,
        "CharPositionInLine" : 0
      },
      "71" : {
        "Text" : "/* Define if the xar_open() function is supported this platform. */",
        "Line" : 223,
        "CharPositionInLine" : 0
      },
      "72" : {
        "Text" : "/* Define to 1 if you have the <termios.h> header file. */",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "73" : {
        "Text" : "/* Define to 1 if you have the <unistd.h> header file. */",
        "Line" : 229,
        "CharPositionInLine" : 0
      },
      "74" : {
        "Text" : "/* Define to 1 if you have the <valgrind/valgrind.h> header file. */",
        "Line" : 232,
        "CharPositionInLine" : 0
      },
      "75" : {
        "Text" : "/* Define to 1 if you have the <zlib.h> header file. */",
        "Line" : 235,
        "CharPositionInLine" : 0
      },
      "76" : {
        "Text" : "/* Have host's _alloca */",
        "Line" : 238,
        "CharPositionInLine" : 0
      },
      "77" : {
        "Text" : "/* Define to 1 if you have the `_chsize_s' function. */",
        "Line" : 241,
        "CharPositionInLine" : 0
      },
      "78" : {
        "Text" : "/* Define to 1 if you have the `_Unwind_Backtrace' function. */",
        "Line" : 244,
        "CharPositionInLine" : 0
      },
      "79" : {
        "Text" : "/* Have host's __alloca */",
        "Line" : 247,
        "CharPositionInLine" : 0
      },
      "80" : {
        "Text" : "/* Have host's __ashldi3 */",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "81" : {
        "Text" : "/* Have host's __ashrdi3 */",
        "Line" : 253,
        "CharPositionInLine" : 0
      },
      "82" : {
        "Text" : "/* Have host's __chkstk */",
        "Line" : 256,
        "CharPositionInLine" : 0
      },
      "83" : {
        "Text" : "/* Have host's __chkstk_ms */",
        "Line" : 259,
        "CharPositionInLine" : 0
      },
      "84" : {
        "Text" : "/* Have host's __cmpdi2 */",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "85" : {
        "Text" : "/* Have host's __divdi3 */",
        "Line" : 265,
        "CharPositionInLine" : 0
      },
      "86" : {
        "Text" : "/* Have host's __fixdfdi */",
        "Line" : 268,
        "CharPositionInLine" : 0
      },
      "87" : {
        "Text" : "/* Have host's __fixsfdi */",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "88" : {
        "Text" : "/* Have host's __floatdidf */",
        "Line" : 274,
        "CharPositionInLine" : 0
      },
      "89" : {
        "Text" : "/* Have host's __lshrdi3 */",
        "Line" : 277,
        "CharPositionInLine" : 0
      },
      "90" : {
        "Text" : "/* Have host's __main */",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "91" : {
        "Text" : "/* Have host's __moddi3 */",
        "Line" : 283,
        "CharPositionInLine" : 0
      },
      "92" : {
        "Text" : "/* Have host's __udivdi3 */",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "93" : {
        "Text" : "/* Have host's __umoddi3 */",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "94" : {
        "Text" : "/* Have host's ___chkstk */",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "95" : {
        "Text" : "/* Have host's ___chkstk_ms */",
        "Line" : 295,
        "CharPositionInLine" : 0
      },
      "96" : {
        "Text" : "/* Linker version detected at compile time. */",
        "Line" : 298,
        "CharPositionInLine" : 0
      },
      "97" : {
        "Text" : "/* Target triple LLVM will generate code for by default */\n/* Doesn't use `cmakedefine` because it is allowed to be empty. */",
        "Line" : 301,
        "CharPositionInLine" : 0
      },
      "98" : {
        "Text" : "/* Define if zlib compression is available */",
        "Line" : 305,
        "CharPositionInLine" : 0
      },
      "99" : {
        "Text" : "/* Define if overriding target triple is enabled */",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "100" : {
        "Text" : "/* LLVM version information */",
        "Line" : 311,
        "CharPositionInLine" : 0
      },
      "101" : {
        "Text" : "/* Whether tools show host and target info when invoked with --version */",
        "Line" : 314,
        "CharPositionInLine" : 0
      },
      "102" : {
        "Text" : "/* Define if libxml2 is supported on this platform. */",
        "Line" : 317,
        "CharPositionInLine" : 0
      },
      "103" : {
        "Text" : "/* Define to the extension used for shared libraries, say, \".so\". */",
        "Line" : 320,
        "CharPositionInLine" : 0
      },
      "104" : {
        "Text" : "/* Define to the address where bug reports for this package should be sent. */",
        "Line" : 323,
        "CharPositionInLine" : 0
      },
      "105" : {
        "Text" : "/* Define to the full name of this package. */",
        "Line" : 326,
        "CharPositionInLine" : 0
      },
      "106" : {
        "Text" : "/* Define to the full name and version of this package. */",
        "Line" : 329,
        "CharPositionInLine" : 0
      },
      "107" : {
        "Text" : "/* Define to the version of this package. */",
        "Line" : 332,
        "CharPositionInLine" : 0
      },
      "108" : {
        "Text" : "/* Define to the vendor of this package. */",
        "Line" : 335,
        "CharPositionInLine" : 0
      },
      "109" : {
        "Text" : "/* Define as the return type of signal handlers (`int' or `void'). */",
        "Line" : 338,
        "CharPositionInLine" : 0
      },
      "110" : {
        "Text" : "/* Define to a function implementing stricmp */",
        "Line" : 341,
        "CharPositionInLine" : 0
      },
      "111" : {
        "Text" : "/* Define to a function implementing strdup */",
        "Line" : 344,
        "CharPositionInLine" : 0
      },
      "112" : {
        "Text" : "/* Whether GlobalISel rule coverage is being collected */",
        "Line" : 347,
        "CharPositionInLine" : 0
      },
      "113" : {
        "Text" : "/* Define to the default GlobalISel coverage file prefix */",
        "Line" : 350,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 114
    },
    "external/yaml-io/include/llvm/Config/llvm-config.h.cmake" : {
      "ObjectId" : "872a31553d11a772756a08a2c7dd5bb5818bdc58",
      "LastModified" : "2019-02-23T02:04:21Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*===------- llvm/Config/llvm-config.h - llvm configuration -------*- C -*-===*/\n/*                                                                            */\n/*                     The LLVM Compiler Infrastructure                       */\n/*                                                                            */\n/* This file is distributed under the University of Illinois Open Source      */\n/* License. See LICENSE.TXT for details.                                      */\n/*                                                                            */\n/*===----------------------------------------------------------------------===*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* This file enumerates variables from the LLVM configuration so that they\n   can be in exported headers and won't override package specific directives.\n   This is a C header that can be included in the llvm-c headers. */",
        "Line" : 10,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Define if LLVM_ENABLE_DUMP is enabled */",
        "Line" : 17,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "/* Define if we link Polly to the tools */",
        "Line" : 20,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Target triple LLVM will generate code for by default */",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Define if threads enabled */",
        "Line" : 26,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "/* Has gcc/MSVC atomic intrinsics */",
        "Line" : 29,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "/* Host triple LLVM will be executed on */",
        "Line" : 32,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "/* LLVM architecture name for the native architecture, if available */",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "9" : {
        "Text" : "/* LLVM name for the native AsmParser init function, if available */",
        "Line" : 38,
        "CharPositionInLine" : 0
      },
      "10" : {
        "Text" : "/* LLVM name for the native AsmPrinter init function, if available */",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "11" : {
        "Text" : "/* LLVM name for the native Disassembler init function, if available */",
        "Line" : 44,
        "CharPositionInLine" : 0
      },
      "12" : {
        "Text" : "/* LLVM name for the native Target init function, if available */",
        "Line" : 47,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "/* LLVM name for the native TargetInfo init function, if available */",
        "Line" : 50,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "/* LLVM name for the native target MC init function, if available */",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "/* Define if this is Unixish platform */",
        "Line" : 56,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "/* Define if we have the Intel JIT API runtime support library */",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "/* Define if we have the oprofile JIT-support library */",
        "Line" : 62,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "/* Define if we have the perf JIT-support library */",
        "Line" : 65,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "/* Major version of the LLVM API */",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "/* Minor version of the LLVM API */",
        "Line" : 71,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "/* Patch version of the LLVM API */",
        "Line" : 74,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "/* LLVM version string */",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "23" : {
        "Text" : "/* Whether LLVM records statistics for use with GetStatistics(),\n * PrintStatistics() or PrintStatisticsJSON()\n */",
        "Line" : 80,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 24
    },
    "external/yaml-io/include/llvm/Support/DataTypes.h.cmake" : {
      "ObjectId" : "a58e2e454b7d1749d3b7a3cdaa41b74af32ddb42",
      "LastModified" : "2017-12-22T01:29:35Z",
      "FileType" : "CMAKESOURCE",
      "0" : {
        "Text" : "/*===-- include/Support/DataTypes.h - Define fixed size types -----*- C -*-===*\\\n|*                                                                            *|\n|*                     The LLVM Compiler Infrastructure                       *|\n|*                                                                            *|\n|* This file is distributed under the University of Illinois Open Source      *|\n|* License. See LICENSE.TXT for details.                                      *|\n|*                                                                            *|\n|*===----------------------------------------------------------------------===*|\n|*                                                                            *|\n|* This file contains definitions to figure out the size of _HOST_ data types.*|\n|* This file is important because different host OS's define different macros,*|\n|* which makes portability tough.  This file exports the following            *|\n|* definitions:                                                               *|\n|*                                                                            *|\n|*   [u]int(32|64)_t : typedefs for signed and unsigned 32/64 bit system types*|\n|*   [U]INT(8|16|32|64)_(MIN|MAX) : Constants for the min and max values.     *|\n|*                                                                            *|\n|* No library is required when using these functions.                         *|\n|*                                                                            *|\n|*===----------------------------------------------------------------------===*/",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "/* Please leave this file C-compatible. */",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "/* Note that <inttypes.h> includes <stdint.h>, if this is a C99 system. */",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "// GCC is strict about defining large constants: they must have LL modifier.",
        "Line" : 72,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "/* Handle incorrect definition of uint64_t as u_int64_t */",
        "Line" : 77,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "/* Set defaults for constants which we cannot find. */",
        "Line" : 120,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 6
    },
    "external/yaml-io/unittests/CMakeLists.txt" : {
      "ObjectId" : "d2a487910f6b9262f24a03bca6ea547f66ebcaca",
      "LastModified" : "2018-01-19T05:58:18Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "oxm/CMakeLists.txt" : {
      "ObjectId" : "03be73d3ee348bbb875712c18a748955291df529",
      "LastModified" : "2017-12-22T01:29:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# cmake file for oxmfields.h, oxmfields.cpp and oxmfieldsdata.cpp.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Disable logging while making helper programs.\n",
        "Line" : 16,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Make ofp sub-directory for oxmfields.h\n",
        "Line" : 19,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# Build `oxmfields_compile`.\n",
        "Line" : 23,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Use `oxmfields_compile` to produce oxmfields_main.cpp and oxmfields.h.\n",
        "Line" : 27,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Build `oxmfields_compile2`.\n",
        "Line" : 41,
        "CharPositionInLine" : 0
      },
      "6" : {
        "Text" : "# Use `oxmfields_compile2` to produce oxmfields.cpp.\n",
        "Line" : 45,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# Build `oxmfields_compile3`.\n",
        "Line" : 53,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# Use `oxmfields_compile3` to produce oxmfieldsdata.cpp.\n",
        "Line" : 57,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 9
    },
    "test/CMakeLists.txt" : {
      "ObjectId" : "731566af06f8514759e821d2c548a2f6e4ad2608",
      "LastModified" : "2019-04-12T18:52:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Include 'gtest-all.cc' source file when building ofp_unittest. Avoid googletest's\n\n# CMakeLists.txt because it wants to install googletest.\n",
        "Line" : 137,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# -Wzero-as-null-pointer-constant poses a problem for EXPECT_EQ(0, blah) so turn it off\n\n# until googletest fixes this.\n",
        "Line" : 143,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Add tests here.\n",
        "Line" : 151,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tools/oftr/CMakeLists.txt" : {
      "ObjectId" : "62af593758b00ae182952318261a3e806087c829",
      "LastModified" : "2017-12-22T01:29:35Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Set up Info.plist file so there will be a version number in crashreporter\n\n# output.\n",
        "Line" : 16,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Tip: Add \"-framework CoreFoundation\" here on Mac OS X for measuring with\n\n# Instruments.\n",
        "Line" : 24,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Install 'oftr'.\n",
        "Line" : 31,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 3
    },
    "tools/oftr/test/CMakeLists.txt" : {
      "ObjectId" : "2df3033b9405c2d25ab3f3924a07d6e55e1f103e",
      "LastModified" : "2018-01-19T05:58:18Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Only run this test when building release binary.\n",
        "Line" : 52,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    }
  },
  "FileTypes" : {
    "CMAKE" : 22,
    "CMAKESOURCE" : 4
  },
  "ElapsedTime" : 2375
}