{
  "Repository" : "27425704",
  "Revision" : "HEAD",
  "ObjectId" : "8fd984bfccfd3c55448284c9a0a8a01f86c65ca9",
  "CommitTime" : "2019-03-29T14:08:49Z",
  "Files" : {
    "CMakeLists.txt" : {
      "ObjectId" : "339d67ed98e23a6e90f17cab36711bb675895afa",
      "LastModified" : "2019-03-22T13:07:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# Intel C++11 support starts from 3.6 or even later version\n",
        "Line" : 1,
        "CharPositionInLine" : 36
      },
      "1" : {
        "Text" : "# allow {module}_ROOT variables to be set\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# set language and standard\n",
        "Line" : 7,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# user variables\n",
        "Line" : 11,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Set release as the default build type.\n",
        "Line" : 35,
        "CharPositionInLine" : 0
      },
      "5" : {
        "Text" : "# Set the possible values of build type for cmake-gui\n",
        "Line" : 38,
        "CharPositionInLine" : 2
      },
      "6" : {
        "Text" : "# include custom defined FindPackage modules\n",
        "Line" : 54,
        "CharPositionInLine" : 0
      },
      "7" : {
        "Text" : "# generate compile_commands.json with compile commands for each target\n",
        "Line" : 59,
        "CharPositionInLine" : 0
      },
      "8" : {
        "Text" : "# link against shared MKL libraries\n",
        "Line" : 73,
        "CharPositionInLine" : 30
      },
      "9" : {
        "Text" : "# just sets scalapack_DIR\n",
        "Line" : 85,
        "CharPositionInLine" : 37
      },
      "10" : {
        "Text" : "#include_directories(BEFORE ${SCALAPACK_INCLUDE_DIR})\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "11" : {
        "Text" : "# if(NOT USE_SCALAPACK)\n\n#   message(FATAL_ERROR \"ELPA depends on ScaLAPACK, please set USE_SCALAPACK=On.\")\n\n# endif()\n",
        "Line" : 102,
        "CharPositionInLine" : 2
      },
      "12" : {
        "Text" : "# add required libraries\n",
        "Line" : 158,
        "CharPositionInLine" : 0
      },
      "13" : {
        "Text" : "# set OpenMP flags\n",
        "Line" : 161,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# include library headers\n",
        "Line" : 166,
        "CharPositionInLine" : 0
      },
      "15" : {
        "Text" : "# project header locations\n",
        "Line" : 181,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# configure generation of the version header\n",
        "Line" : 185,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# handle the generation of the version.hpp file\n",
        "Line" : 194,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# handle the generation of runtime_options_json.hpp file\n",
        "Line" : 210,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "## configure version header\n\n#exec_program(\"git\" ${CMAKE_CURRENT_SOURCE_DIR}\n\n#  ARGS \"rev-parse HEAD\"\n\n#  OUTPUT_VARIABLE GIT_VERSION_SHA1\n\n#  RETURN_VALUE exit_code)\n\n#if(exit_code)\n\n#  set(GIT_VERSION_SHA1 \"\")\n\n#endif()\n\n#exec_program(\"date\"\n\n#  ARGS \"+\\\"%a, %e %b %Y %H:%M:%S\\\"\"\n\n#  OUTPUT_VARIABLE BUILD_DATE)\n\n#exec_program(\n\n#  \"git\"\n\n#  ${CMAKE_CURRENT_SOURCE_DIR}\n\n#  ARGS \"describe --all\"\n\n#  OUTPUT_VARIABLE GIT_BRANCHNAME\n\n#  RETURN_VALUE exit_code)\n\n#if(exit_code)\n\n#  set(GIT_BRANCHNAME \"\")\n\n#endif()\n\n#configure_file(\"${PROJECT_SOURCE_DIR}/src/version.hpp.in\" \"${PROJECT_BINARY_DIR}/src/version.hpp\")\n",
        "Line" : 226,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# sirius library\n",
        "Line" : 286,
        "CharPositionInLine" : 0
      },
      "21" : {
        "Text" : "# applications\n",
        "Line" : 292,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 22
    },
    "apps/atoms/CMakeLists.txt" : {
      "ObjectId" : "151e59ef53d4a900150e9578f5a9d9d503facf10",
      "LastModified" : "2018-06-21T11:09:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# atom2.cpp is missing develop branch\n\n# add_executable(atom2 atom2.cpp)\n\n# add_dependencies(atom2 sirius)\n\n# target_link_libraries(atom2 \"${sirius_location};${SYSTEM_LIBRARIES};${HDF5_C_LIBRARIES}\")\n\n# install(TARGETS atom2 RUNTIME\n\n#     DESTINATION \"${CMAKE_INSTALL_PREFIX}/bin\")\n",
        "Line" : 6,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/dft_loop/CMakeLists.txt" : {
      "ObjectId" : "c4b89e9b3deb051a567454680298d43abad2438a",
      "LastModified" : "2018-06-21T11:09:50Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "apps/tests/CMakeLists.txt" : {
      "ObjectId" : "ef372b9f44aa3b412b95131771f29edf6db1d5b7",
      "LastModified" : "2019-03-01T09:20:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(_test test_gemm)\n\n#add_executable(\"${_test}_real\" \"${_test}.cpp\")\n\n#SIRIUS_SETUP_TARGET(${_test})\n\n#target_compile_definitions(${_test} PRIVATE COMPILE_DEFINITIONS \"-D__TEST_REAL\")\n\n#install(TARGETS ${_test} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}/bin\")\n\n#\n\n#set(_test test_gemm2)\n\n#add_executable(\"${_test}_real\" \"${_test}.cpp\")\n\n#SIRIUS_SETUP_TARGET(${_test})\n\n#target_compile_definitions(${_test} PRIVATE COMPILE_DEFINITIONS \"-D__TEST_REAL\")\n\n#install(TARGETS ${_test} RUNTIME DESTINATION \"${CMAKE_INSTALL_PREFIX}/bin\")\n",
        "Line" : 12,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/unit_tests/CMakeLists.txt" : {
      "ObjectId" : "b3dc0f6899a6be98370f9e1a197e307a0b16a2c9",
      "LastModified" : "2019-03-01T09:20:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# FILE(GLOB _tests RELATIVE \"${CMAKE_CURRENT_SOURCE_DIR}\" \"*.cpp\")\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "apps/utils/CMakeLists.txt" : {
      "ObjectId" : "fb026bfef3f2633eec652f386c6934e5c128a1c6",
      "LastModified" : "2019-03-01T09:20:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/FindCRAY_LIBSCI.cmake" : {
      "ObjectId" : "70e023d08f963f838d86abc8850f31bb0eb15883",
      "LastModified" : "2019-03-01T09:20:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/FindElpa.cmake" : {
      "ObjectId" : "0ca0ec9c870e30aa817ceb9ee65fd52843de318f",
      "LastModified" : "2019-03-01T09:20:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find Elpa via pkg-config or easybuild\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindFFTW.cmake" : {
      "ObjectId" : "58204fa05182df5298c542b1ff09fc02c976b7bb",
      "LastModified" : "2019-03-01T09:20:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# ok, fftw libraries not found.\n\n# MKL contains fftw, lets assume we use MKL\n\n# TODO: handle this properly\n",
        "Line" : 22,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindLibSPG.cmake" : {
      "ObjectId" : "9ad4b794c039c8b2f62e9cf41956dcf0c5f3afc0",
      "LastModified" : "2019-03-29T12:16:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find spglib\n\n# if in non-standard location set environment variabled `SPG_DIR` to the root directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindLibVDWXC.cmake" : {
      "ObjectId" : "8621e860c9a97a4ffeeb2010bffb1b970be6bcc8",
      "LastModified" : "2019-03-01T09:20:59Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# find libvdwxc\n\n# if in non-standard location set environment variabled `VDWCXC_DIR` to the root directory\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/FindLibXC.cmake" : {
      "ObjectId" : "145b987ae4232daab85ed9f31d8608a953c69852",
      "LastModified" : "2019-03-01T09:20:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/FindMAGMA.cmake" : {
      "ObjectId" : "b1f69312ba0cea1106a0a0db40fd8fd950ddf98f",
      "LastModified" : "2019-03-01T09:20:59Z",
      "FileType" : "CMAKE",
      "CommentCount" : 0
    },
    "cmake/modules/FindMKL.cmake" : {
      "ObjectId" : "1fee0ef30aec0ffc6ef740bdc94a1596346fb517",
      "LastModified" : "2019-03-18T13:49:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "################################################################################\n\n#\n\n# \\file      cmake/FindMKL.cmake\n\n# \\author    J. Bakosi\n\n# \\copyright 2012-2015, Jozsef Bakosi, 2016, Los Alamos National Security, LLC.\n\n# \\brief     Find the Math Kernel Library from Intel\n\n# \\date      Thu 26 Jan 2017 02:05:50 PM MST\n\n# downloaded from: https://gist.github.com/scivision/5108cf6ab1515f581a84cd9ad1ef72aa\n\n# modified by: Simon Pintarelli <simon.pintarelli@cscs.ch>\n\n#\n\n################################################################################\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# Find the Math Kernel Library from Intel\n\n#\n\n#  MKL_FOUND - System has MKL\n\n#  MKL_INCLUDE_DIRS - MKL include files directories\n\n#  MKL_LIBRARIES - The MKL libraries\n\n#  MKL_INTERFACE_LIBRARY - MKL interface library\n\n#  MKL_SEQUENTIAL_LAYER_LIBRARY - MKL sequential layer library\n\n#  MKL_CORE_LIBRARY - MKL core library\n\n#\n\n#  The environment variables MKLROOT and INTEL are used to find the library.\n\n#  Everything else is ignored. If MKL is found \"\" is added to\n\n#  CMAKE_C_FLAGS and CMAKE_CXX_FLAGS.\n\n#\n\n#  Example usage:\n\n#\n\n#  find_package(MKL)\n\n#  if(MKL_FOUND)\n\n#    target_link_libraries(TARGET ${MKL_LIBRARIES})\n\n#  endif()\n",
        "Line" : 13,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# If already in cache, be silent\n",
        "Line" : 36,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# TODO: decide when to use MKL_SEQUENTIAL_LAYER_LIBRARY / MKL_THREAD_LIBRARY\n\n# set(MKL_LIBRARIES \"${MKL_INTERFACE_LIBRARY} ${MKL_SEQUENTIAL_LAYER_LIBRARY} ${MKL_CORE_LIBRARY}\")\n",
        "Line" : 124,
        "CharPositionInLine" : 0
      },
      "4" : {
        "Text" : "# Handle the QUIETLY and REQUIRED arguments and set MKL_FOUND to TRUE if\n\n# all listed variables are TRUE.\n",
        "Line" : 149,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 5
    },
    "cmake/modules/FindROCM.cmake" : {
      "ObjectId" : "f8d2f6b6bef2d560899aa3f09a65487ee4fadb20",
      "LastModified" : "2019-03-14T14:42:14Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# - Find the ROCM library\n\n#\n\n# Usage:\n\n#   find_package(ROCM [REQUIRED] [QUIET] COMPONENTS [components ...] )\n\n#\n\n# Compnents available:\n\n#  - hipblas\n\n#  - hipsparse\n\n#  - rocfft\n\n#  - rocblas\n\n#  - rocsparse\n\n#\n\n# Commands made available:\n\n#   rocm_hip_add_library(<name> <sources> [STATIC | SHARED] [FLAGS] <flags> [OUTPUT_DIR] <dir> [INCLUDE_DIRS] <dirs ...>)\n\n#    --- Compiles source files into an imported library with hipcc. No global defitions or include directories are taken into account.\n\n#\n\n# The following variables can be set for compilation:\n\n#   ROCM_HIPCC_FLAGS ----------------- Flags passed on to hipcc compiler\n\n#   ROCM_HIPCC_FLAGS_DEBUG ----------- Flags passed on to hipcc compiler in DEBUG mode\n\n#   ROCM_HIPCC_FLAGS_RELEASE --------- Flags passed on to hipcc compiler in RELEASE mode\n\n#   ROCM_HIPCC_FLAGS_RELWITHDEBINFO -- Flags passed on to hipcc compiler in RELWITHDEBINFO mode\n\n#   ROCM_HIPCC_FLAGS_MINSIZEREL ------ Flags passed on to hipcc compiler in MINSIZEREL mode\n\n#\n\n# The following variables can be set to specify a search location\n\n#   ROCM_ROOT ------------ if set, the libraries are exclusively searched under this path\n\n#   <COMPONENT>_ROOT ------ if set, search for component specific libraries at given path. Takes precedence over ROCM_ROOT\n\n#\n\n# The following variables are generated:\n\n#   ROCM_FOUND ------------------- true if ROCM is found on the system\n\n#   ROCM_LIBRARIES --------------- full path to ROCM\n\n#   ROCM_INCLUDE_DIRS ------------ ROCM include directories\n\n#   ROCM_DEFINITIONS ------------- ROCM definitions\n\n#   ROCM_HCC_EXECUTABLE ---------- ROCM HCC compiler\n\n#   ROCM_HCC-CONFIG_EXECUTABLE --- ROCM HCC config\n\n#   ROCM_HIPCC_EXECUTABLE -------- HIPCC compiler\n\n#   ROCM_HIPCONFIG_EXECUTABLE ---- hip config\n\n#   ROCM_HIPIFY-PERL_EXECUTABLE -- hipify\n\n#   ROCM_HIP_PLATFORM ------------ Platform identifier: \"hcc\" or \"nvcc\"\n\n#\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#If environment variable ROCM_ROOT is specified\n",
        "Line" : 48,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# Finds libraries and include path for rocm modules\n\n# IN:\n\n#   - module_name: name of a module (e.g. hcc)\n\n#   - following arguments: name of libraries required\n\n# OUT:\n\n#   - ROCM_LIBRARIES: Appends to list of libraries\n\n#   - ROCM_INCLUDE_DIRS: Appends to include dirs\n",
        "Line" : 68,
        "CharPositionInLine" : 0
      },
      "3" : {
        "Text" : "# convert module name to upper case for consistent variable naming\n",
        "Line" : 76,
        "CharPositionInLine" : 4
      },
      "4" : {
        "Text" : "# get abosolute path to avoid issues with tilde\n",
        "Line" : 86,
        "CharPositionInLine" : 4
      },
      "5" : {
        "Text" : "# remove module name from input arguments\n",
        "Line" : 91,
        "CharPositionInLine" : 4
      },
      "6" : {
        "Text" : "# find libraries\n",
        "Line" : 109,
        "CharPositionInLine" : 8
      },
      "7" : {
        "Text" : "# find include directory\n",
        "Line" : 127,
        "CharPositionInLine" : 8
      },
      "8" : {
        "Text" : "# set include directory for module if found\n",
        "Line" : 134,
        "CharPositionInLine" : 8
      },
      "9" : {
        "Text" : "# find include directory\n",
        "Line" : 157,
        "CharPositionInLine" : 8
      },
      "10" : {
        "Text" : "# set include directory for module if found\n",
        "Line" : 163,
        "CharPositionInLine" : 8
      },
      "11" : {
        "Text" : "# check if all required parts found\n",
        "Line" : 170,
        "CharPositionInLine" : 4
      },
      "12" : {
        "Text" : "# set global variables\n",
        "Line" : 178,
        "CharPositionInLine" : 4
      },
      "13" : {
        "Text" : "# Finds executables of rocm modules\n\n# IN:\n\n#   - module_name: name of a module (e.g. hcc)\n\n#   - executable_name: name of the executable (e.g. hcc)\n\n# OUT:\n\n#   - ROCM_${executable_name}_EXECUTABLE: Path to executable\n",
        "Line" : 189,
        "CharPositionInLine" : 0
      },
      "14" : {
        "Text" : "# get abosolute path to avoid issues with tilde\n",
        "Line" : 206,
        "CharPositionInLine" : 4
      },
      "15" : {
        "Text" : "# find compilers\n",
        "Line" : 250,
        "CharPositionInLine" : 0
      },
      "16" : {
        "Text" : "# find other executables and libraries\n",
        "Line" : 262,
        "CharPositionInLine" : 0
      },
      "17" : {
        "Text" : "# parse hip config\n",
        "Line" : 271,
        "CharPositionInLine" : 0
      },
      "18" : {
        "Text" : "# set definitions\n",
        "Line" : 280,
        "CharPositionInLine" : 0
      },
      "19" : {
        "Text" : "# find libraries for each specified components\n",
        "Line" : 289,
        "CharPositionInLine" : 0
      },
      "20" : {
        "Text" : "# set required libaries for each module\n",
        "Line" : 291,
        "CharPositionInLine" : 4
      },
      "21" : {
        "Text" : "# Generates library compiled with hipcc\n\n# Usage:\n\n#   rocm_hip_add_library(<name> <sources> [STATIC | SHARED] [FLAGS] <flags> [OUTPUT_DIR] <dir> [INCLUDE_DIRS] <dirs ...>)\n",
        "Line" : 308,
        "CharPositionInLine" : 0
      },
      "22" : {
        "Text" : "# allow either STATIC or SHARED\n",
        "Line" : 319,
        "CharPositionInLine" : 4
      },
      "23" : {
        "Text" : "# default to SHARED\n",
        "Line" : 324,
        "CharPositionInLine" : 4
      },
      "24" : {
        "Text" : "# default to current binary output directory\n",
        "Line" : 329,
        "CharPositionInLine" : 4
      },
      "25" : {
        "Text" : "# parse positional arguments\n",
        "Line" : 334,
        "CharPositionInLine" : 4
      },
      "26" : {
        "Text" : "# generate include flags\n",
        "Line" : 343,
        "CharPositionInLine" : 4
      },
      "27" : {
        "Text" : "# generate full path to source files\n",
        "Line" : 352,
        "CharPositionInLine" : 4
      },
      "28" : {
        "Text" : "# generate flags to use\n",
        "Line" : 362,
        "CharPositionInLine" : 4
      },
      "29" : {
        "Text" : "# create imported shared library\n",
        "Line" : 378,
        "CharPositionInLine" : 4
      },
      "30" : {
        "Text" : "# compile all files to .o\n",
        "Line" : 383,
        "CharPositionInLine" : 4
      },
      "31" : {
        "Text" : "# create output directory for .o file\n",
        "Line" : 388,
        "CharPositionInLine" : 1
      },
      "32" : {
        "Text" : "# set .o name and path\n",
        "Line" : 394,
        "CharPositionInLine" : 1
      },
      "33" : {
        "Text" : "# compile .o file\n",
        "Line" : 400,
        "CharPositionInLine" : 1
      },
      "34" : {
        "Text" : "# compile shared library\n",
        "Line" : 406,
        "CharPositionInLine" : 4
      },
      "35" : {
        "Text" : "# add depencies\n",
        "Line" : 415,
        "CharPositionInLine" : 1
      },
      "36" : {
        "Text" : "# static library\n",
        "Line" : 422,
        "CharPositionInLine" : 4
      },
      "37" : {
        "Text" : "# create library from object files\n",
        "Line" : 424,
        "CharPositionInLine" : 8
      },
      "38" : {
        "Text" : "# add dependencies\n",
        "Line" : 433,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 39
    },
    "cmake/modules/FindSCALAPACK.cmake" : {
      "ObjectId" : "1140ff153775b8b6850c0dfd07ec1ba7888b2948",
      "LastModified" : "2019-03-22T13:07:54Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#find_path(SCALAPACK_INCLUDE_DIR\n\n#  NAMES pblas.h\n\n#  PATH_SUFFIXES include src\n\n#  HINTS\n\n#  ENV SCALAPACKROOT\n\n#  ${_SCALAPACK_INCLUDE_DIRS}\n\n#  /usr)\n",
        "Line" : 14,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "#find_package_handle_standard_args(SCALAPACK DEFAULT_MSG SCALAPACK_LIBRARIES SCALAPACK_INCLUDE_DIR)\n",
        "Line" : 22,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 2
    },
    "cmake/modules/Findmpi4py.cmake" : {
      "ObjectId" : "6f0d457e811ac5c0717d4a614e1e66a34702fbdb",
      "LastModified" : "2019-03-29T12:16:28Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "#set(pyinterp \"python${PYTHON_VERSION_MAJOR}\")\n",
        "Line" : 4,
        "CharPositionInLine" : 0
      },
      "CommentCount" : 1
    },
    "cmake/modules/GitSubmodule.cmake" : {
      "ObjectId" : "00a7880ab5be0367427a26ea85c4cdbc7f3c78c9",
      "LastModified" : "2019-03-18T13:49:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# from github.com/eth-cscs/arbor\n\n# Call to ensure that the git submodule in location `path` is loaded.\n\n# If the submodule is not loaded, an error message that describes\n\n# how to update the submodules is printed.\n\n# Sets the variable name_avail to `ON` if the submodule is available,\n\n# or `OFF` otherwise.\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# if the repository was not available, and git failed, set AVAIL to false\n",
        "Line" : 23,
        "CharPositionInLine" : 8
      },
      "CommentCount" : 2
    },
    "doc/CMakeLists.txt" : {
      "ObjectId" : "5821910048d60319aa9050c351f702dae81fb894",
      "LastModified" : "2019-03-18T13:49:08Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# configure doxygen.cfg.in and adapt paths\n",
        "Line" : 5,
        "CharPositionInLine" : 2
      },
      "1" : {
        "Text" : "# Add a target and build doc with all targets\n",
        "Line" : 8,
        "CharPositionInLine" : 1
      },
      "CommentCount" : 2
    },
    "doc/Makefile" : {
      "ObjectId" : "aa4d54d735d466380d1add61dea0c277ec132d03",
      "LastModified" : "2019-03-18T13:49:08Z",
      "FileType" : "MAKEFILE",
      "CommentCount" : 0
    },
    "python_module/CMakeLists.txt" : {
      "ObjectId" : "b736a650ac6dbd196fa280f37471b9bacd824f01",
      "LastModified" : "2019-03-29T12:17:50Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# attempt to find system installation of pybind11\n",
        "Line" : 8,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# workaround for `Intel MKL FATAL ERROR: Cannot load libmkl_avx2.so or libmkl_def.so.`\n",
        "Line" : 25,
        "CharPositionInLine" : 4
      },
      "2" : {
        "Text" : "# collect python files in module dir\n\n# install to cmake prefix\n",
        "Line" : 30,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# minimal support for Python 2.7, full functionality is provided for Python >3.5 only\n",
        "Line" : 44,
        "CharPositionInLine" : 4
      },
      "CommentCount" : 4
    },
    "src/CMakeLists.txt" : {
      "ObjectId" : "b927adef8e19d2c135fbfb1ab1106784da0359d5",
      "LastModified" : "2019-03-14T15:48:01Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# workaround for set_target_properties(... POSITION_INDEPENDENT_CODE ON) not\n\n# working correctly\n\n# list(APPEND CUDA_NVCC_FLAGS \"-Xcompiler -fPIC\")\n",
        "Line" : 1,
        "CharPositionInLine" : 0
      },
      "1" : {
        "Text" : "# keep two libraries: libsirius and libsirius_f\n",
        "Line" : 5,
        "CharPositionInLine" : 0
      },
      "2" : {
        "Text" : "# don't install as it is STATIC and not meant to be used by external projects\n",
        "Line" : 29,
        "CharPositionInLine" : 2
      },
      "3" : {
        "Text" : "# use include directories and definitions of sirius_rocm_interface (using custom targets not possible with generators)\n",
        "Line" : 31,
        "CharPositionInLine" : 2
      },
      "4" : {
        "Text" : "# create gpu library compiled with hip\n",
        "Line" : 37,
        "CharPositionInLine" : 2
      },
      "CommentCount" : 5
    },
    "src/SDDK/GPU/hipblas_port/CMakeLists.txt" : {
      "ObjectId" : "27a5af5be7abea075ce7e16a7c02520447378536",
      "LastModified" : "2019-03-08T16:00:32Z",
      "FileType" : "CMAKE",
      "0" : {
        "Text" : "# download google test\n",
        "Line" : 13,
        "CharPositionInLine" : 4
      },
      "1" : {
        "Text" : "# requires CMake 3.11\n",
        "Line" : 16,
        "CharPositionInLine" : 23
      },
      "CommentCount" : 2
    }
  },
  "FileTypes" : {
    "CMAKE" : 22,
    "MAKEFILE" : 1
  },
  "ElapsedTime" : 3158
}